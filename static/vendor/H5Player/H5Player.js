/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
module.exports = __webpack_require__(328);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

__webpack_require__(3);

__webpack_require__(324);

__webpack_require__(325);

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)))

/***/ }),
/* 2 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(4);
__webpack_require__(52);
__webpack_require__(53);
__webpack_require__(54);
__webpack_require__(55);
__webpack_require__(57);
__webpack_require__(60);
__webpack_require__(61);
__webpack_require__(62);
__webpack_require__(63);
__webpack_require__(64);
__webpack_require__(65);
__webpack_require__(66);
__webpack_require__(67);
__webpack_require__(68);
__webpack_require__(70);
__webpack_require__(72);
__webpack_require__(74);
__webpack_require__(76);
__webpack_require__(79);
__webpack_require__(80);
__webpack_require__(81);
__webpack_require__(85);
__webpack_require__(87);
__webpack_require__(89);
__webpack_require__(92);
__webpack_require__(93);
__webpack_require__(94);
__webpack_require__(95);
__webpack_require__(97);
__webpack_require__(98);
__webpack_require__(99);
__webpack_require__(100);
__webpack_require__(101);
__webpack_require__(102);
__webpack_require__(103);
__webpack_require__(105);
__webpack_require__(106);
__webpack_require__(107);
__webpack_require__(109);
__webpack_require__(110);
__webpack_require__(111);
__webpack_require__(113);
__webpack_require__(115);
__webpack_require__(116);
__webpack_require__(117);
__webpack_require__(118);
__webpack_require__(119);
__webpack_require__(120);
__webpack_require__(121);
__webpack_require__(122);
__webpack_require__(123);
__webpack_require__(124);
__webpack_require__(125);
__webpack_require__(126);
__webpack_require__(127);
__webpack_require__(132);
__webpack_require__(133);
__webpack_require__(137);
__webpack_require__(138);
__webpack_require__(139);
__webpack_require__(140);
__webpack_require__(142);
__webpack_require__(143);
__webpack_require__(144);
__webpack_require__(145);
__webpack_require__(146);
__webpack_require__(147);
__webpack_require__(148);
__webpack_require__(149);
__webpack_require__(150);
__webpack_require__(151);
__webpack_require__(152);
__webpack_require__(153);
__webpack_require__(154);
__webpack_require__(155);
__webpack_require__(156);
__webpack_require__(158);
__webpack_require__(159);
__webpack_require__(161);
__webpack_require__(162);
__webpack_require__(168);
__webpack_require__(169);
__webpack_require__(171);
__webpack_require__(172);
__webpack_require__(173);
__webpack_require__(177);
__webpack_require__(178);
__webpack_require__(179);
__webpack_require__(180);
__webpack_require__(181);
__webpack_require__(183);
__webpack_require__(184);
__webpack_require__(185);
__webpack_require__(186);
__webpack_require__(189);
__webpack_require__(191);
__webpack_require__(192);
__webpack_require__(193);
__webpack_require__(195);
__webpack_require__(197);
__webpack_require__(199);
__webpack_require__(200);
__webpack_require__(201);
__webpack_require__(203);
__webpack_require__(204);
__webpack_require__(205);
__webpack_require__(206);
__webpack_require__(217);
__webpack_require__(221);
__webpack_require__(222);
__webpack_require__(224);
__webpack_require__(225);
__webpack_require__(229);
__webpack_require__(230);
__webpack_require__(232);
__webpack_require__(233);
__webpack_require__(234);
__webpack_require__(235);
__webpack_require__(236);
__webpack_require__(237);
__webpack_require__(238);
__webpack_require__(239);
__webpack_require__(240);
__webpack_require__(241);
__webpack_require__(242);
__webpack_require__(243);
__webpack_require__(244);
__webpack_require__(245);
__webpack_require__(246);
__webpack_require__(247);
__webpack_require__(248);
__webpack_require__(249);
__webpack_require__(250);
__webpack_require__(252);
__webpack_require__(253);
__webpack_require__(254);
__webpack_require__(255);
__webpack_require__(256);
__webpack_require__(258);
__webpack_require__(259);
__webpack_require__(260);
__webpack_require__(262);
__webpack_require__(263);
__webpack_require__(264);
__webpack_require__(265);
__webpack_require__(266);
__webpack_require__(267);
__webpack_require__(268);
__webpack_require__(269);
__webpack_require__(271);
__webpack_require__(272);
__webpack_require__(274);
__webpack_require__(275);
__webpack_require__(276);
__webpack_require__(277);
__webpack_require__(280);
__webpack_require__(281);
__webpack_require__(283);
__webpack_require__(284);
__webpack_require__(285);
__webpack_require__(286);
__webpack_require__(288);
__webpack_require__(289);
__webpack_require__(290);
__webpack_require__(291);
__webpack_require__(292);
__webpack_require__(293);
__webpack_require__(294);
__webpack_require__(295);
__webpack_require__(296);
__webpack_require__(297);
__webpack_require__(299);
__webpack_require__(300);
__webpack_require__(301);
__webpack_require__(302);
__webpack_require__(303);
__webpack_require__(304);
__webpack_require__(305);
__webpack_require__(306);
__webpack_require__(307);
__webpack_require__(308);
__webpack_require__(309);
__webpack_require__(311);
__webpack_require__(312);
__webpack_require__(313);
__webpack_require__(314);
__webpack_require__(315);
__webpack_require__(316);
__webpack_require__(317);
__webpack_require__(318);
__webpack_require__(319);
__webpack_require__(320);
__webpack_require__(321);
__webpack_require__(322);
__webpack_require__(323);
module.exports = __webpack_require__(10);


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(5);
var has = __webpack_require__(6);
var DESCRIPTORS = __webpack_require__(7);
var $export = __webpack_require__(9);
var redefine = __webpack_require__(19);
var META = __webpack_require__(23).KEY;
var $fails = __webpack_require__(8);
var shared = __webpack_require__(24);
var setToStringTag = __webpack_require__(26);
var uid = __webpack_require__(20);
var wks = __webpack_require__(27);
var wksExt = __webpack_require__(28);
var wksDefine = __webpack_require__(29);
var enumKeys = __webpack_require__(30);
var isArray = __webpack_require__(45);
var anObject = __webpack_require__(13);
var isObject = __webpack_require__(14);
var toIObject = __webpack_require__(33);
var toPrimitive = __webpack_require__(17);
var createDesc = __webpack_require__(18);
var _create = __webpack_require__(46);
var gOPNExt = __webpack_require__(49);
var $GOPD = __webpack_require__(51);
var $DP = __webpack_require__(12);
var $keys = __webpack_require__(31);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(50).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(44).f = $propertyIsEnumerable;
  __webpack_require__(43).f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(25)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(11)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 5 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 6 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(8)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(5);
var core = __webpack_require__(10);
var hide = __webpack_require__(11);
var redefine = __webpack_require__(19);
var ctx = __webpack_require__(21);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 10 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.5.7' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(12);
var createDesc = __webpack_require__(18);
module.exports = __webpack_require__(7) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(13);
var IE8_DOM_DEFINE = __webpack_require__(15);
var toPrimitive = __webpack_require__(17);
var dP = Object.defineProperty;

exports.f = __webpack_require__(7) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(14);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(7) && !__webpack_require__(8)(function () {
  return Object.defineProperty(__webpack_require__(16)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(14);
var document = __webpack_require__(5).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(14);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(5);
var hide = __webpack_require__(11);
var has = __webpack_require__(6);
var SRC = __webpack_require__(20)('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(10).inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});


/***/ }),
/* 20 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(22);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(20)('meta');
var isObject = __webpack_require__(14);
var has = __webpack_require__(6);
var setDesc = __webpack_require__(12).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(8)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(10);
var global = __webpack_require__(5);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(25) ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});


/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(12).f;
var has = __webpack_require__(6);
var TAG = __webpack_require__(27)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(24)('wks');
var uid = __webpack_require__(20);
var Symbol = __webpack_require__(5).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(27);


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(5);
var core = __webpack_require__(10);
var LIBRARY = __webpack_require__(25);
var wksExt = __webpack_require__(28);
var defineProperty = __webpack_require__(12).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(31);
var gOPS = __webpack_require__(43);
var pIE = __webpack_require__(44);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(32);
var enumBugKeys = __webpack_require__(42);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(6);
var toIObject = __webpack_require__(33);
var arrayIndexOf = __webpack_require__(37)(false);
var IE_PROTO = __webpack_require__(41)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(34);
var defined = __webpack_require__(36);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(35);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 35 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 36 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(33);
var toLength = __webpack_require__(38);
var toAbsoluteIndex = __webpack_require__(40);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(39);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 39 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(39);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(24)('keys');
var uid = __webpack_require__(20);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 42 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 43 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 44 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(35);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(13);
var dPs = __webpack_require__(47);
var enumBugKeys = __webpack_require__(42);
var IE_PROTO = __webpack_require__(41)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(16)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(48).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(12);
var anObject = __webpack_require__(13);
var getKeys = __webpack_require__(31);

module.exports = __webpack_require__(7) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(5).document;
module.exports = document && document.documentElement;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(33);
var gOPN = __webpack_require__(50).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(32);
var hiddenKeys = __webpack_require__(42).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(44);
var createDesc = __webpack_require__(18);
var toIObject = __webpack_require__(33);
var toPrimitive = __webpack_require__(17);
var has = __webpack_require__(6);
var IE8_DOM_DEFINE = __webpack_require__(15);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(7) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(9);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(46) });


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(9);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(7), 'Object', { defineProperty: __webpack_require__(12).f });


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(9);
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(7), 'Object', { defineProperties: __webpack_require__(47) });


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__(33);
var $getOwnPropertyDescriptor = __webpack_require__(51).f;

__webpack_require__(56)('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(9);
var core = __webpack_require__(10);
var fails = __webpack_require__(8);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(58);
var $getPrototypeOf = __webpack_require__(59);

__webpack_require__(56)('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(36);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(6);
var toObject = __webpack_require__(58);
var IE_PROTO = __webpack_require__(41)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(58);
var $keys = __webpack_require__(31);

__webpack_require__(56)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(56)('getOwnPropertyNames', function () {
  return __webpack_require__(49).f;
});


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(14);
var meta = __webpack_require__(23).onFreeze;

__webpack_require__(56)('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.17 Object.seal(O)
var isObject = __webpack_require__(14);
var meta = __webpack_require__(23).onFreeze;

__webpack_require__(56)('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.15 Object.preventExtensions(O)
var isObject = __webpack_require__(14);
var meta = __webpack_require__(23).onFreeze;

__webpack_require__(56)('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.12 Object.isFrozen(O)
var isObject = __webpack_require__(14);

__webpack_require__(56)('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.13 Object.isSealed(O)
var isObject = __webpack_require__(14);

__webpack_require__(56)('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.11 Object.isExtensible(O)
var isObject = __webpack_require__(14);

__webpack_require__(56)('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(9);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(69) });


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__(31);
var gOPS = __webpack_require__(43);
var pIE = __webpack_require__(44);
var toObject = __webpack_require__(58);
var IObject = __webpack_require__(34);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(8)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__(9);
$export($export.S, 'Object', { is: __webpack_require__(71) });


/***/ }),
/* 71 */
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(9);
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(73).set });


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(14);
var anObject = __webpack_require__(13);
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(21)(Function.call, __webpack_require__(51).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.3.6 Object.prototype.toString()
var classof = __webpack_require__(75);
var test = {};
test[__webpack_require__(27)('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  __webpack_require__(19)(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(35);
var TAG = __webpack_require__(27)('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__(9);

$export($export.P, 'Function', { bind: __webpack_require__(77) });


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__(22);
var isObject = __webpack_require__(14);
var invoke = __webpack_require__(78);
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};


/***/ }),
/* 78 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(12).f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || __webpack_require__(7) && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isObject = __webpack_require__(14);
var getPrototypeOf = __webpack_require__(59);
var HAS_INSTANCE = __webpack_require__(27)('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(12).f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(9);
var $parseInt = __webpack_require__(82);
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

var $parseInt = __webpack_require__(5).parseInt;
var $trim = __webpack_require__(83).trim;
var ws = __webpack_require__(84);
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(9);
var defined = __webpack_require__(36);
var fails = __webpack_require__(8);
var spaces = __webpack_require__(84);
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;


/***/ }),
/* 84 */
/***/ (function(module, exports) {

module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(9);
var $parseFloat = __webpack_require__(86);
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

var $parseFloat = __webpack_require__(5).parseFloat;
var $trim = __webpack_require__(83).trim;

module.exports = 1 / $parseFloat(__webpack_require__(84) + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(5);
var has = __webpack_require__(6);
var cof = __webpack_require__(35);
var inheritIfRequired = __webpack_require__(88);
var toPrimitive = __webpack_require__(17);
var fails = __webpack_require__(8);
var gOPN = __webpack_require__(50).f;
var gOPD = __webpack_require__(51).f;
var dP = __webpack_require__(12).f;
var $trim = __webpack_require__(83).trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(__webpack_require__(46)(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = __webpack_require__(7) ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  __webpack_require__(19)(global, NUMBER, $Number);
}


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(14);
var setPrototypeOf = __webpack_require__(73).set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var toInteger = __webpack_require__(39);
var aNumberValue = __webpack_require__(90);
var repeat = __webpack_require__(91);
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !__webpack_require__(8)(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

var cof = __webpack_require__(35);
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__(39);
var defined = __webpack_require__(36);

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var $fails = __webpack_require__(8);
var aNumberValue = __webpack_require__(90);
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__(9);

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export = __webpack_require__(9);
var _isFinite = __webpack_require__(5).isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(9);

$export($export.S, 'Number', { isInteger: __webpack_require__(96) });


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(14);
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(9);

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
var $export = __webpack_require__(9);
var isInteger = __webpack_require__(96);
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__(9);

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__(9);

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(9);
var $parseFloat = __webpack_require__(86);
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(9);
var $parseInt = __webpack_require__(82);
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__(9);
var log1p = __webpack_require__(104);
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});


/***/ }),
/* 104 */
/***/ (function(module, exports) {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__(9);
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__(9);
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__(9);
var sign = __webpack_require__(108);

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});


/***/ }),
/* 108 */
/***/ (function(module, exports) {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__(9);

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__(9);
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__(9);
var $expm1 = __webpack_require__(112);

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });


/***/ }),
/* 112 */
/***/ (function(module, exports) {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var $export = __webpack_require__(9);

$export($export.S, 'Math', { fround: __webpack_require__(114) });


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var sign = __webpack_require__(108);
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = __webpack_require__(9);
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__(9);
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * __webpack_require__(8)(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__(9);

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__(9);

$export($export.S, 'Math', { log1p: __webpack_require__(104) });


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__(9);

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__(9);

$export($export.S, 'Math', { sign: __webpack_require__(108) });


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__(9);
var expm1 = __webpack_require__(112);
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * __webpack_require__(8)(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__(9);
var expm1 = __webpack_require__(112);
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__(9);

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(9);
var toAbsoluteIndex = __webpack_require__(40);
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(9);
var toIObject = __webpack_require__(33);
var toLength = __webpack_require__(38);

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.1.3.25 String.prototype.trim()
__webpack_require__(83)('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(128)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(129)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(39);
var defined = __webpack_require__(36);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(25);
var $export = __webpack_require__(9);
var redefine = __webpack_require__(19);
var hide = __webpack_require__(11);
var Iterators = __webpack_require__(130);
var $iterCreate = __webpack_require__(131);
var setToStringTag = __webpack_require__(26);
var getPrototypeOf = __webpack_require__(59);
var ITERATOR = __webpack_require__(27)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 130 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(46);
var descriptor = __webpack_require__(18);
var setToStringTag = __webpack_require__(26);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(11)(IteratorPrototype, __webpack_require__(27)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var $at = __webpack_require__(128)(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

var $export = __webpack_require__(9);
var toLength = __webpack_require__(38);
var context = __webpack_require__(134);
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * __webpack_require__(136)(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(135);
var defined = __webpack_require__(36);

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(14);
var cof = __webpack_require__(35);
var MATCH = __webpack_require__(27)('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__(27)('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)

var $export = __webpack_require__(9);
var context = __webpack_require__(134);
var INCLUDES = 'includes';

$export($export.P + $export.F * __webpack_require__(136)(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(9);

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__(91)
});


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

var $export = __webpack_require__(9);
var toLength = __webpack_require__(38);
var context = __webpack_require__(134);
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * __webpack_require__(136)(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.2 String.prototype.anchor(name)
__webpack_require__(141)('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(9);
var fails = __webpack_require__(8);
var defined = __webpack_require__(36);
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.3 String.prototype.big()
__webpack_require__(141)('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.4 String.prototype.blink()
__webpack_require__(141)('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.5 String.prototype.bold()
__webpack_require__(141)('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.6 String.prototype.fixed()
__webpack_require__(141)('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.7 String.prototype.fontcolor(color)
__webpack_require__(141)('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.8 String.prototype.fontsize(size)
__webpack_require__(141)('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.9 String.prototype.italics()
__webpack_require__(141)('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.10 String.prototype.link(url)
__webpack_require__(141)('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.11 String.prototype.small()
__webpack_require__(141)('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.12 String.prototype.strike()
__webpack_require__(141)('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.13 String.prototype.sub()
__webpack_require__(141)('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.14 String.prototype.sup()
__webpack_require__(141)('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = __webpack_require__(9);

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var toObject = __webpack_require__(58);
var toPrimitive = __webpack_require__(17);

$export($export.P + $export.F * __webpack_require__(8)(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = __webpack_require__(9);
var toISOString = __webpack_require__(157);

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = __webpack_require__(8);
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(19)(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

var TO_PRIMITIVE = __webpack_require__(27)('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) __webpack_require__(11)(proto, TO_PRIMITIVE, __webpack_require__(160));


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(13);
var toPrimitive = __webpack_require__(17);
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = __webpack_require__(9);

$export($export.S, 'Array', { isArray: __webpack_require__(45) });


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(21);
var $export = __webpack_require__(9);
var toObject = __webpack_require__(58);
var call = __webpack_require__(163);
var isArrayIter = __webpack_require__(164);
var toLength = __webpack_require__(38);
var createProperty = __webpack_require__(165);
var getIterFn = __webpack_require__(166);

$export($export.S + $export.F * !__webpack_require__(167)(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(13);
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(130);
var ITERATOR = __webpack_require__(27)('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(12);
var createDesc = __webpack_require__(18);

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(75);
var ITERATOR = __webpack_require__(27)('iterator');
var Iterators = __webpack_require__(130);
module.exports = __webpack_require__(10).getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(27)('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var createProperty = __webpack_require__(165);

// WebKit Array.of isn't generic
$export($export.S + $export.F * __webpack_require__(8)(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.13 Array.prototype.join(separator)
var $export = __webpack_require__(9);
var toIObject = __webpack_require__(33);
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (__webpack_require__(34) != Object || !__webpack_require__(170)(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(8);

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var html = __webpack_require__(48);
var cof = __webpack_require__(35);
var toAbsoluteIndex = __webpack_require__(40);
var toLength = __webpack_require__(38);
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * __webpack_require__(8)(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var aFunction = __webpack_require__(22);
var toObject = __webpack_require__(58);
var fails = __webpack_require__(8);
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !__webpack_require__(170)($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var $forEach = __webpack_require__(174)(0);
var STRICT = __webpack_require__(170)([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(21);
var IObject = __webpack_require__(34);
var toObject = __webpack_require__(58);
var toLength = __webpack_require__(38);
var asc = __webpack_require__(175);
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(176);

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(14);
var isArray = __webpack_require__(45);
var SPECIES = __webpack_require__(27)('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var $map = __webpack_require__(174)(1);

$export($export.P + $export.F * !__webpack_require__(170)([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var $filter = __webpack_require__(174)(2);

$export($export.P + $export.F * !__webpack_require__(170)([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var $some = __webpack_require__(174)(3);

$export($export.P + $export.F * !__webpack_require__(170)([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var $every = __webpack_require__(174)(4);

$export($export.P + $export.F * !__webpack_require__(170)([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var $reduce = __webpack_require__(182);

$export($export.P + $export.F * !__webpack_require__(170)([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(22);
var toObject = __webpack_require__(58);
var IObject = __webpack_require__(34);
var toLength = __webpack_require__(38);

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var $reduce = __webpack_require__(182);

$export($export.P + $export.F * !__webpack_require__(170)([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var $indexOf = __webpack_require__(37)(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(170)($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var toIObject = __webpack_require__(33);
var toInteger = __webpack_require__(39);
var toLength = __webpack_require__(38);
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(170)($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__(9);

$export($export.P, 'Array', { copyWithin: __webpack_require__(187) });

__webpack_require__(188)('copyWithin');


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

var toObject = __webpack_require__(58);
var toAbsoluteIndex = __webpack_require__(40);
var toLength = __webpack_require__(38);

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(27)('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(11)(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(9);

$export($export.P, 'Array', { fill: __webpack_require__(190) });

__webpack_require__(188)('fill');


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

var toObject = __webpack_require__(58);
var toAbsoluteIndex = __webpack_require__(40);
var toLength = __webpack_require__(38);
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = __webpack_require__(9);
var $find = __webpack_require__(174)(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(188)(KEY);


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = __webpack_require__(9);
var $find = __webpack_require__(174)(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(188)(KEY);


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(194)('Array');


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(5);
var dP = __webpack_require__(12);
var DESCRIPTORS = __webpack_require__(7);
var SPECIES = __webpack_require__(27)('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(188);
var step = __webpack_require__(196);
var Iterators = __webpack_require__(130);
var toIObject = __webpack_require__(33);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(129)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 196 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(5);
var inheritIfRequired = __webpack_require__(88);
var dP = __webpack_require__(12).f;
var gOPN = __webpack_require__(50).f;
var isRegExp = __webpack_require__(135);
var $flags = __webpack_require__(198);
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__(7) && (!CORRECT_NEW || __webpack_require__(8)(function () {
  re2[__webpack_require__(27)('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  __webpack_require__(19)(global, 'RegExp', $RegExp);
}

__webpack_require__(194)('RegExp');


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags
var anObject = __webpack_require__(13);
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(200);
var anObject = __webpack_require__(13);
var $flags = __webpack_require__(198);
var DESCRIPTORS = __webpack_require__(7);
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  __webpack_require__(19)(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (__webpack_require__(8)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(7) && /./g.flags != 'g') __webpack_require__(12).f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(198)
});


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

// @@match logic
__webpack_require__(202)('match', 1, function (defined, MATCH, $match) {
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var hide = __webpack_require__(11);
var redefine = __webpack_require__(19);
var fails = __webpack_require__(8);
var defined = __webpack_require__(36);
var wks = __webpack_require__(27);

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);
  var fns = exec(defined, SYMBOL, ''[KEY]);
  var strfn = fns[0];
  var rxfn = fns[1];
  if (fails(function () {
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  })) {
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

// @@replace logic
__webpack_require__(202)('replace', 2, function (defined, REPLACE, $replace) {
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue) {
    'use strict';
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

// @@search logic
__webpack_require__(202)('search', 1, function (defined, SEARCH, $search) {
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp) {
    'use strict';
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

// @@split logic
__webpack_require__(202)('split', 2, function (defined, SPLIT, $split) {
  'use strict';
  var isRegExp = __webpack_require__(135);
  var _split = $split;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while (match = separatorCopy.exec(string)) {
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          // eslint-disable-next-line no-loop-func
          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
          });
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    $split = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit) {
    var O = defined(this);
    var fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(25);
var global = __webpack_require__(5);
var ctx = __webpack_require__(21);
var classof = __webpack_require__(75);
var $export = __webpack_require__(9);
var isObject = __webpack_require__(14);
var aFunction = __webpack_require__(22);
var anInstance = __webpack_require__(207);
var forOf = __webpack_require__(208);
var speciesConstructor = __webpack_require__(209);
var task = __webpack_require__(210).set;
var microtask = __webpack_require__(211)();
var newPromiseCapabilityModule = __webpack_require__(212);
var perform = __webpack_require__(213);
var userAgent = __webpack_require__(214);
var promiseResolve = __webpack_require__(215);
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(27)('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(216)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(26)($Promise, PROMISE);
__webpack_require__(194)(PROMISE);
Wrapper = __webpack_require__(10)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(167)(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),
/* 207 */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(21);
var call = __webpack_require__(163);
var isArrayIter = __webpack_require__(164);
var anObject = __webpack_require__(13);
var toLength = __webpack_require__(38);
var getIterFn = __webpack_require__(166);
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(13);
var aFunction = __webpack_require__(22);
var SPECIES = __webpack_require__(27)('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(21);
var invoke = __webpack_require__(78);
var html = __webpack_require__(48);
var cel = __webpack_require__(16);
var global = __webpack_require__(5);
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(35)(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(5);
var macrotask = __webpack_require__(210).set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(35)(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(22);

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),
/* 213 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(5);
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(13);
var isObject = __webpack_require__(14);
var newPromiseCapability = __webpack_require__(212);

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(19);
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(218);
var validate = __webpack_require__(219);
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(220)(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(12).f;
var create = __webpack_require__(46);
var redefineAll = __webpack_require__(216);
var ctx = __webpack_require__(21);
var anInstance = __webpack_require__(207);
var forOf = __webpack_require__(208);
var $iterDefine = __webpack_require__(129);
var step = __webpack_require__(196);
var setSpecies = __webpack_require__(194);
var DESCRIPTORS = __webpack_require__(7);
var fastKey = __webpack_require__(23).fastKey;
var validate = __webpack_require__(219);
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(14);
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(5);
var $export = __webpack_require__(9);
var redefine = __webpack_require__(19);
var redefineAll = __webpack_require__(216);
var meta = __webpack_require__(23);
var forOf = __webpack_require__(208);
var anInstance = __webpack_require__(207);
var isObject = __webpack_require__(14);
var fails = __webpack_require__(8);
var $iterDetect = __webpack_require__(167);
var setToStringTag = __webpack_require__(26);
var inheritIfRequired = __webpack_require__(88);

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(218);
var validate = __webpack_require__(219);
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(220)(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var each = __webpack_require__(174)(0);
var redefine = __webpack_require__(19);
var meta = __webpack_require__(23);
var assign = __webpack_require__(69);
var weak = __webpack_require__(223);
var isObject = __webpack_require__(14);
var fails = __webpack_require__(8);
var validate = __webpack_require__(219);
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(220)(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll = __webpack_require__(216);
var getWeak = __webpack_require__(23).getWeak;
var anObject = __webpack_require__(13);
var isObject = __webpack_require__(14);
var anInstance = __webpack_require__(207);
var forOf = __webpack_require__(208);
var createArrayMethod = __webpack_require__(174);
var $has = __webpack_require__(6);
var validate = __webpack_require__(219);
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var weak = __webpack_require__(223);
var validate = __webpack_require__(219);
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
__webpack_require__(220)(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var $typed = __webpack_require__(226);
var buffer = __webpack_require__(227);
var anObject = __webpack_require__(13);
var toAbsoluteIndex = __webpack_require__(40);
var toLength = __webpack_require__(38);
var isObject = __webpack_require__(14);
var ArrayBuffer = __webpack_require__(5).ArrayBuffer;
var speciesConstructor = __webpack_require__(209);
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * __webpack_require__(8)(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

__webpack_require__(194)(ARRAY_BUFFER);


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(5);
var hide = __webpack_require__(11);
var uid = __webpack_require__(20);
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(5);
var DESCRIPTORS = __webpack_require__(7);
var LIBRARY = __webpack_require__(25);
var $typed = __webpack_require__(226);
var hide = __webpack_require__(11);
var redefineAll = __webpack_require__(216);
var fails = __webpack_require__(8);
var anInstance = __webpack_require__(207);
var toInteger = __webpack_require__(39);
var toLength = __webpack_require__(38);
var toIndex = __webpack_require__(228);
var gOPN = __webpack_require__(50).f;
var dP = __webpack_require__(12).f;
var arrayFill = __webpack_require__(190);
var setToStringTag = __webpack_require__(26);
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = __webpack_require__(39);
var toLength = __webpack_require__(38);
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(9);
$export($export.G + $export.W + $export.F * !__webpack_require__(226).ABV, {
  DataView: __webpack_require__(227).DataView
});


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(231)('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

if (__webpack_require__(7)) {
  var LIBRARY = __webpack_require__(25);
  var global = __webpack_require__(5);
  var fails = __webpack_require__(8);
  var $export = __webpack_require__(9);
  var $typed = __webpack_require__(226);
  var $buffer = __webpack_require__(227);
  var ctx = __webpack_require__(21);
  var anInstance = __webpack_require__(207);
  var propertyDesc = __webpack_require__(18);
  var hide = __webpack_require__(11);
  var redefineAll = __webpack_require__(216);
  var toInteger = __webpack_require__(39);
  var toLength = __webpack_require__(38);
  var toIndex = __webpack_require__(228);
  var toAbsoluteIndex = __webpack_require__(40);
  var toPrimitive = __webpack_require__(17);
  var has = __webpack_require__(6);
  var classof = __webpack_require__(75);
  var isObject = __webpack_require__(14);
  var toObject = __webpack_require__(58);
  var isArrayIter = __webpack_require__(164);
  var create = __webpack_require__(46);
  var getPrototypeOf = __webpack_require__(59);
  var gOPN = __webpack_require__(50).f;
  var getIterFn = __webpack_require__(166);
  var uid = __webpack_require__(20);
  var wks = __webpack_require__(27);
  var createArrayMethod = __webpack_require__(174);
  var createArrayIncludes = __webpack_require__(37);
  var speciesConstructor = __webpack_require__(209);
  var ArrayIterators = __webpack_require__(195);
  var Iterators = __webpack_require__(130);
  var $iterDetect = __webpack_require__(167);
  var setSpecies = __webpack_require__(194);
  var arrayFill = __webpack_require__(190);
  var arrayCopyWithin = __webpack_require__(187);
  var $DP = __webpack_require__(12);
  var $GOPD = __webpack_require__(51);
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(231)('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(231)('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(231)('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(231)('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(231)('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(231)('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(231)('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(231)('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = __webpack_require__(9);
var aFunction = __webpack_require__(22);
var anObject = __webpack_require__(13);
var rApply = (__webpack_require__(5).Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !__webpack_require__(8)(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__(9);
var create = __webpack_require__(46);
var aFunction = __webpack_require__(22);
var anObject = __webpack_require__(13);
var isObject = __webpack_require__(14);
var fails = __webpack_require__(8);
var bind = __webpack_require__(77);
var rConstruct = (__webpack_require__(5).Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = __webpack_require__(12);
var $export = __webpack_require__(9);
var anObject = __webpack_require__(13);
var toPrimitive = __webpack_require__(17);

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * __webpack_require__(8)(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = __webpack_require__(9);
var gOPD = __webpack_require__(51).f;
var anObject = __webpack_require__(13);

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 26.1.5 Reflect.enumerate(target)
var $export = __webpack_require__(9);
var anObject = __webpack_require__(13);
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
__webpack_require__(131)(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = __webpack_require__(51);
var getPrototypeOf = __webpack_require__(59);
var has = __webpack_require__(6);
var $export = __webpack_require__(9);
var isObject = __webpack_require__(14);
var anObject = __webpack_require__(13);

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = __webpack_require__(51);
var $export = __webpack_require__(9);
var anObject = __webpack_require__(13);

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export = __webpack_require__(9);
var getProto = __webpack_require__(59);
var anObject = __webpack_require__(13);

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__(9);

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
var $export = __webpack_require__(9);
var anObject = __webpack_require__(13);
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__(9);

$export($export.S, 'Reflect', { ownKeys: __webpack_require__(251) });


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
var gOPN = __webpack_require__(50);
var gOPS = __webpack_require__(43);
var anObject = __webpack_require__(13);
var Reflect = __webpack_require__(5).Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
var $export = __webpack_require__(9);
var anObject = __webpack_require__(13);
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = __webpack_require__(12);
var gOPD = __webpack_require__(51);
var getPrototypeOf = __webpack_require__(59);
var has = __webpack_require__(6);
var $export = __webpack_require__(9);
var createDesc = __webpack_require__(18);
var anObject = __webpack_require__(13);
var isObject = __webpack_require__(14);

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = __webpack_require__(9);
var setProto = __webpack_require__(73);

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/Array.prototype.includes
var $export = __webpack_require__(9);
var $includes = __webpack_require__(37)(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(188)('includes');


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = __webpack_require__(9);
var flattenIntoArray = __webpack_require__(257);
var toObject = __webpack_require__(58);
var toLength = __webpack_require__(38);
var aFunction = __webpack_require__(22);
var arraySpeciesCreate = __webpack_require__(175);

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

__webpack_require__(188)('flatMap');


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = __webpack_require__(45);
var isObject = __webpack_require__(14);
var toLength = __webpack_require__(38);
var ctx = __webpack_require__(21);
var IS_CONCAT_SPREADABLE = __webpack_require__(27)('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
var $export = __webpack_require__(9);
var flattenIntoArray = __webpack_require__(257);
var toObject = __webpack_require__(58);
var toLength = __webpack_require__(38);
var toInteger = __webpack_require__(39);
var arraySpeciesCreate = __webpack_require__(175);

$export($export.P, 'Array', {
  flatten: function flatten(/* depthArg = 1 */) {
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

__webpack_require__(188)('flatten');


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/mathiasbynens/String.prototype.at
var $export = __webpack_require__(9);
var $at = __webpack_require__(128)(true);

$export($export.P, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(9);
var $pad = __webpack_require__(261);
var userAgent = __webpack_require__(214);

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__(38);
var repeat = __webpack_require__(91);
var defined = __webpack_require__(36);

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(9);
var $pad = __webpack_require__(261);
var userAgent = __webpack_require__(214);

// https://github.com/zloirock/core-js/issues/280
$export($export.P + $export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(userAgent), 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(83)('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(83)('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/String.prototype.matchAll/
var $export = __webpack_require__(9);
var defined = __webpack_require__(36);
var toLength = __webpack_require__(38);
var isRegExp = __webpack_require__(135);
var getFlags = __webpack_require__(198);
var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function (regexp, string) {
  this._r = regexp;
  this._s = string;
};

__webpack_require__(131)($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);
  return { value: match, done: match === null };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(29)('asyncIterator');


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(29)('observable');


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = __webpack_require__(9);
var ownKeys = __webpack_require__(251);
var toIObject = __webpack_require__(33);
var gOPD = __webpack_require__(51);
var createProperty = __webpack_require__(165);

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(9);
var $values = __webpack_require__(270)(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys = __webpack_require__(31);
var toIObject = __webpack_require__(33);
var isEnum = __webpack_require__(44).f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(9);
var $entries = __webpack_require__(270)(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var toObject = __webpack_require__(58);
var aFunction = __webpack_require__(22);
var $defineProperty = __webpack_require__(12);

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
__webpack_require__(7) && $export($export.P + __webpack_require__(273), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Forced replacement prototype accessors methods
module.exports = __webpack_require__(25) || !__webpack_require__(8)(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete __webpack_require__(5)[K];
});


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var toObject = __webpack_require__(58);
var aFunction = __webpack_require__(22);
var $defineProperty = __webpack_require__(12);

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
__webpack_require__(7) && $export($export.P + __webpack_require__(273), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var toObject = __webpack_require__(58);
var toPrimitive = __webpack_require__(17);
var getPrototypeOf = __webpack_require__(59);
var getOwnPropertyDescriptor = __webpack_require__(51).f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
__webpack_require__(7) && $export($export.P + __webpack_require__(273), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(9);
var toObject = __webpack_require__(58);
var toPrimitive = __webpack_require__(17);
var getPrototypeOf = __webpack_require__(59);
var getOwnPropertyDescriptor = __webpack_require__(51).f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
__webpack_require__(7) && $export($export.P + __webpack_require__(273), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(9);

$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(278)('Map') });


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(75);
var from = __webpack_require__(279);
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(208);

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(9);

$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(278)('Set') });


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
__webpack_require__(282)('Map');


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(9);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
__webpack_require__(282)('Set');


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
__webpack_require__(282)('WeakMap');


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
__webpack_require__(282)('WeakSet');


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
__webpack_require__(287)('Map');


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(9);
var aFunction = __webpack_require__(22);
var ctx = __webpack_require__(21);
var forOf = __webpack_require__(208);

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
__webpack_require__(287)('Set');


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
__webpack_require__(287)('WeakMap');


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
__webpack_require__(287)('WeakSet');


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(9);

$export($export.G, { global: __webpack_require__(5) });


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(9);

$export($export.S, 'System', { global: __webpack_require__(5) });


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/ljharb/proposal-is-error
var $export = __webpack_require__(9);
var cof = __webpack_require__(35);

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(9);

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(9);

$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(9);
var RAD_PER_DEG = 180 / Math.PI;

$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(9);
var scale = __webpack_require__(298);
var fround = __webpack_require__(114);

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});


/***/ }),
/* 298 */
/***/ (function(module, exports) {

// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (
    arguments.length === 0
      // eslint-disable-next-line no-self-compare
      || x != x
      // eslint-disable-next-line no-self-compare
      || inLow != inLow
      // eslint-disable-next-line no-self-compare
      || inHigh != inHigh
      // eslint-disable-next-line no-self-compare
      || outLow != outLow
      // eslint-disable-next-line no-self-compare
      || outHigh != outHigh
  ) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(9);

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(9);

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(9);

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(9);

$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(9);
var DEG_PER_RAD = Math.PI / 180;

$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(9);

$export($export.S, 'Math', { scale: __webpack_require__(298) });


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(9);

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

// http://jfbastien.github.io/papers/Math.signbit.html
var $export = __webpack_require__(9);

$export($export.S, 'Math', { signbit: function signbit(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
} });


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(9);
var core = __webpack_require__(10);
var global = __webpack_require__(5);
var speciesConstructor = __webpack_require__(209);
var promiseResolve = __webpack_require__(215);

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(9);
var newPromiseCapability = __webpack_require__(212);
var perform = __webpack_require__(213);

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(310);
var anObject = __webpack_require__(13);
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
} });


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

var Map = __webpack_require__(217);
var $export = __webpack_require__(9);
var shared = __webpack_require__(24)('metadata');
var store = shared.store || (shared.store = new (__webpack_require__(222))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(310);
var anObject = __webpack_require__(13);
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
  if (metadataMap.size) return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
} });


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(310);
var anObject = __webpack_require__(13);
var getPrototypeOf = __webpack_require__(59);
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

var Set = __webpack_require__(221);
var from = __webpack_require__(279);
var metadata = __webpack_require__(310);
var anObject = __webpack_require__(13);
var getPrototypeOf = __webpack_require__(59);
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(310);
var anObject = __webpack_require__(13);
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(310);
var anObject = __webpack_require__(13);
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(310);
var anObject = __webpack_require__(13);
var getPrototypeOf = __webpack_require__(59);
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(310);
var anObject = __webpack_require__(13);
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

var $metadata = __webpack_require__(310);
var anObject = __webpack_require__(13);
var aFunction = __webpack_require__(22);
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
  return function decorator(target, targetKey) {
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
} });


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = __webpack_require__(9);
var microtask = __webpack_require__(211)();
var process = __webpack_require__(5).process;
var isNode = __webpack_require__(35)(process) == 'process';

$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/zenparsing/es-observable
var $export = __webpack_require__(9);
var global = __webpack_require__(5);
var core = __webpack_require__(10);
var microtask = __webpack_require__(211)();
var OBSERVABLE = __webpack_require__(27)('observable');
var aFunction = __webpack_require__(22);
var anObject = __webpack_require__(13);
var anInstance = __webpack_require__(207);
var redefineAll = __webpack_require__(216);
var hide = __webpack_require__(11);
var forOf = __webpack_require__(208);
var RETURN = forOf.RETURN;

var getMethod = function (fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function (subscription) {
  var cleanup = subscription._c;
  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function (subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function (subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function (observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  } if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() { closeSubscription(this); }
});

var SubscriptionObserver = function (subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function (value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function () { return this; });

$export($export.G, { Observable: $Observable });

__webpack_require__(194)('Observable');


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global = __webpack_require__(5);
var $export = __webpack_require__(9);
var userAgent = __webpack_require__(214);
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(9);
var $task = __webpack_require__(210);
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__(195);
var getKeys = __webpack_require__(31);
var redefine = __webpack_require__(19);
var global = __webpack_require__(5);
var hide = __webpack_require__(11);
var Iterators = __webpack_require__(130);
var wks = __webpack_require__(27);
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}


/***/ }),
/* 324 */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(326);
module.exports = __webpack_require__(10).RegExp.escape;


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/benjamingr/RexExp.escape
var $export = __webpack_require__(9);
var $re = __webpack_require__(327)(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });


/***/ }),
/* 327 */
/***/ (function(module, exports) {

module.exports = function (regExp, replace) {
  var replacer = replace === Object(replace) ? function (part) {
    return replace[part];
  } : replace;
  return function (it) {
    return String(it).replace(regExp, replacer);
  };
};


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _tool = __webpack_require__(329);

var _eventUtil = __webpack_require__(330);

var _eleResizeListener = __webpack_require__(331);

var _Toolbar = __webpack_require__(332);

var _Toolbar2 = _interopRequireDefault(_Toolbar);

var _RightMenu = __webpack_require__(333);

var _RightMenu2 = _interopRequireDefault(_RightMenu);

var _Ptz = __webpack_require__(334);

var _Ptz2 = _interopRequireDefault(_Ptz);

var _WaterMark = __webpack_require__(335);

var _WaterMark2 = _interopRequireDefault(_WaterMark);

var _RealTimeVideoOverlay = __webpack_require__(336);

var _RealTimeVideoOverlay2 = _interopRequireDefault(_RealTimeVideoOverlay);

var _RealTimeDrawing = __webpack_require__(338);

var _RealTimeDrawing2 = _interopRequireDefault(_RealTimeDrawing);

var _HistoryTimeAxis = __webpack_require__(339);

var _HistoryTimeAxis2 = _interopRequireDefault(_HistoryTimeAxis);

var _NPVideo = __webpack_require__(340);

var _NPVideo2 = _interopRequireDefault(_NPVideo);

var _events = __webpack_require__(343);

var _events2 = _interopRequireDefault(_events);

var _NPPlayerEvent = __webpack_require__(389);

var _NPPlayerEvent2 = _interopRequireDefault(_NPPlayerEvent);

var _websocketController = __webpack_require__(395);

var _websocketController2 = _interopRequireDefault(_websocketController);

var _httpController = __webpack_require__(397);

var _httpController2 = _interopRequireDefault(_httpController);

var _ExtendClass = __webpack_require__(398);

var _ExtendClass2 = _interopRequireDefault(_ExtendClass);

var _features = __webpack_require__(399);

var _features2 = _interopRequireDefault(_features);

__webpack_require__(400);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //工具集

//事件工具集

// 元素resize事件监听

// 工具条

// 右键菜单

// 云台

// 水印

// 威目实时视频叠加

// 实时绘制

//历史录像进度条

//每个窗口Video对象

// 用于事件通知

// NPPlayer的默认事件，包含窗口事件（单击、双击、窗口交换）、焦点改变等


//websocketcontroller 用于录像查询、通道查询等


var _version_ = '1.0.7';

var _wsurl_ = 'ws://127.0.0.1:9122';
/**
 * 创建播放对象
 * @requires H5Player.js
 * @class H5Player
 * @constructor
 * @param {object} options options
 * @param {HTMLDOM} options.ele  DIV元素
 * @param {string} options.layout 布局，默认2*2
 * @param {string} options.ratio 视频播放显示比例，默认原始"origin"，可选origin 、stretch、4:3、16:9、16:10
 * @param {boolean} options.enablePtzMotion 执行云台动作，默认true
 * @param {boolean} options.enableLoadingGif 显示loading，默认true
 * @param {boolean} options.enableProgressShowPts 进度条显示播放时间戳，默认true
 * @param {boolean} options.enableExchangeScreen  是否拖动交换窗口，默认true
 * @param {boolean} options.enableStopZoomByDblclick: 双击关闭数字放大，默认false
 * @param {boolean} options.vmShowAttribute 是否显示威目实时目标属性，默认true,
 * @param {string} options.defBgClass  窗口背景，默认"h5vp-bg-img"
 * @param {object} options.border 边框属性
 * @param {string} options.border.borderWidth 边框宽度，默认'2px'
 * @param {string} options.border.borderColor 边框颜色，默认'#B9BABB'
 * @param {string} options.border.focusBorderColor: 焦点窗口颜色，默认'red'
 * @param {object} options.layoutmargin 窗口间间隔
 * @param {number} options.layoutmargin.marginX X方向间隔，默认0 
 * @param {number} options.layoutmargin.marginY Y方向间隔，默认0 
 * @param {number} options.desEncodeType 播放参数加密方式，默认0不加密，1为des加密
 * @param {boolean} options.showerror 是否显示播放失败信息，默认true
 * @param {boolean} options.enablercdtimershaft  是否显示录像时间轴，默认true
 * @param {number} options.rcdtimershaftshowtype 时间轴显示方式，默认为0, 范围0-3，0, 焦点窗口为录像时显示，1, 布局窗口中有录像时显示，2, 布局窗口中有视频时显示，3, 一直显示
 * @param {object} options.rcdtimershaft 录像时间轴样式
 * @param {color} options.rcdtimershaft.backcolor 背景色，默认"rgba(0, 0, 0, 0.5)"透明度0.5
 * @param {color} options.rcdtimershaft.vodcolor 有录像的颜色，默认"rgba(45, 240, 249, 0.5)", 
 * @param {color} options.rcdtimershaft.novodcolor 无录像的颜色，默认rgba(160, 125, 125, 0.5), 
 * @param {color} options.rcdtimershaft.thumbcolor 当前时间游标颜色，默认#E48E00,
 * @param {string} options.rcdtimershaft.thumbpos 当前时间游标位置百分比，默认"53%",
 * @param {color} options.rcdtimershaft.captioncolor 视频标题颜色，默认"rgba(45, 240, 249)", 
 * @param {color} options.rcdtimershaft.curtimecolor 当前时间颜色，默认"rgba(45, 240, 249)", 
 * 显示内容优先级 播放类型>焦点窗口；播放类型：录像>文件>实时流；焦点窗口>非焦点窗口
 * @param {boolean} options.rcdtimershaft.shrink  是否处于展开状态，默认true
 			
 * @see {@linkcode http://|  [内网]}
 * @see {@linkcode http://|[外网]}
 */

var H5Player = function (_EventUtil$aggregatio) {
    _inherits(H5Player, _EventUtil$aggregatio);

    _createClass(H5Player, null, [{
        key: 'setDefWsurl',
        value: function setDefWsurl(wsurl) {
            H5Player._defWsurl = wsurl || _wsurl_;
        }
        /**
         * 是否支持H5VP，静态函数
         * @method H5Player.isSupported 
         * @return {object} result
          	<table class="params table table-striped">
                <tr>
                    <th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >mseLiveH264Playback</td>
                    <td >boolean</td>
                    <td >是否支持H264直播和点播流，mseH264Playback&&networkStreamIO</td>
                </tr>
                <tr >
                    <td >mseH264Playback</td>
                    <td >boolean</td>
                    <td >是否支持H264视频格式播放</td>
                </tr>
                <tr >
                    <td >networkStreamIO</td>
                    <td >boolean</td>
                    <td >是否支持websocketIO方式</td>
                </tr>
                <tr >
                    <td >nativeMP4H264Playback</td>
                    <td >boolean</td>
                    <td >是否支持H264的MP4文件</td>
                </tr>
                <tr >
                    <td >nativeWebmVP8Playback</td>
                    <td >boolean</td>
                    <td >是否支持VP8的Webm文件</td>
                </tr>
                <tr >
                    <td >nativeWebmVP9Playback</td>
                    <td >boolean</td>
                    <td >是否支持VP9的Webm文件</td>
                </tr>
            </table>
         */

    }, {
        key: 'isSupported',
        value: function isSupported() {
            return _features2.default.getFeatureList();
        }

        /**
         * 获取jssdk版本，建议本地服务版本号与JSSDK版本号一致
         * @property H5Player.version
         */

    }, {
        key: 'playerversion',
        value: function playerversion() {
            return _version_;
        }
    }, {
        key: 'setupversion',
        value: function setupversion(callback, wsurl) {
            if (!H5Player._extendClass) {
                H5Player._extendClass = new _ExtendClass2.default(wsurl || H5Player._defWsurl);
            }
            return H5Player._extendClass && H5Player._extendClass.setupversion(callback);
        }
    }, {
        key: 'getMacString',
        value: function getMacString(callback, wsurl) {
            if (!H5Player._extendClass) {
                H5Player._extendClass = new _ExtendClass2.default(wsurl || H5Player._defWsurl);
            }
            return H5Player._extendClass && H5Player._extendClass.getMacString(callback);
        }
    }, {
        key: 'getCpuMemory',
        value: function getCpuMemory(callback, wsurl) {
            if (!H5Player._extendClass) {
                H5Player._extendClass = new _ExtendClass2.default(wsurl || H5Player._defWsurl);
            }
            return H5Player._extendClass && H5Player._extendClass.getCpuMemory(callback);
        }
    }, {
        key: 'getExpandScreenInfo',
        value: function getExpandScreenInfo(callback, wsurl) {
            if (!H5Player._extendClass) {
                H5Player._extendClass = new _ExtendClass2.default(wsurl || H5Player._defWsurl);
            }
            return H5Player._extendClass && H5Player._extendClass.getExpandScreenInfo(callback);
        }
    }, {
        key: 'getRegistryInfo',
        value: function getRegistryInfo(key, callback, wsurl) {
            if (!H5Player._extendClass) {
                H5Player._extendClass = new _ExtendClass2.default(wsurl || H5Player._defWsurl);
            }
            return H5Player._extendClass && H5Player._extendClass.getRegistryInfo(key, callback);
        }
    }, {
        key: 'runProcess',
        value: function runProcess(info, callback, wsurl) {
            if (!H5Player._extendClass) {
                H5Player._extendClass = new _ExtendClass2.default(wsurl || H5Player._defWsurl);
            }
            return H5Player._extendClass && H5Player._extendClass.runProcess(info, callback);
        }
    }, {
        key: 'openFileDirectory',
        value: function openFileDirectory(filepath, callback, wsurl) {
            if (!H5Player._extendClass) {
                H5Player._extendClass = new _ExtendClass2.default(wsurl || H5Player._defWsurl);
            }
            return H5Player._extendClass && H5Player._extendClass.openFileDirectory(filepath, callback);
        }
    }, {
        key: 'moveProcessWindow',
        value: function moveProcessWindow(info, callback, wsurl) {
            if (!H5Player._extendClass) {
                H5Player._extendClass = new _ExtendClass2.default(wsurl || H5Player._defWsurl);
            }
            return H5Player._extendClass && H5Player._extendClass.moveProcessWindow(info, callback);
        }
    }, {
        key: 'savePicture',
        value: function savePicture(info, callback, wsurl) {
            if (!H5Player._extendClass) {
                H5Player._extendClass = new _ExtendClass2.default(wsurl || H5Player._defWsurl);
            }
            return H5Player._extendClass && H5Player._extendClass.savePicture(info, callback);
        }
    }, {
        key: 'copyToClipboard',
        value: function copyToClipboard(context, callback, wsurl) {
            if (!H5Player._extendClass) {
                H5Player._extendClass = new _ExtendClass2.default(wsurl || H5Player._defWsurl);
            }
            return H5Player._extendClass && H5Player._extendClass.copyToClipboard(context, callback);
        }
    }, {
        key: 'isFileExist',
        value: function isFileExist(filepath, callback, wsurl) {
            if (!H5Player._extendClass) {
                H5Player._extendClass = new _ExtendClass2.default(wsurl || H5Player._defWsurl);
            }
            return H5Player._extendClass && H5Player._extendClass.isFileExist(filepath, callback);
        }
    }, {
        key: 'removeFile',
        value: function removeFile(filepath, callback, wsurl) {
            if (!H5Player._extendClass) {
                H5Player._extendClass = new _ExtendClass2.default(wsurl || H5Player._defWsurl);
            }
            return H5Player._extendClass && H5Player._extendClass.removeFile(filepath, callback);
        }
    }, {
        key: 'openSaveFileDlg',
        value: function openSaveFileDlg(info, callback, wsurl) {
            if (!H5Player._extendClass) {
                H5Player._extendClass = new _ExtendClass2.default(wsurl || H5Player._defWsurl);
            }
            return H5Player._extendClass && H5Player._extendClass.openSaveFileDlg(info, callback);
        }
    }, {
        key: 'openLocalSelectFolderDlg',
        value: function openLocalSelectFolderDlg(defpath, callback, wsurl) {
            if (!H5Player._extendClass) {
                H5Player._extendClass = new _ExtendClass2.default(wsurl || H5Player._defWsurl);
            }
            return H5Player._extendClass && H5Player._extendClass.openLocalSelectFolderDlg(defpath, callback);
        }
    }]);

    function H5Player(options) {
        _classCallCheck(this, H5Player);

        //默认的参数
        var _this2 = _possibleConstructorReturn(this, (H5Player.__proto__ || Object.getPrototypeOf(H5Player)).call(this, options.wsurl || _wsurl_));

        var defaultOptions = {
            // video元素
            ele: '#video',
            //边框
            border: {
                borderWidth: '2px',
                borderStyle: 'solid',
                borderColor: '#B9BABB',
                focusBorderStyle: 'solid',
                focusBorderColor: 'red' //'#E48E00'
            },
            layout: '2*2',
            ratio: 'origin', //origin 、stretch、4:3、16:9、16:10
            layoutmargin: {
                marginX: 0,
                marginY: 0
            },
            defBgClass: 'h5vp-bg-img',
            errorBgClass: "h5vp-bg-img-error",
            backgroundColor: '#000', //'#333',chrome低版本video为黑色
            enablePtzMotion: true,
            enableLoadingGif: true,
            enableLoadingInfo: true,
            enableProgressShowPts: true,
            windowPtzSpeed: 10,
            ptzRangeMode: 1,
            top_bottom: 20,
            left_right: 20,
            showerror: true,
            reconnectCount: 3,
            enablercdtimershaft: true, //录像时间轴默认为启用
            rcdtimershaftshowtype: 1, //默认为0, 范围0-3
            // 0, 焦点窗口为录像时显示，
            // 1, 布局窗口中有录像时显示，
            //2, 布局窗口中有视频时显示，
            //3, 一直显示
            // 显示内容优先级 播放类型>焦点窗口
            // 播放类型：录像>文件>实时流；
            // 焦点窗口>非焦点窗口
            rcdtimershaft: {
                backcolor: 'rgba(0, 0, 0, 0.5)', //时间轴背景色,默认rgba(0, 0, 0, 0.5)；透明度0.5
                vodcolor: 'rgba(45, 240, 249, 0.5)', //有录像的颜色，默认rgba(45, 240, 249, 0.5),
                novodcolor: 'rgba(160, 125, 125, 0.5)', //无录像的颜色，默认rgba(160, 125, 125, 0.5),
                thumbpos: '53%', //当前时间游标位置百分比，默认53%,
                thumbcolor: '#E48E00', //当前时间游标颜色，默认#E48E00,
                captioncolor: 'rgba(45, 240, 249)', //视频标题颜色，默认rgba(45, 240, 249),
                curtimecolor: 'rgba(45, 240, 249)', //当前时间颜色，默认rgba(45, 240, 249),
                level: 0, //默认缩放层级，默认0,
                curPositon: 45, //curPositon当前显示的位置，["top","bottom","fix",number]curPositon bottom则离容器底部的位置,curPositon为fix在容器外部，不可拖动
                shrink: true //是否处于收缩状态，默认true
            },
            desEncodeType: 0,
            enableExchangeScreen: true,
            enableStopZoomByDblclick: false, //双击关闭数字放大
            vmShowAttribute: true,
            wsurl: _wsurl_
        };

        _this2.opt = _tool.Toolkit.deepMerge(defaultOptions, options);
        _this2.opt.VMStrokeColorObj = _this2.VMStrokeColorObj;
        _this2.opt.VMTitleObj = _this2.VMTitleObj;
        _this2._showDebugInfo = true;
        // 获取浏览器版本
        _this2.browserV = _tool.Toolkit.browserVersion();
        // 全屏的状态信息
        _this2._isFullScreen = false;
        // 全屏的状态信息
        _this2.maxScreenIndex = -1;
        //焦点窗口
        _this2.nFocusIndex = 0;
        //鼠标拖动交换窗口
        _this2.enableExchangeScreen = _this2.opt.enableExchangeScreen;
        // 云台区域双击窗口是否最大化，默认false
        _this2.enablePtzDoubleClick = false;

        _this2._timeAxisIndex = -1;
        _this2._timeAxisTimer = null;

        _this2.videos = [];
        // 判断传进来的是DOM还是字符串
        if (typeof _this2.opt.ele === 'string') {
            _this2.opt.ele = document.querySelector(_this2.opt.ele);
        } else {
            _this2.opt.ele = _this2.opt.ele;
        }

        _this2._emitter = new _events2.default();
        _this2._mousedownindex = -1;

        _this2._websocketctrl = null;
        _this2._onresponse = null;
        _this2._onerror = null;
        // 初始化
        _this2._initDom();
        // 视频容器发生变化时的事件监听
        _eleResizeListener.EleResize.on(_this2.playerC, _this2._videoContainerResize.bind(_this2));
        // 浏览器尺寸发生变化时监测浏览器缩放级别
        var browserZoomRatio = _tool.Toolkit.getBrowserZoomRatio();
        _this2.WinScreenWidth = window.screen.width / (browserZoomRatio / 100); // 因为window.screen.width为只读属性,故用此变量代替
        _this2.WinScreenHeight = window.screen.height / (browserZoomRatio / 100); // 因为window.screen.height为只读属性,故用此变量代替
        _this2._windowResizeEvent();
        // 初始化事件
        _this2._initEvent();

        //this._createWebsocketctrl();
        _this2._httpctrl = null;
        //this._httpctrl = new HttpController();
        return _this2;
    }

    // 当视频容器尺寸发生变化时执行的方法


    _createClass(H5Player, [{
        key: '_videoContainerResize',
        value: function _videoContainerResize() {
            if (this._isFullScreen) {
                // 若是全屏,则不走此方法
                return;
            }
            var videoContainer = this.playerC;
            var oldwidth = this.opt.width,
                oldheight = this.opt.height;
            this.opt.width = videoContainer.offsetWidth + 'px';
            this.opt.height = videoContainer.offsetHeight + 'px';
            if (oldwidth === this.opt.width && oldheight === this.opt.height) {
                return;
            }
            this.styleArr = this._getAllVideoStyleByLayout();
            for (var i = 0, len = this.layoutcount; i < len; i++) {
                // 设置video的大小、位置
                var positonObj = this._getVideoStyleByLayout(i);
                if (!positonObj) {
                    return;
                }
                if (this.maxScreenIndex === i) {
                    this.videos[i].setPosition(0, 0, this.opt.width, this.opt.height);
                } else {
                    this.videos[i].setPosition(positonObj.top, positonObj.left, positonObj.width, positonObj.height);
                }
            }
            this._historyTimeAxisSizeChange();
            this._emitter.emit(_NPPlayerEvent2.default.OnSizeChange, oldwidth, oldheight, this.opt.width, this.opt.height);
        }
        // 浏览器尺寸发生变化时监测浏览器缩放级别

    }, {
        key: '_windowResizeEvent',
        value: function _windowResizeEvent() {
            var _this3 = this;

            window.addEventListener('resize', function () {
                var ratio = _tool.Toolkit.getBrowserZoomRatio();
                _this3.WinScreenWidth = window.screen.width / (ratio / 100);
                _this3.WinScreenHeight = window.screen.height / (ratio / 100);
            });
        }
    }, {
        key: 'destroy',


        /**
         * 销毁播放对象，释放所有资源
         * @method destroy
         */
        value: function destroy() {
            if (this._httpctrl) {
                this._httpctrl.destroy();
                this._httpctrl = null;
            }
            if (this._websocketctrl) {
                this._websocketctrl.destroy();
                this._websocketctrl = null;
            }
            for (var i = 0; i < this.videos.length; i++) {
                this.videos[i].destroy();
            }
        }
    }, {
        key: '_showDebuggInfo',
        value: function _showDebuggInfo(str) {
            if (this._showDebugInfo) {
                console.warn(str);
            }
        }

        //解析参数

    }, {
        key: '_parselayout',
        value: function _parselayout(obj) {
            if (obj.layout === '0' || obj.layout === '' || obj.layout === 'null') {
                obj.layout = '0';
                obj.row = 0;
                obj.column = 0;
                return true;
            }
            var arr = obj.layout.split('*');
            if (arr.length === 2) {
                arr[0] = parseInt(arr[0]);
                arr[1] = parseInt(arr[1]);
                if (arr[0] > 0 && arr[1] > 0 && arr[0] * arr[1] <= 64) {
                    obj.row = arr[0];
                    obj.column = arr[1];
                    return true;
                } else if (arr[0] === 0 || arr[1] === 0) {
                    obj.layout = '0';
                    obj.row = 0;
                    obj.column = 0;
                    return true;
                }
            }
            return false;
        }

        //初始化布局，创建DOM元素

    }, {
        key: '_initDom',
        value: function _initDom() {
            // 创建组件的content区域
            this._createPlayerC();
            //记下整个player的高宽，为了退出全屏时使用
            this.opt.width = this.opt.ele.offsetWidth + 'px';
            this.opt.height = this.opt.ele.offsetHeight + 'px';
            if (typeof this.opt.layout === 'string') {
                this.opt.layout = {
                    layout: this.opt.layout
                };
            }

            if (!this._parselayout(this.opt.layout)) {
                this.opt.layout = {
                    layout: '2*2',
                    row: 2,
                    column: 2
                };
            }
            this.opt.layoutmargin = this._getLayoutmargin(this.opt.layoutmargin);
            if (this.opt.layoutmargin === null) {
                this.opt.layoutmargin = {
                    marginX: 0,
                    marginY: 0
                };
            }

            this.styleArr = this._getAllVideoStyleByLayout();
            // 当layout为0 或者小于0的时候不会去创建player布局
            if (this.layoutcount > 0) {
                // 创建Video
                this._createVideoEle();
            }
        }

        // 创建组件的content区域

    }, {
        key: '_createPlayerC',
        value: function _createPlayerC() {
            // video content
            this.playerC = document.createElement('div');
            this.playerC.className = 'h5vp-content h5vp-content-style';
            // // 设置画面比例后的空隙颜色（其实也就是背景色）
            // if (this.opt.backgroundColor) {
            // 	this.playerC.style.background = this.opt.backgroundColor;
            // }

            if (this.opt.border && this.opt.border.borderColor) {
                this.playerC.style.background = this.opt.border.borderColor;
            }

            this.opt.ele.appendChild(this.playerC);
        }

        //	给每个分屏创建video便签，同时创建工具条和右键菜单，并绑定事件

    }, {
        key: '_createVideoEle',
        value: function _createVideoEle() {
            this.videos = [];
            var _optOrginal = {};
            _tool.Toolkit.deepMerge(_optOrginal, this.opt);
            var _fatherEle = _optOrginal.ele,
                _optAfter = {};
            _tool.Toolkit.deepMerge(_optAfter, _optOrginal);
            delete _optAfter.ele;

            for (var i = 0, len = this.layoutcount; i < len; i++) {
                var _uuid = _tool.Toolkit.getUuid(),
                    _positonObj = this._getVideoStyleByLayout(i);
                if (!_positonObj) {
                    return;
                }
                var _video = new _NPVideo2.default(_tool.Toolkit.deepMerge(_optAfter, {
                    ele: 'npvideo-' + _uuid,
                    uuid: _uuid,
                    index: i,
                    fatherEle: _fatherEle,
                    playerC: this.playerC,
                    width: _positonObj.width,
                    height: _positonObj.height,
                    left: _positonObj.left,
                    top: _positonObj.top
                }));
                //监听事件并抛出去
                this.listenAndEmitEvent(_video);
                this.videos.push(_video);
            }

            this._setFocusIndex(this.nFocusIndex);
        }
        /*
        // 获取1A5,1A7,1A9小分屏参数,littleC为横向或者纵向小分屏的个数
        _getLittleLayoutParam(w, h, littleC) {
        let littleHW = Math.ceil(w / littleC), // 横向小分屏的宽度
        littleHC = w % littleC, // 以littleHW为宽度的横向小分屏的数量
        littleHOC = littleC - littleHC, // 以littleHOW为宽度的横向小分屏的数量
        littleHOW = littleHC === 0 ? littleHW : ((w - littleHW * littleHC) / littleHOC), // 其他横向小分屏的宽度
        littleVH = Math.ceil(h / littleC), // 纵向小分屏的高度
        littleVC = h % littleC, // 以littleVH为高度的纵向小分屏的数量
        littleVOC = littleC - littleVC, // 以littleVOH为高度的纵向小分屏的数量
        littleVOH = littleVC === 0 ? littleVH : ((h - littleVH * littleVC) / littleVOC); // 其他纵向小分屏的高度
        return {
        littleHW: littleHW,
        littleHC: littleHC,
        littleHOC: littleHOC,
        littleHOW: littleHOW,
        littleVH: littleVH,
        littleVC: littleVC,
        littleVOC: littleVOC,
        littleVOH: littleVOH
        }
        }
        */

    }, {
        key: '_getLayoutWindows',
        value: function _getLayoutWindows(w, h, nx, ny) {
            var cw1 = Math.ceil(w / nx),
                // 横向小分屏的宽度
            cw1_c = w % nx,
                // 以cw1为宽度的横向小分屏的数量
            cw2_c = nx - cw1_c,
                // 以cw2为宽度的横向小分屏的数量
            cw2 = Math.floor(w / nx),
                // 其他横向小分屏的宽度
            ch1 = Math.ceil(h / ny),
                // 纵向小分屏的高度
            ch1_c = h % ny,
                // 以ch1为高度的纵向小分屏的数量
            ch2_c = ny - ch1_c,
                // 以ch2为高度的纵向小分屏的数量
            ch2 = Math.floor(h / ny); // 其他纵向小分屏的高度

            //console.log('W:'+cw1+'*'+cw1_c+'+'+cw2+'*' +cw2_c +'='+(cw1* cw1_c+cw2*cw2_c)+'==='+w)
            //console.log('H:'+ch1+'*'+ch1_c+'+'+ch2+'*' +ch2_c +'='+(ch1* ch1_c+ch2*ch2_c)+'==='+h)
            return {
                cw1: cw1,
                cw1_c: cw1_c,
                cw2: cw2,
                cw2_c: cw2_c,
                ch1: ch1,
                ch1_c: ch1_c,
                ch2: ch2,
                ch2_c: ch2_c
            };
        }
    }, {
        key: '_get1ANlayoutArr',
        value: function _get1ANlayoutArr(w, h, _nx, _ny) {
            var arr = [];
            var _dx = this.opt.layoutmargin.marginX,
                _dy = this.opt.layoutmargin.marginY,
                _layouts = this._getLayoutWindows(w - _dx * (_nx - 1), h - _dy * (_ny - 1), _nx, _ny);

            var _cw = void 0,
                _ch = void 0,
                _left = 0,
                _top = 0;

            arr.push([w - _layouts.cw2 - _dx, h - _layouts.ch2 - _dy, 0, 0]);
            for (var i = 0; i < _ny; i++) {
                //行
                _ch = i < _layouts.ch1_c ? _layouts.ch1 : _layouts.ch2;
                _left = 0;
                for (var j = 0; j < _nx; j++) {
                    //列
                    _cw = j < _layouts.cw1_c ? _layouts.cw1 : _layouts.cw2;
                    if (j === _nx - 1 || i === _ny - 1) {
                        arr.push([_cw, _ch, _left, _top]);
                    }
                    _left += _cw + _dx;
                }
                _top += _ch + _dy;
            }
            //console.log(arr);
            return arr;
        }
        //计算所有分屏的尺寸信息(width 、height、 left、top)、当前player的分屏数

    }, {
        key: '_getAllVideoStyleByLayout',
        value: function _getAllVideoStyleByLayout() {
            var h = this._isFullScreen ? this.WinScreenHeight : parseFloat(this.opt.height),
                w = this._isFullScreen ? this.WinScreenWidth : parseFloat(this.opt.width),
                arr = [];
            // 分屏数
            var _layoutObj = this.opt.layout,
                _layout = _layoutObj.layout,
                params = void 0;
            //console.log(_layout);
            switch (_layout) {
                case '0':
                    this.layoutcount = 0;
                    break;
                case '1A5':
                    arr = this._get1ANlayoutArr(w, h, 3, 3);
                    this.layoutcount = 6;
                    break;
                case '1A7':
                    arr = this._get1ANlayoutArr(w, h, 4, 4);
                    this.layoutcount = 8;
                    break;
                case '1A9':
                    arr = this._get1ANlayoutArr(w, h, 5, 5);
                    this.layoutcount = 10;
                    break;
                default:
                    {
                        var _ny = _layoutObj.row,
                            _nx = _layoutObj.column,
                            _dx = this.opt.layoutmargin.marginX,
                            _dy = this.opt.layoutmargin.marginY,
                            _layouts = this._getLayoutWindows(w - _dx * (_nx - 1), h - _dy * (_ny - 1), _nx, _ny);
                        var _cw = void 0,
                            _ch = void 0,
                            _left = 0,
                            _top = 0;
                        for (var i = 0; i < _ny; i++) {
                            //行
                            _ch = i < _layouts.ch1_c ? _layouts.ch1 : _layouts.ch2;
                            _left = 0;
                            for (var j = 0; j < _nx; j++) {
                                //列
                                _cw = j < _layouts.cw1_c ? _layouts.cw1 : _layouts.cw2;
                                arr.push([_cw, _ch, _left, _top]);
                                _left += _cw + _dx;
                            }
                            _top += _ch + _dy;
                        }
                        //console.log(arr);
                        this.layoutcount = _nx * _ny;
                        break;
                    }
            }
            return arr || [];
        }
        //获得指定分屏的宽高

    }, {
        key: '_getVideoStyleByLayout',
        value: function _getVideoStyleByLayout(index) {
            if (index >= this.layoutcount) {
                console.log('窗口索引大于窗口总数');
                return null;
            }
            var _style = this.styleArr[index];
            return {
                width: _style[0] + 'px',
                height: _style[1] + 'px',
                left: _style[2] + 'px',
                top: _style[3] + 'px'
            };
        }
    }, {
        key: '_initEvent',
        value: function _initEvent() {
            var _this = this;
            //屏幕切换的一些事件（如全屏/退出全屏）
            _this.screenChangeEvent();
            //绑定事件
            _this._addEvent();
        }
    }, {
        key: '_onWsComplete',
        value: function _onWsComplete() {
            this._websocketctrl = null;
        }
    }, {
        key: '_onWsError',
        value: function _onWsError(type, e) {
            this._websocketctrl = null;
            if (this._onerror) {
                this._onerror(-1, type, e);
            }
        }
    }, {
        key: '_onWsCmdResponse',
        value: function _onWsCmdResponse(resobj) {
            if (this._onresponse) {
                this._onresponse(-1, resobj.name, resobj.param, resobj.rederved);
            }
        }
    }, {
        key: '_createWebsocketctrl',
        value: function _createWebsocketctrl(wsurl) {
            if (!_websocketController2.default.isSupported()) {
                return false;
            }
            if (this._websocketctrl) {
                this._websocketctrl.destroy();
                this._websocketctrl = null;
            }
            wsurl = wsurl || this.opt.wsurl;
            this._websocketctrl = new _websocketController2.default(wsurl);
            this._websocketctrl.onComplete = this._onWsComplete.bind(this);
            this._websocketctrl.onError = this._onWsError.bind(this);
            this._websocketctrl.onCommand = this._onWsCmdResponse.bind(this);
            return this._websocketctrl.open();
            //console.log('websocketcontroller');
        }
    }, {
        key: 'getOcxVersionInfo',


        // *
        //     * 获取OCX版本信息
        //     * @method getOcxVersionInfo
        //     * @param {function} callback 结果回调 function(reslut){}
        //       <table class="params table table-striped">
        //            <tr>
        //                <th >reslut子项</th>
        //                <th>类型</th>
        //                <th>描述</th>
        //            </tr>
        //            <tr >
        //                <td >error</td>
        //                <td >number</td>
        //                <td >0-成功，负数-错误码</td>
        //            </tr>
        //            <tr >
        //                <td >CPUInfo</td>
        //                <td >string</td>
        //                <td >CPU信息"Intel(R) Core(TM) i3-3220 CPU @ 3.30GHz"</td>
        //            </tr>
        //            <tr >
        //                <td >MemoryInfo</td>
        //                <td >string</td>
        //                <td >内存信息 "7.97 GB (1.87 GB available)"</td>
        //            </tr>
        //            <tr >
        //                <td >OSInfo</td>
        //                <td >string</td>
        //                <td >操作系统 "Microsoft Windows 7 Professional 64bit"</td>
        //            </tr>
        //            <tr >
        //                <td >graphcardinfo</td>
        //                <td >string</td>
        //                <td >显卡信息 "AMD Radeon HD 7000 series"</td>
        //            </tr>
        //        </table>

        value: function getOcxVersionInfo(callback) {
            if (!this._httpctrl) {
                this._httpctrl = new _httpController2.default();
            }
            if (this._httpctrl) {
                this._httpctrl.getOcxVersionInfo(callback);
            } else {
                callback && callback({
                    error: -1,
                    msg: 'HttpController error'
                });
            }
        }
        // *
        //     * 是否需要升级
        //     * @method isUpgradeVersion
        //     * @param {string} info pva-plugins.json 文件内容
        //     * @param {function} callback 结果回调 function(reslut){}
        //     	<table class="params table table-striped">
        //        	<tr>
        //          		<th >reslut子项</th>
        //                <th>类型</th>
        //                <th>描述</th>
        //            </tr>
        //            <tr >
        //                <td >error</td>
        //                <td >number</td>
        //                <td >0-成功，负数-错误码</td>
        //            </tr>
        //            <tr >
        //                <td >bUpgrade</td>
        //                <td >number</td>
        //                <td > 0:不需要升级  1：需要升级</td>
        //            </tr>
        //        </table>

    }, {
        key: 'isUpgradeVersion',
        value: function isUpgradeVersion(info, callback) {
            if (!this._httpctrl) {
                this._httpctrl = new _httpController2.default();
            }
            if (this._httpctrl) {
                this._httpctrl.isUpgradeVersion(info, callback);
            } else {
                callback && callback({
                    error: -1,
                    msg: 'HttpController error'
                });
            }
        }

        // *
        //  * 开始下载
        //  * @method startDownload
        //  * @param {object} info info 下载通道信息
        //  * @param {string} info.device 设备类型 'pvg67' 'pvgplus'  'pfs'  'http'
        //  * <br></br>{"device":"pvg67","ip":"192.168.60.174","port":2100,"user":"admin","password":"admin","ticket":"","ticketlen":0,"channel":"av\/ytfj\/2","begintime":"2018-07-24 13:39:02.000","endtime":"2018-07-24 13:48:22.741","vod":0,"filename":"av_ytfj_2.mbf","splitmode":"size","splitvalue":-1,"textosd":"","downloadtype":0,"converttype":0}
        //  * <br></br>{"device":"pvgplus","ip":"192.168.60.174","port":2015,"user":"admin","password":"admin","ticket":"","ticketlen":0,"channel":"av\/ytfj\/2","begintime":"2018-07-24 13:39:02.000","endtime":"2018-07-24 13:48:22.741","vod":0,"filename":"av_ytfj_2.mbf","splitmode":"size","splitvalue":-1,"textosd":"","storageaddr":"","downloadtype":0,"converttype":0}
        //  * <br></br>{"device":"http","src":"http://download.microsoft.com/downloadn90DayTrialCHSX1435983.iso","filename":"downloadn90DayTrialCHSX1435983.iso"}
        //  * <br></br>{"device":"pfsdown","src"{"ip" : "192.168.60.55","port" : 9000,"username" : "admin","password" : "admin","path" : "/video/8C.mbf","storagemode" : 0},"filename" : "8C.mbf","converttype" : 0(在转码为mp4文件时有效，0：如果源文件为标准H264码流，则直接转为MP4，如果源文件不是标准H264码流，则在回调函数中返回错误码-21246。此时如果仍然要转为MP4文件则将此项改为1，重新调用startDownload接口下载)}
        //  * <br></br>{"device":"pfsup","dest":{"ip" : "192.168.60.55","password" :"admin","path":"/video","port" : 9000,"storagemode" : 0(0 普通模式 1桶模式仅对图片有效),"username" : "admin"} ,"src" : "E:\\media\\01230d809e.mbf","filetype" :2(//1 图片 2 视频 3 其他格式), "streamtrun":true(是否流化，仅对视频有效)}

        //  * @param {function} callback 结果回调 function(reslut){}
        //  	<table class="params table table-striped">
        //     	<tr>
        //       		<th >reslut子项</th>
        //             <th>类型</th>
        //             <th>描述</th>
        //         </tr>
        //         <tr >
        //             <td >error</td>
        //             <td >number</td>
        //             <td >0-成功，负数-错误码</td>
        //         </tr>
        //         <tr >
        //             <td >id</td>
        //             <td >string</td>
        //             <td > 返回下载唯一标识</td>
        //         </tr>
        //         <tr >
        //             <td >status</td>
        //             <td >number</td>
        //             <td >0初始状态 1为开始  2为下载中  3为暂停 4为完成</td>
        //         </tr>
        //         <tr >
        //             <td >process</td>
        //             <td >number</td>
        //             <td >下载进度 0-10000</td>
        //         </tr>
        //         <tr >
        //             <td >process</td>
        //             <td >number</td>
        //             <td >下载进度 0-10000</td>
        //         </tr>
        //         <tr >
        //             <td >bitsrate</td>
        //             <td >number</td>
        //             <td >下载速度 3482582  正确表示方法为： (bitsrate/ 1000) Kb/s, 这样的好处是为了保留小数点后3位</td>
        //         </tr>
        //         <tr >
        //             <td >totalsize</td>
        //             <td >string</td>
        //             <td >文件总大小 3.70GB</td>
        //         </tr>
        //         <tr >
        //             <td >currentsize</td>
        //             <td >string</td>
        //             <td >已下载大小 3.21MB</td>
        //         </tr>
        //         <tr >
        //             <td >filename</td>
        //             <td >string</td>
        //             <td >pfsdown、http 已下载的文件名 D:/RecordDownloads/t01f58f.jpg</td>
        //         </tr>
        //         <tr >
        //             <td >filenameList</td>
        //             <td >string</td>
        //             <td >pvg67、pvgplus {filename:'D:/RecordDownloads/t0.mbf'</td>
        //         </tr>
        //         <tr >
        //             <td >filepath</td>
        //             <td >string</td>
        //             <td >pfsup "{"ip":"192.168.60.55","port":9000,"username":"admin","password":"admin","path":"/video/A3CE0C9F-BF1.jpg"}"</td>
        //         </tr>
        //     </table>

    }, {
        key: 'startDownload',
        value: function startDownload(info, callback) {
            if (!this._httpctrl) {
                this._httpctrl = new _httpController2.default();
            }
            if (this._httpctrl) {
                this._httpctrl.startDownload(info, callback);
            } else {
                callback && callback({
                    error: -1,
                    msg: 'HttpController error'
                });
            }
        }

        // *
        //     * 停止下载
        //     * @method stopDownload
        //     * @param {string} strid startDownload 回调中返回下载唯一标识
        //     * @param {boolean} bdel 是否删除文件 false 不删除 true删除
        //     * @param {function} callback 结果回调 function(reslut){}
        //     	<table class="params table table-striped">
        //        	<tr>
        //          		<th >reslut子项</th>
        //                <th>类型</th>
        //                <th>描述</th>
        //            </tr>
        //            <tr >
        //                <td >error</td>
        //                <td >number</td>
        //                <td >0-成功，负数-错误码</td>
        //            </tr>
        //            <tr >
        //                <td >id</td>
        //                <td >string</td>
        //                <td >下载唯一标识</td>
        //            </tr>
        //        </table>

    }, {
        key: 'stopDownload',
        value: function stopDownload(strid, bdel, callback) {
            if (typeof strid != 'string') {
                this._showDebuggInfo('set windowPtzSpeed() param error!');
                callback && callback({
                    error: -1,
                    msg: 'strid error'
                });
            }
            if (this._httpctrl) {
                this._httpctrl.stopDownload(strid, bdel, callback);
            } else {
                callback && callback({
                    error: -1,
                    msg: 'HttpController error'
                });
            }
        }

        // *
        //     * 暂停/恢复下载
        //     * @method pauseDownload
        //     * @param {string} strid startDownload 回调中返回下载唯一标识
        //     * @param {boolean} bpause  false恢复 true暂停
        //     * @param {function} callback 结果回调 function(reslut){}
        //     	<table class="params table table-striped">
        //        	<tr>
        //          		<th >reslut子项</th>
        //                <th>类型</th>
        //                <th>描述</th>
        //            </tr>
        //            <tr >
        //                <td >error</td>
        //                <td >number</td>
        //                <td >0-成功，负数-错误码</td>
        //            </tr>
        //            <tr >
        //                <td >id</td>
        //                <td >string</td>
        //                <td >下载唯一标识</td>
        //            </tr>
        //        </table>

    }, {
        key: 'pauseDownload',
        value: function pauseDownload(strid, bpause, callback) {
            if (typeof strid != 'string') {
                this._showDebuggInfo('set pauseDownload() param error!');
                callback && callback({
                    error: -1,
                    msg: 'strid error'
                });
            }
            if (this._httpctrl) {
                this._httpctrl.pauseDownload(strid, bpause, callback);
            } else {
                callback && callback({
                    error: -1,
                    msg: 'HttpController error'
                });
            }
        }

        // *
        //     * 删除PFS上的文件
        //     * @method deletePfsFile
        //     * @param {object} info
        //     * @param {string} info.ip pfs服务器ip
        //     * @param {number} info.port pfs服务器端口
        //     * @param {string} info.username pfs服务器用户名
        //     * @param {string} info.password pfs服务器密码
        //     * @param {string} info.path  pfs相对路径名
        //     * @param {function} callback 结果回调 function(reslut){}
        //     <table class="params table table-striped">
        //        	<tr>
        //          		<th >reslut子项</th>
        //                <th>类型</th>
        //                <th>描述</th>
        //            </tr>
        //            <tr >
        //                <td >error</td>
        //                <td >number</td>
        //                <td >0-成功，负数-错误码</td>
        //            </tr>
        //        </table>

    }, {
        key: 'deletePfsFile',
        value: function deletePfsFile(info, callback) {
            if (!this._httpctrl) {
                this._httpctrl = new _httpController2.default();
            }
            if (this._httpctrl) {
                this._httpctrl.deletePFSFile(info, callback);
            } else {
                callback && callback({
                    error: -1,
                    msg: 'HttpController error'
                });
            }
        }

        // *
        //     * 获取默认下载目录
        //     * @method getDownloadDir
        //     * @return {string}  'D:/RecordDownloads'

    }, {
        key: 'getDownloadDir',
        value: function getDownloadDir() {
            if (!this._httpctrl) {
                this._httpctrl = new _httpController2.default();
            }
            if (this._httpctrl) {
                return this._httpctrl.getDownloadDir();
            } else {
                return '';
            }
        }
        // *
        //     * 设置默认下载目录
        //     * @method setDownloadDir
        //     * @param {string} info  文件夹全路径
        //     * @param {function} callback 结果回调 function(reslut){}
        //     	<table class="params table table-striped">
        //        	<tr>
        //          		<th >reslut子项</th>
        //                <th>类型</th>
        //                <th>描述</th>
        //            </tr>
        //            <tr >
        //                <td >error</td>
        //                <td >number</td>
        //                <td >0-成功，负数-错误码</td>
        //            </tr>
        //        </table>

    }, {
        key: 'setDownloadDir',
        value: function setDownloadDir(info, callback) {
            if (this._httpctrl) {
                this._httpctrl.setDownloadDir(info, callback);
            } else {
                callback && callback({
                    error: -1,
                    msg: 'HttpController error'
                });
            }
        }
        // *
        //     * 查询是否有文件夹的写权限
        //     * @method isDirectoryWriteable
        //     * @param {string} info  文件夹全路径
        //     * @param {function} callback 结果回调 function(reslut){}
        //     	<table class="params table table-striped">
        //        	<tr>
        //          		<th >reslut子项</th>
        //                <th>类型</th>
        //                <th>描述</th>
        //            </tr>
        //            <tr >
        //                <td >error</td>
        //                <td >number</td>
        //                <td >0-可写，负数-不可写，错误码</td>
        //            </tr>
        //        </table>

    }, {
        key: 'isDirectoryWriteable',
        value: function isDirectoryWriteable(info, callback) {
            if (!this._httpctrl) {
                this._httpctrl = new _httpController2.default();
            }
            if (this._httpctrl) {
                this._httpctrl.isDirectoryWriteable(info, callback);
            } else {
                callback && callback({
                    error: -1,
                    msg: 'HttpController error'
                });
            }
        }
        /** 
         * 开启语音对讲功能
         * @method startTalkback
         * @param {object} info  
         * @param {string} info.device 'pvg67' 'pvgplus'
         * @param {string} info.ip  pvg服务器ip
         * @param {number} info.port  pvg服务器端口   
         * @param {string} info.user  pvg服务器用户名
         * @param {string} info.password  pvg服务器密码
         * @param {string} info.channel  语音对讲通道av
         * @param {number} info.mode  1 - 监听；2 - 喊话；3 - 对讲
         * @param {function} callback 结果回调 function(reslut){}
         	<table class="params table table-striped">
            	<tr>
              		<th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >0-成功，负数-错误码</td>
                </tr>
            </table>
         */

    }, {
        key: 'startTalkback',
        value: function startTalkback(info, callback) {
            if (!this._websocketctrl) {
                this._createWebsocketctrl(info.wsurl);
            }
            if (this._websocketctrl) {
                this._websocketctrl.startTalkback(info, callback);
            } else {
                callback && callback({
                    error: -1,
                    msg: 'HttpController error'
                });
            }
        }

        /** 
         * 停止语音对讲功能
         * @method stopTalkback
         * @param {object} info  
         * @param {string} info.device 'pvg67' 'pvgplus'
         * @param {string} info.ip  pvg服务器ip
         * @param {number} info.port  pvg服务器端口   
         * @param {string} info.user  pvg服务器用户名
         * @param {string} info.password  pvg服务器密码
         * @param {string} info.channel  语音对讲通道av
         * @param {function} callback 结果回调 function(reslut){}
         	<table class="params table table-striped">
            	<tr>
              		<th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >0-成功，负数-错误码</td>
                </tr>
            </table>
         */

    }, {
        key: 'stopTalkback',
        value: function stopTalkback(info, callback) {
            if (!this._websocketctrl) {
                this._createWebsocketctrl(info.wsurl);
            }
            if (this._websocketctrl) {
                this._websocketctrl.stopTalkback(info, callback);
            } else {
                callback && callback({
                    error: -1,
                    msg: 'createWebsocketctrl error'
                });
            }
        }

        /** 
         * 获取语音对讲状态
         * @method getTalkbackMode
         * @param {object} info  
         * @param {string} info.device 'pvg67' 'pvgplus'
         * @param {string} info.ip  pvg服务器ip
         * @param {number} info.port  pvg服务器端口   
         * @param {string} info.user  pvg服务器用户名
         * @param {string} info.password  pvg服务器密码
         * @param {string} info.channel  语音对讲通道av
         * @param {function} callback 结果回调 function(reslut){}
         	<table class="params table table-striped">
            	<tr>
              		<th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >0-成功，负数-错误码</td>
                </tr>
                <tr >
                    <td >mode</td>
                    <td >number</td>
                    <td >0-未开启，1-监听， 2-喊话， 3-对讲</td>
                </tr>
            </table>
         */

    }, {
        key: 'getTalkbackMode',
        value: function getTalkbackMode(info, callback) {
            if (!this._websocketctrl) {
                this._createWebsocketctrl(info.wsurl);
            }
            if (this._websocketctrl) {
                this._websocketctrl.getTalkbackMode(info, callback);
            } else {
                callback && callback({
                    error: -1,
                    msg: 'createWebsocketctrl error'
                });
            }
        }

        /**
         * 对象查询
         * @method listObject 
         * @param {object} info info 查询的对象信息
         * @param {string} info.devicetype 设备类型，仅'pvg67' 'pvgplus' 
         * @param {string} info.ip 	服务器ip 
         * @param {number} info.port 服务器端口
         * @param {string} info.user 用户名 
         * @param {string} info.password 密码
         * @param {number} info.objtype 对象的类型
         *  <br></br>typedef enum
        *  <br></br>{
        *	<br></br>	NPNET_TYPE_UNKNOWN		= 0,		///< 列举全部
        *	<br></br>	NPNET_TYPE_SERVER		= 0x0001,	///< 关联服务器
        *	<br></br>	NPNET_TYPE_GATEWAY		= 0x0002,	///< 网关服务器, pvg+不支持
        *	<br></br>	NPNET_TYPE_DEVICE		= 0x0004,	///< 接入设备
        *	<br></br>	NPNET_TYPE_CAMERA		= 0x0010,	///< 摄像头
        *	<br></br>	NPNET_TYPE_MONITOR		= 0x0020,	///< 监视器
        *	<br></br>	NPNET_TYPE_AUDIO		= 0x0040,	///< 对讲通道
        *	<br></br>	NPNET_TYPE_TRUNKIN		= 0x0100,	///< 输入干线, pvg+不支持
        *	<br></br>	NPNET_TYPE_TRUNKOUT 	= 0x0200,	///< 输出干线, pvg+不支持
        *	<br></br>	NPNET_TYPE_ALARMIN		= 0x1000,	///< 报警输入
        *	<br></br>	NPNET_TYPE_ALARMOUT		= 0x2000,   ///< 报警输出
        *	<br></br>} NPObjectType;
        * @param {function} callback 结果回调 function(reslut){}
         	<table class="params table table-striped">
            	<tr>
              		<th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >0-成功，负数-错误码</td>
                </tr>
                <tr >
                    <td >info</td>
                    <td >string|object</td>
                    <td >返回对象信息</td>
                </tr>
                <tr >
                    <td >info.objtype</td>
                    <td >number</td>
                    <td >对象的类型</td>
                </tr>
                <tr >
                    <td >info.objinfo</td>
                    <td >object</td>
                    <td >对象信息，json对象 
                    	<br></br>NPNET_TYPE_GATEWAY 网关类型，属性值如下：<br></br> 
        	name : 网关名称 
        	title : 网关标题 
        	maxVod : 最大点播路数 
        	disableEvent : 是否禁用事件传输，1 - 禁用事件传输；0 - 不禁用事件伟输 
        	<br></br>NPNET_TYPE_DEVICE 设备类型，属性值如下：<br></br> 
        	name : 设备名称 
        	title : 设备标题 
        	url : 设备地址，格式：“组件名:设备IP:设备端口/password=设备密码&username=设备用户名”，如：hikhost:192.168.106.140:8000/password=12345&username=admin 
        	<br></br>NPNET_TYPE_CAMERA 通道类型，属性值如下： <br></br>
        	name : 通道名称(播放时参数) 
        	title : 通道标题 
        	path : 通道所在路径（通常用来组织目录结构） 
        	level : 通道等级（与用户等级相关联） 
        	avType : 通道类型，0－支持云台；1－不支持云台；其它－未使用 
        	host : 通道所属设备名称 
        	addr : 通道对应设备上的通道号 
        	<br></br>NPNET_TYPE_MONITOR 监视器类型，属性值如下： <br></br>
        	name : 监视器名称 
        	title : 监视器标题 
        	<br></br>NPNET_TYPE_AUDIO 对讲通道类型，属性值如下：<br></br> 
        	name : 对讲通道名称 
        	title : 对讲通道标题 
        	hostUrl : 对讲通道所属设备 
        	addr : 对讲通道所在设备的通道号 
        	audioin : 对讲输入 
        	audioout : 对讲输出 
        	<br></br>NPNET_TYPE_TRUNKIN 输入干线类型，属性值如下： <br></br>
        	name : 输入干线名称 
        	title : 输入干线标题 
        	gateway : 主机名 
        	channel : 通道号 
        	<br></br>NPNET_TYPE_TRUNKOUT 输出干线类型，属性值如下： <br></br>
        	name : 输出干线名称 
        	<br></br>NPNET_TYPE_ALARMIN 报警输入类型，属性值如下： <br></br>
        	name : 报警输入名称 
        	title : 报警输入标题 
        	<br></br>NPNET_TYPE_ALARMOUT 报警输出类型，属性值如下： <br></br>
        	name : 报警输出名称 
        	title : 报警输出标题 
        	hostUrl : 报警输出设备地址 
        	addr : 报警输出所在设备通道号 
        	devId : 模拟设备ID 
        	devPort : 模拟设备通道号 
        </td>
                </tr>
                <tr >
                    <td >info.objstatus</td>
                    <td >object</td>
                    <td >摄像头在线状态，json数组，与objinfo对应，0为在线，负数为不在线错误码</td>
                </tr>
            </table>
         * @return {boolean} true 成功  false 错误
         */

    }, {
        key: 'listObject',
        value: function listObject(info, callback) {
            if (!this._websocketctrl) {
                this._createWebsocketctrl(info.wsurl);
            }
            if (this._websocketctrl) {
                return this._websocketctrl.listObject(info, callback);
            }
            return false;
        }

        /**
         * 查询录像
         * @method queryRecord 
         * @param {object} info info 通道信息
         * @param {string} info.devicetype 设备类型，仅'pvg67' 'pvgplus' 
         * @param {string} info.ip 	服务器ip 
         * @param {number} info.port 服务器端口
         * @param {string} info.user 用户名 
         * @param {string} info.password 密码
         * @param {string} info.channel 通道名称
        * @param {string} info.begintime 开始时间，格式'2018-07-23 08:13:58.000'或'20180723081358000'
         * @param {string} info.endtime 结束时间
         * @param {number} info.vod 录像深度，0-服务器录像 1~255 -设备录像        
         * @param {function} callback 结果回调 function(reslut){}
         	<table class="params table table-striped">
            	<tr>
              		<th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >0-成功，负数-错误码</td>
                </tr>
                <tr >
                    <td >info</td>
                    <td >array|string</td>
                    <td >录像段信息，json数组，含每段的begintime和endtime</td>
                </tr>
            </table>
         * @return {boolean} true 成功  false 错误
         */

    }, {
        key: 'queryRecord',
        value: function queryRecord(info, callback) {
            if (!this._websocketctrl) {
                this._createWebsocketctrl(info.wsurl);
            }
            if (this._websocketctrl) {
                return this._websocketctrl.queryRecord(info, callback);
            }
            return false;
        }

        /**
         * 开启服务器录像
         * @method startServerRecord 
         * @param {object} info info 通道信息
         * @param {string} info.devicetype 设备类型，仅'pvg67' 'pvgplus' 
         * @param {string} info.ip 	服务器ip 
         * @param {number} info.port 服务器端口
         * @param {string} info.user 用户名 
         * @param {string} info.password 密码
         * @param {string} info.channel 通道名称
         * @param {function} callback 结果回调 function(reslut) 
         	<table class="params table table-striped">
            	<tr>
              		<th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >0-成功，负数-错误码</td>
                </tr>
            </table>
         * @return {boolean} true 成功  false 错误
         */

    }, {
        key: 'startServerRecord',
        value: function startServerRecord(info, callback) {
            if (!this._websocketctrl) {
                this._createWebsocketctrl(info.wsurl);
            }
            if (this._websocketctrl) {
                return this._websocketctrl.startServerRecord(info, callback);
            }
            return false;
        }
        /**
         * 关闭服务器录像
         * @method stopServerRecord 
         * @param {object} info info 通道信息
         * @param {string} info.devicetype 设备类型，仅'pvg67' 'pvgplus' 
         * @param {string} info.ip 	服务器ip 
         * @param {number} info.port 服务器端口
         * @param {string} info.user 用户名 
         * @param {string} info.password 密码
         * @param {string} info.channel 通道名称
         * @param {function} callback 结果回调 function(reslut) 
         	<table class="params table table-striped">
            	<tr>
              		<th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >0-成功，负数-错误码</td>
                </tr>
            </table>
         * @return {boolean} true 成功  false 错误
         */

    }, {
        key: 'stopServerRecord',
        value: function stopServerRecord(info, callback) {
            if (!this._websocketctrl) {
                this._createWebsocketctrl(info.wsurl);
            }
            if (this._websocketctrl) {
                return this._websocketctrl.stopServerRecord(info, callback);
            }
            return false;
        }

        /**
         * 播放参数加密方式，默认0不加密
         * @property desEncodeType
         * @type {number} 0:不加密，1:des加密，其他未使用
         */

    }, {
        key: 'play',


        /**
         * 播放视频
         * @method play
         * @param {number} index 窗口序号
         * @param {object} src src 视频源信息
         * @param {string} src.devicetype 设备类型 'pvg67' 'pvgplus' 'rtsp' 'pfsfile' 'native'
         * @param {string} src.streamtype  直播（实时流）：'live'；点播（录像）：'vod'
         * @param {string} src.title 视频名称，显示到工具条的VideoTitle上
         * @param {number} src.desencode 加密方式，0：不加密，1：DES加密；；没有此项时以初始化设置的desEncodeType为准。
         * <br></br> 加密项 pvg67/pvgplus :ip、user、password、channel、ticket; rtsp的user、password、url
         * @param {string} src.ip 服务器ip，pvg67和pvgplus必含此项
         * @param {number} src.port 服务器端口，pvg67和pvgplus必含此项
         * @param {string} src.user 服务器用户名，pvg67和pvgplus必含此项，rtsp可含此项
         * @param {string} src.password 服务器密码，pvg67和pvgplus必含此项，rtsp可含此项
         * @param {string} src.channel 服务器上的通道，pvg67和pvgplus必含此项
         * @param {number} src.vod 录像深度，0为服务器录像，1-255为设备录像，pvg67和pvgplus的录像必此项
         * @param {string} src.begintime 录像开始时间，格式"2018-08-10 09:45:00.000"、"20180810094500000" pvg67和pvgplus的录像必此项
         * @param {string} src.endtime 录像结束时间，pvg67和pvgplus的录像必此项
         * @param {string} src.url 播放url信息，rtsp、pfsfile、native必含此项
         * @param {number} src.frametype 特殊帧类型，0为普通帧、1为威目视频帧，需要检测实时目标信息，rtsp直播流可此项
         * <br></br> 参数示例：
         * <br></br>PVG实时流：{devicetype:"pvg67", streamtype:"live", desencode:0, ip:"192.168.60.174", port:2100, user:"admin", password:"admin", channel:"av/ytfj/hik", title:"海康高清球机_PTZ_REC"}
         * <br></br>PVG录像：{devicetype:"pvg67", streamtype:"vod", desencode:0, ip:"192.168.60.174", port:2015, user:"admin", password:"admin", channel:"av/ytfj/hik", title:"海康高清球机_PTZ_REC", vod:0, begintime:"2018-08-10 08:45:00.000", endtime:"2018-08-10 09:45:00.000"}
         * <br></br>RTSP直播：{devicetype:"rtsp", streamtype:"live", desencode:0, url:"rtsp://admin:DFwl123456@192.168.61.194:554", frametype:0, title:"海康高清球机_PTZ_REC"}
         * <br></br>HTTP的MP4文件：{devicetype:"native", streamtype:"vod", url:"http://127.0.0.1/001.mp4", title:"海康高清球机_PTZ_REC"}
         * <br></br>PFS文件或本地文件：{devicetype:"pfsfile", streamtype:"vod", desencode:0, url:"NPFS:192.168.60.55:9000/username=admin&password=admin#/video/6D5DF9BE-9C95-4D0E-9F67-312BA37E8E62.MBF", title:"海康高清球机_PTZ_REC"}
         * <br></br>pvgplus的参数于pvg67相同
         * @param {object} callbacks callbacks 播放状态及消息的回调
         * @param {function} callbacks.onerror 播放中出现错误的回调 function(type, detail, info)
         * <br></br>  onerror中发的type：
         * <br></br>  'NetworkError'  H5VP与后台服务连接错误
         * <br></br>  'MediaError'    video标签报错
         * <br></br>  'StreamError'   后台服务中开流报错
         * @param {function} callbacks.onnotify 播放中状态等的回调 function(type, detail)
         * <br></br>  onnotify中发的type：
         * <br></br>  'loading_complete'        录像流加载完成(非播放结束)
         * <br></br>  'streamstart'             开流动作成功
         * <br></br>  'firstcanplay'            解码到第一帧
         * <br></br>  'speedchange'             播放速度改变
         * <br></br>  'pause'                   暂停播放
         * <br></br>  'play'                    恢复播放
         * <br></br>  'seek'                    发生定位播放
         * <br></br>  'segmentplay_complete'    片段播放完成
         * <br></br>  'segmentplay_cancel'      定位越界取消片段播放
         * @param {function} callbacks.onplaytime 播放时间回调 function(currentTime)
         * @return {boolean} true 成功  false 错误
         */
        value: function play(index, src, callbacks) {
            var _index = parseInt(index);
            if (!src || _index < 0 || _index >= this.videos.length || !this.videos[_index] || (typeof src === 'undefined' ? 'undefined' : _typeof(src)) !== 'object') {
                this._showDebuggInfo('play() param error!');
                return false;
            }
            if (this.opt.desEncodeType) {
                if (typeof src.desencode === 'undefined') {
                    src.desencode = 1;
                }
            }
            var wsurl = src.wsurl || this.opt.wsurl;
            // console.log(src);
            return this.videos[_index].startVideo(src, callbacks, wsurl);
        }

        /**
         * 暂停及恢复
         * @method pause
         * @param {number} index 窗口序号
         * @param {boolean} bpause true-暂停 false-恢复
         * @return {boolean} true-成功  false-错误
         */

    }, {
        key: 'pause',
        value: function pause(index, bpause) {
            var _index = parseInt(index);
            if (_index < 0 || _index >= this.videos.length || !this.videos[_index] || typeof bpause !== 'boolean') {
                this._showDebuggInfo('pause() param error!');
                return false;
            }
            if (bpause) {
                return this.videos[_index].pause();
            } else {
                return this.videos[_index].play();
            }
        }

        /**
         * 单帧播放
         * @method stepPlay
         * @param {number} index 窗口序号
         * @return {boolean} true-成功  false-错误
         */

    }, {
        key: 'stepPlay',
        value: function stepPlay(index) {
            var _index = parseInt(index);
            if (_index < 0 || _index >= this.videos.length || !this.videos[_index]) {
                this._showDebuggInfo('stepPlay() param error!');
                return false;
            }
            return this.videos[_index].singleFramePlay();
        }

        /**
        * 片段播放
        * @method segmentPlay
        * @param {number} index 窗口序号
        * @param {number} start 开始时间
        * @param {number} end 结束时间
        * @param {boolean} loop 是否循环
        * @return {boolean} true-成功  false-错误
        */

    }, {
        key: 'segmentPlay',
        value: function segmentPlay(index, start, end, loop) {
            var _index = parseInt(index);
            if (_index < 0 || _index >= this.videos.length || !this.videos[_index]) {
                this._showDebuggInfo('segmentPlay() param error!');
                return false;
            }
            return this.videos[_index].segmentPlay(start, end, loop);
        }

        /**
         * 获取当前播放时间
         * @method getPlayTime
         * @param {number} index 窗口序号
         * @return {number} 当前播放时间，单位秒
         */

    }, {
        key: 'getPlayTime',
        value: function getPlayTime(index) {
            var _index = parseInt(index);
            if (_index < 0 || _index >= this.videos.length || !this.videos[_index]) {
                this._showDebuggInfo('getPlayTime() param error!');
                return 0;
            }
            return this.videos[_index].getPlayTime();
        }

        /**
         * 停止播放
         * @method stop
         * @param {number} index 窗口序号
         * @return {boolean} true-成功  false-错误
         */

    }, {
        key: 'stop',
        value: function stop(index) {
            var _index = parseInt(index);
            if (_index < 0 || _index >= this.videos.length || !this.videos[_index]) {
                return false;
            }
            return this.videos[_index].stopVideo();
        }

        /**
         * 视频抓图
         * @method capturePicture
         * @param {number} index 窗口序号
         * @param {string} type 抓图后返回图片类型，可以是 png jpeg gif bmp
         * @param {number} w  图片的宽度 无w、h-》默认为原始  w>0&&h<=0 根据w压缩图片 w<=0&&h>0 根据h压缩图片
         * @param {number} h  图片的高度
         * @return {string} 失败返回空字符串"",成功返回抓图的图片信息
         */

    }, {
        key: 'capturePicture',
        value: function capturePicture(index, type, w, h) {
            var _index = parseInt(index);
            if (_index < 0 || _index >= this.videos.length || !this.videos[_index]) {
                this._showDebuggInfo('capturePicture() param error!');
                return '';
            }
            return this.videos[_index].capturePicture(type, w, h);
        }

        /**
         * 视频连拍
         * @method continuousShooting
         * @param {number} index 窗口序号
         * @param {string} type  图片类型，可以是 png jpeg gif bmp
         * @param {number} count 连拍数量
         * @param {function} callback 连拍结果回调 参数(number, data), number >= 0，表示第几张图，data为数据; number<0表示错误，data为错误信息
         * @param {number} w  图片的宽度 无w、h-》默认为原始  w>0&&h<=0 根据w压缩图片 w<=0&&h>0 根据h压缩图片
         * @param {number} h  图片的高度
         * @return {bool} 是否成功
         */

    }, {
        key: 'continuousShooting',
        value: function continuousShooting(index, type, count, callback, w, h) {
            var _index = parseInt(index),
                _count = parseInt(count);
            if (_count <= 0 || _index < 0 || _index >= this.videos.length || !this.videos[_index] || typeof callback != 'function') {
                this._showDebuggInfo('continuousShooting() param error!');
                return false;
            }
            return this.videos[_index].continuousShooting(type, _count, callback, w, h);
        }

        /**
         * 播放时背景色，默认'#000'
         * @property backgroundColor
         * @type {string}  颜色 '#fff' 'rgb()' 'rgba()' 'red'，因浏览器兼容性问题，建议保持默认色
         */

    }, {
        key: 'setFilter',

        /**
         * 设置某分屏的视频滤镜：亮度、对比度、饱和度、色调、灰度、反色、透明度、褐色程度
         * @method setFilter
         * @param {number} index 窗口序号
         * @param {object} obj 滤镜对象
         * @param {number} obj.bright 亮度值 0-100的数字表示 50表示正常 50-->100:越来越亮 50-->0:越来越暗
         * @param {number} obj.contrast 对比度 0-100的数字表示 50表示正常 50-->100:更低的对比 50-->0:更高的对比
         * @param {number} obj.saturate 饱和度 0-100的数字表示 50表示正常 50-->100:更高的饱和度 50-->0:更低的饱和度
         * @param {number} obj.tone 色调 0-100的数字表示 50表示正常
         * @param {number} obj.gray 灰度 0-100的数字表示 50表示正常
         * @param {number} obj.invert 反色 0-100的数字表示 50表示正常
         * @param {number} obj.opacity 透明度 0-100的数字表示 50表示正常
         * @param {number} obj.sepia 褐色程度 0-100的数字表示 50表示正常
         */
        value: function setFilter(index, obj) {
            var _index = parseInt(index);
            if (_index < 0 || _index >= this.videos.length || !this.videos[_index]) {
                this._showDebuggInfo('setFilter() param error!');
                return '';
            }
            this.videos[_index].setFilter(obj);
        }
        /**
         * 获取某分屏的视频滤镜：亮度、对比度、饱和度、色调、灰度、反色、透明度、褐色程度
         * @method getFilter
         * @param {number} index 窗口序号
         * @return {object} 滤镜对象，{blur: 50, bright: 50, contrast: 50, gray: 50, invert: 50, opacity: 50, saturate: 50, sepia: 50, tone: 50}
         */

    }, {
        key: 'getFilter',
        value: function getFilter(index) {
            var _index = parseInt(index);
            if (_index < 0 || _index >= this.videos.length || !this.videos[_index]) {
                this._showDebuggInfo('getFilter() param error!');
                return '';
            }
            return this.videos[_index].getFilter();
        }
        /**
         * 播放时是否显示loading动画，默认true
         * @property enableLoadingGif
         * @type {boolean}  true-显示 false-不显示
         */

    }, {
        key: '_getLayoutmargin',
        value: function _getLayoutmargin(obj) {
            var _obj = null;
            if (typeof obj === 'number' || typeof obj === 'string') {
                var _margin = parseInt(_obj);
                _margin = _margin >= 0 ? _margin : 0;
                _obj = {
                    marginX: _margin,
                    marginY: _margin
                };
            } else if (typeof obj === 'undefined' || obj === null) {
                _obj = {
                    marginX: 0,
                    marginY: 0
                };
            } else if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
                if (obj.margin) {
                    var _margin2 = parseInt(obj.margin);
                    _margin2 = _margin2 >= 0 ? _margin2 : 0;
                    _obj = {
                        marginX: _margin2,
                        marginY: _margin2
                    };
                }
                if (obj.marginX) {
                    var _margin3 = parseInt(obj.marginX);
                    _margin3 = _margin3 >= 0 ? _margin3 : 0;
                    _obj = {
                        marginX: _margin3,
                        marginY: this.layoutmargin.marginY
                    };
                }
                if (obj.marginY) {
                    var _margin4 = parseInt(obj.marginY);
                    _margin4 = _margin4 >= 0 ? _margin4 : 0;
                    _obj = {
                        marginX: this.layoutmargin.marginX,
                        marginY: _margin4
                    };
                }
            }
            return _obj;
        }
    }, {
        key: '_setLayoutmargin',
        value: function _setLayoutmargin(obj) {
            this.opt.layoutmargin = obj;
            this.styleArr = this._getAllVideoStyleByLayout();
            for (var i = 0, len = this.layoutcount; i < len; i++) {
                // 设置video的大小、位置
                var positonObj = this._getVideoStyleByLayout(i);
                if (!positonObj) {
                    return;
                }
                if (this.maxScreenIndex === i) {
                    this.videos[i].setPosition(0, 0, this.opt.width, this.opt.height);
                } else {
                    this.videos[i].setPosition(positonObj.top, positonObj.left, positonObj.width, positonObj.height);
                }
            }
        }
    }, {
        key: '_setLayout',
        value: function _setLayout(obj) {
            var oldlayoutcount = this.layoutcount,
                oldlayout = this.opt.layout;
            this.opt.layout = obj;
            this.styleArr = this._getAllVideoStyleByLayout();
            if (this.layoutcount < oldlayoutcount) {
                //当要设置的分屏数目小于之前的分屏数目时，需要将多出的分屏的视频关掉，同时改变每个未关闭分屏的高宽
                for (var i = oldlayoutcount - 1; i > -1; i--) {
                    if (i > this.layoutcount - 1) {
                        // 第一步：删除多余的video的DOM元素
                        var _videoC = this.videos[i].vOpt.videoC;
                        _videoC.parentNode.removeChild(_videoC);
                        // 第二步：将要删除分屏的数据从this.videos中清除
                        this.videos[i].destroy();
                        this.videos.splice(i, 1);
                    } else {
                        // 第三步：设置未被删除的video的高宽、分屏数
                        var _style = this._getVideoStyleByLayout(i);
                        this.videos[i].setPosition(_style.top, _style.left, _style.width, _style.height);
                        this.videos[i].setMax('origin');
                        this.maxScreenIndex = -1;
                    }
                }
                //若当前的焦点窗口大于分屏数，则将第一个窗口作为新的焦点窗口
                if (this.nFocusIndex >= this.layoutcount) {
                    this._setFocusIndex(0);
                }
                this._emitter.emit(_NPPlayerEvent2.default.OnLayoutChange, oldlayoutcount, this.layoutcount);
            } else if (this.layoutcount > oldlayoutcount) {
                //当要设置的分屏数目大于之前的分屏数目时，需要多初始化Video对象，同时改变所有分屏的高度
                var _optOrginal = {};
                _tool.Toolkit.deepMerge(_optOrginal, this.opt);
                var _fatherEle = _optOrginal.ele,
                    _optAfter = {};
                _tool.Toolkit.deepMerge(_optAfter, _optOrginal);
                delete _optAfter.ele;
                for (var _i = 0; _i < this.layoutcount; _i++) {
                    var _positonObj = this._getVideoStyleByLayout(_i);
                    if (!_positonObj) {
                        console.warn('should not be here!');
                        return;
                    }
                    if (_i >= oldlayoutcount) {
                        var _uuid = _tool.Toolkit.getUuid(),
                            _video = new _NPVideo2.default(_tool.Toolkit.deepMerge(_optAfter, {
                            ele: 'npvideo-' + _uuid,
                            uuid: _uuid,
                            index: _i,
                            fatherEle: _fatherEle,
                            playerC: this.playerC,
                            width: _positonObj.width,
                            height: _positonObj.height,
                            left: _positonObj.left,
                            top: _positonObj.top
                        }));
                        //监听事件并抛出去
                        this.listenAndEmitEvent(_video);
                        this.videos.push(_video);
                    } else {
                        this.videos[_i].setPosition(_positonObj.top, _positonObj.left, _positonObj.width, _positonObj.height);
                        this.videos[_i].setMax('origin');
                        this.maxScreenIndex = -1;
                    }
                }
                this._emitter.emit(_NPPlayerEvent2.default.OnLayoutChange, oldlayoutcount, this.layoutcount);
            } else {
                for (var _i2 = 0; _i2 < this.layoutcount; _i2++) {
                    var _positonObj2 = this._getVideoStyleByLayout(_i2);
                    if (!_positonObj2) {
                        console.warn('should not be here!');
                        return;
                    }
                    this.videos[_i2].setPosition(_positonObj2.top, _positonObj2.left, _positonObj2.width, _positonObj2.height);
                    this.videos[_i2].setMax('origin');
                    this.maxScreenIndex = -1;
                }
            }
        }

        /**
         * 移动布局窗口
         * @method moveLayoutWindow
         * @param {object|number} obj number时同obj.step
         * @param {number} obj.step  >0:向前移动step <0:向后移动step；移出的窗口自动补到后面，不会关闭窗口上的视频
         * @return {boolean} true-成功  false-失败
         */

    }, {
        key: 'moveLayoutWindow',
        value: function moveLayoutWindow(obj) {
            var _step = 0;
            if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
                _step = parseInt(obj.step);
            } else {
                _step = parseInt(obj);
            }
            var _length = this.videos ? this.videos.length : 0;
            if (_step === 0 || _length === 0) {
                return true;
            } else if (_step <= 0 - _length || _step >= _length) {
                return false;
            }
            if (_step > 0) {
                while (_step-- > 0) {
                    this.videos.push(this.videos.shift());
                }
            } else {
                while (_step++ < 0) {
                    this.videos.unshift(this.videos.pop());
                }
            }
            this._setLayout(this.opt.layout);
            for (var i = 0; i < _length; i++) {
                this.videos[i].setAttributeIndex(i);
            }
            return true;
        }

        /**
         * 视频窗口数
         * @property layoutCount
         * @type {number}
         */

    }, {
        key: '_setFocusIndex',
        value: function _setFocusIndex(index) {
            for (var i = 0, length = this.videos.length; i < length; i++) {
                this.videos[i].setFocusIndex(i === index);
            }
            var oldFocusIndex = this.nFocusIndex;
            this.nFocusIndex = index;
            if (oldFocusIndex != this.nFocusIndex) {
                this._historyTimeAxisFocusChange(oldFocusIndex, this.nFocusIndex);
                this._emitter.emit(_NPPlayerEvent2.default.OnFocusChange, oldFocusIndex, this.nFocusIndex);
            }
            return true;
        }

        /**
         * 检测index是否为焦点窗口
         * @method isFocusIndex
         * @param {number} index 窗口序号
         * @return {boolean} true-是  false-不是
         */

    }, {
        key: 'isFocusIndex',
        value: function isFocusIndex(index) {
            var _index = parseInt(index);
            if (_index < 0 || _index > this.videos.length || !this.videos[_index]) {
                return false;
            }
            return _index == this.nFocusIndex;
        }
        /**
         * 把指定窗口设置为最大窗口
         * @method setWindowMaximum
         * @param {number} index 窗口序号
         * @return {boolean} true-成功  false-错误
         */

    }, {
        key: 'setWindowMaximum',
        value: function setWindowMaximum(index) {
            var _index = parseInt(index);
            if (_index < 0 || _index > this.videos.length || !this.videos[_index]) {
                return false;
            }
            for (var i = 0, length = this.videos.length; i < length; i++) {
                if (_index === i) {
                    //设置成最大分屏
                    this.videos[i].vOpt.videoC.classList.add('max-screen');
                    this.videos[i].setMax('big');
                    this.maxScreenIndex = _index;
                    if (this._isFullScreen) {
                        this.videos[i].setPosition(0, 0, this.WinScreenWidth + 'px', this.WinScreenHeight + 'px');
                    } else {
                        this.videos[i].setPosition(0, 0, this.opt.width, this.opt.height);
                    }
                } else {
                    //还原成原来的分屏尺寸并隐藏
                    this.videos[i].vOpt.videoC.classList.remove('max-screen');
                    var _style = this._getVideoStyleByLayout(i);
                    this.videos[i].setPosition(_style.top, _style.left, _style.width, _style.height);
                    this.videos[i].setMax('hide');
                }
            }

            if (this.maxScreenIndex != this.nFocusIndex) {
                this._setFocusIndex(this.maxScreenIndex);
            }
            return true;
        }

        /**
         * 把指定窗口还原为正常大小即退出最大化
         * @method setWindowRestore
         * @param {number} index 窗口序号
         * @return {boolean} true-成功  false-错误
         */

    }, {
        key: 'setWindowRestore',
        value: function setWindowRestore(index) {
            var _index = parseInt(index);
            if (_index < 0 || _index > this.videos.length || !this.videos[_index]) {
                return false;
            }
            //若指定的index窗口已经是最大化窗口，则还原; 否则保持不变
            if (_index === this.maxScreenIndex) {
                for (var i = 0, length = this.videos.length; i < length; i++) {
                    if (_index === i) {
                        var _style = this._getVideoStyleByLayout(i);
                        this.videos[i].setPosition(_style.top, _style.left, _style.width, _style.height);
                    }
                    this.videos[i].setMax('origin'); //还原其他
                    this.videos[i].vOpt.videoC.classList.remove('max-screen');
                }
                this.maxScreenIndex = -1;
            }
            return true;
        }

        //设置最大化窗口切换

    }, {
        key: '_toggleMaxScreen',
        value: function _toggleMaxScreen(index) {
            //若双击的窗口已经是最大化窗口，则还原；否则去放大该窗口，同时将其他窗口隐藏
            //console.log("_toggleMaxScreen("+index+","+this.maxScreenIndex+")");
            if (index === this.maxScreenIndex) {
                this.setWindowRestore(index);
            } else {
                this.setWindowMaximum(index);
            }
        }

        /**
         * 获取最大窗口
         * @property maxWindowIndex
         * @type {number}
         */

    }, {
        key: 'setBackgroundImage',


        /**
         * 设置单窗口背景图
         * @method setBackgroundImage
         * @param {number} index 窗口序号
         * @param {string} imgUrl 背景图class ''表示使用默认背景，可用于设置失败、离线等背景图
         * @return {boolean} true-成功  false-错误
         */
        value: function setBackgroundImage(index, imgUrl) {
            var _index = parseInt(index);
            if (_index < 0 || _index > this.videos.length || !this.videos[_index]) {
                return false;
            }
            return this.videos[_index].setBgImg(imgUrl);
        }

        /**
         * 默认窗口背景图
         * @property defaultBackground
         * @type {string} imgUrl 默认背景图class
         */

    }, {
        key: 'isBusyIndex',


        /**
         * 获取指定的窗口是否在播放视频
         * @method isBusyIndex
         * @param {number} index 窗口序号
         * @return {boolean} true-在播放  false-空闲
         */
        value: function isBusyIndex(index) {
            var _index = parseInt(index);
            if (_index < 0 || _index > this.videos.length || !this.videos[_index]) {
                return false;
            }
            return this.videos[_index].getIdleOrBusy() || false;
        }

        /**
         * 获取指定的窗口的位置信息
         * @method getWindowRect
         * @param {number} index 窗口序号
         * @return {object} null或{width:'6px',height:'6px',left:'7px',top:'7px'}
         */

    }, {
        key: 'getWindowRect',
        value: function getWindowRect(index) {
            var _index = parseInt(index);
            if (_index < 0 || _index > this.videos.length || !this.videos[_index]) {
                return null;
            }
            if (this.maxScreenIndex === _index) {
                if (this._isFullScreen) {
                    return {
                        left: '0px',
                        top: '0px',
                        width: this.WinScreenWidth + 'px',
                        height: this.WinScreenHeight + 'px'
                    };
                } else {
                    return {
                        left: '0px',
                        top: '0px',
                        width: this.opt.width,
                        height: this.opt.height
                    };
                }
            }
            return this._getVideoStyleByLayout(_index);
        }
        //分屏end

        //全屏start
        /**
         * 获取是否为全屏
         * @method isFullScreen
         * @return {boolean} true-全屏  false-非全屏
         */

    }, {
        key: 'isFullScreen',
        value: function isFullScreen() {
            return this._isFullScreen || false;
        }

        /**
         * 设置为全屏 flag true-dom层面上全屏；false-调用浏览器原生全屏
         * @method setFullScreen
         * @return {boolean} true-成功  false-错误
         */

    }, {
        key: 'setFullScreen',
        value: function setFullScreen(flag) {
            var element = this.playerC;
            if (flag) {
                this.launchFullScreenStyle();
            } else {
                if (/IE9|IE10/i.test(this.browserV)) {
                    this.launchFullScreenIE11L();
                } else {
                    if (element.requestFullscreen) {
                        element.requestFullscreen();
                    } else if (element.mozRequestFullScreen) {
                        element.mozRequestFullScreen();
                    } else if (element.webkitRequestFullscreen) {
                        element.webkitRequestFullscreen();
                    } else if (element.msRequestFullscreen) {
                        element.msRequestFullscreen();
                    }
                    this.launchFullScreenStyle();
                }
            }
            this.updateFullScreenState(true);
        }

        // 全屏下视频的样式

    }, {
        key: 'launchFullScreenStyle',
        value: function launchFullScreenStyle() {
            this.playerC.style.position = 'fixed';
        }

        // 全屏下IE 11 以下视频的样式

    }, {
        key: 'launchFullScreenIE11L',
        value: function launchFullScreenIE11L() {
            var cName = this.playerC.className;
            this.playerC.className = cName + ' ie-fullscreen';
        }
        /**
         * 退出全屏 flag true-dom层面上全屏；false-调用浏览器原生全屏
         * @method exitFullscreen
         * @return {boolean} true-成功  false-错误
         */

    }, {
        key: 'exitFullscreen',
        value: function exitFullscreen(flag) {
            if (flag) {
                this.exitFullScreenStyle();
            } else {
                if (/IE9|IE10/i.test(this.browserV)) {
                    // this.isFull = true
                    this.exitFullscreenIE11L();
                } else {
                    console.log('exitFullscreen');
                    this.exitFullScreenStyle();
                    if (document.exitFullscreen) {
                        document.exitFullscreen();
                    } else if (document.mozCancelFullScreen) {
                        document.mozCancelFullScreen();
                    } else if (document.webkitExitFullscreen) {
                        document.webkitExitFullscreen();
                    } else if (document.msExitFullscreen) {
                        document.msExitFullscreen();
                    }
                }
            }
        }
    }, {
        key: 'exitFullscreenIE11L',
        value: function exitFullscreenIE11L() {
            this.updateFullScreenState(false);
            var cName = this.playerC.className;
            this.playerC.className = cName.split(' ').slice(cName.split(' ').indexOf('ie-fullscreen'), 1);
            this.playerC.style.position = 'relative';
        }

        // 关闭全屏的元素样式

    }, {
        key: 'exitFullScreenStyle',
        value: function exitFullScreenStyle() {
            //必须先将总窗体的高宽改变好，因为后续每个分屏要根据此值去计算
            this.playerC.style.position = 'relative';
            this.updateFullScreenState(false);
        }

        // 更新全屏状态  包括显示全屏相关样式

    }, {
        key: 'updateFullScreenState',
        value: function updateFullScreenState(bfull) {
            this._isFullScreen = bfull || false;
            // 设置页面是否全屏的class
            var playerClassName = this._isFullScreen ? 'h5vp-content h5vp-content-full' : 'h5vp-content';
            this.playerC.className = playerClassName;
            this.styleArr = this._getAllVideoStyleByLayout();
            for (var i = 0, length = this.videos.length; i < length; i++) {
                var _style = this._getVideoStyleByLayout(i);
                if (this.maxScreenIndex === i) {
                    if (this._isFullScreen) {
                        this.videos[i].setPosition(0, 0, this.WinScreenWidth + 'px', this.WinScreenHeight + 'px');
                    } else {
                        this.videos[i].setPosition(0, 0, this.opt.width, this.opt.height);
                    }
                } else {
                    this.videos[i].setPosition(_style.top, _style.left, _style.width, _style.height);
                }
            }

            this._historyTimeAxisSizeChange();
            if (this._isFullScreen) {
                this._emitter.emit(_NPPlayerEvent2.default.OnFullScreen);
            } else {
                this._emitter.emit(_NPPlayerEvent2.default.OnExitFullScreen);
            }
        }

        // 屏幕全屏模式改变事件  包括ie 11 以下

    }, {
        key: 'screenChangeEvent',
        value: function screenChangeEvent(element) {
            var _this = this;

            if (/IE11/i.test(this.browserV)) {
                _eventUtil.EventUtil.addHandler(document, 'keydown', function (e) {
                    e = e || window.event;
                    var keyNum = e.keyCode || e.which;
                    if (keyNum === 27 && _this._isFullScreen) {
                        // ie退出全屏   这里针对的是IE11
                        _this.exitFullScreenStyle();
                    }
                });
            } else if (/IE9|IE10/i.test(this.browserV)) {
                _eventUtil.EventUtil.addHandler(document, 'keydown', function (e) {
                    e = e || window.event;
                    var keyNum = e.keyCode || e.which;
                    if (keyNum === 27 && _this._isFullScreen) {
                        // ie退出全屏   这里针对的是IE10  9
                        _this.exitFullscreenIE11L();
                    }
                });
            } else {
                var eventList = ['webkitfullscreenchange', 'mozfullscreenchange', 'fullscreenchange', 'msfullscreenchange'];

                _eventUtil.EventUtil.addHandler(document, 'keydown', function (e) {
                    e = e || window.event;
                    var keyNum = e.keyCode || e.which;
                    if (keyNum === 27 && _this._isFullScreen) {
                        // ie退出全屏   这里针对的是IE11
                        _this.exitFullScreenStyle();
                    }
                });
                for (var i = 0; i < eventList.length; i++) {
                    document.addEventListener(eventList[i], function () {
                        // 全屏显示的网页元素
                        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;

                        // 判断网页是否处于全屏状态下
                        var isFullScreen = document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen || document.msIsFullScreen;
                        if (fullscreenElement && isFullScreen) {
                            _this.launchFullScreenStyle();
                        } else {
                            _this.exitFullScreenStyle();
                        }
                    });
                }
            }
        }
        //全屏end

    }, {
        key: '_addEvent',
        value: function _addEvent() {
            this._clickEvent();
            this._dblclickEvent();
            this._dragEvent();
        }
        //获取当前事件的分屏index、DOM元素

    }, {
        key: '_getEventInfo',
        value: function _getEventInfo(event) {
            event = _eventUtil.EventUtil.getEvent(event);
            var target = _eventUtil.EventUtil.getVideoContainerTarget(event);
            if (!target) {
                return {
                    index: -1,
                    ele: null,
                    x: event.offsetX,
                    y: event.offsetY
                };
            }
            var offsetObj = _eventUtil.EventUtil.getEleToParentDistance(event.target, 'h5vp-video-container'),
                targetLeft = offsetObj.offsetLeft,
                targetTop = offsetObj.offsetTop,
                _index = parseInt(target.getAttribute('index'));
            return {
                ele: target,
                index: isFinite(_index) ? _index : -1,
                x: event.offsetX + targetLeft,
                y: event.offsetY + targetTop
            };
        }
        //单击事件

    }, {
        key: '_clickEvent',
        value: function _clickEvent() {
            var _this = this;
            _eventUtil.EventUtil.addHandler(this.playerC, 'click', function (event) {
                var index = _this._getEventInfo(event).index;
                if (index >= 0 && index < _this.videos.length) {
                    _this._setFocusIndex(index);
                    _this.videos[index].showOrHideRightMenu(false);
                    _this.videos[index].removeSelectDrawing();
                    _this._emitter.emit(_NPPlayerEvent2.default.OnWndClick, index);
                }
            });
        }
        //双击事件

    }, {
        key: '_dblclickEvent',
        value: function _dblclickEvent() {
            var _this = this;
            _eventUtil.EventUtil.addHandler(this.playerC, 'dblclick', function (event) {
                var _eventInfo = _this._getEventInfo(event),
                    index = parseInt(_eventInfo.index),
                    x = _eventInfo.x,
                    y = _eventInfo.y;
                if (index < 0 || index >= _this.videos.length) {
                    return;
                }
                var flag = _this.videos[index].isInPtzRange(x, y);
                if (!flag || flag && _this.enablePtzDoubleClick) {
                    _this._toggleMaxScreen(index);
                    _this.videos[index].isShowPtzRedArrow(true, event);
                    _this._emitter.emit(_NPPlayerEvent2.default.OnWndDClik, index);
                }
            });
        }
        //拖动交换分屏

    }, {
        key: '_dragEvent',
        value: function _dragEvent() {
            var _this = this;
            var _startInfo = null,
                _endInfo = null;
            _eventUtil.EventUtil.addHandler(this.playerC, 'dragstart', function (event) {
                _startInfo = _this._getEventInfo(event);
                if (_startInfo.index >= 0 && _startInfo.index < _this.videos.length) {
                    _this.videos[_startInfo.index].videoCMouseOverFlag = false;
                    if (_startInfo.index === _this.maxScreenIndex || !_this.enableExchangeScreen) {
                        event.preventDefault();
                        // 停止云台转动
                        _this.videos[_startInfo.index]._ptzControlByWin(0, 0);

                        return;
                    }
                }
            });
            _eventUtil.EventUtil.addHandler(this.playerC, 'dragend', function (event) {
                _this.videos[_startInfo.index].videoCMouseOverFlag = false;
                if (_startInfo && _startInfo.index >= 0 || !_this.enableExchangeScreen) {
                    // 停止云台转动
                    _this.videos[_startInfo.index]._ptzControlByWin(0, 0);
                }
            });
            _eventUtil.EventUtil.addHandler(this.playerC, 'dragover', function (event) {
                _this.videos[_startInfo.index].videoCMouseOverFlag = false;
                if (_startInfo && _startInfo.index >= 0 || !_this.enableExchangeScreen) {
                    // 停止云台转动
                    _this.videos[_startInfo.index]._ptzControlByWin(0, 0);
                }
                event.preventDefault();
            });
            _eventUtil.EventUtil.addHandler(this.playerC, 'drop', function (event) {
                _endInfo = _this._getEventInfo(event);
                if (!_endInfo || _endInfo.index < 0 || _endInfo.index >= _this.videos.length) {
                    return;
                }
                _this.videos[_endInfo.index].videoCMouseOverFlag = false;
                if (!_startInfo || _startInfo.index === _this.maxScreenIndex) {
                    return;
                }
                var _startIndex = _startInfo.index,
                    _endIndex = _endInfo.index;
                // temp = {
                // 	top: _startInfo.ele.parentNode.style.top,
                // 	left: _startInfo.ele.parentNode.style.left,
                // 	width: _startInfo.ele.parentNode.style.width,
                // 	height: _startInfo.ele.parentNode.style.height,
                // 	index: _startIndex,
                // 	videoData: _this.videos[_startIndex]
                // };
                if (_startIndex < 0 || _endIndex < 0 || _startIndex == _endIndex) {
                    return;
                }

                // 是否允许鼠标拖动交换窗口，默认允许交换
                if (_this.enableExchangeScreen) {
                    // 隐藏右键菜单
                    _this.videos[_startIndex].showOrHideRightMenu(false);
                    // 第一步: 交换DOM元素的位置(包括width、height、left、top)
                    var temp = _this._getVideoStyleByLayout(_endIndex);
                    _this.videos[_startIndex].setPosition(temp.top, temp.left, temp.width, temp.height);
                    temp = _this._getVideoStyleByLayout(_startIndex);
                    _this.videos[_endIndex].setPosition(temp.top, temp.left, temp.width, temp.height);
                    // 第二步：交换index属性
                    _this.videos[_startIndex].setAttributeIndex(_endIndex);
                    _this.videos[_endIndex].setAttributeIndex(_startIndex);
                    // 第三步: 交换video数据
                    var tempvideo = _this.videos[_startIndex];
                    _this.videos[_startIndex] = _this.videos[_endIndex];
                    _this.videos[_endIndex] = tempvideo;

                    // 停止云台转动
                    _this.videos[_endIndex]._ptzControlByWin(0, 0);

                    // 第四步：将结束窗口作为焦点窗口
                    _this._setFocusIndex(_endIndex);
                    // 交换窗口事件通知
                    _this._emitter.emit(_NPPlayerEvent2.default.OnSwitchWindow, _startIndex, _endIndex);
                } else {
                    // 未执行的窗口交换事件通知
                    _this._emitter.emit(_NPPlayerEvent2.default.OnUnexecutedSwitchWindow, _startIndex, _endIndex);
                }
                _startIndex = -1;
                _endIndex = -1;
            });
        }

        /**
         * 添加事件监听函数
         * @method addEventListener 
         * @param {string} event 
          *  <table class="params table table-striped">
                <tr>
                    <th  >事件类型</th>
                    <th >回调函数</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >OnFocusChange</td>
                    <td >target(oldfocusindex, focusindex)</td>
                    <td >焦点窗口变换时触发此事件。</td>
                </tr>
                <tr >
                    <td >OnWndClick</td>
                    <td >target(index)</td>
                    <td >窗口被点击时触发此事件。</td>
                </tr>
                <tr >
                    <td >OnWndDClik</td>
                    <td >target(index)</td>
                    <td >窗口被双击时触发此事件。</td>
                </tr>
                <tr >
                    <td >OnSwitchWindow</td>
                    <td >target(startindex, endindex)</td>
                    <td >窗口拖动并交换时触发此事件。</td>
                </tr>
                <tr >
                    <td >OnUnexecutedSwitchWindow</td>
                    <td >target(startindex, endindex)</td>
                    <td >窗口拖动但未交换时触发此事件。</td>
                </tr>
                <tr >
                    <td >OnFullScreen</td>
                    <td >target()</td>
                    <td >全屏时触发此事件。</td>
                </tr>
                <tr >
                    <td >OnExitFullScreen</td>
                    <td >target()</td>
                    <td >退出全屏时触发此事件。</td>
                </tr>
                <tr >
                    <td >OnLayoutChange</td>
                    <td >target(oldlayoutcount, layoutcount)</td>
                    <td >窗口布局发生变化时触发此事件。</td>
                </tr>
                 <tr >
                    <td >OnSizeChange</td>
                    <td >target(oldwidth, oldheight, width, height)</td>
                    <td >整个窗口大小变化时触发此事件。</td>
                </tr>
                <tr >
                    <td >OnPTZControlEvent</td>
                    <td >target(index, cmd, param, isPtzDefault, nTrigger, keyCode)</td>
                    <td >窗口云台时触发此事件，含方向、参数、是否执行了动作、触发方式(1：键盘按下；2：键盘弹起; 3：鼠标左键按下；  4：鼠标左键按下弹起; 5：鼠标向上滚轮；6：鼠标向下滚轮)等。</td>
                </tr>
                <tr >
                    <td >OnPTZControl3DEvent</td>
                    <td >target(index, cmd, x, y, w, h, isPtzDefault)</td>
                    <td >3D窗口云台时触发此事件，含方向、位置信息、是否执行了动作等。</td>
                </tr>
                <tr >
                    <td >OnMouseEnter</td>
                    <td >target(index)</td>
                    <td >鼠标移入窗口时触发此事件。</td>
                </tr>
                <tr >
                    <td >OnMouseLeave</td>
                    <td >target(index)</td>
                    <td >鼠标移出窗口时触发此事件。</td>
                </tr>
                <tr >
                    <td >OnMouseDown</td>
                    <td >target(index)</td>
                    <td >鼠标按下时触发此事件。</td>
                </tr>
                <tr >
                    <td >OnMouseUp</td>
                    <td >target(index)</td>
                    <td >鼠标弹起时触发此事件。</td>
                </tr>
                <tr >
                    <td >OnMouseMove</td>
                    <td >target(index)</td>
                    <td >鼠标移动时触发此事件。</td>
                </tr>
                <tr >
                    <td >OnVideoClose</td>
                    <td >target(index)</td>
                    <td >视频关闭时触发此事件。</td>
                </tr>
                <tr >
                    <td >OnDrawingObject</td>
                    <td >target(obj)</td>
                    <td >实时绘制，添加、调整图像完成后触发此事件，obj含index,id,type,title,posinfo[]，不含id项表示没有选中的对象等</td>
                </tr>
                <tr >
                    <td >OnZoomStatusChange</td>
                    <td >target(index, status)</td>
                    <td >数字放大状态改变，init未开启，begin已开启，drawing绘制中，zooming放大中，end结束(同init)</td>
                </tr>
            </table>
         * @param {function} handler
         */

    }, {
        key: 'addEventListener',
        value: function addEventListener(event, handler) {
            this._emitter.addListener(event, handler);
        }
        /**
         * 移除事件监听函数
         * @method removeEventListener
         * @param {string} event
         */

    }, {
        key: 'removeEventListener',
        value: function removeEventListener(event) {
            this._emitter.removeAllListeners(event);
        }

        // 监听到每个窗口的事件并抛出去

    }, {
        key: 'listenAndEmitEvent',
        value: function listenAndEmitEvent(video) {
            var _this = this;
            video.addEvent(_NPPlayerEvent2.default.OnMouseEnter, function (index) {
                _this._emitter.emit(_NPPlayerEvent2.default.OnMouseEnter, index);
            });
            video.addEvent(_NPPlayerEvent2.default.OnMouseLeave, function (index) {
                //console.log("NPPlayerEvents.OnMouseLeave ",index);
                if (_this.opt.enablePtzMotion && _this._mousedownindex >= 0) {
                    if (_this.videos[_this._mousedownindex]) {
                        _this.videos[_this._mousedownindex]._ptzControlByWin(0, 0);
                    }
                }
                _this._mousedownindex = -1;
                _this._emitter.emit(_NPPlayerEvent2.default.OnMouseLeave, index);
            });
            video.addEvent(_NPPlayerEvent2.default.OnMouseDown, function (index) {
                _this._mousedownindex = index;
                _this._emitter.emit(_NPPlayerEvent2.default.OnMouseDown, index);
            });
            video.addEvent(_NPPlayerEvent2.default.OnMouseUp, function (index) {
                //console.log("NPPlayerEvents.OnMouseUp ",index);
                if (_this._mousedownindex != index) {
                    if (_this.opt.enablePtzMotion && _this._mousedownindex >= 0) {
                        if (_this.videos[_this._mousedownindex]) {
                            _this.videos[_this._mousedownindex]._ptzControlByWin(0, 0);
                        }
                    }
                    _this._mousedownindex = -1;
                }
                _this._emitter.emit(_NPPlayerEvent2.default.OnMouseUp, index);
            });
            video.addEvent(_NPPlayerEvent2.default.OnMouseMove, function (index) {
                _this._emitter.emit(_NPPlayerEvent2.default.OnMouseMove, index);
            });
            video.addEvent(_NPPlayerEvent2.default.OnPTZControlEvent, function (index, cmd, param, isPtzDefault, nTrigger, keyCode) {
                _this._emitter.emit(_NPPlayerEvent2.default.OnPTZControlEvent, index, cmd, param, isPtzDefault, nTrigger, keyCode);
            });
            video.addEvent(_NPPlayerEvent2.default.OnPTZControl3DEvent, function (index, cmd, x, y, w, h, isPtzDefault) {
                _this._emitter.emit(_NPPlayerEvent2.default.OnPTZControl3DEvent, index, cmd, x, y, w, h, isPtzDefault);
            });
            video.addEvent(_NPPlayerEvent2.default.OnVideoClose, function (index) {
                _this._emitter.emit(_NPPlayerEvent2.default.OnVideoClose, index);
                _this._historyTimeAxisVideoClose(index);
            });
            video.addEvent(_NPPlayerEvent2.default.OnVideoStart, function (index) {
                _this._historyTimeAxisVideoStart(index);
            });

            video.addEvent(_NPPlayerEvent2.default.OnTimeaxisLevel, function (index, level, shrink) {
                _this._historyTimeAxisLevel(index, level, shrink);
            });

            video.addEvent(_NPPlayerEvent2.default.OnDrawingObject, function (obj) {
                _this._emitter.emit(_NPPlayerEvent2.default.OnDrawingObject, obj);
            });
            video.addEvent(_NPPlayerEvent2.default.OnZoomStatusChange, function (index, status) {
                _this._emitter.emit(_NPPlayerEvent2.default.OnZoomStatusChange, index, status);
                if (index >= 0 && index < _this.videos.length) {
                    _this.videos[index].checkZoomBtnStatus();
                }
            });

            video.addEvent(_NPPlayerEvent2.default.OnWndClick, function (index) {
                if (index >= 0 && index < _this.videos.length) {
                    _this._setFocusIndex(index);
                    _this.videos[index].showOrHideRightMenu(false);
                    _this._emitter.emit(_NPPlayerEvent2.default.OnWndClick, index);
                }
            });

            video.addEvent(_NPPlayerEvent2.default.OnMouseDown, function (index, tag) {
                if (index >= 0 && index < _this.videos.length) {
                    _this._setFocusIndex(index);
                    _this.videos[index].showOrHideRightMenu(false);
                    if (!tag) {
                        //点击其他层时，取消实时绘制选中状态
                        _this.videos[index].removeSelectDrawing();
                    }
                    _this._emitter.emit(_NPPlayerEvent2.default.OnMouseDown, index);
                }
            });

            video.addEvent(_NPPlayerEvent2.default.OnWndDClik, function (index) {
                if (index >= 0 && index < _this.videos.length) {
                    _this._toggleMaxScreen(index);
                    _this._emitter.emit(_NPPlayerEvent2.default.OnWndDClik, index);
                }
            });
        }
    }, {
        key: 'version',
        get: function get() {
            return _version_;
        }
    }, {
        key: 'onResponse',
        get: function get() {
            return this._onresponse;
        },
        set: function set(callback) {
            this._onresponse = callback;
        }
    }, {
        key: 'onError',
        get: function get() {
            return this._onerror;
        },
        set: function set(callback) {
            this._onerror = callback;
        }
    }, {
        key: 'desEncodeType',
        get: function get() {
            return this.opt.desEncodeType;
        },
        set: function set(type) {
            return this.opt.desEncodeType = type;
        }
    }, {
        key: 'backgroundColor',
        set: function set(color) {
            // function _iscolor(color) {
            // 	return true;
            // }
            // if (!_iscolor(color)) {
            // this._showDebuggInfo('set backgroundColor() param error!');
            // 	return;
            // }
            this.opt.backgroundColor = color;
            //this.playerC.style.background = color;
            for (var i = 0, length = this.videos.length; i < length; i++) {
                this.videos[i].setbackgroundColor(color);
            }
        },
        get: function get() {
            return this.opt.backgroundColor;
        }
    }, {
        key: 'enableLoadingGif',
        set: function set(flag) {
            if (typeof flag !== 'boolean') {
                this._showDebuggInfo('set enableLoadingGif() param error!');
                return;
            }
            this.opt.enableLoadingGif = flag;
            for (var i = 0, length = this.videos.length; i < length; i++) {
                this.videos[i].setLoadingFlag(flag, this.opt.enableLoadingInfo);
            }
            return;
        },
        get: function get() {
            return this.opt.enableLoadingGif;
        }

        /**
         * 是否显示提示文字，显示在loading动画下，默认true
         * @property enableLoadingInfo
         * @type {boolean}  true-显示 false-不显示
         */

    }, {
        key: 'enableLoadingInfo',
        set: function set(flag) {
            if (typeof flag !== 'boolean') {
                this._showDebuggInfo('set enableLoadingInfo() param error!');
                return;
            }
            this.opt.enableLoadingInfo = flag;
            for (var i = 0, length = this.videos.length; i < length; i++) {
                this.videos[i].setLoadingFlag(this.opt.enableLoadingGif, flag);
            }
            return;
        },
        get: function get() {
            return this.opt.enableLoadingInfo;
        }

        /**
         * 播放进度条显示视频时间戳"2019-02-28 08:08:00"，默认true
         * @property enableProgressShowPts
         * @type {boolean}  true-显示 false-不显示
         */

    }, {
        key: 'enableProgressShowPts',
        set: function set(flag) {
            if (typeof flag !== 'boolean') {
                this._showDebuggInfo('set enableLoadingGif() param error!');
                return;
            }
            this.opt.enableProgressShowPts = flag;
            for (var i = 0, length = this.videos.length; i < length; i++) {
                this.videos[i].setProgressShowPts(flag);
            }
            return;
        },
        get: function get() {
            return this.opt.enableProgressShowPts;
        }

        // 分屏start
        /**
         * 窗口分屏布局 默认'2*2'
         * @property layout
         * @type {string} '1A5' '1A7' '1A9' 'M**N'<16
         */

    }, {
        key: 'layout',
        set: function set(obj) {
            var _obj = obj;
            if (typeof _obj === 'string') {
                _obj = {
                    layout: _obj.toUpperCase()
                };
            } else if (_obj === 0 || _obj === null) {
                _obj = {
                    layout: '0'
                };
            } else if ((typeof _obj === 'undefined' ? 'undefined' : _typeof(_obj)) !== 'object') {
                this._showDebuggInfo('set layout() param error!');
                return;
            }

            if (_obj.layout !== '1A5' && _obj.layout !== '1A7' && _obj.layout !== '1A9' && !this._parselayout(_obj)) {
                this._showDebuggInfo('set layout() param error!');
                return;
            }
            this._setLayout(_obj);
        },
        get: function get() {
            return this.opt.layout ? this.opt.layout : {};
        }

        /**
         * 窗口分屏间隔，默认0，也可指定{marginX: 0, marginY: 0}
         * @property layoutmargin
         * @type {object|number} {marginX: 0, marginY: 0} | 0
         */

    }, {
        key: 'layoutmargin',
        set: function set(obj) {
            var _obj = this._getLayoutmargin(obj);
            if (!_obj) {
                this._showDebuggInfo('set layoutmargin() param error!');
                return;
            }
            this._setLayoutmargin(_obj);
        },
        get: function get() {
            return this.opt.layoutmargin ? this.opt.layoutmargin : {};
        }
    }, {
        key: 'layoutCount',
        get: function get() {
            return this.layoutcount ? this.layoutcount : 0;
        }

        /**
         * 边框样式，含线宽borderWidth、颜色borderColor、焦点窗口颜色focusBorderColor
         * @property borderStyle
         * @type {object} borderStyle
         * @type {string} borderStyle.borderWidth 宽度 '2px'
         * @type {string} borderStyle.borderStyle 线型 'solid'-实线
         * @type {string} borderStyle.borderColor 颜色 默认'#ccc' '#fff' 'rgb()' 'rgba()' 'red'
         * @type {string} borderStyle.focusBorderStyle 焦点线型 'solid'-实线
         * @type {string} borderStyle.focusBorderColor 焦点颜色 '#fff' 'rgb()' 'rgba()' 'red'
         * @type {object}  {borderWidth:'2px', borderColor:'#ccc', focusBorderColor:'red'}
         */

    }, {
        key: 'borderStyle',
        set: function set(obj) {
            this.opt.border = _tool.Toolkit.deepMerge(this.opt.border, obj);
            for (var i = 0, length = this.videos.length; i < length; i++) {
                this.videos[i].setBorderStyle(this.opt.border);
            }
            if (this.opt.border && this.opt.border.borderColor) {
                this.playerC.style.background = this.opt.border.borderColor;
            }
        },
        get: function get() {
            return this.opt.border;
        }

        /**
         * 焦点窗口，默认0
         * @property focusIndex
         * @type {number} 窗口序号
         */

    }, {
        key: 'focusIndex',
        set: function set(index) {
            var _index = parseInt(index);
            if (_index < 0 || _index > this.videos.length || !this.videos[_index]) {
                this._showDebuggInfo('set focusIndex() param error!');
                return;
            }
            this._setFocusIndex(_index);
        },
        get: function get() {
            return this.nFocusIndex;
        }
    }, {
        key: 'maxWindowIndex',
        get: function get() {
            return this.maxScreenIndex;
        }
    }, {
        key: 'defaultBackground',
        set: function set(defclass) {
            this.opt.defBgClass = defclass;
            for (var i = 0, length = this.videos.length; i < length; i++) {
                this.videos[i].setDefBgImg(defclass);
            }
        },
        get: function get() {
            return this.opt.defBgClass;
        }

        /**
         * 鼠标拖动是否交换窗口，默认true
         * @property enableExchangeWindow
         * @type {boolean} true-交换 false-不交换
         */

    }, {
        key: 'enableExchangeWindow',
        set: function set(flag) {
            this.opt.enableExchangeScreen = flag || false;
            this.enableExchangeScreen = flag || false;
        },
        get: function get() {
            return this.enableExchangeScreen;
        }
    }]);

    return H5Player;
}(_eventUtil.EventUtil.aggregation(_Toolbar2.default, _RightMenu2.default, _Ptz2.default, _WaterMark2.default, _RealTimeVideoOverlay2.default, _RealTimeDrawing2.default, _ExtendClass2.default, _HistoryTimeAxis2.default));
//window.H5Player.ExtendClass = ExtendClass;
// export default NPPlayer;


H5Player._defWsurl = _wsurl_;
H5Player._extendClass = null;
H5Player.version = _version_;
window.H5Player = H5Player;

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _tkPtSize = 10;

function _formatLenth(x, len) {
	x = "" + x;
	len = len || 2;
	while (x.length < len) {
		x = "0" + x;
	}
	return x;
};
/**
 * 时间格式化函数 - 时间对象的扩展
 * @param  {[type]} format [description]
 * @return {[type]}        [description]
 */
Date.prototype.format = function (format) {
	var o = {
		"M+": this.getMonth() + 1, //month
		"d+": this.getDate(), //day
		"h+": this.getHours(), //hour
		"m+": this.getMinutes(), //minute
		"s+": this.getSeconds(), //second
		"q+": Math.floor((this.getMonth() + 3) / 3), //quarter
		"S": this.getMilliseconds() //millisecond
	};
	if (/(y+)/.test(format)) {
		format = format.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
	}
	for (var k in o) {
		if (new RegExp("(" + k + ")").test(format)) {
			format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
		}
	}
	return format;
};
var Toolkit = {
	// 生成唯一id
	generateOnlyId: function generateOnlyId() {
		return Number(Math.random().toString().substr(3, 15) + Date.now()).toString(36);
	},

	//获取元素的高宽等样式
	getElementStyle: function getElementStyle(el, cssName) {
		if (typeof el === 'string') {
			var _el = document.querySelector(_el);
		}
		var len = arguments.length,
		    sty = void 0,
		    f = void 0,
		    fv = void 0;

		'currentStyle' in el ? sty = el.currentStyle : 'getComputedStyle' in window ? sty = window.getComputedStyle(el, null) : null;

		if (cssName === 'opacity' && document.all) {
			f = el.filters;
			f && f.length > 0 && f.alpha ? fv = f.alpha.opacity / 100 : fv = 1;
			return fv;
		}
		cssName === 'float' ? document.all ? cssName = 'styleFloat' : cssName = 'cssFloat' : cssName;
		sty = len == 2 ? sty[cssName] : sty;
		return sty;
	},

	/**获取浏览器版本 */
	browserVersion: function browserVersion() {
		var userAgent = navigator.userAgent,
		    rMsie = /(msie\s|trident.*rv:)([\w.]+)/,
		    rFirefox = /(firefox)\/([\w.]+)/,
		    rOpera = /(opera).+version\/([\w.]+)/,
		    rChrome = /(chrome)\/([\w.]+)/,
		    rSafari = /version\/([\w.]+).*(safari)/;
		var browser = void 0;
		var version = void 0;
		var ua = userAgent.toLowerCase();
		function uaMatch(ua) {
			var match = rMsie.exec(ua);
			if (match != null) {
				return { browser: 'IE', version: match[2] || '0' };
			}
			match = rFirefox.exec(ua);
			if (match != null) {
				return { browser: match[1] || '', version: match[2] || '0' };
			}
			match = rOpera.exec(ua);
			if (match != null) {
				return { browser: match[1] || '', version: match[2] || '0' };
			}
			match = rChrome.exec(ua);
			if (match != null) {
				return { browser: match[1] || '', version: match[2] || '0' };
			}
			match = rSafari.exec(ua);
			if (match != null) {
				return { browser: match[2] || '', version: match[1] || '0' };
			}
			if (match != null) {
				return { browser: '', version: '0' };
			}
		}
		var browserMatch = uaMatch(userAgent.toLowerCase());
		if (browserMatch.browser) {
			browser = browserMatch.browser;
			version = browserMatch.version;
		}
		return browser + version;
	},

	// 将元素追加到指定对象的后面（是同级关系） 
	insertAfter: function insertAfter(newElement, targetElement) {
		var parent = targetElement.parentNode;
		if (parent.lastChild == targetElement) {
			parent.appendChild(newElement);
		} else {
			parent.insertBefore(newElement, targetElement.nextSibling);
		}
	},

	// 十六进制颜色转为RGB
	hexToRgb: function hexToRgb(sColor) {
		sColor = sColor.toLowerCase();
		//十六进制颜色值的正则表达式
		var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
		// 如果是16进制颜色
		if (sColor && reg.test(sColor)) {
			if (sColor.length === 4) {
				var sColorNew = "#";
				for (var i = 1; i < 4; i += 1) {
					sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
				}
				sColor = sColorNew;
			}
			//处理六位的颜色值
			var sColorChange = [];
			for (var i = 1; i < 7; i += 2) {
				sColorChange.push(parseInt("0x" + sColor.slice(i, i + 2)));
			}
			return "rgb(" + sColorChange.join(",") + ")";
		}
		return sColor;
	},

	// rgb和透明度转换为rgba
	rgbAndOpacityToRgba: function rgbAndOpacityToRgba(color, opacity) {
		var tempval = color.replace('rgb(', '').replace(')', '').split(',');
		tempval.push(opacity);
		return "rgba(" + tempval.join(',') + ")";
	},

	// 获取浏览器缩放比例
	getBrowserZoomRatio: function getBrowserZoomRatio() {
		var ratio = 0,
		    screen = window.screen,
		    ua = navigator.userAgent.toLowerCase();

		if (window.devicePixelRatio !== undefined) {
			ratio = window.devicePixelRatio;
		} else if (~ua.indexOf('msie')) {
			if (screen.deviceXDPI && screen.logicalXDPI) {
				ratio = screen.deviceXDPI / screen.logicalXDPI;
			}
		} else if (window.outerWidth !== undefined && window.innerWidth !== undefined) {
			ratio = window.outerWidth / window.innerWidth;
		}
		if (ratio) {
			ratio = Math.round(ratio * 100);
		}

		return ratio;
	},

	//生成指定长度的UUID
	getUuid: function getUuid() {
		var len = 32; //32长度
		var radix = 16; //16进制
		var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
		var uuid = [],
		    i;
		radix = radix || chars.length;
		if (len) {
			for (i = 0; i < len; i++) {
				uuid[i] = chars[0 | Math.random() * radix];
			}
		} else {
			var r;
			uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
			uuid[14] = '4';
			for (i = 0; i < 36; i++) {
				if (!uuid[i]) {
					r = 0 | Math.random() * 16;
					uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];
				}
			}
		}
		return uuid.join('');
	},

	//深合并
	deepMerge: function deepMerge(obj1, obj2) {
		var key;
		for (key in obj2) {
			// 如果target(也就是obj1[key])存在，且是对象的话再去调用deepMerge，否则就是obj1[key]里面没这个对象，需要与obj2[key]合并
			if (obj2[key] && _typeof(obj2[key]) === "object" && !obj2[key].nodeType) {
				obj1[key] = obj2[key].constructor === Array ? [] : {};
				this.deepMerge(obj1[key], obj2[key]);
			} else {
				obj1[key] = obj2[key];
			}
		}
		return obj1;
	},

	//是否为正整数
	isPositiveInteger: function isPositiveInteger(s) {
		var re = /^[0-9]+$/;
		return re.test(s);
	},

	//函数防抖：当持续触发事件时，一定时间段内没有再触发事件，事件处理函数才会执行一次，如果设定的时间到来之前，又一次触发了事件，就重新开始延时。
	debounce: function debounce(fn, delay, immediate) {
		// fn是回调函数，delay是延迟时间，immediate是否先执行一次再节流
		var timer = null,
		    _this,
		    args;
		return function () {
			_this = this;
			args = arguments;
			// 如果有定时器先清除，让定时器的函数不执行
			timer && clearTimeout(timer);
			if (immediate) {
				// 没有定时器的话，告诉后面的函数可以先执行一次，首次进入函数没有定义定时器，do为true
				var doFunc = !timer;
				// 然后在delay时间以后将timer设置为null，首次执行之后，只有在timer为null之后才会再次执行
				timer = setTimeout(function () {
					timer = null;
				}, delay);
				if (doFunc) {
					fn.apply(_this, args);
				}
			} else {
				// 如果没设置第三个参数，就是什么时候停止，之后delay时间才执行
				timer = setTimeout(function () {
					fn.apply(_this, args);
				}, delay);
			}
		};
	},
	findNearAncestor: function findNearAncestor(element, className) {
		while (element.tagName != "BODY") {
			if (element.className.indexOf(className) > -1) {
				return element;
			}
			element = element.parentNode;
		}
	},
	getShapeDistance: function getShapeDistance(p, pointArr) {
		if (pointArr.length < 1) {
			return 0;
		}
		var x = 0,
		    y = 0,
		    dx = 0,
		    dy = 0,
		    dis = 0;

		pointArr.forEach(function (item) {
			dx = item.x - p.x;
			dy = item.y - p.y;
			dis = dis + dx * dx + dx * dx;
			x = x + item.x;
			y = y + item.y;
		});
		x = x / pointArr.length;
		y = y / pointArr.length;
		x = x - p.x;
		y = y - p.y;
		dis = (dis + x * x + y * y) / (pointArr.length + 1);
		return dis;
	},
	isPointInRect: function isPointInRect(p, rect, style) {
		if (rect.length != 2) {
			return false;
		}
		var x1 = parseInt(rect[0].x),
		    x2 = parseInt(rect[1].x),
		    y1 = parseInt(rect[0].y),
		    y2 = parseInt(rect[1].y),
		    px = parseInt(p.x),
		    py = parseInt(p.y);
		if (x1 > x2) {
			//p1是小的
			x1 = parseInt(rect[1].x);
			x2 = parseInt(rect[0].x);
		}
		if (y1 > y2) {
			y1 = parseInt(rect[1].y);
			y2 = parseInt(rect[0].y);
		}

		var isEqual0 = function isEqual0(a) {
			if (a < _tkPtSize && a > 0 - _tkPtSize) {
				return true;
			}
			return false;
		};
		var dx = px - x1,
		    dy = py - y1,
		    dx1 = px - x2,
		    dy1 = py - y2;
		if (isEqual0(dx) && isEqual0(dy) || isEqual0(dx1) && isEqual0(dy1)) {
			style.mouse = "nw-resize";
			style.direction = "xy";
			if (isEqual0(dx) && isEqual0(dy)) {
				style.index = 0;
			} else {
				style.index = 2;
			}
			return true;
		}
		if (isEqual0(dx) && isEqual0(dy1) || isEqual0(dx1) && isEqual0(dy)) {
			style.mouse = "ne-resize";
			style.direction = "xy";
			if (isEqual0(dx1) && isEqual0(dy)) {
				style.index = 1;
			} else {
				style.index = 3;
			}
			return true;
		}

		if (py > y1 && py < y2 && (isEqual0(dx1) || isEqual0(dx))) {
			style.mouse = "e-resize";
			style.direction = "x";
			if (isEqual0(dx)) {
				style.index = 0;
			} else {
				style.index = 2;
			}
			return true;
		}
		if (px > x1 && px < x2 && (isEqual0(dy) || isEqual0(dy1))) {
			style.mouse = "n-resize";
			style.direction = "y";
			if (isEqual0(dy)) {
				style.index = 0;
			} else {
				style.index = 2;
			}
			return true;
		}

		if (px >= x1 && px <= x2 && py >= y1 && py <= y2) {
			style.mouse = "move";
			return true;
		} else {
			return false;
		}
	},


	//rayCasting
	isPointInPolygon: function isPointInPolygon(p, poly, style) {
		var px = parseInt(p.x),
		    py = parseInt(p.y),
		    flag = false,
		    isEqual0 = function isEqual0(a) {
			if (a < _tkPtSize && a > 0 - _tkPtSize) {
				return true;
			}
			return false;
		};

		for (var i = 0, l = poly.length, j = l - 1; i < l; j = i, i++) {
			var sx = parseInt(poly[i].x),
			    sy = parseInt(poly[i].y),
			    tx = parseInt(poly[j].x),
			    ty = parseInt(poly[j].y);

			// 点与多边形顶点重合
			var dx = px - sx,
			    dy = py - sy;
			if (isEqual0(dx) && isEqual0(dy)) {
				//return 'on'
				style.index = i;
				style.mouse = "sw-resize";
				return true;
			}
			var dx1 = px - tx,
			    dy1 = py - ty;
			if (isEqual0(dx1) && isEqual0(dy1)) {
				//return 'on'
				style.index = j;
				style.mouse = "sw-resize";
				return true;
			}

			// 判断线段两端点是否在射线两侧
			if (sy < py && ty >= py || sy >= py && ty < py) {
				// 线段上与射线 Y 坐标相同的点的 X 坐标
				var x = sx + (py - sy) * (tx - sx) / (ty - sy);

				// 点在多边形的边上
				if (x === px) {
					//return 'on'
					style.mouse = "move";
					return true;
				}
				// 射线穿过多边形的边界
				if (x > px) {
					flag = !flag;
				}
			}
		}
		// 射线穿过多边形边界的次数为奇数时点在多边形内
		//return flag ? 'in' : 'out'
		if (flag) {
			style.mouse = "move";
		}
		return flag;
	},
	isPointInLine: function isPointInLine(p, line, style, arrowpos, arrow) {
		if (line.length != 2) {
			return false;
		}
		var px = parseInt(p.x),
		    py = parseInt(p.y),
		    isEqual0 = function isEqual0(a) {
			if (a < _tkPtSize && a > 0 - _tkPtSize) {
				return true;
			}
			return false;
		},
		    sx = parseInt(line[0].x),
		    sy = parseInt(line[0].y),
		    tx = parseInt(line[1].x),
		    ty = parseInt(line[1].y),
		    dx = px - sx,
		    dy = py - sy,
		    dx1 = px - tx,
		    dy1 = py - ty;

		if (arrow == 1) {
			var llp = -1;
			if (arrowpos == 0) {
				llp = dx * dx + dy * dy;
			} else if (arrowpos == 1) {
				llp = dx1 * dx1 + dy1 * dy1;
			}
			if (llp >= 0 && llp <= 400 && (dx * dx1 < 0 || dy * dy1 < 0)) {
				style.index = arrowpos;
				style.mouse = "pointer";
				return true;
			}
		} else if (arrow == 2) {
			var points = this.getLineArrowPoint(line),
			    _llp = -1,
			    ddx = px - points[0].x,
			    ddy = py - points[0].y,
			    ddx1 = px - points[1].x,
			    ddy1 = py - points[1].y;
			if (arrowpos == 0 || arrowpos == 2) {
				_llp = ddx * ddx + ddy * ddy;
				if (_llp <= 400) {
					style.index = 0;
					style.mouse = "pointer";
					return true;
				}
			}
			if (arrowpos == 1 || arrowpos == 2) {
				_llp = ddx1 * ddx1 + ddy1 * ddy1;
				if (_llp <= 400) {
					style.index = 1;
					style.mouse = "pointer";
					return true;
				}
			}
		}

		if (isEqual0(dx) && isEqual0(dy)) {
			//return 'on'
			style.index = 0;
			style.mouse = "sw-resize";
			return true;
		}
		if (isEqual0(dx1) && isEqual0(dy1)) {
			//return 'on'
			style.index = 1;
			style.mouse = "sw-resize";
			return true;
		}

		dx = sx - tx;
		dy = sy - ty;
		var flag = false,
		    temp = 6 / Math.sqrt(dx * dx + dy * dy),
		    xx = dy * temp,
		    yy = dx * temp,
		    poly = [{ x: sx + xx, y: sy - yy }, { x: sx - xx, y: sy + yy }, { x: tx - xx, y: ty + yy }, { x: tx + xx, y: ty - yy }];

		for (var i = 0, l = poly.length, j = l - 1; i < l; j = i, i++) {
			var _sx = parseInt(poly[i].x),
			    _sy = parseInt(poly[i].y),
			    _tx = parseInt(poly[j].x),
			    _ty = parseInt(poly[j].y);

			// 判断线段两端点是否在射线两侧
			if (_sy < py && _ty >= py || _sy >= py && _ty < py) {
				// 线段上与射线 Y 坐标相同的点的 X 坐标
				var x = _sx + (py - _sy) * (_tx - _sx) / (_ty - _sy);

				// 点在多边形的边上
				if (x === px) {
					flag = true;
					break;
				}
				// 射线穿过多边形的边界
				if (x > px) {
					flag = !flag;
				}
			}
		}
		if (flag) {
			style.mouse = "move";
		}
		return flag;
	},
	isPointInDoubleline: function isPointInDoubleline(p, line, style, arrowpos, arrow, xoffset, yoffset) {
		if (this.isPointInLine(p, line, style, arrowpos, arrow)) {
			return true;
		}

		var line2 = this.deepMerge([], line),
		    x = parseInt(xoffset),
		    y = parseInt(yoffset);

		for (var i = 0; i < line2.length; i++) {
			line2[i].x += x;
			line2[i].y += y;
		}
		return this.isPointInLine(p, line2, style, arrowpos, arrow);
	},
	getLineArrowPoint: function getLineArrowPoint(line) {
		var sx = parseInt(line[0].x),
		    sy = parseInt(line[0].y),
		    tx = parseInt(line[1].x),
		    ty = parseInt(line[1].y);
		if (sx == ty && sy == ty) {
			return [{ x: 0, y: 0 }, { x: 0, y: 0 }];
		}
		var dx = tx - sx,
		    dy = ty - sy,
		    mx = (sx + tx) / 2,
		    my = (sy + ty) / 2,
		    temp = 20 / Math.sqrt(dx * dx + dy * dy),
		    xx = dy * temp,
		    yy = dx * temp,
		    points = [{ x: parseInt(mx - xx), y: parseInt(my + yy) }, { x: parseInt(mx + xx), y: parseInt(my - yy) }];
		return points;
	},
	getLinePoint: function getLinePoint(line, dis) {
		var sx = parseInt(line[0].x),
		    sy = parseInt(line[0].y),
		    tx = parseInt(line[1].x),
		    ty = parseInt(line[1].y);
		if (sx == ty && sy == ty) {
			return [{ x: 0, y: 0 }, { x: 0, y: 0 }];
		}
		var dx = tx - sx,
		    dy = ty - sy,
		    temp = dis / Math.sqrt(dx * dx + dy * dy),
		    xx = dy * temp,
		    yy = dx * temp,
		    points = [{ x: parseInt(sx + xx), y: parseInt(sy - yy) }, { x: parseInt(tx + xx), y: parseInt(ty - yy) }];
		return points;
	},

	//时间转时间戳
	dateTime2mills: function dateTime2mills(datetime) {
		var timestamp2 = Date.parse(new Date(datetime));
		return timestamp2 / 1000;
	},

	//时间戳格式化
	mills2datetime: function mills2datetime(num) {
		var date = new Date(num);
		return date.getFullYear() + "-" + _formatLenth(date.getMonth() + 1) + "-" + _formatLenth(date.getDate()) + " " + _formatLenth(date.getHours()) + ":" + _formatLenth(date.getMinutes()) + ":" + _formatLenth(date.getSeconds());
	}
};
exports.Toolkit = Toolkit;

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventUtil = {
	aggregation: function aggregation(base) {
		for (var _len = arguments.length, mixins = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
			mixins[_key - 1] = arguments[_key];
		}

		var aggregate = function (_base) {
			_inherits(__Aggregate, _base);

			function __Aggregate() {
				var _ref;

				for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
					args[_key2] = arguments[_key2];
				}

				_classCallCheck(this, __Aggregate);

				var _this = _possibleConstructorReturn(this, (_ref = __Aggregate.__proto__ || Object.getPrototypeOf(__Aggregate)).call.apply(_ref, [this].concat(args)));

				mixins.forEach(function (mixin) {
					if (typeof mixin.prototype.initializer === "function") mixin.prototype.initializer.apply(_this, args);
				});
				return _this;
			}

			return __Aggregate;
		}(base);
		var copyProps = function copyProps(target, source) {
			Object.getOwnPropertyNames(source).concat(Object.getOwnPropertySymbols(source)).forEach(function (prop) {
				if (prop.match(/^(?:initializer|constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/)) return;
				Object.defineProperty(target, prop, Object.getOwnPropertyDescriptor(source, prop));
			});
		};
		mixins.forEach(function (mixin) {
			copyProps(aggregate.prototype, mixin.prototype);
			copyProps(aggregate, mixin);
		});
		return aggregate;
	},
	addHandler: function addHandler(element, type, handler) {
		if (element.addEventListener) {
			element.addEventListener(type, handler, false);
		} else if (element.attachEvent) {
			element.attachEvent('on' + type, handler);
		} else {
			element['on' + type] = handler;
		}
	},
	removeHandler: function removeHandler(element, type, handler) {
		if (element.removeEventListener) {
			element.removeEventListener(type, handler, false);
		} else if (element.detachEvent) {
			element.detachEvent('on' + type, handler);
		} else {
			element['on' + type] = null;
		}
	},
	getEvent: function getEvent(event) {
		return event ? event : window.event;
	},
	getVideoContainerTarget: function getVideoContainerTarget(event) {
		var curTarget = event.target || event.srcElement,
		    childNodes = null,
		    resultNode = null;
		// try{
		// 	do{
		// 		if(typeof curTarget.className == "string" && curTarget.className.indexOf("h5vp-video-container") !== -1) {
		// 			resultNode = curTarget;
		// 			break;
		// 		} else if (curTarget.className.indexOf("h5vp-container") !== -1) {
		// 			break;
		// 		}
		// 		curTarget = curTarget.parentNode;
		// 	}while(curTarget)
		// } catch (e) {}
		// return resultNode;
		try {

			if (typeof curTarget.className === "string" && curTarget.className.indexOf("h5vp-video-container") !== -1) {
				resultNode = curTarget;
			} else if (typeof curTarget.className === "string" && curTarget.className.indexOf("h5vp-container") !== -1) {
				return null;
			} else {
				resultNode = EventUtil.getParentEle(curTarget, "h5vp-video-container");
			}
		} catch (e) {}

		return resultNode;
	},
	// 获取距离页面的距离(offsetLeft, offsetTop)
	getPageOffset: function getPageOffset(ele) {
		var offsetLeft = 0,
		    offsetTop = 0;
		while (ele && ele !== document.body) {
			offsetLeft += ele.offsetLeft;
			offsetTop += ele.offsetTop;
			ele = ele.offsetParent;
		}
		return {
			offsetLeft: offsetLeft,
			offsetTop: offsetTop
		};
	},
	// 获取当前子元素到目标父元素的距离{offsetLeft, offsetTop},若parent不传,则parent到body
	getEleToParentDistance: function getEleToParentDistance(curEle, parentClassName) {
		var offsetLeft = 0,
		    offsetTop = 0;
		while (curEle && curEle !== document.body && (!parentClassName || parentClassName && !curEle.classList.contains(parentClassName))) {
			offsetLeft += curEle.offsetLeft || 0;
			offsetTop += curEle.offsetTop || 0;
			curEle = curEle.offsetParent;
		}
		return {
			offsetLeft: offsetLeft,
			offsetTop: offsetTop
		};
	},
	// 获取当前子元素的父元素
	getParentEle: function getParentEle(curEle, parentClassName) {
		while (curEle && curEle !== document.body && !curEle.classList.contains(parentClassName)) {
			curEle = curEle.parentNode;
		}
		return curEle !== document.body ? curEle : null;
	},
	getTarget: function getTarget(event) {
		return event.target || event.srcElement;
	},
	preventDefault: function preventDefault(event) {
		if (event.preventDefault) {
			event.preventDefault();
		} else {
			event.returnValue = false;
		}
	},
	stopPropagation: function stopPropagation(event) {
		if (event.stopPropagation) {
			event.stopPropagation();
		} else {
			event.cancelBubble = true;
		}
	}
};
exports.EventUtil = EventUtil;

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var EleResize = {
    _handleResize: function _handleResize(e) {
        var ele = e.target || e.srcElement;
        var trigger = ele.__resizeTrigger__;
        if (trigger) {
            var handlers = trigger.__z_resizeListeners;
            if (handlers) {
                var size = handlers.length;
                for (var i = 0; i < size; i++) {
                    var h = handlers[i];
                    var handler = h.handler;
                    var context = h.context;
                    handler.apply(context, [e]);
                }
            }
        }
    },
    _removeHandler: function _removeHandler(ele, handler, context) {
        var handlers = ele.__z_resizeListeners;
        if (handlers) {
            var size = handlers.length;
            for (var i = 0; i < size; i++) {
                var h = handlers[i];
                if (h.handler === handler && h.context === context) {
                    handlers.splice(i, 1);
                    return;
                }
            }
        }
    },
    _createResizeTrigger: function _createResizeTrigger(ele) {
        var obj = document.createElement('object');
        obj.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden;opacity: 0; pointer-events: none; z-index: -1;');
        obj.onload = EleResize._handleObjectLoad;
        obj.type = 'text/html';
        ele.appendChild(obj);
        obj.data = 'about:blank';
        return obj;
    },
    _handleObjectLoad: function _handleObjectLoad(evt) {
        this.contentDocument.defaultView.__resizeTrigger__ = this.__resizeElement__;
        this.contentDocument.defaultView.addEventListener('resize', EleResize._handleResize);
    }
};
if (document.attachEvent) {
    //ie9-10
    EleResize.on = function (ele, handler, context) {
        var handlers = ele.__z_resizeListeners;
        if (!handlers) {
            handlers = [];
            ele.__z_resizeListeners = handlers;
            ele.__resizeTrigger__ = ele;
            ele.attachEvent('onresize', EleResize._handleResize);
        }
        handlers.push({
            handler: handler,
            context: context
        });
    };
    EleResize.off = function (ele, handler, context) {
        var handlers = ele.__z_resizeListeners;
        if (handlers) {
            EleResize._removeHandler(ele, handler, context);
            if (handlers.length === 0) {
                ele.detachEvent('onresize', EleResize._handleResize);
                delete ele.__z_resizeListeners;
            }
        }
    };
} else {
    EleResize.on = function (ele, handler, context) {
        var handlers = ele.__z_resizeListeners;
        if (!handlers) {
            handlers = [];
            ele.__z_resizeListeners = handlers;

            if (getComputedStyle(ele, null).position === 'static') {
                ele.style.position = 'relative';
            }
            var obj = EleResize._createResizeTrigger(ele);
            ele.__resizeTrigger__ = obj;
            obj.__resizeElement__ = ele;
        }
        handlers.push({
            handler: handler,
            context: context
        });
    };
    EleResize.off = function (ele, handler, context) {
        var handlers = ele.__z_resizeListeners;
        if (handlers) {
            EleResize._removeHandler(ele, handler, context);
            if (handlers.length === 0) {
                var trigger = ele.__resizeTrigger__;
                if (trigger) {
                    trigger.contentDocument.defaultView.removeEventListener('resize', EleResize._handleResize);
                    ele.removeChild(trigger);
                    delete ele.__resizeTrigger__;
                }
                delete ele.__z_resizeListeners;
            }
        }
    };
}
exports.EleResize = EleResize;

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Toolbar = function () {
	function Toolbar(options) {
		_classCallCheck(this, Toolbar);
	}
	/**
     * 创建工具条
     * @method createToolbar 
     * @param {number} index 窗口序号
  * @param {object} obj 工具条对象
  * @param {object} obj.topBar 位于视频顶部的工具条对象 默认的
  * @param {array} obj.topBar.items 位于topBar工具条上的按钮项数组(其他工具条上的与之一样)
  * <br></br>items: ["videoTitle","videoRate","videoFps","videoRatio","videoRealHover", "videoHisNormal", "videoZoom", "videoClose","videoRealNormal", "videoHisHover", "videoPause", "videoPlay", "videoZoom", "videoTime"
  *<br></br>{id: "videoClose",function: function(obj) {console.log(obj);}},
  *<br></br>{type: "button",style: "self-defined",className: "left-btn1",key: 13,show: true,function: function(obj) {console.log(obj);}}
  * ]
  * @param {string||object} obj.topBar.items[0] 字符串或者对象
  *<br></br>字符串： 默认的，如"videoTitle"(标题),"videoRate","videoFps","videoRatio"(画面比例),"videoRealNormal"(实时按钮正常状态),"videoRealHover"(实时按钮选中状态), 
  *<br></br>"videoHisNormal"(历史按钮正常状态),"videoHisHover"(历史按钮选中状态), "videoZoom"(数字放大), "videoClose"(关闭当前流), "videoPause"(暂停), "videoPlay"(播放), stepPlay(单帧), "slowPlay"(慢放), "fastPlay(快放)","curRate(当前速率)", "videoTime"(播放时刻), "videoPrintScreen"(抓图), "videoProgress"(历史录像进度条)
  *<br></br>对象：自定义, 包含id和function，如{id: "videoClose",function: function(obj) {console.log(obj, "我要关闭啦！我是分屏" + obj.index);}}
  * @param {object} obj.bottomBar 位于视频底部的工具条对象 默认的
  * 除了obj.topBar、obj.bottomBar这两个默认的，可以自定义，如obj.leftBar(自定义工具条)、obj.centerBtn(自定义按钮)、obj.timeText(自定义静态文本)
  * @param {object} obj.centerBtn 自定义按钮
  * @param {string} obj.centerBtn.type 值为"button"(按钮)
  * @param {string} obj.centerBtn.style 值为"self-defined":自定义,"left":靠左侧,"right"(靠右侧)
  * @param {string} obj.centerBtn.className 定义的类名，可以为其设置样式
  * @param {boolean} obj.centerBtn.show true:显示 false:隐藏
  * @param {boolean} obj.centerBtn.tooltip 鼠标移到按钮上的文字提示
  * @param {function} obj.centerBtn.function 自定义函数 function: function(obj) {}
  * @param {object} obj.centerBtn.menuList 按钮的下拉子菜单，如：
  * <br></br>menuList: {list: [{id: 1,text: "电视墙",value: 1,gray: false,checked: false,function: function(obj){console.log(obj);}},
  * <br></br>{id: 2,text: "扩展屏",value: 2,gray: false,checked: false,function: function(obj){console.log(obj);}]
  *			}
  * @param {object} obj.timeText 自定义静态文本
  * @param {string} obj.timeText.type 值为"static"(静态文本)
  * @param {string} obj.timeText.id 唯一标识
  * @param {string} obj.timeText.className 类名，可以在此类名上自定义样式
  * @param {string} obj.timeText.text 文本
  * @param {boolean} obj.timeText.show true:显示文本 false:隐藏文本
  * <br></br>timeText: {id: 'textfield',type: 'static',className: 'video-time',text: "文本内容测试框，文字长度是多少实时实时",show: true}
  * @param {object} obj.leftBar 自定义工具条 值为"panel"(工具条(或者叫面板、区域)，可放置多个按钮)
  * @param {string} obj.leftBar.style 值为"self-defined" 代表自定义
  * @param {string} obj.leftBar.className 定义的类名，可以为其设置样式
  * @param {array} obj.leftBar.items 值为"self-defined" 工具条上的按钮对象数组，其中按钮对象可以参照上面的默认按钮或者自定义的按钮
  * <br></br>items: [{type: "button",style: "self-defined",className: "left-btn1",show: true,function: function(obj) {}}]
     */


	_createClass(Toolbar, [{
		key: 'createToolbar',
		value: function createToolbar(index, obj) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('createToolbar() param error!');
				return;
			}
			this.videos[_index].createToolbar(obj);
		}

		/**
   * 删除工具条
   * @method removeToolbar 
   * @param {number} index 窗口序号
   * @param {string} id 工具条元素id项，无此项时删除整个工具条
   */

	}, {
		key: 'removeToolbar',
		value: function removeToolbar(index, id) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('removeToolbar() param error!');
				return;
			}
			this.videos[_index].removeToolbar(id);
		}

		/**
   * 设置工具条的文本，针对静态文本按钮(即type为'static'的非下拉项)有效
   * @method setStaticContent 
   * @param {number} index 窗口序号
   * @param {string} id 工具条静态文本按钮id
   * @param {string} text 文本
   */

	}, {
		key: 'setStaticContent',
		value: function setStaticContent(index, id, text) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('setStaticContent() param error!');
				return;
			}
			this.videos[_index].setStaticContent(id, text);
		}

		/**
   * 获取静态文本内容，针对静态文本按钮(即type为'static'的非下拉项）有效
   * @method getStaticContent 
   * @param {number} index 窗口序号
   * @param {string} id 工具条元素id
   * @return {string}
   */

	}, {
		key: 'getStaticContent',
		value: function getStaticContent(index, id) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('getStaticContent() param error!');
				return;
			}
			return this.videos[_index].getStaticContent(id);
		}

		/**
   * 获取工具条上元素(非下拉菜单项)的状态
   * @method getToobarItemStatusById 
   * @param {number} index 窗口序号
   * @param {string} id 工具条元素id
   * @return {object} 元素信息className  style  type  show text tooltip
   */

	}, {
		key: 'getToobarItemStatusById',
		value: function getToobarItemStatusById(index, id) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('getToobarItemStatusById() param error!');
				return;
			}
			return this.videos[_index].getToobarItemStatusById(id);
		}

		/**
   * 设置工具条的下拉菜单状态，选中、置灰
   * @method setToolbarMenuById 
   * @param {number} index 窗口序号
   * @param {string} id 工具条元素id(下拉菜单的按钮)
   * @param {array} arr 工具条子菜单 
   * @param {Object} arr.arr[0]
   * @param {string} arr.arr[0].id 下拉菜单项的id
   * @param {boolean} arr.arr[0].checked 是否选中
   * @param {boolean} arr.arr[0].gray 是否置灰
   */

	}, {
		key: 'setToolbarMenuById',
		value: function setToolbarMenuById(index, id, arr) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('setToolbarMenuById() param error!');
				return;
			}
			this.videos[_index].setToolbarMenuById(id, arr);
		}

		/**
   * 设置工具条下拉菜单的属性
   * @method setToolbarItemAttrsById 
   * @param {number} index 窗口序号
   * @param {string} id 工具条下拉菜单项的id
   * @param {object} obj 属性对象	 
   * @param {boolean} obj.gray 是否置灰
   * @param {boolean} obj.checked 是否选中
   * @param {string} obj.text 显示的内容， 可含以上一项或多项
   */

	}, {
		key: 'setToolbarItemAttrsById',
		value: function setToolbarItemAttrsById(index, id, obj) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('setToolbarItemAttrsById() param error!');
				return;
			}
			return this.videos[_index].setToolbarItemAttrsById(id, obj);
		}

		/**
   * 设置工具条下拉菜单是否置灰
   * @method setToolbarItemGray 
   * @param {number} index 窗口序号
   * @param {string} id 工具条下拉菜单项的id
   * @param {boolean} flag true(置灰不可点击) false(不置灰可点击)
   */

	}, {
		key: 'setToolbarItemGray',
		value: function setToolbarItemGray(index, id, flag) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('setToolbarItemGray() param error!');
				return;
			}
			return this.videos[_index].setToolbarItemGray(id, flag);
		}

		/**
   * 设置工具条下拉菜单是否选中
   * @method setToolbarItemChecked 
   * @param {number} index 窗口序号
   * @param {string} id 工具条下拉菜单项的id
   * @param {boolean} flag true(选中) false(取消选中)
   */

	}, {
		key: 'setToolbarItemChecked',
		value: function setToolbarItemChecked(index, id, flag) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('setToolbarItemChecked() param error!');
				return;
			}
			return this.videos[_index].setToolbarItemChecked(id, flag);
		}

		/**
   * 设置工具条下拉菜单文本
   * @method setToolbarItemText 
   * @param {number} index 窗口序号
   * @param {string} id 工具条下拉菜单项的id
   * @param {string} text 文本
   */

	}, {
		key: 'setToolbarItemText',
		value: function setToolbarItemText(index, id, text) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('setToolbarItemText() param error!');
				return;
			}
			return this.videos[_index].setToolbarItemText(id, text);
		}
		/**
   * 显示或隐藏工具条，默认鼠标移入时自动显示
   * @method showOrHideToolbar 
   * @param {number} index 窗口序号
   * @param {boolean} flag  true:显示,false:隐藏, undefined时自动显示隐藏，设置后将失去自动显示隐藏属性
   * @param {string} id 工具条元素id; 若不传id,则为整个工具条
   */

	}, {
		key: 'showOrHideToolbar',
		value: function showOrHideToolbar(index, flag, id) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('showOrHideToolbar() param error!');
				return;
			}
			this.videos[_index].showOrHideToolbar(flag, id);
		}
		/**
      * 获取视频信息
      * @method getVideoInfo 
      * @param {number} index 窗口序号
      * @return {object} obj  视频分辨率、时长等 videowidth videoheight durtion
      */

	}, {
		key: 'getVideoInfo',
		value: function getVideoInfo(index) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index]) {
				this._showDebuggInfo('getVideoInfo() param error!');
				return null;
			}
			return this.videos[_index].getVideoInfo();
		}

		/**
      * 获取视频统计信息
      * @method getStreamRate 
      * @param {number} index 窗口序号
      * @return {object} obj  daterate码率, framerate帧率
      */

	}, {
		key: 'getStreamRate',
		value: function getStreamRate(index) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index]) {
				this._showDebuggInfo('getStreamRate() param error!');
				return null;
			}
			return this.videos[_index].getStreamRate();
		}

		/**
      * 设置播放时间
      * @method setPlayTime 
      * @param {number} index 窗口序号
      * @param {number} time 指定的播放时间，单位秒
      * @return {boolean} true-成功  false-错误
      */

	}, {
		key: 'setPlayTime',
		value: function setPlayTime(index, time) {
			var _index = parseInt(index);
			var _time = parseFloat(time);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index] || _time < 0 || isNaN(_time)) {
				this._showDebuggInfo('setPlayTime() param error!');
				return false;
			}
			return this.videos[_index].setPlayTime(_time);
		}

		/**
      * 获取播放速度
      * @method getPlaySpeed 
      * @param {number} index 窗口序号
      * @return {number} 当前播放速度
      */

	}, {
		key: 'getPlaySpeed',
		value: function getPlaySpeed(index) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index]) {
				this._showDebuggInfo('getPlaySpeed() param error!');
				return 0;
			}
			return this.videos[_index].getPlaySpeed();
		}

		/**
      * 设置播放速度
      * @method setPlaySpeed 
      * @param {number} index 窗口序号
      * @param {number} speed 指定的播放速度
      * @return {boolean} true-成功  false-错误
      */

	}, {
		key: 'setPlaySpeed',
		value: function setPlaySpeed(index, speed) {
			var _index = parseInt(index);
			var _speed = parseFloat(speed);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index] || _speed < 0 || isNaN(_speed) || _speed > 16) {
				this._showDebuggInfo('setPlaySpeed() param error!');
				return false;
			}
			return this.videos[_index].setPlaySpeed(_speed);
		}
		/**
      * 设置播放显示比例
      * @method setRatio 
      * @param {number} index 窗口序号
      * @param {string} value 显示比例 'origin' 'stretch' '4:3' '16:9' '16:10'，仅chrome36及以上版本支持非原始比例
      * @return {boolean} true-成功  false-错误
      */

	}, {
		key: 'setRatio',
		value: function setRatio(index, value) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index] || typeof value !== 'string') {
				this._showDebuggInfo('setRatio() param error!');
				return false;
			}
			return this.videos[_index].setRatio(value.toLowerCase());
		}
	}]);

	return Toolbar;
}();

exports.default = Toolbar;

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RightMenu = function () {
	function RightMenu() {
		_classCallCheck(this, RightMenu);
	}

	_createClass(RightMenu, [{
		key: 'initializer',
		value: function initializer(options) {}
		/**
   * 创建右键菜单
   * @method createRightMenu 
   * @param {number} index 窗口序号
   * @param {object} obj 右键菜单配置对象
   * @param {string} obj.id 唯一标识
   * @param {array} obj.menuList 子菜单对象数组
   * <br></br>menuList: [
   * <br></br>{id: 'videoClose'},
   * <br></br>{name: 'lineSplit'},
   * <br></br>{id: '3D',text: '3D云台',checked: false},{id: 'textonly',text: 'textonly',gray: true,function: function(obj) {console.log("obj:",obj);}},
   * <br></br>{name: 'lineSplit'},
   * <br></br>{id: 'test',text: 'test',menuList: [{id: 'test3',text: 'test child3',checked: true,gray: false,function: function(obj) {console.log("obj:",obj);}}
   * <br></br>]
   * @param {object} obj.menuList[0] 某一个子菜单对象
   * @param {string} obj.menuList[0].id  默认有：'videoClose'(关闭当前流)
   * @param {string} obj.menuList[0].name 'lineSplit'(分隔线)可以有多个,注意：只有分隔线用name,其余菜单项用id
   * @param {string} obj.menuList[0].text 子菜单文本
   * @param {boolean} obj.menuList[0].checked 子菜单是否选中 true: 选中 false:不选中
   * @param {boolean} obj.menuList[0].gray 子菜单是否置灰 true: 置灰 false:不置灰
   * @param {function} obj.menuList[0].function 自定义函数 function(item) {}
   */

	}, {
		key: 'createRightMenu',
		value: function createRightMenu(index, obj) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) != 'object') {
				this._showDebuggInfo('createRightMenu() param error!');
				return;
			}
			this.videos[_index].createRightMenu(obj);
		}

		/**
   * 删除右键菜单
   * @method removeRightMenu 
   * @param {number} index 窗口序号
   */

	}, {
		key: 'removeRightMenu',
		value: function removeRightMenu(index) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('removeRightMenu() param error!');
				return;
			}
			this.videos[_index].removeRightMenu();
		}

		/**
   * 获取右键菜单对象
   * @method getRightMenuItemById 
   * @param {number} index 窗口序号
   * @param {string} id 右键菜单对象id
   * @return {object}  text  checked gray等
   */

	}, {
		key: 'getRightMenuItemById',
		value: function getRightMenuItemById(index, id) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('getRightMenuItemById() param error!');
				return;
			}
			return this.videos[_index].getRightMenuItemById(id);
		}

		/**
   * 设置右键菜单项的属性
   * @method setRightMenuItemAttrsById 
   * @param {number} index 窗口序号
   * @param {string} id 右键菜单对象id
   * @param {object} obj 属性对象 
   * @param {boolean} obj.gray 是否置灰
   * @param {boolean} obj.checked 是否选中
   * @param {string} obj.text 显示的内容， 可含以上一项或多项
   */

	}, {
		key: 'setRightMenuItemAttrsById',
		value: function setRightMenuItemAttrsById(index, id, obj) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('setRightMenuItemAttrsById() param error!');
				return;
			}
			return this.videos[_index].setRightMenuItemAttrsById(id, obj);
		}

		/**
   * 设置右键菜单项是否置灰
   * @method setRightMenuItemGray 
   * @param {number} index 窗口序号
   * @param {string} id 右键菜单对象id
   * @param {boolean} flag true(置灰不可点击) false(不置灰可点击)
   */

	}, {
		key: 'setRightMenuItemGray',
		value: function setRightMenuItemGray(index, id, flag) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('setRightMenuItemGray() param error!');
				return;
			}
			return this.videos[_index].setRightMenuItemGray(id, flag);
		}

		/**
   * 设置右键菜单项是否选中
   * @method setRightMenuItemChecked 
   * @param {number} index 窗口序号
   * @param {string} id 右键菜单对象id
   * @param {boolean} flag true(选中) false(取消选中)
   */

	}, {
		key: 'setRightMenuItemChecked',
		value: function setRightMenuItemChecked(index, id, flag) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('setRightMenuItemChecked() param error!');
				return;
			}
			return this.videos[_index].setRightMenuItemChecked(id, flag);
		}

		/**
   * 设置右键菜单项文本
   * @method setRightMenuItemText 
   * @param {number} index 窗口序号
   * @param {string} id 右键菜单对象id
   * @param {string} text 文本
   */

	}, {
		key: 'setRightMenuItemText',
		value: function setRightMenuItemText(index, id, text) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('setRightMenuItemText() param error!');
				return;
			}
			return this.videos[_index].setRightMenuItemText(id, text);
		}
	}]);

	return RightMenu;
}();

exports.default = RightMenu;

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Ptz = function () {
	function Ptz() {
		_classCallCheck(this, Ptz);
	}

	_createClass(Ptz, [{
		key: 'initializer',
		value: function initializer() {}
		/**
      * 云台控制
      * @method ptzControl 
      * @param {number} index 窗口序号
      * @param {number} cmd 云台控制命令
   * 	<br></br>typedef enum
   *	<br></br>{
   *	<br></br>	NP_PTZ_PANRIGHT		= 0,		///< 云台右转，param为速度，param=0表示停止，param最大值为15
   *	<br></br>	NP_PTZ_RIGHTUP	    = 1,		///< 云台上仰和右转，param为速度，param=0表示停止，param最大值为15
   *	<br></br>	NP_PTZ_TILTUP	    = 2,		///< 云台上仰，param为速度，param=0表示停止，param最大值为15
   *	<br></br>	NP_PTZ_LEFTUP      	= 3,		///< 云台上仰和左转，param为速度，param=0表示停止，param最大值为15
   *	<br></br>	NP_PTZ_PANLEFT	    = 4,		///< 云台左转，param为速度，param=0表示停止，param最大值为15
   *	<br></br>	NP_PTZ_LEFTDOWN		= 5,		///< 云台下俯和左转，param为速度，param=0表示停止，param最大值为15
   *	<br></br>	NP_PTZ_TILTDOWN		= 6,		///< 云台下俯，param为速度，param=0表示停止，param最大值为15
   *	<br></br>	NP_PTZ_RIGHTDOWN  	= 7,     	///< 云台下俯和右转，param为速度，param=0表示停止，param最大值为15
   *	<br></br>	NP_PTZ_SCAN			= 8,		///< 云台左右自动扫描，param为速度，param=0表示停止，param最大值为15
   *	<br></br>	NP_PTZ_HALT		    = 9,		///< 云台停止
   *	<br></br>	NP_PTZ_IRIS         = 10,    	///< 光圈变化(param>0扩大、param<0缩小、param=0表示停止,范围[-15,15])
   *	<br></br>	NP_PTZ_ZOOM_IN    	= 11,		///< 焦距变大(param>0倍率变大、param<0倍率变小、param=0表示停止, 范围[-15,15])
   *	<br></br>	NP_PTZ_FOCUS       	= 12,		///< 聚焦调整(param>0前调、param<0后调、param=0表示停止, 范围[-15,15])
   *	<br></br>	NP_PTZ_VIEW	    	= 13,		///< 转到指定预置位，param为预置位标识
   *	<br></br>	NP_PTZ_SETVIEW	    = 14,		///< 设置当前位置为一个预置位，param为预置位标识
   *	<br></br>	NP_PTZ_AUX         	= 15,		///< 接通辅助设备开关(param=1 表示开,param=0 表示关,其它值无效)
   *	<br></br>	NP_PTZ_WASH			= 16,		///< 清洗
   *	<br></br>	NP_PTZ_WIPE			= 17,		///< 接通雨刷开关
   *	<br></br>	NP_PTZ_LIGHT	    = 18,		///< 接通灯光电源
   *	<br></br>	NP_PTZ_POWER	    = 19		///< 电源
   *	<br></br>} NPPTZCommand;
      * @param {number} param 云台控制参数
      * @return {boolean} true-成功  false-错误
      */

	}, {
		key: 'ptzControl',
		value: function ptzControl(index, cmd, param) {
			var _index = parseInt(index);
			var _cmd = parseInt(cmd);
			var _param = parseInt(param || 0);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index] || _cmd < 0 || _cmd > 19) {
				this._showDebuggInfo('ptzControl() param error!');
				return false;
			}
			return this.videos[_index].ptzControl(_cmd, _param);
		}
		/**
      * 3D云台控制
      * @method ptzControl3d 
      * @param {number} index 窗口序号
      * @param {number} direct 云台控制命令
      *  <br></br>typedef enum
   *	<br></br>{
   *	<br></br>	NP_PTZ3D_ZOOMIN		= 0,		///< 放大
   *	<br></br>	NP_PTZ3D_ZOOMOUT	= 1,		///< 缩小
   *	<br></br>	NP_PTZ3D_FOLLOW	    = 2,		///< 跟随
  	 *	<br></br>} NPPTZ3DCommand;
   * @param {number} x 范围控制参数，范围[0~1]
   * @param {number} y 范围控制参数，范围[0~1]
   * @param {number} w 范围控制参数，范围[0~1]
   * @param {number} h 范围控制参数，范围[0~1]
      * @return {boolean} true-成功  false-错误
      */

	}, {
		key: 'ptzControl3d',
		value: function ptzControl3d(index, direct, x, y, w, h) {
			var _index = parseInt(index);
			var _direct = parseInt(direct);
			var _x = parseFloat(x);
			var _y = parseFloat(y);
			var _w = parseFloat(w);
			var _h = parseFloat(h);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index] || _direct < 0 || _direct > 2) {
				this._showDebuggInfo('ptzControl3d() param error!');
				return false;
			}
			return this.videos[_index].ptzControl3d(direct, x, y, w, h);
		}

		/**
      * 云台锁定
      * @method ptzLock 
      * @param {number} index 窗口序号
      * @param {number} time 云台锁定时间，单位秒；0为解锁
      * @return {boolean} true-成功  false-错误
      */

	}, {
		key: 'ptzLock',
		value: function ptzLock(index, time) {
			var _index = parseInt(index);
			var _time = parseInt(time || 0);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index]) {
				this._showDebuggInfo('ptzLock() param error!');
				return false;
			}
			return this.videos[_index].ptzLock(_time);
		}
		/**
      * 是否执行云台动作，含窗口鼠标点击、鼠标滚轮、键盘
      * @property enablePtzMotion 默认true
      * @type {boolean}  true-执行 false-不执行 
      */

	}, {
		key: 'SetWindowPtz',
		value: function SetWindowPtz(index, flag) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index] || typeof flag !== 'boolean') {
				return false;
			}
			return this.videos[_index].SetWindowPTZ(flag);
		}

		/**
      * 开启关闭窗口云台，含窗口鼠标点击、鼠标滚轮、键盘
      * @method setWindowPtz 
      * @param {number} index 窗口序号
      * @param {boolean} flag  true-开启 false-关闭 默认关闭
      * @return {boolean} true-成功 false-错误
      */

	}, {
		key: 'setWindowPtz',
		value: function setWindowPtz(index, flag) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index] || typeof flag !== 'boolean') {
				return false;
			}
			return this.videos[_index].SetWindowPTZ(flag);
		}

		/**
      * 获取窗口云台状态
      * @method getWindowPtzStatus 
      * @param {number} index 窗口序号
      * @return {boolean} true-开启 false-关闭
      */

	}, {
		key: 'getWindowPtzStatus',
		value: function getWindowPtzStatus(index) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index]) {
				return false;
			}
			return this.videos[_index].isWindowPTZ();
		}

		/**
      * 窗口云台动作的速度
      * @property windowPtzSpeed 默认10
      * @type {number}   范围[1-15]
      */

	}, {
		key: 'setWindowPtzRange',


		/**
      * 设置窗口云台鼠标变化的范围
      * @method setWindowPtzRange 
      * @param {number} mode  0表示像素为单位；1表示百分比为单位
      * @param {number} top_bottom  与上下边界的距离	像素有效值>0 , 百分比有效值[1-49]
      * @param {number} left_right 于左右边界的距离
      * @return {boolean} true-成功 false-错误
      */
		value: function setWindowPtzRange(mode, top_bottom, left_right) {
			var _mode = parseInt(mode);
			var _top_bottom = parseInt(top_bottom);
			var _left_right = parseInt(left_right);
			if (_mode === 0 && _top_bottom > 0 && _left_right > 0 || _mode === 1 && _top_bottom > 0 && _top_bottom < 50 && _left_right > 0 && _left_right < 50) {
				this.opt.ptzRangeMode = _mode;
				this.opt.top_bottom = _top_bottom;
				this.opt.left_right = _left_right;
				for (var i = 0, length = this.videos.length; i < length; i++) {
					this.videos[i].setPTZRange(mode, top_bottom, left_right);
				}
				return true;
			}
			return false;
		}

		/**
      * 开启3D云台，优先级高于实时绘制，高于数字放大
      * @method setWindowPtz3D 
      * @param {number} index 窗口序号
      * @param {boolean} flag  true-开启 false-关闭 默认关闭
      * @param {object} style 矩形框属性
   * @param {number} style.fillOpacity 填充透明度 0
   * @param {string} style.lineColor 颜色 "#0F0"
   * @param {string} style.lineWidth 线宽 "2px"
      * @return {boolean} true-成功 false-错误
      */

	}, {
		key: 'setWindowPtz3D',
		value: function setWindowPtz3D(index, flag, style) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index] || typeof flag !== 'boolean') {
				return false;
			}
			if (flag) {
				return this.videos[_index].startPtz3D(style);
			} else {
				return this.videos[_index].stopPtz3D();
			}
		}

		/**
      * 获取窗口3D云台状态
      * @method getWindowPtz3DStatus 
      * @param {number} index 窗口序号
      * @return {boolean} true-开启 false-关闭
      */

	}, {
		key: 'getWindowPtz3DStatus',
		value: function getWindowPtz3DStatus(index) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index]) {
				return false;
			}
			return this.videos[_index].getPtz3DStatus();
		}

		/**
      * 开启数字放大，优先级高于实时绘制，低于3D云台
      * @method startZoom 
      * @param {number} index 窗口序号
      * @param {object} style 矩形框属性
   * @param {number} style.fillOpacity 填充透明度 0
   * @param {string} style.lineColor 颜色 "#F00"
   * @param {string} style.lineWidth 线宽 "2px"
      * @return {boolean} true-成功 false-错误
      */

	}, {
		key: 'startZoom',
		value: function startZoom(index, style) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index]) {
				return false;
			}

			return this.videos[_index].startZoom(style);
		}

		/**
      * 结束数字放大
      * @method stopZoom 
      * @param {number} index 窗口序号
      */

	}, {
		key: 'stopZoom',
		value: function stopZoom(index) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index]) {
				return false;
			}
			return this.videos[_index].stopZoom();
		}

		/**
      * 获取数字放大状态
      * @method getZoomStatus 
      * @param {number} index 窗口序号
      * @return {string} init未开启，begin已开启，drawing绘制中，zooming放大中，end结束(同init)
      */

	}, {
		key: 'getZoomStatus',
		value: function getZoomStatus(index) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length || !this.videos[_index]) {
				return false;
			}
			return this.videos[_index].getZoomStatus();
		}

		/**
      * 双击原始视频关闭数字放大，默认false
      * @property enableStopZoomByDblclick 
      * @type {Boolean}  true:双击关闭  false:双击不关闭
      */

	}, {
		key: 'enablePtzMotion',
		set: function set(flag) {
			if (typeof flag !== 'boolean') {
				this._showDebuggInfo('set enablePtzMotion() param error!');
				return;
			}
			this.opt.enablePtzMotion = flag;
			for (var i = 0, length = this.videos.length; i < length; i++) {
				this.videos[i].EnablePTZ(flag);
			}
			return;
		},
		get: function get() {
			return this.opt.enablePtzMotion;
		}
	}, {
		key: 'windowPtzSpeed',
		set: function set(ptzSpeed) {
			var _ptzSpeed = parseInt(ptzSpeed);
			if (_ptzSpeed <= 0 || _ptzSpeed > 15) {
				this._showDebuggInfo('set windowPtzSpeed() param error!');
				return;
			}
			this.opt.windowPtzSpeed = _ptzSpeed;
			for (var i = 0, length = this.videos.length; i < length; i++) {
				this.videos[i].SetWndPtzSpeed(_ptzSpeed);
			}
		},
		get: function get() {
			return this.opt.windowPtzSpeed;
		}
	}, {
		key: 'enableStopZoomByDblclick',
		set: function set(flag) {
			flag = flag ? true : false;
			this.opt.enableStopZoomByDblclick = flag;
			for (var i = 0, length = this.videos.length; i < length; i++) {
				this.videos[i].stopZoomByDblclick(flag);
			}
		},
		get: function get() {
			return this.opt.enableStopZoomByDblclick;
		}
	}]);

	return Ptz;
}();

exports.default = Ptz;

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WaterMark = function () {
	function WaterMark() {
		_classCallCheck(this, WaterMark);
	}

	_createClass(WaterMark, [{
		key: 'initializer',
		value: function initializer() {}
		/**
   * 添加水印
   * @method addWaterMark
   * @param {number} index 窗口 
   * @param {array|Object} objarr 水印信息对象，数组或对象 
   * @param {Object} objarr.objarr[0] 水印对象 水印分为两种：文字水印和图片水印
   * @param {string} objarr.objarr[0].id 唯一标识id 必填
   * @param {string} objarr.objarr[0].text 文字水印 与info.icon必须只能填一个
   * @param {string} objarr.objarr[0].fontSize 文字的字体大小，如14px
   * @param {string} objarr.objarr[0].fontWeight 文字的字体粗细，如bold
   * @param {string} objarr.objarr[0].color 文字的颜色，如#Foo
   * @param {string} objarr.objarr[0].icon 图片水印路径 当水印是图片时此项必填
   * @param {string} objarr.objarr[0].width 图片的宽度 当水印是图片时此项必填
   * @param {string} objarr.objarr[0].height 图片的高度 当水印是图片时此项必填
   * @param {string} objarr.objarr[0].moving 水印移动方式 可选值："static"(静态水印) "cycle"(循环走马灯效果) "jump"(跳跃效果) 默认是static
   * @param {number} objarr.objarr[0].step 跳跃步骤，当info.moving为"cycle"时，可以设置此值，默认为1
   * @param {string} objarr.objarr[0].top 与视频顶部的距离,如 50px 或者 50%
   * @param {string} objarr.objarr[0].left 与视频左边的距离,如 50px 或者 50%
   * @param {string} objarr.objarr[0].opacity 透明度，默认为1
   * @param {string} objarr.objarr[0].transform 倾斜方式 rotate(7deg)
   */

	}, {
		key: 'addWaterMark',
		value: function addWaterMark(index, arr) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('addWaterMark() param error!');
				return;
			}
			this.videos[_index].addWaterMark(arr);
		}

		/**
   * 获取水印
   * @method getWaterMarkById
   * @param {number} index 窗口 
   * @param {string} id 唯一标识id id为null表示所有
   * @return {array|object} 
   */

	}, {
		key: 'getWaterMarkById',
		value: function getWaterMarkById(index, id) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('getWaterMarkById() param error!');
				return null;
			}
			return this.videos[_index].getWaterMarkById(id);
		}
		/**
   * 删除水印
   * @method delWaterMarkById
   * @param {number} index 窗口 
   * @param {string} id 唯一标识id id为null表示所有
   */

	}, {
		key: 'delWaterMarkById',
		value: function delWaterMarkById(index, id) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('delWaterMarkById() param error!');
				return;
			}
			this.videos[_index].delWaterMarkById(id);
		}
		/**
   * 改变水印
   * @method changeWaterMarkById
   * @param {number} index 窗口 
   * @param {string} id 唯一标识id
   * @param {object} attrObj 改变的属性对象 包含属性：text、fontSize、fontWeight、color、icon、width、height、top、left、opacity
   */

	}, {
		key: 'changeWaterMarkById',
		value: function changeWaterMarkById(index, id, attrObj) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('changeWaterMarkById() param error!');
				return;
			}
			this.videos[_index].changeWaterMarkById(id, attrObj);
		}
	}]);

	return WaterMark;
}();

exports.default = WaterMark;

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _config = __webpack_require__(337);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RealTimeVideoOverlay = function () {
	function RealTimeVideoOverlay() {
		_classCallCheck(this, RealTimeVideoOverlay);
	}

	_createClass(RealTimeVideoOverlay, [{
		key: "initializer",
		value: function initializer() {
			// 威目实时视频叠加画笔颜色对象初始化
			this.defaultConfig = (0, _config.createDefaultConfig)();
			this.VMStrokeColorObj = {}; // 画笔颜色对象 key:目标类型 value:画笔颜色
			this._initStrokeColorByType();
			this.VMTitleObj = {}; // 矩形框标题对象 key:目标类型 value:标题
			this._initTitleByType();
		}
		// 设置实时视频叠加画笔颜色

	}, {
		key: "_setRTVOStrokeColor",
		value: function _setRTVOStrokeColor(type, color) {
			this._setStrokeColorByType(type, color);
			for (var i = 0, len = this.layoutcount; i < len; i++) {
				this.videos[i].vOpt.VMStrokeColorObj = this.VMStrokeColorObj;
			}
		}
		/**
   * 威目实时视频叠加行人画笔颜色，默认"rgb(255,42,245)"
   * @property vmPersonStrokeColor 
   * @type {number} 颜色值(支持16进制和rgb两种色值)
   */

	}, {
		key: "_initStrokeColorByType",


		// 根据type初始化威目画笔颜色
		value: function _initStrokeColorByType() {
			this.VMStrokeColorObj[this.defaultConfig.OBJ_TYPE_CAR] = "rgb(214,38,30)"; // 车辆  默认红色
			this.VMStrokeColorObj[this.defaultConfig.OBJ_TYPE_BICYCLE] = "rgb(0,211,12)"; // 自行车  默认绿色
			this.VMStrokeColorObj[this.defaultConfig.OBJ_TYPE_TRICYCLE] = "rgb(0,211,12)"; // 非机动车  默认绿色
			this.VMStrokeColorObj[this.defaultConfig.OBJ_TYPE_PEDESTRIAN] = "rgb(255,42,245)"; // 行人 默认粉色
			this.VMStrokeColorObj[this.defaultConfig.OBJ_TYPE_FACE] = "rgb(255,42,245)"; // 人脸 默认粉色
		}
		// 根据type初始化标题文字

	}, {
		key: "_initTitleByType",
		value: function _initTitleByType(type) {
			this.VMTitleObj[this.defaultConfig.OBJ_TYPE_CAR] = "车辆"; // 车辆  默认红色
			this.VMTitleObj[this.defaultConfig.OBJ_TYPE_BICYCLE] = "自行车"; // 自行车  默认绿色
			this.VMTitleObj[this.defaultConfig.OBJ_TYPE_TRICYCLE] = "非机动车"; // 非机动车  默认绿色
			this.VMTitleObj[this.defaultConfig.OBJ_TYPE_PEDESTRIAN] = "行人"; // 行人 默认粉色
			this.VMTitleObj[this.defaultConfig.OBJ_TYPE_FACE] = "人脸"; // 人脸 默认粉色
		}
		// 根据type设置画笔颜色

	}, {
		key: "_setStrokeColorByType",
		value: function _setStrokeColorByType(type, color) {
			var obj = {};
			obj[type] = color;
			this.VMStrokeColorObj = Object.assign(this.VMStrokeColorObj, obj);
		}
	}, {
		key: "vmPersonStrokeColor",
		set: function set(color) {
			this._setRTVOStrokeColor(this.defaultConfig.OBJ_TYPE_PEDESTRIAN, color);
		},
		get: function get() {
			return this.VMStrokeColorObj[this.defaultConfig.OBJ_TYPE_PEDESTRIAN];
		}
		/**
   * 威目实时视频叠加车辆画笔颜色，默认'rgb(214,38,30)'
   * @property vmCarStrokeColor 
   * @type {number} 颜色值(支持16进制和rgb两种色值)
   */

	}, {
		key: "vmCarStrokeColor",
		set: function set(color) {
			this._setRTVOStrokeColor(this.defaultConfig.OBJ_TYPE_CAR, color);
		},
		get: function get() {
			return this.VMStrokeColorObj[this.defaultConfig.OBJ_TYPE_CAR];
		}
		/**
   * 威目实时视频叠加自行车画笔颜色，默认'rgb(0,211,12)'
   * @property vmBicycleStrokeColor 
   * @type {number} 颜色值(支持16进制和rgb两种色值)
   */

	}, {
		key: "vmBicycleStrokeColor",
		set: function set(color) {
			this._setRTVOStrokeColor(this.defaultConfig.OBJ_TYPE_BICYCLE, color);
		},
		get: function get() {
			return this.VMStrokeColorObj[this.defaultConfig.OBJ_TYPE_BICYCLE];
		}
		/**
   * 威目实时视频叠加非机动车画笔颜色，默认'rgb(0,211,12)'
   * @property vmTricycleStrokeColor 
   * @type {number} 颜色值(支持16进制和rgb两种色值)
   */

	}, {
		key: "vmTricycleStrokeColor",
		set: function set(color) {
			this._setRTVOStrokeColor(this.defaultConfig.OBJ_TYPE_TRICYCLE, color);
		},
		get: function get() {
			return this.VMStrokeColorObj[this.defaultConfig.OBJ_TYPE_TRICYCLE];
		}
		/**
   * 威目实时视频叠加人脸画笔颜色，默认'rgb(255,42,245)'
   * @property vmFaceStrokeColor 
   * @type {number} 颜色值(支持16进制和rgb两种色值)
   */

	}, {
		key: "vmFaceStrokeColor",
		set: function set(color) {
			this._setRTVOStrokeColor(this.defaultConfig.OBJ_TYPE_FACE, color);
		},
		get: function get() {
			return this.VMStrokeColorObj[this.defaultConfig.OBJ_TYPE_FACE];
		}

		/**
   * 是否显示威目实时目标属性，默认true
   * @property vmShowAttribute 
   * @type {boolean} true显示属性，false不显示属性
   */

	}, {
		key: "vmShowAttribute",
		set: function set(flag) {
			this.opt.vmShowAttribute = flag || false;
			for (var i = 0, length = this.videos.length; i < length; i++) {
				this.videos[i].enableShowAttribute(this.opt.vmShowAttribute);
			}
		},
		get: function get() {
			return this.opt.vmShowAttribute;
		}
	}]);

	return RealTimeVideoOverlay;
}();

exports.default = RealTimeVideoOverlay;

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createDefaultConfig = createDefaultConfig;
var defaultConfig = exports.defaultConfig = {
    enableWorker: false,
    enableStashBuffer: true,
    stashInitialSize: undefined,

    isLive: false,
    lazyLoad: true, //缓存检测
    lazyLoadMaxDuration: 3 * 60, //录像最大缓存
    lazyLoadRecoverDuration: 30, //恢复流时长
    deferLoadAfterSourceOpen: true,

    // autoCleanupSourceBuffer: default as false, leave unspecified
    autoCleanupMaxBackwardDuration: 90, //已播放的最大缓存
    autoCleanupMinBackwardDuration: 10, //
    adaptiveSpeedDurationForLive: 2, //直播缓存时间，超过则快速播


    statisticsInfoReportInterval: 1000,
    fixAudioTimestampGap: true,
    accurateSeek: true,
    seekType: 'range', // [range, param, custom]
    seekParamStart: 'bstart',
    seekParamEnd: 'bend',
    rangeLoadZeroStart: false,
    customSeekHandler: undefined,
    reuseRedirectedURL: false,
    // referrerPolicy: leave as unspecified
    headers: undefined,

    OBJ_TYPE_CAR: 1, // 车辆
    OBJ_TYPE_BICYCLE: 2, // 自行车 
    OBJ_TYPE_TRICYCLE: 3, // 非机动车
    OBJ_TYPE_PEDESTRIAN: 4, // 行人
    OBJ_TYPE_FACE: 1024 // 人脸
};

function createDefaultConfig() {
    return Object.assign({}, defaultConfig);
}

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RealTimeDrawing = function () {
	function RealTimeDrawing() {
		_classCallCheck(this, RealTimeDrawing);
	}

	_createClass(RealTimeDrawing, [{
		key: 'initializer',
		value: function initializer() {}
		/**
   * 开启某窗口的实时绘制，优先级低于3D云台，绘制结果通过OnDrawingObject事件给出
   * @method startDrawing
   * @param {number} index 窗口 
   * @param {string} type 类型 "rect"(矩形) "polygon"多边形  "line"线  "doubleline" 双线
   * @param {object} style 绘制图形属性
   * @param {string} style.arrow 箭头类型 0：没有箭头 1：顶点箭头（点击可换向） 2：左右箭头（点击可换向） line支持012，doubleline支持01
   * @param {number} style.distance 双线间距离 10
   * @param {number} style.fillOpacity 填充透明度 0.1
   * @param {number} style.opacity  线透明度0.7
   * @param {string} style.lineColor 颜色 "#00F"
   * @param {string} style.lineWidth 线宽 "2px"
   * @param {string} style.dasharray 线型 "5,5" 5个填充，5个像素不填充
   */

	}, {
		key: 'startDrawing',
		value: function startDrawing(index, type, style) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length || type !== 'rect' && type != 'polygon' && type !== 'line' && type !== 'doubleline') {
				this._showDebuggInfo('startDrawing() param error!');
				return false;
			}
			return this.videos[_index].startDrawing(type, style);
		}
		/**
   * 结束某窗口的实时绘制
   * @method stopDrawing
   * @param {number} index 窗口 
   * @param {boolean} deleteall 是否删除已绘制图形
   */

	}, {
		key: 'stopDrawing',
		value: function stopDrawing(index, deleteall) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('stopDrawing() param error!');
				return;
			}
			this.videos[_index].stopDrawing(deleteall);
		}
		/**
   * 删除某窗口绘制的图形
   * @method deleteDrawingById
   * @param {number} index 窗口 
   * @param {string} id 图形唯一标识，id为null表示所有
   */

	}, {
		key: 'deleteDrawingById',
		value: function deleteDrawingById(index, id) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('deleteDrawingById() param error!');
				return;
			}
			this.videos[_index].deleteDrawingById(id);
		}

		/**
   * 添加图像对象，结果通过OnDrawingObject事件给出
   * @method addDrawingObject
   * @param {number} index 窗口 
   * @param {object|array} obj 图形信息，添加多个时可为数组
   * @param {string} obj.type 图形类型，必须项 "rect"(矩形) "polygon"多边形  "line"线  "doubleline" 双线 
   * @param {string} obj.id 图形唯一标识，需确保唯一，无此项时内部生成
   * @param {number} obj.fillOpacity 填充透明度 0.1
   * @param {string} obj.lineColor 颜色 "#f0f"
   * @param {string} obj.lineWidth 线宽 "1px"
   * @param {string} obj.dasharray 线型 "5,5" 5个填充，5个像素不填充
   * @param {number} obj.opacity  图形透明度 1
   * @param {number} obj.arrow  线的箭头类型 0：没有箭头 1：顶点箭头（点击可换向） 2：左右箭头（点击可换向） line支持012，doubleline支持01
   * @param {number} obj.arrowpos  线的箭头位置，可为0或1，表示线的两个顶点或者左右两侧
   * @param {number} obj.distance 双线间距离 10
   * @param {number} obj.postype 位置类型 0为百分比，1为视频像素；如果使用视频像素，请在第一帧回调会调用该接口，否则视频像素按1920*1080计算
   * @param {array} obj.posinfo 位置信息，必须项，polygon至少需要3个点，其他有且只有两个点；postype为0时[{x: 0.45, y: 0.23},{x: 0.78, y: 0.56}]，postype为1时[{x: 100, y: 100},{x: 200, y: 200}]
   * @param {object} obj.min 矩形框的最小视频像素
   * @param {number} obj.min.x 宽度
   * @param {number} obj.min.y 高度
   * @param {object} obj.max 矩形框的最大视频像素
   * @param {number} obj.max.x 宽度
   * @param {number} obj.max.y 高度
   * @param {string} obj.title 标题，矩形框会自动添加上当前框的视频像素大小
   * @param {object} obj.titleStyle 文字样式对象
   * @param {string} obj.titleStyle.fontSize 文字大小 "16px", : "normal"
   * @param {string} obj.titleStyle.fontWeight 文字线宽 "normal" "bold"等
   */

	}, {
		key: 'addDrawingObject',
		value: function addDrawingObject(index, obj) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('addDrawingObject() param error!');
				return;
			}
			this.videos[_index].addDrawingObject(obj);
		}

		/**
   * 获取所有图像对象
   * @method getAllDrawingObject
   * @param {number} index 窗口 
   * @return {array} 图像信息数组 [{id: "7AAB1EA82029FF29CCD3B6A8660B43E4", type: "rect", posinfo: [{x: 0.130, y: 0.130}, {x: 0.320, y:0.330}], lineColor: "#07f", lineWidth: "2px", opacity: 1, fillOpacity: 0.1, arrow: 1, arrowpos: 1, max: {x: 1920, y: 1080}, min: {x: 400, y: 300}, title: "处理区域", videoHeight: 1080, videoWidth: 1920}]
   */

	}, {
		key: 'getAllDrawingObject',
		value: function getAllDrawingObject(index) {
			var _index = parseInt(index);
			if (_index < 0 || _index >= this.videos.length) {
				this._showDebuggInfo('getAllDrawingObject() param error!');
				return null;
			}
			return this.videos[_index].getAllDrawingObject();
		}
	}]);

	return RealTimeDrawing;
}();

exports.default = RealTimeDrawing;

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // 工具集


var _tool = __webpack_require__(329);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var HistoryTimeAxis = function () {
    function HistoryTimeAxis() {
        _classCallCheck(this, HistoryTimeAxis);
    }

    _createClass(HistoryTimeAxis, [{
        key: "initializer",
        value: function initializer() {}

        //历史录像进度轴参数
        /**
         * 历史录像进度轴参数，含背景色backcolor，有录像颜色vodcolor，无录像颜色novodcolor，当前时间游标颜色和位置thumbcolor、thumbpos，标题颜色captioncolor，当前时间颜色curtimecolor，是否展开shrink
         * @property rcdtimershaft 
         * @type {object}  {backcolor:"rgba(0, 0, 0, 0.9)",vodcolor:"#2df0f9",novodcolor:"#927d7d",thumbcolor:"red",thumbpos:"53%", captioncolor:"#2df0f9", curtimecolor:"#2df0f9", shrink:true} 
         */

    }, {
        key: "_historyTimeAxisFocusChange",
        value: function _historyTimeAxisFocusChange(oldFocusIndex, nFocusIndex) {
            if (!this.videos || !this.enablercdtimershaft) return;
            this._showTimeAxisIfNeed();
        }
    }, {
        key: "_historyTimeAxisSizeChange",
        value: function _historyTimeAxisSizeChange() {
            var videos = this.videos;
            if (!videos || !this.enablercdtimershaft) return;
            videos[this._timeAxisIndex] && videos[this._timeAxisIndex].updateTimeAxis();
        }
    }, {
        key: "_historyTimeAxisVideoClose",
        value: function _historyTimeAxisVideoClose(index) {
            //关流
            var videos = this.videos;
            if (!videos || !this.enablercdtimershaft) return;
            if (this._timeAxisIndex === index) {
                this._closeTimeAxis();

                this._showTimeAxisIfNeed();
            }
        }
    }, {
        key: "_historyTimeAxisLevel",
        value: function _historyTimeAxisLevel(index, level, shrink) {
            if (index == this._timeAxisIndex) {
                this.opt.rcdtimershaft.level = level;
                if (shrink != undefined) {
                    this.opt.rcdtimershaft.shrink = shrink;
                }
            }
        }
    }, {
        key: "_showTimeAxisIfNeed",
        value: function _showTimeAxisIfNeed() {
            var videos = this.videos;
            if (!videos || !this.enablercdtimershaft) return;
            if (this._isVodPlay(this.nFocusIndex)) {
                //焦点窗口是录像
                if (this.nFocusIndex == this._timeAxisIndex && videos[this._timeAxisIndex].isShowTimeAxis()) return;
                this._closeTimeAxis();
                this._timeAxisIndex = this.nFocusIndex;
                videos[this._timeAxisIndex] && videos[this._timeAxisIndex].showTimeAxis(this.opt.rcdtimershaft);
                return;
            }
            if (this.rcdtimershaftshowtype == 0 && this.rcdtimershaft.curPositon != "fix") {
                //焦点窗口&&录像
                this._closeTimeAxis();
                return;
            }
            if (videos[this._timeAxisIndex] && videos[this._timeAxisIndex].isVodPlay() && videos[this._timeAxisIndex].isShowTimeAxis()) {
                return;
            }
            this._closeTimeAxis();
            var nbusy = -1;
            for (var i = 0; i < videos.length; i++) {
                if (videos[i].isVodPlay()) {
                    //寻找新的vod窗口
                    this._timeAxisIndex = i;
                    videos[i].showTimeAxis(this.opt.rcdtimershaft);
                    return;
                } else if (videos[i].getIdleOrBusy()) {
                    nbusy = i;
                }
            }
            if (this.rcdtimershaftshowtype == 2 && nbusy != -1) {
                //有视频时显示
                this._timeAxisIndex = nbusy;
                videos[nbusy].showTimeAxis(this.opt.rcdtimershaft);
            } else if ((this.rcdtimershaftshowtype == 3 || this.rcdtimershaft.curPositon === "fix") && videos[0]) {
                this._timeAxisIndex = 0;
                videos[0].showTimeAxis(this.opt.rcdtimershaft);
            }
        }
    }, {
        key: "_historyTimeAxisVideoStart",
        value: function _historyTimeAxisVideoStart(index) {
            //开流
            var videos = this.videos;
            if (!videos || !this.enablercdtimershaft) return;
            var video = videos[index];
            if (video) {
                if (video.isVodPlay()) {
                    //是录像
                    //焦点窗口或者之前显示的不是录像
                    if (this.nFocusIndex == index || !this._isVodPlay(this._timeAxisIndex)) {
                        this._closeTimeAxis();
                        this._timeAxisIndex = index;
                        video.showTimeAxis(this.opt.rcdtimershaft);
                    }
                } else if (this.rcdtimershaftshowtype == 2 && this._timeAxisIndex == -1) {
                    this._closeTimeAxis();
                    this._timeAxisIndex = index;
                    video.showTimeAxis(this.opt.rcdtimershaft);
                }
            }
        }
    }, {
        key: "_isVodPlay",
        value: function _isVodPlay(index) {
            var _index = parseInt(index);
            if (_index < 0 || _index >= this.videos.length) {
                return false;
            }
            return this.videos[_index].isVodPlay();
        }
    }, {
        key: "_closeTimeAxis",
        value: function _closeTimeAxis() {
            var videos = this.videos;
            for (var i = 0; i < videos.length; i++) {
                videos[i] && videos[i].closeTimeAxis();
            };
            this._timeAxisIndex = -1;
        }
    }, {
        key: "rcdtimershaft",
        set: function set(options) {
            this.opt.rcdtimershaft = _tool.Toolkit.deepMerge(this.opt.rcdtimershaft, options);
            var index = this._timeAxisIndex;
            this._closeTimeAxis();
            this._timeAxisIndex = index;
            this.videos[index] && this.videos[index].showTimeAxis(this.opt.rcdtimershaft);
        },
        get: function get() {
            return this.opt.rcdtimershaft;
        }

        /**
            * 是否启用历史录像进度轴，默认true
            * @property enablercdtimershaft 
            * @type {boolean} true-启用 false-禁用
            */

    }, {
        key: "enablercdtimershaft",
        set: function set(flag) {
            this.opt.enablercdtimershaft = flag;
            if (this.opt.enablercdtimershaft && this.videos) {
                this._showTimeAxisIfNeed();
            } else {
                this._closeTimeAxis();
            }
        },
        get: function get() {
            return this.opt.enablercdtimershaft;
        }

        /**
         * 历史录像进度轴显示方式，默认为0
         * @property rcdtimershaftshowtype 
         * @type {number}  0, 焦点窗口为录像时显示；1, 布局窗口中有录像时显示；2, 布局窗口中有视频时显示；3, 一直显示；显示内容优先级 播放类型>焦点窗口；播放类型：录像>文件>实时流；焦点窗口>非焦点窗口
         */

    }, {
        key: "rcdtimershaftshowtype",
        set: function set(type) {
            this.opt.rcdtimershaftshowtype = type;
            if (this.opt.enablercdtimershaft && this.videos) {
                this._showTimeAxisIfNeed();
            }
        },
        get: function get() {
            return this.opt.rcdtimershaftshowtype;
        }
    }]);

    return HistoryTimeAxis;
}();

exports.default = HistoryTimeAxis;

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _player = __webpack_require__(341);

var _player2 = _interopRequireDefault(_player);

var _Toolbar = __webpack_require__(384);

var _Toolbar2 = _interopRequireDefault(_Toolbar);

var _RightMenu = __webpack_require__(387);

var _RightMenu2 = _interopRequireDefault(_RightMenu);

var _Ptz = __webpack_require__(388);

var _Ptz2 = _interopRequireDefault(_Ptz);

var _WaterMark = __webpack_require__(390);

var _WaterMark2 = _interopRequireDefault(_WaterMark);

var _RealTimeVideoOverlay = __webpack_require__(391);

var _RealTimeVideoOverlay2 = _interopRequireDefault(_RealTimeVideoOverlay);

var _RealTimeDrawing = __webpack_require__(392);

var _RealTimeDrawing2 = _interopRequireDefault(_RealTimeDrawing);

var _HistoryTimeAxis = __webpack_require__(393);

var _HistoryTimeAxis2 = _interopRequireDefault(_HistoryTimeAxis);

var _PtzZoom = __webpack_require__(394);

var _PtzZoom2 = _interopRequireDefault(_PtzZoom);

var _eventUtil = __webpack_require__(330);

var _tool = __webpack_require__(329);

var _events = __webpack_require__(343);

var _events2 = _interopRequireDefault(_events);

var _NPPlayerEvent = __webpack_require__(389);

var _NPPlayerEvent2 = _interopRequireDefault(_NPPlayerEvent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// 工具条

// 右键菜单

// 云台

// 水印

// 威目实时视频叠加

// 实时绘制

// 云台 数字放大

//历史录像进度条

// 事件工具集

// 工具集


// 用于事件通知

// NPPlayer的默认事件，包含窗口事件（单击、双击、窗口交换）、焦点改变等


var PlayerLoadingInfo = {
	STARTING: '正在开流...',
	LOADING: '视频流加载中...',
	RECONNECT_PRE: '第',
	RECONNECT: '次重连中...'
};

var NPVideo = function (_EventUtil$aggregatio) {
	_inherits(NPVideo, _EventUtil$aggregatio);

	function NPVideo(options) {
		_classCallCheck(this, NPVideo);

		//默认的参数
		var _this2 = _possibleConstructorReturn(this, (NPVideo.__proto__ || Object.getPrototypeOf(NPVideo)).call(this));

		var defaultOptions = {
			// video元素
			ele: 'npvideo-ele',
			// video路径
			src: null,
			// 播放相关的回调
			callback: null,
			//工具条
			toolbar: [],
			//右键菜单
			rightMenu: [],
			//背景图
			defBgClass: 'h5vp-bg-img',
			//错误背景
			errorBgClass: "h5vp-bg-img-error",

			bgImgClass: null,
			backgroundColor: '#000',
			//画面比例：origin 、stretch、4:3、16:9、16:10
			ratio: 'stretch',
			showerror: true,
			// ================ 暴露的方法
			// 可让用户自定义扩展   点击下一个视频的操作
			clickFunc: function clickFunc() {}
		};
		_this2.vOpt = _tool.Toolkit.deepMerge(defaultOptions, options);
		_this2._emitter = new _events2.default();

		//是否是最大化的分屏
		_this2.isMaxScreen = false;
		//是否是空闲的，初始时没有视频播放，是空闲的
		_this2.isIdle = true;
		//是否是焦点窗口
		_this2.isFocusScreen = false;

		_this2._videoRatio = _this2.vOpt.ratio;
		_this2._showLoading = false;

		//初始工具条的数组
		_this2.vOpt.toolbarEleArr = [];
		//获取初始时窗口的宽高
		_this2._getOrignWidthHeight();

		//视频播放相关信息初始化
		_this2._videoplayer = null;
		_this2._lastdecodedFrames = 0;
		_this2._videoWidth = 0;
		_this2._videoHeight = 0;
		_this2._fps = 0;
		_this2._dataRate = 0;
		_this2._firstError = false;
		_this2._restartTimes = 0;
		_this2._createVideoEle();

		_this2._onstatisticsinfo = null;
		//this._onerror = null;
		//this._onresponse = null;
		//this._onnotify = null;
		_this2._videotitle = '';
		_this2._videoSrc = null;
		_this2._paramSrc = null;
		_this2._videoRecordList = null;
		_this2._videoRecordRange = null;
		_this2._videoStartPts = 0; //录像实际开始pts
		_this2._srcStartPts = 0; //参数指定的pts
		_this2._playtimeOffset = 0; //单位秒
		_this2._isVodPlay = false;

		// 历史视频相关的信息
		// 是否已经加载初始化元数据
		_this2.isFirstCanPlay = false;
		_this2._hasPlayed = false;
		// 设置播放的状态
		_this2.isPlaying = false;
		// 设置视频时长
		_this2.durationT = 0;
		// 当前的播放时间
		_this2.currentT = 0;
		// 进度百分比
		_this2.currentP = 0;
		// 进度条是否可拖动
		_this2.isDragProgress = false;
		// 进度条的宽度
		_this2.maxProgressWidth = 0;

		_this2.mousewheelTimer = null;
		// 标记h5vp-video-container容器是否处于mouseOver
		_this2.videoCMouseOverFlag = false;
		// 保存滤镜对象
		_this2.filterObj = { bright: 50, contrast: 50, saturate: 50, tone: 50, blur: 50, gray: 50, invert: 50, opacity: 50, sepia: 50 };
		return _this2;
	}

	_createClass(NPVideo, [{
		key: 'destroy',
		value: function destroy() {
			if (this._videoplayer) {
				this._videoplayer.destroy();
				this._videoplayer = null;
				this._emitter.emit(_NPPlayerEvent2.default.OnVideoClose, this.vOpt.index);
			}
			this.closeTimeAxis(); //时间轴与视频不绑定，但与窗口绑定
		}
		//获取初始时窗口的宽高

	}, {
		key: '_getOrignWidthHeight',
		value: function _getOrignWidthHeight() {
			// 记下每个窗口的宽高
			this.width = this.vOpt.width;
			this.height = this.vOpt.height;
		}

		// 创建canvas

	}, {
		key: '_createCanvas',
		value: function _createCanvas() {
			var canvas = document.createElement('canvas');
			return canvas;
		}

		//	给每个分屏创建video便签，同时创建工具条和右键菜单，并绑定事件

	}, {
		key: '_createVideoEle',
		value: function _createVideoEle() {
			var videoBox = document.createElement('div'),
			    videoEle = document.createElement('video');
			videoBox.className = 'div-' + this.vOpt.ele + ' h5vp-video-container';
			// 设置绝对定位，为后续分屏交换做准备
			videoBox.style.position = 'absolute';
			videoBox.setAttribute('index', this.vOpt.index);
			videoEle.className = this.vOpt.ele;
			videoEle.setAttribute('draggable', true);
			videoEle.setAttribute('index', this.vOpt.index);
			//videoEle.src = this.vOpt.src;
			// videoBox.style.display = 'inline-block';
			videoBox.style.float = 'left';
			//分屏宽高的设置
			videoBox.style.width = this.vOpt.width;
			videoBox.style.height = this.vOpt.height;
			videoBox.style.top = this.vOpt.top;
			videoBox.style.left = this.vOpt.left;

			//loading图标的创建
			var loadingGifC = document.createElement('div');
			loadingGifC.className = 'npvideo-loading-container';
			var loadingGif = document.createElement('div');
			loadingGif.className = 'npvideo-loading';
			loadingGifC.appendChild(loadingGif);

			var loadingInfoDiv = document.createElement('div');
			loadingInfoDiv.className = 'npvideo-loading-info';
			loadingGifC.appendChild(loadingInfoDiv);

			//将video标签和loading图标都添加到传入的元素上
			this.vOpt.playerC.appendChild(videoBox);
			videoBox.appendChild(loadingGifC);
			videoBox.appendChild(videoEle);

			this.vOpt.videoC = videoBox;
			this.vOpt.videoEle = videoEle;
			this.vOpt.videoLoading = loadingGifC;
			this.vOpt.loadingInfoDiv = loadingInfoDiv;

			//设置背景图
			this._setBgImg(true);
			//设置边框
			this._setBorderStyle(this.isFocusScreen);
			this.setRatio(this.vOpt.ratio);
			// 为当前video绑定相应的事件
			this._addEvent();
		}
	}, {
		key: '_onflverror',
		value: function _onflverror(type, details, info) {
			console.log('onerror:', type, details, info);
			if (!this._firstError) {
				this._firstError = true;
				//if(details !== "StartStreamError") 
				{
					this._videoplayer.unload(); //先停流

					if (this._restartTimes < this.vOpt.reconnectCount) {
						window.setTimeout(this._createPlayer.bind(this), this._hasPlayed ? 0 : this._restartTimes * 500);
						this._restartTimes++;
						if (this.vOpt.loadingInfoDiv) {
							this.vOpt.loadingInfoDiv.innerHTML = PlayerLoadingInfo.RECONNECT_PRE + this._restartTimes + PlayerLoadingInfo.RECONNECT;
						}
						console.log("第", this._restartTimes, "次重连中...");
						return;
					}
				}

				if (this.vOpt.showerror) {
					//播放失败变更背景
					this.errorBgToggle(true);
					this._showError(type, details, info);
				}
			}
			// if (this._onerror) {
			// 	this._onerror(type, details, info);
			// }
		}
	}, {
		key: '_onflvloading_complete',
		value: function _onflvloading_complete() {
			console.log('onloading_complete');
		}
	}, {
		key: '_onflvstatistics_info',
		value: function _onflvstatistics_info(statInfo) {
			if (this._videoWidth === 0 || this._videoHeight === 0) {
				if (typeof this._videoplayer !== 'undefined' && this._videoplayer) {
					this._videoWidth = this._videoplayer.mediaInfo.videoWidth;
					this._videoHeight = this._videoplayer.mediaInfo.videoHeight;
				}
			}
			this._fps = statInfo.decodedFrames - this._lastdecodedFrames;
			this._lastdecodedFrames = statInfo.decodedFrames;
			this._dataRate = statInfo.dataRate;
			this._updateDateRate();
			if (this._onstatisticsinfo) {
				this._onstatisticsinfo({
					videoWideth: this._videoWidth,
					videoHeight: this._videoHeight,
					frameRate: this._fps,
					dataRate: this._dataRate,
					durtion: this.durationT
				});
			}
		}
	}, {
		key: '_onflvcommand_response',
		value: function _onflvcommand_response(name, param, rederved) {
			console.log('oncommand_response', name, param, rederved);
			//if (this._onresponse) {
			//	this._onresponse(name, param, rederved);
			//}
		}
	}, {
		key: '_onflvcommand_notify',
		value: function _onflvcommand_notify(name, param, rederved) {
			console.log('oncommand_notify', name, param, rederved);
			//if (this._onnotify) {
			//	this._onnotify(name, param, rederved);
			//}
		}
	}, {
		key: '_onflvfirstcanplay',
		value: function _onflvfirstcanplay() {
			//console.log('_onflvfirstcanplay');
			this._showOrHideLoading(false);
			this.isFirstCanPlay = true;
			this._hasPlayed = true;
			this._restartTimes = 0;
			this.durationT = this._videoplayer.duration;
			this._videoWidth = this._videoplayer.mediaInfo.videoWidth;
			this._videoHeight = this._videoplayer.mediaInfo.videoHeight;
			//先收到叠加数据，之后收到firstcanplay的时候会出现框调整不对
			if (this.vOpt.ratio === "origin") {
				var pos = this._getOriginVideoSize();
				var videopos = this.setZoomSVGPosition(pos);
				this.setRTSVGPosition(videopos);
				this.setVMCanvasPosition(videopos);
			}

			//this._videoplayer.addWatermark({ text: '窗口' + this.vOpt.index });
		}

		//_onflvloadedmetadata() {
		//	this.durationT = this._videoplayer.duration;
		//}

		//改变工具条状态

	}, {
		key: '_onflvplay',
		value: function _onflvplay() {
			this.showOrHideBtn('videoPause', true);
			this.showOrHideBtn('videoPlay', false);
		}
	}, {
		key: '_onflvpause',
		value: function _onflvpause() {
			this.showOrHideBtn('videoPause', false);
			this.showOrHideBtn('videoPlay', true);
		}
	}, {
		key: '_onflvspeedchange',
		value: function _onflvspeedchange() {}
	}, {
		key: '_onflvobjectinfo',
		value: function _onflvobjectinfo(obj) {
			this.RTVOInit(obj);
			//console.log("obj:",obj);
		}
	}, {
		key: '_onflvrecordseek',
		value: function _onflvrecordseek(obj) {
			if (obj.error != undefined && obj.error != 0 && this._isVodPlay) {
				this._updateHistoryTimeAxis(this._videoStartPts > 0 ? this.getPlayPts() : this._srcStartPts);
			}
		}
	}, {
		key: '_onflvstartstream',
		value: function _onflvstartstream() {
			if (this._videoplayer && this._isVodPlay && this._videoRecordList == null) {
				//PVG PVG+录像
				this._videoplayer.queryRecord(this._videoSrc);
			}
			if (this.vOpt.loadingInfoDiv) {
				this.vOpt.loadingInfoDiv.innerHTML = PlayerLoadingInfo.LOADING;
			}
		}
	}, {
		key: '_onflvqueryrecord',
		value: function _onflvqueryrecord(obj) {
			console.log(obj);
			this._videoRecordList = [];
			if (obj.error == 0) {
				var info = obj.info;
				if (typeof info === 'string') {
					info = JSON.parse(info);
				}
				if (info && info.length > 0) {
					var begin = 0,
					    end = 0,
					    minpts = -1;
					for (var i = 0; i < info.length; i++) {
						begin = new Date(info[i].begintime.replace(/-/g, '/')).getTime();;
						end = new Date(info[i].endtime.replace(/-/g, '/')).getTime();;
						if (minpts == -1 || begin < minpts) {
							minpts = begin;
						}
						this._videoRecordList.push([begin, end]);
					};
					if (minpts != -1) {
						this._videoStartPts = minpts;
						if (this._videoSrc) {
							//单位秒
							this._playtimeOffset = (this._videoStartPts - this._srcStartPts) / 1000;
							if (this._playtimeOffset < 0) {
								this._playtimeOffset = 0; //只修改开始时间比指定时间晚的。
							}
							if (this._playtimeOffset > 0) {
								this._videoplayer.setPlaybackOffset(this._playtimeOffset);
							}
						}
					}
					//console.log(this._videoRecordList);
					//console.log(this._videoStartPts);
				}
			}

			this._updateHistoryTimeAxisRecord(_tool.Toolkit.deepMerge([], this._videoRecordList));
		}
	}, {
		key: 'isVodPlay',
		value: function isVodPlay() {
			return this._isVodPlay;
		}
		/**
   * 获取当前播放时间戳
   * @method getPlayPts
   * @return {number} 当前播放时间戳，单位毫秒
   */

	}, {
		key: 'getPlayPts',
		value: function getPlayPts() {
			if (this._videoplayer) {
				return this._videoplayer.currentTime * 1000 + this._videoStartPts;
			}
			return 0;
		}
	}, {
		key: 'setPlayPts',
		value: function setPlayPts(pts) {
			if (this._videoplayer && this.durationT > 0) {
				var time = (pts - this._videoStartPts) / 1000;
				if (time < 0) {
					time = 0;
				} else if (time > this.durationT) {
					time = this.durationT;
				}
				this._videoplayer.currentTime = time; //video标签时间
			} else {
				this._updateHistoryTimeAxis(this._videoStartPts > 0 ? this.getPlayPts() : this._srcStartPts);
			}
		}
	}, {
		key: 'getVideoRange',
		value: function getVideoRange() {
			if (!this._videoRecordRange && this._isVodPlay) {
				var end = new Date(this._videoSrc.endtime.replace(/-/g, '/')).getTime();
				this._videoRecordRange = { begintime: this._srcStartPts, endtime: end };
			}
			if (this._videoRecordRange) {
				return _tool.Toolkit.deepMerge({}, this._videoRecordRange);
			}
			return null;
		}

		/**
   * 获取录像段时间戳
   * @method getRecordList
   * @return {array} 单位毫秒 [[1550645395000,1550645707000]]
   */

	}, {
		key: 'getRecordList',
		value: function getRecordList() {
			if (this._videoRecordList) {
				return _tool.Toolkit.deepMerge([], this._videoRecordList);
			}
			return null;
		}
	}, {
		key: '_createPlayer',
		value: function _createPlayer() {
			if (this._videoplayer) {
				this._videoplayer.destroy();
				this._videoplayer = null;
			}
			this._firstError = false;
			this.isFirstCanPlay = false;
			this._videoplayer = new _player2.default({ channelInfo: this._videoSrc, callbacks: this._paramSrc.callbacks, url: this._paramSrc.wsurl });

			//设置消息接收函数
			this._videoplayer.on('error', this._onflverror.bind(this));
			this._videoplayer.on('loading_complete', this._onflvloading_complete.bind(this));
			this._videoplayer.on('statistics_info', this._onflvstatistics_info.bind(this));
			//this._videoplayer.on('command_response', this._onflvcommand_response.bind(this));
			//this._videoplayer.on('command_notify', this._onflvcommand_notify.bind(this));
			this._videoplayer.on('firstcanplay', this._onflvfirstcanplay.bind(this));
			//this._videoplayer.on('loadedmetadata', this._onflvloadedmetadata.bind(this));
			this._videoplayer.on('pause', this._onflvpause.bind(this));
			this._videoplayer.on('play', this._onflvplay.bind(this));
			this._videoplayer.on('speedchange', this._onflvspeedchange.bind(this));
			this._videoplayer.on('objectinfo', this._onflvobjectinfo.bind(this));
			this._videoplayer.on('streamstart', this._onflvstartstream.bind(this));
			this._videoplayer.on('queryrecord', this._onflvqueryrecord.bind(this));
			this._videoplayer.on('seek', this._onflvrecordseek.bind(this));
			//播放
			this._videoplayer.attachMediaElement(this.vOpt.videoEle);
			this._videoplayer.load();
		}

		/**
   * 创建视频播放对象并开始播放
   * @method startVideo
   * @param {object} src src 视频源信息
   * @param {string} src.devicetype 设备类型 pvg67 pvgplus rtsp native
   * @param {object} callback callback 播放状态及消息的回调
   * @param {function} callback.onerror 播放中出现错误的回调 function(type, detail, info)
   * @param {function} callback.onnotify 播放中状态等的回调 function(type, detail)
   * @return {boolean} true 成功  false 错误
   */

	}, {
		key: 'startVideo',
		value: function startVideo(src, callback, wsurl) {
			//this.vOpt.videoEle.src = src;
			//this.vOpt.videoEle.play();
			if (this._videoplayer) {
				this._videoCloseFunc();
			}
			wsurl = wsurl || this.vOpt.wsurl;
			this.isIdle = false;
			this._videoStartPts = 0;
			this._playtimeOffset = 0;
			this._videoRecordRange = null;
			this._videoRecordList = null;
			this._videoSrc = _tool.Toolkit.deepMerge({}, src);
			this._paramSrc = { callbacks: callback, wsurl: wsurl };
			if (src && src.streamtype === 'vod' && this._videoSrc.devicetype.indexOf('pvg') != -1) {
				this._isVodPlay = true;
				this._srcStartPts = new Date(this._videoSrc.begintime.replace(/-/g, '/')).getTime();
			} else {
				this._isVodPlay = false;
			}
			this._hasPlayed = false;
			this._createPlayer();
			//设置画面比例
			this.setRatio(this.vOpt.ratio);

			if (src.title) {
				this._videoTitle = src.title;
			}
			this._setBgImg(false);
			if (!this._videoplayer.currentTime) {
				if (this.vOpt.loadingInfoDiv) {
					this.vOpt.loadingInfoDiv.innerHTML = PlayerLoadingInfo.STARTING;
				}
				this._showOrHideLoading(true);
			}
			this._emitter.emit(_NPPlayerEvent2.default.OnVideoStart, this.vOpt.index);
			return true;
		}
	}, {
		key: 'stopVideo',
		value: function stopVideo() {
			var bexist = false;
			if (this._videoplayer) {
				this.stopRTVO(); //实时叠加
				this.stopPtz3D(); //3D云台
				this.stopZoom(); //数字放大
				this._videoplayer.destroy();
				this._videoplayer = null;
				this._lastdecodedFrames = 0;
				this._videoWidth = 0;
				this._videoHeight = 0;
				this._fps = 0;
				this._dataRate = 0;
				this._firstError = false;
				this._restartTimes = 0;
				this._videotitle = '';
				this._videoSrc = null;
				this._paramSrc = null;
				this._isVodPlay = false;
				this._videoRecordList = null;
				this._videoStartPts = 0;
				this._videoRecordRange = null;
				this._srcStartPts = 0;
				this._playtimeOffset = 0;
				this.isFirstCanPlay = false;
				this.isPlaying = false;
				this.durationT = 0;
				this.currentT = 0;
				this.currentP = 0;
				bexist = true;
			}
			this._hasPlayed = false;
			this._showOrHideLoading(false);
			this._setBgImg(true);
			//云台还原
			this.isVideoPtz = false;
			this.isIdle = true;
			this._changeVideoCursor();
			this.ptzDirection = -1;
			if (this.mousewheelTimer) {
				clearTimeout(this.mousewheelTimer);
				this.mousewheelTimer = null;
			}
			this._updateDateRate();
			this.delWaterMarkById('_showError_');
			this.errorBgToggle(false);
			this.setRatio(this.vOpt.ratio);
			if (bexist) {
				this._emitter.emit(_NPPlayerEvent2.default.OnVideoClose, this.vOpt.index);
			}
			return true;
		}
		/**
   * 错误背景添删除
   */

	}, {
		key: 'errorBgToggle',
		value: function errorBgToggle(flag) {
			if (flag) {
				this.vOpt.videoC.classList.add(this.vOpt.errorBgClass);
			} else {
				this.vOpt.videoC.classList.remove(this.vOpt.errorBgClass);
			}
		}
		//切换是否正在播放还是暂停  [不提供此功能]

	}, {
		key: '_playOrPause',
		value: function _playOrPause() {
			if (this.isPlaying) {
				this.pause();
			} else {
				this.play();
			}
		}
		// 设置滤镜：亮度、对比度、饱和度、色调、模糊效果、灰度、反色、透明度、褐色程度

	}, {
		key: 'setFilter',
		value: function setFilter(obj) {
			//this.filterObj = Object.assign(this.filterObj, obj);
			//let tempObj = Object.assign({}, obj);
			if (this._videoplayer) {
				this._videoplayer.setFilter(obj);
				this.setZoomFilter();
			}
		}
	}, {
		key: 'getFilter',
		value: function getFilter() {
			return this._videoplayer ? this._videoplayer.getFilter() : this.filterObj;
			//return this.filterObj;
		}
		/**
   * 单帧播放
   * @method singFramePlay
   */

	}, {
		key: 'singleFramePlay',
		value: function singleFramePlay() {
			if (this._videoplayer) {
				this._videoplayer.singleFramePlay();
				this.showOrHideBtn('videoPause', false);
				this.showOrHideBtn('videoPlay', true);
			}
			return true;
		}
		/**
   * 恢复播放
   * @method play
   */

	}, {
		key: 'play',
		value: function play() {
			if (this._videoplayer) {
				return this._videoplayer.play();
			}
			return false;
		}
		/**
   * 暂停播放
   * @method pause
   */

	}, {
		key: 'pause',
		value: function pause() {
			if (this._videoplayer) {
				return this._videoplayer.pause();
			}
			return false;
		}
	}, {
		key: 'segmentPlay',
		value: function segmentPlay(start, end, loop) {
			if (this._videoplayer) {
				this._videoplayer.segmentPlay(start, end, loop);
			}
			return true;
		}
	}, {
		key: 'getVideoInfo',
		value: function getVideoInfo() {
			if (this._videoplayer) {
				if (this.durationT === 0) {
					this.durationT = this._videoplayer.duration;
				}
				return { videowidth: this._videoWidth,
					videoheight: this._videoHeight,
					durtion: this.durationT
				};
			}
			return null;
		}
	}, {
		key: 'getStreamRate',
		value: function getStreamRate() {
			return {
				datarate: this._dataRate,
				framerate: this._fps
			};
		}

		// 视频抓图

	}, {
		key: 'capturePicture',
		value: function capturePicture(type, w, h) {
			if (this._videoplayer) {
				return this._videoplayer.catchPicture(type, w, h);
			}
			return '';
		}
	}, {
		key: 'continuousShooting',
		value: function continuousShooting(type, count, callback, w, h) {
			if (this._videoplayer) {
				return this._videoplayer.continuousShooting(type, count, callback, w, h);
			}
			return true;
		}

		//设置焦点窗口

	}, {
		key: 'setFocusIndex',
		value: function setFocusIndex(flag) {
			if (this.isFocusScreen === flag) {
				return;
			}
			this.isFocusScreen = flag;
			//设置边框样式
			this._setBorderStyle(flag);
			//获得焦点窗口时，需要给云台绑定鼠标、键盘、滚轮事件
			this.mouseEvent(flag);
		}

		// 设置loading效果是否显示

	}, {
		key: '_showOrHideLoading',
		value: function _showOrHideLoading(flag) {
			this._showLoading = flag;
			if (!this.vOpt.videoLoading) {
				return;
			}
			if (this.vOpt.loadingInfoDiv) {
				this.vOpt.loadingInfoDiv.style.display = this.vOpt.enableLoadingInfo ? 'block' : 'none';
			}
			if (this.vOpt.enableLoadingGif) {
				this.vOpt.videoLoading.style.display = flag ? 'block' : 'none';
			} else {
				this.vOpt.videoLoading.style.display = 'none';
			}
		}
	}, {
		key: 'setProgressShowPts',
		value: function setProgressShowPts(flag) {
			this.vOpt.enableProgressShowPts = flag || false;
		}
	}, {
		key: 'setLoadingFlag',
		value: function setLoadingFlag(flag, infoflag) {
			this.vOpt.enableLoadingGif = flag || false;
			this.vOpt.enableLoadingInfo = infoflag || false;
			if (this.vOpt.loadingInfoDiv && this._showLoading) {
				this.vOpt.loadingInfoDiv.style.display = this.vOpt.enableLoadingInfo ? 'block' : 'none';
				this.vOpt.videoLoading.style.display = flag ? 'block' : 'none';
			}
		}

		// 获取当前窗口的忙闲状态

	}, {
		key: 'getIdleOrBusy',
		value: function getIdleOrBusy() {
			return !this.isIdle;
		}

		// 保存边框样式

	}, {
		key: 'setBorderStyle',
		value: function setBorderStyle(borderObj) {
			this.vOpt.border = borderObj;
			this._setBorderStyle(this.isFocusScreen);
		}
		/**
      * 设置边框样式
   * @param {boolean} flag true-焦点窗口 false非焦点窗口
   * @return {boolean} true-成功  false-错误
      */

	}, {
		key: '_setBorderStyle',
		value: function _setBorderStyle(flag) {
			var _borderObj = this.vOpt.border,
			    _videoCStyle = this.vOpt.videoC.style;
			if (_borderObj.borderWidth) {
				_videoCStyle.borderWidth = _borderObj.borderWidth;
			}
			if (_borderObj.borderStyle && !flag) {
				_videoCStyle.borderStyle = _borderObj.borderStyle;
			} else if (_borderObj.focusBorderStyle && flag) {
				_videoCStyle.borderStyle = _borderObj.focusBorderStyle;
			}
			if (_borderObj.borderColor && !flag) {
				_videoCStyle.borderColor = _borderObj.borderColor;
			} else if (_borderObj.focusBorderColor && flag) {
				_videoCStyle.borderColor = _borderObj.focusBorderColor;
			}
		}

		//设置背景图

	}, {
		key: 'setBgImg',
		value: function setBgImg(className) {
			if (this.vOpt.bgImgClass) {
				this.vOpt.videoC.classList.remove(this.vOpt.bgImgClass);
			}
			if (!className || className == '' || className && typeof className !== 'string') {
				this.vOpt.bgImgClass = null;
			} else {
				this.vOpt.bgImgClass = className;
			}
			this._setBgImg(this.isIdle);
			return true;
		}
	}, {
		key: 'setDefBgImg',
		value: function setDefBgImg(className) {
			if (!className || className && typeof className !== 'string') {
				return false;
			}
			this.vOpt.videoC.classList.remove(this.vOpt.defBgClass);
			this.vOpt.defBgClass = className;
			this._setBgImg(this.isIdle);
			return true;
		}
	}, {
		key: 'setbackgroundColor',
		value: function setbackgroundColor(color) {
			this.vOpt.backgroundColor = color;
			if (this.vOpt.videoC.style.background != '') {
				this.vOpt.videoC.style.background = this.vOpt.backgroundColor;
			}
		}

		//内部切换背景图

	}, {
		key: '_setBgImg',
		value: function _setBgImg(flag) {
			if (!this.vOpt.bgImgClass && !this.vOpt.defBgClass) {
				return;
			}
			if (flag) {
				this.vOpt.videoC.style.background = '';
				if (this.vOpt.bgImgClass) {
					this.vOpt.videoC.classList.remove(this.vOpt.defBgClass);
					this.vOpt.videoC.classList.add(this.vOpt.bgImgClass);
				} else {
					this.vOpt.videoC.classList.add(this.vOpt.defBgClass);
				}
			} else {
				this.vOpt.videoC.style.background = this.vOpt.backgroundColor;
				if (this.vOpt.bgImgClass) {
					this.vOpt.videoC.classList.remove(this.vOpt.bgImgClass);
				}
				this.vOpt.videoC.classList.remove(this.vOpt.defBgClass);
			}
		}

		/**
   * 设置/退出最大化窗口
   * @param {any} type  'big',表示要讲当前窗口设置为最大化窗口；'hide'表示当前窗口要隐藏;'big', 'origin'表示还原窗口，即取消最大化
   * @param {any} flag  true表示是全屏模式，false表示不是
   * @memberof NPVideo
   */

	}, {
		key: 'setMax',
		value: function setMax(type, flag) {
			switch (type) {
				case 'big':
					this.isMaxScreen = true;
					this.vOpt.videoC.style.display = 'inline-block';
					break;
				case 'hide':
					this.isMaxScreen = false;
					this.vOpt.videoC.style.display = 'none';
					break;
				case 'origin':
					this.isMaxScreen = false;
					this.vOpt.videoC.style.display = 'inline-block';
					break;
			}
		}
	}, {
		key: 'setPosition',
		value: function setPosition(top, left, width, height) {
			this.resetWaterMarkPos(this.vOpt.width, this.vOpt.height, width, height);
			this.vOpt.width = width;
			this.vOpt.height = height;
			this.vOpt.videoC.style.top = top;
			this.vOpt.videoC.style.left = left;
			this.vOpt.videoC.style.width = width;
			this.vOpt.videoC.style.height = height;
			this.setRatio(this._videoRatio);
		}
	}, {
		key: 'setAttributeIndex',
		value: function setAttributeIndex(index) {
			this.vOpt.videoC.setAttribute('index', index);
			this.vOpt.videoEle.setAttribute('index', index);
			//交换窗口时，需要将其改变
			this.vOpt.index = index;
		}

		//绑定事件

	}, {
		key: '_addEvent',
		value: function _addEvent() {
			var _this = this,
			    _videoC = _this.vOpt.videoC,
			    _ele = _this.vOpt.videoEle;
			// play()和autoplay开始播放时触发
			_eventUtil.EventUtil.addHandler(_ele, 'play', function (event) {
				_this.isPlaying = true;
			});
			// 暂停时触发
			_eventUtil.EventUtil.addHandler(_ele, 'pause', function (event) {
				_this.isPlaying = false;
			});
			// 寻找中
			_eventUtil.EventUtil.addHandler(_ele, 'seeking', function (event) {
				//console.log('seeking');
				if (_this.durationT && _this.durationT !== 0 && isFinite(_this.durationT)) {
					//console.log('seeking11');
					//_this._showOrHideLoading(true);
				}
			});
			// 加载完毕,可以播放
			_eventUtil.EventUtil.addHandler(_ele, 'canplay', function (event) {
				//console.log('canplay');
				_this._showOrHideLoading(false); // edge的 seek不触发此事件
			});
			_eventUtil.EventUtil.addHandler(_ele, 'seeked', function (event) {
				//console.log('seeked');
				//_this._showOrHideLoading(false);
			});

			_eventUtil.EventUtil.addHandler(_ele, 'timeupdate', function (event) {
				if (!_this.isDragProgress && _this._videoplayer) {
					//this.currentT 当前流时间
					_this.currentT = _this._videoplayer.currentTime + _this._playtimeOffset;
					_this.updatePorgress();
					var date = new Date();
					_this.reduceTBefore = Date.parse(date) - Math.floor(_this.currentT * 1000);
					//更新当前时间的显示
					_this._updateCurrentTText();
					if (_this._isVodPlay && _this._videoStartPts > 0) {
						_this._updateHistoryTimeAxis(_this.getPlayPts());
					}
				}
			});
			//鼠标点击视频
			_eventUtil.EventUtil.addHandler(_videoC, 'click', function (event) {
				_this.videoCMouseOverFlag = false;
			});
			//鼠标移入显示工具条
			_eventUtil.EventUtil.addHandler(_videoC, 'mouseenter', function (event) {
				_this.videoCMouseOverFlag = true;
				_this._emitter.emit(_NPPlayerEvent2.default.OnMouseEnter, _this.vOpt.index);
				_this.showToolbarAuto(true);
				_this.mouseEvent(_this.isFocusScreen);
			});
			//鼠标移出隐藏工具条、右键菜单
			_eventUtil.EventUtil.addHandler(_videoC, 'mouseleave', function (event) {
				if (_this.videoCMouseOverFlag) {
					_this._emitter.emit(_NPPlayerEvent2.default.OnMouseLeave, _this.vOpt.index);
					_this.showToolbarAuto(false);
					_this.showOrHideRightMenu(false);
					_this.isShowPtzRedArrow(false, event);
				}
			});

			//鼠标按下
			_eventUtil.EventUtil.addHandler(_videoC, 'mousedown', function (event) {
				//console.log("_videoC mousedown");
				_this._emitter.emit(_NPPlayerEvent2.default.OnMouseDown, _this.vOpt.index);
				if (event.button == 0 && _tool.Toolkit.isPositiveInteger(_this.ptzDirection) && _this.ptzDirection <= 19) {
					_this._ptzControlByWin(_this.ptzDirection, _this.vOpt.windowPtzSpeed, 3);
				}
			});
			//鼠标弹起
			_eventUtil.EventUtil.addHandler(_videoC, 'mouseup', function (event) {
				//console.log("_videoC mouseup");
				_this._emitter.emit(_NPPlayerEvent2.default.OnMouseUp, _this.vOpt.index);
				if (_tool.Toolkit.isPositiveInteger(_this.ptzDirection) && _this.ptzDirection <= 19) {
					_this._ptzControlByWin(_this.ptzDirection, 0, 4);
				}
			});

			_eventUtil.EventUtil.addHandler(_videoC, 'contextmenu', function (event) {
				_this.videoCMouseOverFlag = false;
				event = event || window.event;
				// 取消浏览器的默认事件
				event.preventDefault ? event.preventDefault() : event.returnValue = false;
				// 鼠标变回默认的
				_this._changeVideoCursor();
				//当点击的是video视频时，才去显示右键菜单
				//if (event.target.parentNode.classList.contains('h5vp-video-container') && _this.rightMenuEle) {
				if (_this.rightMenuEle) {
					//let xy = _this._getVidoContainerEventInfo(event);
					_this.showOrHideRightMenu(true, event);
				}
			});

			//鼠标移动
			_eventUtil.EventUtil.addHandler(_videoC, 'mousemove', function (event) {
				_this.videoCMouseOverFlag = true;
				_this.isShowPtzRedArrow(true, event);
				_this._emitter.emit(_NPPlayerEvent2.default.OnMouseMove, _this.vOpt.index);
			});
		}

		// 格式化时间

	}, {
		key: 'formartTime',
		value: function formartTime(seconds) {
			var formatNumber = function formatNumber(n) {
				n = n.toString();
				return n[1] ? n : '0' + n;
			};
			if (!isFinite(seconds)) {
				return '00:00:00';
			}
			var m = Math.floor(seconds / 60);
			var s = Math.floor(seconds % 60);
			//if (m < 60) {
			//	return formatNumber(m) + ':' + formatNumber(s);
			//} else {
			var h = Math.floor(m / 60);
			m = Math.floor(m % 60);
			return formatNumber(h) + ':' + formatNumber(m) + ':' + formatNumber(s);
			//}
		}

		//事件绑定

	}, {
		key: 'addEvent',
		value: function addEvent(name, func) {
			this._emitter.on(name, func);
		}
	}]);

	return NPVideo;
}(_eventUtil.EventUtil.aggregation(_Toolbar2.default, _RightMenu2.default, _Ptz2.default, _WaterMark2.default, _RealTimeVideoOverlay2.default, _RealTimeDrawing2.default, _PtzZoom2.default, _HistoryTimeAxis2.default));

exports.default = NPVideo;

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _nativePlayer = __webpack_require__(344);

var _nativePlayer2 = _interopRequireDefault(_nativePlayer);

var _flvPlayer = __webpack_require__(350);

var _flvPlayer2 = _interopRequireDefault(_flvPlayer);

var _hlsPlayer = __webpack_require__(382);

var _hlsPlayer2 = _interopRequireDefault(_hlsPlayer);

var _playerEvents = __webpack_require__(345);

var _playerEvents2 = _interopRequireDefault(_playerEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
mediaDataSource = {
    channelInfo: {
        'devicetype':'pvg67',
        'streamtype':'live', //live or vod
        'ip':'192.168.60.174',
        'port':2100,
        'user':'admin',
        'password':'admin',
        'channel':'av/ytfj/hik',
        'title': 'PVG实时流',
    }, 
    callbacks:{
        onerror:function(string ErrorTypes, string ErrorDetails, object ErrorInfo){},
        onnotify:function(){}
    }
}
*/

var VideoPlayer = function () {
    function VideoPlayer(mediaDataSource, config) {
        _classCallCheck(this, VideoPlayer);

        this.TAG = 'videoplayer';
        this._player = null;
        //debugger;
        if (mediaDataSource && mediaDataSource.channelInfo) {
            var type = mediaDataSource.channelInfo.devicetype;
            if (typeof type === 'string') {
                type = type.toLowerCase();
                if (type === 'native') {
                    this._player = new _nativePlayer2.default(mediaDataSource, config);
                } else if (type === "hls") {
                    this._player = new _hlsPlayer2.default(mediaDataSource, config);
                }
            }
        }

        if (this._player === null) {
            this._player = new _flvPlayer2.default(mediaDataSource, config);
        }
        this._callbacks = mediaDataSource.callbacks;
        this._mediaSource = mediaDataSource.channelInfo;
        this._mediaElement = null; //video
        this._captureCanvas = null; // 抓图
        this._shootingCanvas = null; // 连续抓图
        this._shootingInfo = {};
        this._timershooting = null; //连续抓图检测定时器
        this._playspeed = 1.0; //单帧时恢复速度
        this._timerstep = null; //单帧检测定时器
        this._prePlaytime = 0; //单帧前的播放时间

        this._segmentStart = -1; //片段播放
        this._segmentEnd = -1;
        this._segmentLoop = false; //是否循环
        this.filterObj = {
            bright: 50,
            contrast: 50,
            saturate: 50,
            tone: 50,
            blur: 50,
            gray: 50,
            invert: 50,
            opacity: 50,
            sepia: 50
        };
    }

    _createClass(VideoPlayer, [{
        key: 'destroy',
        value: function destroy() {
            if (this._player != null) {
                this._player.destroy();
                this._player = null;
            }
            this._shootingCanvas = null;
            this._captureCanvas = null;
            this._mediaElement = null;
        }
    }, {
        key: 'on',
        value: function on(event, listener) {
            if (this._player != null) {
                this._player.on(event, listener);
            }
        }
    }, {
        key: 'off',
        value: function off(event, listener) {
            if (this._player != null) {
                this._player.off(event, listener);
            }
        }
    }, {
        key: 'attachMediaElement',
        value: function attachMediaElement(mediaElement) {
            if (this._player != null) {

                this._player.attachMediaElement(mediaElement);
                this._mediaElement = mediaElement;
                this._captureCanvas = document.createElement('canvas'); //创建canvas
                if (this._captureCanvas) {
                    //this._captureCanvas.getContext('2d').drawImage(Img,0,0,width,height)
                }
                this._shootingCanvas = document.createElement('canvas'); //创建canvas
                if (this._shootingCanvas) {
                    //this._shootingCanvas.getContext('2d').drawImage(Img,0,0,width,height)
                }
            }
        }
    }, {
        key: 'detachMediaElement',
        value: function detachMediaElement() {
            if (this._timerstep) {
                window.clearInterval(this._timerstep);
                this._timerstep = null;
            }
            if (this._timershooting) {
                window.clearInterval(this._timershooting);
                this._timershooting = null;
            }
            if (this._player != null) {
                this._player.detachMediaElement();
                this._mediaElement = null;
            }
        }
    }, {
        key: 'load',
        value: function load() {
            if (this._player != null) {
                this._player.load();
            }
        }
    }, {
        key: 'unload',
        value: function unload() {
            if (this._timerstep) {
                window.clearInterval(this._timerstep);
                this._timerstep = null;
            }
            if (this._player != null) {
                this._player.unload();
            }
        }
    }, {
        key: 'play',
        value: function play() {
            if (this._timerstep) {
                window.clearInterval(this._timerstep);
                this._timerstep = null;
            }

            if (this._player != null) {
                //16倍速 单帧后恢复出现readystatus==HAVE_CURRENT_DATA，导致播放失败  20190514 by Renly
                if (this._playspeed != this._player.playbackRate && this._playspeed > 8) {
                    var _this = this;
                    window.setTimeout(function () {
                        _this._player.playbackRate = _this._playspeed;
                    }, 1000);
                }
                return this._player.play();
            }
            return false;
        }
    }, {
        key: 'pause',
        value: function pause() {
            if (this._player != null) {
                return this._player.pause();
            }
            return false;
        }
    }, {
        key: 'setPlaybackOffset',


        //流定位时应加上此值
        value: function setPlaybackOffset(offset) {
            if (this._player && this._player.setPlaybackOffset) {
                this._player.setPlaybackOffset(offset);
                return true;
            }
            return false;
        }
    }, {
        key: 'ptzControl',
        value: function ptzControl(cmd, param) {
            if (this._player != null && this._player.ptzControl && this._player.ptzControl !== 'undefined') {
                return this._player.ptzControl(cmd, param);
            }
        }
    }, {
        key: 'ptzLock',
        value: function ptzLock(locktime) {
            if (this._player != null && this._player.ptzLock && this._player.ptzLock !== 'undefined') {
                return this._player.ptzLock(locktime);
            }
        }
    }, {
        key: 'ptzControl3D',
        value: function ptzControl3D(direct, x, y, w, h) {
            if (this._player != null && this._player.ptzControl3D && this._player.ptzControl3D !== 'undefined') {
                return this._player.ptzControl3D(direct, x, y, w, h);
            }
        }
    }, {
        key: 'queryRecord',
        value: function queryRecord(info) {
            if (this._player != null && this._player.queryRecord && this._player.queryRecord !== 'undefined') {
                return this._player.queryRecord(info);
            }
        }
    }, {
        key: 'catchPicture',
        value: function catchPicture(type, w, h) {
            if (this._mediaElement && this._captureCanvas) {
                type = type || 'jpeg';
                var videow = this._mediaElement.videoWidth;
                var videoh = this._mediaElement.videoHeight;
                var _w = parseInt(w || -1);
                var _h = parseInt(h || -1);
                if (_w > videow) {
                    _w = videow;
                }
                if (_h > videoh) {
                    _h = videoh;
                }
                if (_w > 0 && _h <= 0) {
                    _h = Math.ceil(_w * videoh / videow);
                } else if (_h > 0 && _w <= 0) {
                    _w = Math.ceil(videow * _h / videoh);
                } else if (_w <= 0 && _h <= 0) {
                    _w = videow;
                    _h = videoh;
                }
                this._captureCanvas.width = _w;
                this._captureCanvas.height = _h;
                this._captureCanvas.getContext('2d').drawImage(this._mediaElement, 0, 0, videow, videoh, 0, 0, _w, _h);
                try {
                    return this._captureCanvas.toDataURL('image/' + type);
                } catch (e) {
                    _logger2.default.e(this.TAG, 'catchPicture ' + e.name + ' ' + e.code + ' ' + e.message);
                    return '';
                }
            }
        }
    }, {
        key: 'continuousShooting',
        value: function continuousShooting(type, count, callback, w, h) {
            if (this._mediaElement && this._shootingCanvas && !this._timershooting) {
                type = type || 'jpeg';
                var videow = this._mediaElement.videoWidth;
                var videoh = this._mediaElement.videoHeight;
                var _w = parseInt(w || -1);
                var _h = parseInt(h || -1);
                if (_w > videow) {
                    _w = videow;
                }
                if (_h > videoh) {
                    _h = videoh;
                }
                if (_w > 0 && _h <= 0) {
                    _h = Math.ceil(_w * videoh / videow);
                } else if (_h > 0 && _w <= 0) {
                    _w = Math.ceil(videow * _h / videoh);
                } else if (_w <= 0 && _h <= 0) {
                    _w = videow;
                    _h = videoh;
                }
                this._shootingCanvas.width = _w;
                this._shootingCanvas.height = _h;

                this._shootingCanvas.getContext('2d').drawImage(this._mediaElement, 0, 0, videow, videoh, 0, 0, _w, _h);
                try {
                    callback(0, this._shootingCanvas.toDataURL('image/' + type));
                } catch (e) {
                    callback(-1, 'continuousShooting ' + e.name + ' ' + e.code + ' ' + e.message);
                    _logger2.default.e(this.TAG, 'continuousShooting ' + e.name + ' ' + e.code + ' ' + e.message);
                    return false;
                }
                if (count > 1) {
                    this._shootingInfo = { playtime: this._mediaElement.currentTime,
                        count: count,
                        index: 1,
                        callback: callback,
                        type: type
                    };
                    var _time = parseInt(this._player.frameDuration * 500 / this._player.playbackRate);
                    if (_time < 5) {
                        _time = 5;
                    } else if (_time > 50) {
                        _time = 50;
                    }
                    this._timershooting = window.setInterval(this._shootingCheck.bind(this), _time);
                }

                return true;
            }
        }
    }, {
        key: '_shootingCheck',
        value: function _shootingCheck() {
            if (!this._mediaElement || !this._player) {
                window.clearInterval(this._timershooting);
                this._timershooting = null;
                return;
            }
            var _cur = this._mediaElement.currentTime,
                _dif = _cur - this._shootingInfo.playtime;
            if (_dif >= this._player.frameDuration) {
                this._shootingInfo.playtime = _cur;

                this._shootingCanvas.getContext('2d').drawImage(this._mediaElement, 0, 0, this._mediaElement.videoWidth, this._mediaElement.videoHeight, 0, 0, this._shootingCanvas.width, this._shootingCanvas.height);
                try {
                    this._shootingInfo.callback(this._shootingInfo.index, this._shootingCanvas.toDataURL('image/' + this._shootingInfo.type));
                } catch (e) {
                    this._shootingInfo.callback(-1, 'continuousShooting ' + e.name + ' ' + e.code + ' ' + e.message);
                }
                this._shootingInfo.index++;
            }

            if (this._shootingInfo.index === this._shootingInfo.count) {
                window.clearInterval(this._timershooting);
                this._timershooting = null;
            }
        }

        // obj： 属性值为0-50-100的整数，其中50为正常 

    }, {
        key: '_transformFilterVal',
        value: function _transformFilterVal(obj) {
            // 亮度 0%-100%-250%
            if (typeof obj.bright === "number") {
                if (obj.bright < 0) {
                    obj.bright = 0;
                } else if (obj.bright > 100) {
                    obj.bright = 100;
                }
                this.filterObj.bright = obj.bright; //【10%-100%】【100%-250%】
                obj.bright = (obj.bright <= 50 ? 10 + obj.bright * 9 / 5 : 100 + 3 * (obj.bright - 50)) + "%";
            } else {
                obj.bright = "";
            }
            // 对比度 0%-100%-1000%
            if (typeof obj.contrast === "number") {
                if (obj.contrast < 0) {
                    obj.contrast = 0;
                } else if (obj.contrast > 100) {
                    obj.contrast = 100;
                }
                this.filterObj.contrast = obj.contrast; //【10%-100%】【100%-900%】
                obj.contrast = (obj.contrast <= 50 ? 10 + obj.contrast * 9 / 5 : 100 + 18 * (obj.contrast - 50)) + "%";
            } else {
                obj.contrast = "";
            }
            // 饱和度 0%-100%-1000%
            if (typeof obj.saturate === "number") {
                if (obj.saturate < 0) {
                    obj.saturate = 0;
                } else if (obj.saturate > 100) {
                    obj.saturate = 100;
                }
                this.filterObj.saturate = obj.saturate; //【10%-100%】【100%-900%】
                obj.saturate = (obj.saturate <= 50 ? 10 + obj.saturate * 9 / 5 : 100 + 18 * (obj.saturate - 50)) + "%";
            } else {
                obj.saturate = "";
            }
            // 色调 360deg-0deg-360deg 
            if (typeof obj.tone === "number") {
                if (obj.tone < 0) {
                    obj.tone = 0;
                } else if (obj.tone > 100) {
                    obj.tone = 100;
                }
                this.filterObj.tone = obj.tone; //【180 0】【360 180】
                obj.tone = (obj.tone <= 50 ? 180 - 3.6 * obj.tone : 540 - 3.6 * obj.tone) + "deg";
            } else {
                obj.tone = "";
            }
            // 灰度 100%-0%-100% 
            if (typeof obj.gray === "number") {
                if (obj.gray < 0) {
                    obj.gray = 0;
                } else if (obj.gray > 100) {
                    obj.gray = 100;
                }
                this.filterObj.gray = obj.gray;
                obj.gray = (obj.gray >= 50 ? (obj.gray - 50) * 2 : 100 - obj.gray * 2) + "%";
            } else {
                obj.gray = "";
            }
            // 反色 100%-0%-100%
            if (typeof obj.invert === "number") {
                if (obj.invert < 0) {
                    obj.invert = 0;
                } else if (obj.invert > 100) {
                    obj.invert = 100;
                }
                this.filterObj.invert = obj.invert;
                obj.invert = (obj.invert >= 50 ? (obj.invert - 50) * 2 : 100 - obj.invert * 2) + "%";
            } else {
                obj.invert = "";
            }
            // 透明度 0%-100%-0% 
            if (typeof obj.opacity === "number") {
                if (obj.opacity < 0) {
                    obj.opacity = 0;
                } else if (obj.opacity > 100) {
                    obj.opacity = 100;
                }
                this.filterObj.opacity = obj.opacity;
                obj.opacity = (obj.opacity >= 50 ? 200 - 2 * obj.opacity : obj.opacity * 2) + "%";
            } else {
                obj.opacity = "";
            }
            // 褐色程度 100%-0%-100% 
            if (typeof obj.sepia === "number") {
                if (obj.sepia < 0) {
                    obj.sepia = 0;
                } else if (obj.sepia > 100) {
                    obj.sepia = 100;
                }
                this.filterObj.sepia = obj.sepia;
                obj.sepia = (obj.sepia >= 50 ? (obj.sepia - 50) * 2 : 100 - obj.sepia * 2) + "%";
            } else {
                obj.sepia = "";
            }
        }
        // 设置滤镜：亮度、对比度、饱和度、色调、模糊效果、灰度、反色、透明度、褐色程度

    }, {
        key: 'setFilter',
        value: function setFilter(setobj) {
            //this.filterObj = Object.assign(this.filterObj, obj);
            var obj = Object.assign({}, setobj);
            this._transformFilterVal(obj);
            var val = '';
            val += obj.bright ? 'brightness(' + obj.bright + ')' : '';
            val += obj.contrast ? 'contrast(' + obj.contrast + ')' : '';
            val += obj.saturate ? 'saturate(' + obj.saturate + ')' : '';
            val += obj.tone ? 'hue-rotate(' + obj.tone + ')' : '';
            val += obj.gray ? 'grayscale(' + obj.gray + ')' : '';
            val += obj.invert ? 'invert(' + obj.invert + ')' : '';
            val += obj.opacity ? 'opacity(' + obj.opacity + ')' : '';
            val += obj.sepia ? 'sepia(' + obj.sepia + ')' : '';
            this._mediaElement.style.webkitFilter = val;
            this._mediaElement.style.filter = val;
        }
    }, {
        key: 'getFilter',
        value: function getFilter(setobj) {
            return this.filterObj;
        }
        /**
        * 单帧播放
        * @method singFramePlay
        */

    }, {
        key: 'singleFramePlay',
        value: function singleFramePlay() {
            if (this._mediaElement.paused) {
                var _speed = 10 * this._player.frameDuration;
                this._mediaElement.playbackRate = _speed > 3 ? 3 : _speed; //调节倍速为每秒10帧
                try {
                    this._mediaElement.play().catch(function (e) {
                        //Log.v(this.TAG, 'play() catch');
                    });
                } catch (e) {}

                this._prePlaytime = this._mediaElement.currentTime;
                if (!this._timerstep) {
                    this._timerstep = window.setInterval(this._stepPlayCheck.bind(this), 20);
                }
            } else {
                this._mediaElement.pause();
            }

            return;

            //定位播放方式，经证明不靠谱
            if (!this._mediaElement.paused) {
                this._mediaElement.pause();
            }
            this._mediaElement.currentTime += this._player._frameDuration * 1.5;
        }
    }, {
        key: '_stepPlayCheck',
        value: function _stepPlayCheck() {
            if (!this._mediaElement || !this._player) {
                window.clearInterval(this._timerstep);
                this._timerstep = null;
                return;
            }
            var _dif = this._mediaElement.currentTime - this._prePlaytime;
            if (_dif >= this._player.frameDuration || _dif <= 0 - this._player.frameDuration) {
                this._mediaElement.pause();

                //16倍速 单帧后恢复出现readystatus==HAVE_CURRENT_DATA，导致播放失败  20190514 by Renly
                if (this._playspeed > 8) {
                    this._mediaElement.playbackRate = 8;
                } else {
                    this._mediaElement.playbackRate = this._playspeed;
                }
                window.clearInterval(this._timerstep);
                this._timerstep = null;
            }
        }
    }, {
        key: 'segmentPlay',
        value: function segmentPlay(start, end, loop) {
            if (start >= end || end < 0) {
                this._segmentStart = -1;
                this._segmentEnd = -1;
                this._segmentLoop = false;
                this._player.off('playtime', this._checkPlayTime.bind(this));
            } else {
                this._segmentStart = start;
                this._segmentEnd = end;
                this._segmentLoop = loop;
                this._player.currentTime = start;
                this._player.off('playtime', this._checkPlayTime.bind(this));
                this._player.on('playtime', this._checkPlayTime.bind(this));
            }
        }
    }, {
        key: '_checkPlayTime',
        value: function _checkPlayTime(currentTime) {
            if (this._segmentStart >= this._segmentEnd || this._segmentStart < 0 || this._segmentEnd < 0) {
                this._player.off('playtime', this._checkPlayTime.bind(this));
                return;
            }
            if (currentTime >= this._segmentEnd) {
                if (this._segmentLoop) {
                    this._player.currentTime = this._segmentStart;
                } else {
                    this._segmentStart = -1;
                    this._segmentEnd = -1;
                    this._player.pause();
                    this._player.off('playtime', this._checkPlayTime.bind(this));
                }
                if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                    this._callbacks.onnotify(_playerEvents2.default.SEGMENTPLAY_COMPLETE);
                }
            }
        }
    }, {
        key: 'type',
        get: function get() {
            if (this._player != null) {
                return this._player.type;
            }
        }
    }, {
        key: 'buffered',
        get: function get() {
            if (this._player != null) {
                return this._player.buffered;
            }
        }
    }, {
        key: 'duration',
        get: function get() {
            if (this._player != null) {
                return this._player.duration;
            }
            return 0;
        }
    }, {
        key: 'volume',
        get: function get() {
            if (this._player != null) {
                return this._player.volume;
            }
        },
        set: function set(value) {
            if (this._player != null) {
                this._player.volume = value;
            }
        }
    }, {
        key: 'muted',
        get: function get() {
            if (this._player != null) {
                return this._player.muted;
            }
        },
        set: function set(muted) {
            if (this._player != null) {
                this._player.muted = muted;
            }
        }
    }, {
        key: 'currentTime',
        get: function get() {
            if (this._player != null) {
                return this._player.currentTime;
            }
            return 0;
        },
        set: function set(seconds) {
            if (this._player != null) {
                //取消片段播放
                if (this._segmentStart >= 0 && this._segmentEnd > 0 && (this._segmentStart > seconds || this._segmentEnd < seconds)) {
                    this._segmentStart = -1;
                    this._segmentEnd = -1;
                    this._player.off('playtime', this._checkPlayTime.bind(this));
                    if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                        this._callbacks.onnotify(_playerEvents2.default.SEGMENTPLAY_CANCEL);
                    }
                }
                this._player.currentTime = seconds;
                return true;
            }
            return false;
        }
    }, {
        key: 'playbackRate',
        get: function get() {
            if (this._player != null) {
                return this._playspeed;
                //return this._player.playbackRate;
            }
            return 0;
        },
        set: function set(speed) {
            try {
                if (this._player != null) {
                    this._player.playbackRate = speed;
                    this._playspeed = this._player.playbackRate;
                }
            } catch (e) {}
        }
    }, {
        key: 'mediaInfo',
        get: function get() {
            if (this._player != null) {
                return this._player.mediaInfo;
            }
            return {};
        }
    }, {
        key: 'statisticsInfo',
        get: function get() {
            if (this._player != null) {
                return this._player.statisticsInfo;
            }
            return {};
        }
    }]);

    return VideoPlayer;
}();

exports.default = VideoPlayer;

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = __webpack_require__(343);

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Log = function () {
    function Log() {
        _classCallCheck(this, Log);
    }

    _createClass(Log, null, [{
        key: 'e',
        value: function e(tag, msg) {
            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;

            var str = '[' + tag + '] > ' + msg;

            if (Log.ENABLE_CALLBACK) {
                Log.emitter.emit('log', 'error', str);
            }

            if (!Log.ENABLE_ERROR) {
                return;
            }

            if (console.error) {
                console.error( /*new Date().getTime(), */str);
            } else if (console.warn) {
                console.warn( /*new Date().getTime(), */str);
            } else {
                console.log( /*new Date().getTime(), */str);
            }
        }
    }, {
        key: 'i',
        value: function i(tag, msg) {
            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;

            var str = '[' + tag + '] > ' + msg;

            if (Log.ENABLE_CALLBACK) {
                Log.emitter.emit('log', 'info', str);
            }

            if (!Log.ENABLE_INFO) {
                return;
            }

            if (console.info) {
                console.info( /*new Date().getTime(), */str);
            } else {
                console.log( /*new Date().getTime(), */str);
            }
        }
    }, {
        key: 'w',
        value: function w(tag, msg) {
            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;

            var str = '[' + tag + '] > ' + msg;

            if (Log.ENABLE_CALLBACK) {
                Log.emitter.emit('log', 'warn', str);
            }

            if (!Log.ENABLE_WARN) {
                return;
            }

            if (console.warn) {
                console.warn( /*new Date().getTime(), */str);
            } else {
                console.log( /*new Date().getTime(), */str);
            }
        }
    }, {
        key: 'd',
        value: function d(tag, msg) {
            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;

            var str = '[' + tag + '] > ' + msg;

            if (Log.ENABLE_CALLBACK) {
                Log.emitter.emit('log', 'debug', str);
            }

            if (!Log.ENABLE_DEBUG) {
                return;
            }

            if (console.debug) {
                console.debug(str);
            } else {
                console.log( /*new Date().getTime(), */str);
            }
        }
    }, {
        key: 'v',
        value: function v(tag, msg) {
            if (!tag || Log.FORCE_GLOBAL_TAG) tag = Log.GLOBAL_TAG;

            var str = '[' + tag + '] > ' + msg;

            if (Log.ENABLE_CALLBACK) {
                Log.emitter.emit('log', 'verbose', str);
            }

            if (!Log.ENABLE_VERBOSE) {
                return;
            }

            console.log( /*new Date().getTime(), */str);
        }
    }]);

    return Log;
}();

Log.GLOBAL_TAG = 'flv.js';
Log.FORCE_GLOBAL_TAG = false;
Log.ENABLE_ERROR = true;
Log.ENABLE_INFO = true;
Log.ENABLE_WARN = true;
Log.ENABLE_DEBUG = true;
Log.ENABLE_VERBOSE = true;

Log.ENABLE_CALLBACK = false;

Log.emitter = new _events2.default();

exports.default = Log;

/***/ }),
/* 343 */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = __webpack_require__(343);

var _events2 = _interopRequireDefault(_events);

var _playerEvents = __webpack_require__(345);

var _playerEvents2 = _interopRequireDefault(_playerEvents);

var _playerErrors = __webpack_require__(346);

var _config = __webpack_require__(337);

var _exception = __webpack_require__(348);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Player wrapper for browser's native player (HTMLVideoElement) without MediaSource src. 
var NativePlayer = function () {
    function NativePlayer(mediaDataSource, config) {
        _classCallCheck(this, NativePlayer);

        this.TAG = 'NativePlayer';
        this._type = 'NativePlayer';
        this._emitter = new _events2.default();

        this._config = (0, _config.createDefaultConfig)();
        if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {
            Object.assign(this._config, config);
        }

        this._callbacks = null;
        if (_typeof(mediaDataSource.callbacks) === 'object') {
            this._callbacks = mediaDataSource.callbacks;
        }

        if (mediaDataSource.channelInfo.devicetype.toLowerCase() !== 'native') {
            throw new _exception.InvalidArgumentException('NativePlayer does\'t support stream input!');
        }

        this.e = {
            onvLoadedMetadata: this._onvLoadedMetadata.bind(this),
            onvCanPlay: this._onvCanPlay.bind(this),
            onvSeeked: this._onvSeeked.bind(this),
            onvError: this._onvError.bind(this),
            onvTimeUpdate: this._onvTimeUpdate.bind(this),
            onvRateChange: this._onvRateChange.bind(this)
        };

        this._pendingSeekTime = null;
        this._statisticsReporter = null;

        this._mediaDataSource = mediaDataSource;
        this._mediaElement = null;
        this._receivedCanPlay = false; //后
        //this._loadedMetadata = false; //先
        this._frameDuration = 0.040;
    }

    _createClass(NativePlayer, [{
        key: 'destroy',
        value: function destroy() {
            if (this._mediaElement) {
                this.unload();
                this.detachMediaElement();
            }
            this.e = null;
            this._mediaDataSource = null;
            this._emitter.removeAllListeners();
            this._emitter = null;
        }
    }, {
        key: 'on',
        value: function on(event, listener) {
            var _this = this;

            if (event === _playerEvents2.default.MEDIA_INFO) {
                if (this._mediaElement != null && this._mediaElement.readyState !== 0) {
                    // HAVE_NOTHING
                    Promise.resolve().then(function () {
                        _this._emitter.emit(_playerEvents2.default.MEDIA_INFO, _this.mediaInfo);
                    });
                }
            } else if (event === _playerEvents2.default.STATISTICS_INFO) {
                if (this._mediaElement != null && this._mediaElement.readyState !== 0) {
                    Promise.resolve().then(function () {
                        _this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, _this.statisticsInfo);
                    });
                }
            }
            this._emitter.addListener(event, listener);
        }
    }, {
        key: 'off',
        value: function off(event, listener) {
            this._emitter.removeListener(event, listener);
        }
    }, {
        key: 'attachMediaElement',
        value: function attachMediaElement(mediaElement) {
            this._mediaElement = mediaElement;
            mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);
            mediaElement.addEventListener('canplay', this.e.onvCanPlay);
            mediaElement.addEventListener('seeked', this.e.onvSeeked);
            mediaElement.addEventListener('error', this.e.onvError);
            mediaElement.addEventListener('ratechange', this.e.onvRateChange);
            mediaElement.addEventListener('timeupdate', this.e.onvTimeUpdate);
            //mediaElement.crossOrigin = 'Anonymous'; //为canvas抓图设置，CORS 策略
            //https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image

            if (this._pendingSeekTime != null) {
                try {
                    mediaElement.currentTime = this._pendingSeekTime;
                    this._pendingSeekTime = null;
                } catch (e) {
                    // IE11 may throw InvalidStateError if readyState === 0
                    // Defer set currentTime operation after loadedmetadata
                }
            }
        }
    }, {
        key: 'detachMediaElement',
        value: function detachMediaElement() {
            if (this._mediaElement) {
                this._mediaElement.src = '';
                this._mediaElement.removeAttribute('src');
                this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);
                this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);
                this._mediaElement.removeEventListener('seeked', this.e.onvSeeked);
                this._mediaElement.removeEventListener('error', this.e.onvError);
                this._mediaElement.removeEventListener('ratechange', this.e.onvRateChange);
                this._mediaElement.removeEventListener('timeupdate', this.e.onvTimeUpdate);
                this._mediaElement = null;
            }
            if (this._statisticsReporter != null) {
                window.clearInterval(this._statisticsReporter);
                this._statisticsReporter = null;
            }
        }
    }, {
        key: 'load',
        value: function load() {
            if (!this._mediaElement) {
                throw new _exception.IllegalStateException('HTMLMediaElement must be attached before load()!');
            }
            this._mediaElement.src = this._mediaDataSource.channelInfo.url;

            if (this._mediaElement.readyState > 0) {
                this._mediaElement.currentTime = 0;
            }

            this._mediaElement.preload = 'auto';
            this._mediaElement.load();
            try {
                this._mediaElement.muted = true;
                this._mediaElement.autoplay = true;
                this._mediaElement.play().catch(function (e) {
                    //Log.v(this.TAG, 'play() catch');
                });
            } catch (e) {}
            this._statisticsReporter = window.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);
        }
    }, {
        key: 'unload',
        value: function unload() {
            if (this._mediaElement) {
                this._mediaElement.src = '';
                this._mediaElement.removeAttribute('src');
            }
            if (this._statisticsReporter != null) {
                window.clearInterval(this._statisticsReporter);
                this._statisticsReporter = null;
            }
        }
    }, {
        key: 'play',
        value: function play() {
            this._emitter.emit(_playerEvents2.default.VIDEOPLAY);
            if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                this._callbacks.onnotify(_playerEvents2.default.VIDEOPLAY);
            }
            try {
                this._mediaElement.play().catch(function (e) {
                    //Log.v(this.TAG, 'play() catch');
                });
            } catch (e) {}
            return true;
        }
    }, {
        key: 'pause',
        value: function pause() {
            this._emitter.emit(_playerEvents2.default.VIDEOPAUSE);
            if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                this._callbacks.onnotify(_playerEvents2.default.VIDEOPAUSE);
            }
            this._mediaElement.pause();
            return true;
        }
    }, {
        key: '_onvCanPlay',
        value: function _onvCanPlay(e) {
            if (this._receivedCanPlay === false) {
                this._emitter.emit(_playerEvents2.default.FIRST_CANPLAY); //解码第一帧
                if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                    this._callbacks.onnotify(_playerEvents2.default.FIRST_CANPLAY);
                }
            }
            this._receivedCanPlay = true;
            this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);
        }
    }, {
        key: '_onvTimeUpdate',
        value: function _onvTimeUpdate(e) {
            this._emitter.emit(_playerEvents2.default.PLAYTIME, this._mediaElement.currentTime);
            if (this._callbacks && typeof this._callbacks.onplaytime === 'function' && this._mediaElement) {
                this._callbacks.onplaytime(this._mediaElement.currentTime);
            }
        }
    }, {
        key: '_onvLoadedMetadata',
        value: function _onvLoadedMetadata(e) {
            if (this._pendingSeekTime != null) {
                this._mediaElement.currentTime = this._pendingSeekTime;
                this._pendingSeekTime = null;
            }
        }
    }, {
        key: '_onvSeeked',
        value: function _onvSeeked(e) {
            if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                this._callbacks.onnotify(_playerEvents2.default.VIDEOSEEK, { currentTime: this._mediaElement.currentTime });
            }
            this._emitter.emit(_playerEvents2.default.VIDEOSEEK, { currentTime: this._mediaElement.currentTime });
        }
    }, {
        key: '_onvRateChange',
        value: function _onvRateChange(e) {
            this._emitter.emit(_playerEvents2.default.SPEEDCHANGE, { playbackRate: this._mediaElement.playbackRate });
            if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                this._callbacks.onnotify(_playerEvents2.default.SPEEDCHANGE, { playbackRate: this._mediaElement.playbackRate });
            }
        }
    }, {
        key: '_onvError',
        value: function _onvError(e) {
            this._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.MEDIA_ERROR, _playerErrors.ErrorDetails.MEDIA_VIDEO_ERROR, { code: e.code });
            if (this._callbacks && typeof this._callbacks.onerror === 'function') {
                this._callbacks.onerror(_playerErrors.ErrorTypes.MEDIA_ERROR, _playerErrors.ErrorDetails.MEDIA_VIDEO_ERROR, { code: e.code });
            }
        }
    }, {
        key: '_reportStatisticsInfo',
        value: function _reportStatisticsInfo() {
            this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, this.statisticsInfo);
        }
    }, {
        key: 'type',
        get: function get() {
            return this._type;
        }
    }, {
        key: 'buffered',
        get: function get() {
            return this._mediaElement.buffered;
        }
    }, {
        key: 'duration',
        get: function get() {
            return this._mediaElement.duration;
        }
    }, {
        key: 'volume',
        get: function get() {
            return this._mediaElement.volume;
        },
        set: function set(value) {
            this._mediaElement.volume = value;
        }
    }, {
        key: 'muted',
        get: function get() {
            return this._mediaElement.muted;
        },
        set: function set(muted) {
            this._mediaElement.muted = muted;
        }
    }, {
        key: 'currentTime',
        get: function get() {
            if (this._mediaElement) {
                return this._mediaElement.currentTime;
            }
            return 0;
        },
        set: function set(seconds) {
            if (this._mediaElement) {
                this._mediaElement.currentTime = seconds;
                if (this._mediaElement.paused) {
                    try {
                        this._mediaElement.play().catch(function (e) {
                            //Log.v(this.TAG, 'play() catch');
                        });
                    } catch (e) {}
                }
            } else {
                this._pendingSeekTime = seconds;
            }
        }
    }, {
        key: 'playbackRate',
        get: function get() {
            if (this._mediaElement) {
                return this._mediaElement.playbackRate;
            }
            return 0;
        },
        set: function set(speed) {
            if (this._mediaElement) {
                return this._mediaElement.playbackRate = speed;
            }
        }
    }, {
        key: 'mediaInfo',
        get: function get() {
            var mediaPrefix = this._mediaElement instanceof HTMLAudioElement ? 'audio/' : 'video/';
            var info = {
                mimeType: mediaPrefix + this._mediaDataSource.type
            };
            if (this._mediaElement) {
                info.duration = Math.floor(this._mediaElement.duration * 1000);
                if (this._mediaElement instanceof HTMLVideoElement) {
                    info.videoWidth = this._mediaElement.videoWidth;
                    info.videoHeight = this._mediaElement.videoHeight;
                }
            }
            return info;
        }
    }, {
        key: 'frameDuration',
        get: function get() {
            return this._frameDuration;
        }
    }, {
        key: 'statisticsInfo',
        get: function get() {
            var info = {
                playerType: this._type,
                url: this._mediaDataSource.channelInfo.url
            };

            if (!(this._mediaElement instanceof HTMLVideoElement)) {
                return info;
            }

            var hasQualityInfo = true;
            var decoded = 0;
            var dropped = 0;

            if (this._mediaElement.getVideoPlaybackQuality) {
                var quality = this._mediaElement.getVideoPlaybackQuality();
                decoded = quality.totalVideoFrames;
                dropped = quality.droppedVideoFrames;
            } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {
                decoded = this._mediaElement.webkitDecodedFrameCount;
                dropped = this._mediaElement.webkitDroppedFrameCount;
            } else {
                hasQualityInfo = false;
            }

            if (hasQualityInfo) {
                info.decodedFrames = decoded;
                info.droppedFrames = dropped;
            }

            return info;
        }
    }]);

    return NativePlayer;
}();

exports.default = NativePlayer;

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});


var PlayerEvents = {
    ERROR: 'error',
    LOADING_COMPLETE: 'loading_complete',
    RECOVERED_EARLY_EOF: 'recovered_early_eof',
    MEDIA_INFO: 'media_info',
    METADATA_ARRIVED: 'metadata_arrived',
    SCRIPTDATA_ARRIVED: 'scriptdata_arrived',
    STATISTICS_INFO: 'statistics_info',
    COMMAND_RESPONSE: 'command_response',
    COMMAND_NOTIFY: 'command_notify',
    STARTSTREAM: 'streamstart',
    FIRST_CANPLAY: 'firstcanplay',
    LOADED_METADATA: 'loadedmetadata',
    PTZCONTROL: 'ptzcontrol',
    SPEEDCHANGE: 'speedchange',
    VIDEOPAUSE: 'pause',
    VIDEOPLAY: 'play',
    VIDEOSEEK: 'seek',
    PLAYTIME: 'playtime',
    SEGMENTPLAY_COMPLETE: 'segmentplay_complete',
    SEGMENTPLAY_CANCEL: 'segmentplay_cancel',
    OBJECTINFO: 'objectinfo',
    QUERYRECORD: 'queryrecord'
};

exports.default = PlayerEvents;

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ErrorDetails = exports.ErrorTypes = undefined;

var _loader = __webpack_require__(347);

var _demuxErrors = __webpack_require__(349);

var _demuxErrors2 = _interopRequireDefault(_demuxErrors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ErrorTypes = exports.ErrorTypes = {
    NETWORK_ERROR: 'NetworkError',
    MEDIA_ERROR: 'MediaError',
    STREAM_ERROR: 'StreamError',
    OTHER_ERROR: 'OtherError'
};

var ErrorDetails = exports.ErrorDetails = {
    NETWORK_EXCEPTION: _loader.LoaderErrors.EXCEPTION,
    NETWORK_STATUS_CODE_INVALID: _loader.LoaderErrors.HTTP_STATUS_CODE_INVALID,
    NETWORK_TIMEOUT: _loader.LoaderErrors.CONNECTING_TIMEOUT,
    NETWORK_UNRECOVERABLE_EARLY_EOF: _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF,

    MEDIA_MSE_ERROR: 'MediaMSEError',
    MEDIA_VIDEO_ERROR: 'MediaVideoError',

    MEDIA_FORMAT_ERROR: _demuxErrors2.default.FORMAT_ERROR,
    MEDIA_FORMAT_UNSUPPORTED: _demuxErrors2.default.FORMAT_UNSUPPORTED,
    MEDIA_CODEC_UNSUPPORTED: _demuxErrors2.default.CODEC_UNSUPPORTED,
    STARTSTREAM_ERROR: 'StartStreamError',
    READFILEERROR_ERROR: 'ReadFileError'
};

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BaseLoader = exports.LoaderErrors = exports.LoaderStatus = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _exception = __webpack_require__(348);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoaderStatus = exports.LoaderStatus = {
    kIdle: 0,
    kConnecting: 1,
    kBuffering: 2,
    kError: 3,
    kComplete: 4
};

var LoaderErrors = exports.LoaderErrors = {
    OK: 'OK',
    EXCEPTION: 'Exception',
    UNSUPPORT: 'Unsupport',
    HTTP_STATUS_CODE_INVALID: 'HttpStatusCodeInvalid',
    CONNECTING_TIMEOUT: 'ConnectingTimeout',
    CONNECTING_ERROR: 'ConnectingError',
    EARLY_EOF: 'EarlyEof',
    UNRECOVERABLE_EARLY_EOF: 'UnrecoverableEarlyEof'
};

/* Loader has callbacks which have following prototypes:
 *     function onContentLengthKnown(contentLength: number): void
 *     function onURLRedirect(url: string): void
 *     function onDataArrival(chunk: ArrayBuffer, byteStart: number, receivedLength: number): void
 *     function onError(errorType: number, errorInfo: {code: number, msg: string}): void
 *     function onComplete(rangeFrom: number, rangeTo: number): void
 */

var BaseLoader = exports.BaseLoader = function () {
    function BaseLoader(typeName) {
        _classCallCheck(this, BaseLoader);

        this._type = typeName || 'undefined';
        this._status = LoaderStatus.kIdle;
        this._needStash = false;
        // callbacks
        this._onContentLengthKnown = null;
        this._onURLRedirect = null;
        this._onDataArrival = null;
        this._onError = null;
        this._onComplete = null;
    }

    _createClass(BaseLoader, [{
        key: 'destroy',
        value: function destroy() {
            this._status = LoaderStatus.kIdle;
            this._onContentLengthKnown = null;
            this._onURLRedirect = null;
            this._onDataArrival = null;
            this._onError = null;
            this._onComplete = null;
        }
    }, {
        key: 'isWorking',
        value: function isWorking() {
            return this._status === LoaderStatus.kConnecting || this._status === LoaderStatus.kBuffering;
        }
    }, {
        key: 'open',


        // pure virtual
        value: function open(dataSource, range) {
            throw new _exception.NotImplementedException('Unimplemented abstract function!');
        }
    }, {
        key: 'abort',
        value: function abort() {
            throw new _exception.NotImplementedException('Unimplemented abstract function!');
        }
    }, {
        key: 'type',
        get: function get() {
            return this._type;
        }
    }, {
        key: 'status',
        get: function get() {
            return this._status;
        }
    }, {
        key: 'needStashBuffer',
        get: function get() {
            return this._needStash;
        }
    }, {
        key: 'onContentLengthKnown',
        get: function get() {
            return this._onContentLengthKnown;
        },
        set: function set(callback) {
            this._onContentLengthKnown = callback;
        }
    }, {
        key: 'onURLRedirect',
        get: function get() {
            return this._onURLRedirect;
        },
        set: function set(callback) {
            this._onURLRedirect = callback;
        }
    }, {
        key: 'onDataArrival',
        get: function get() {
            return this._onDataArrival;
        },
        set: function set(callback) {
            this._onDataArrival = callback;
        }
    }, {
        key: 'onError',
        get: function get() {
            return this._onError;
        },
        set: function set(callback) {
            this._onError = callback;
        }
    }, {
        key: 'onComplete',
        get: function get() {
            return this._onComplete;
        },
        set: function set(callback) {
            this._onComplete = callback;
        }
    }]);

    return BaseLoader;
}();

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RuntimeException = exports.RuntimeException = function () {
    function RuntimeException(message) {
        _classCallCheck(this, RuntimeException);

        this._message = message;
    }

    _createClass(RuntimeException, [{
        key: 'toString',
        value: function toString() {
            return this.name + ': ' + this.message;
        }
    }, {
        key: 'name',
        get: function get() {
            return 'RuntimeException';
        }
    }, {
        key: 'message',
        get: function get() {
            return this._message;
        }
    }]);

    return RuntimeException;
}();

var IllegalStateException = exports.IllegalStateException = function (_RuntimeException) {
    _inherits(IllegalStateException, _RuntimeException);

    function IllegalStateException(message) {
        _classCallCheck(this, IllegalStateException);

        return _possibleConstructorReturn(this, (IllegalStateException.__proto__ || Object.getPrototypeOf(IllegalStateException)).call(this, message));
    }

    _createClass(IllegalStateException, [{
        key: 'name',
        get: function get() {
            return 'IllegalStateException';
        }
    }]);

    return IllegalStateException;
}(RuntimeException);

var InvalidArgumentException = exports.InvalidArgumentException = function (_RuntimeException2) {
    _inherits(InvalidArgumentException, _RuntimeException2);

    function InvalidArgumentException(message) {
        _classCallCheck(this, InvalidArgumentException);

        return _possibleConstructorReturn(this, (InvalidArgumentException.__proto__ || Object.getPrototypeOf(InvalidArgumentException)).call(this, message));
    }

    _createClass(InvalidArgumentException, [{
        key: 'name',
        get: function get() {
            return 'InvalidArgumentException';
        }
    }]);

    return InvalidArgumentException;
}(RuntimeException);

var NotImplementedException = exports.NotImplementedException = function (_RuntimeException3) {
    _inherits(NotImplementedException, _RuntimeException3);

    function NotImplementedException(message) {
        _classCallCheck(this, NotImplementedException);

        return _possibleConstructorReturn(this, (NotImplementedException.__proto__ || Object.getPrototypeOf(NotImplementedException)).call(this, message));
    }

    _createClass(NotImplementedException, [{
        key: 'name',
        get: function get() {
            return 'NotImplementedException';
        }
    }]);

    return NotImplementedException;
}(RuntimeException);

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var DemuxErrors = {
    OK: 'OK',
    FORMAT_ERROR: 'FormatError',
    FORMAT_UNSUPPORTED: 'FormatUnsupported',
    CODEC_UNSUPPORTED: 'CodecUnsupported'
};

exports.default = DemuxErrors;

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = __webpack_require__(343);

var _events2 = _interopRequireDefault(_events);

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _browser = __webpack_require__(351);

var _browser2 = _interopRequireDefault(_browser);

var _playerEvents = __webpack_require__(345);

var _playerEvents2 = _interopRequireDefault(_playerEvents);

var _transmuxer = __webpack_require__(352);

var _transmuxer2 = _interopRequireDefault(_transmuxer);

var _transmuxingEvents = __webpack_require__(374);

var _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);

var _mseController = __webpack_require__(380);

var _mseController2 = _interopRequireDefault(_mseController);

var _mseEvents = __webpack_require__(381);

var _mseEvents2 = _interopRequireDefault(_mseEvents);

var _playerErrors = __webpack_require__(346);

var _config = __webpack_require__(337);

var _exception = __webpack_require__(348);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FlvPlayer = function () {
    function FlvPlayer(mediaDataSource, config) {
        _classCallCheck(this, FlvPlayer);

        this.TAG = 'FlvPlayer';
        this._type = 'FlvPlayer';
        this._emitter = new _events2.default();
        this._mediaType = null;

        this._mediaDataSource = mediaDataSource;
        this._callbacks = null;
        if (_typeof(mediaDataSource.callbacks) === 'object') {
            this._callbacks = mediaDataSource.callbacks;
        }
        this._config = (0, _config.createDefaultConfig)();
        if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {
            Object.assign(this._config, config);
        }
        if (mediaDataSource.channelInfo && mediaDataSource.channelInfo.streamtype === 'live') {
            this._mediaDataSource.isLive = true;
            this._config.isLive = true;
        } else {
            this._mediaDataSource.channelInfo.streamtype = 'vod';
            this._mediaDataSource.isLive = false;
            this._config.isLive = false;
        }
        if (mediaDataSource.channelInfo && mediaDataSource.channelInfo.devicetype.toLowerCase() === 'flv') {
            this._mediaDataSource.mediaType = 'flv';
            //this._mediaDataSource.hasAudio = true;
            //this._mediaDataSource.hasVideo = true;
            this._mediaType = 'flv';
            Object.assign(this._mediaDataSource, mediaDataSource.channelInfo);
        }

        if (!mediaDataSource.mediaType || mediaDataSource.mediaType === 'undefined' || mediaDataSource.mediaType === '') {
            this._mediaDataSource.mediaType = 'fmp4';
            this._mediaType = 'fmp4';
        }

        this.e = {
            onvLoadedMetadata: this._onvLoadedMetadata.bind(this),
            onvSeeking: this._onvSeeking.bind(this),
            onvCanPlay: this._onvCanPlay.bind(this),
            onvStalled: this._onvStalled.bind(this),
            onvProgress: this._onvProgress.bind(this),
            onvError: this._onvError.bind(this),
            onvSeeked: this._onvSeeked.bind(this),
            onvRateChange: this._onvRateChange.bind(this),
            onvTimeUpdate: this._onvTimeUpdate.bind(this)
        };

        if (window.performance && window.performance.now) {
            this._now = window.performance.now.bind(window.performance);
        } else {
            this._now = Date.now;
        }

        this._pendingSeekTime = null; // in seconds
        this._requestSetTime = false;
        this._seekpointRecord = null;
        this._progressChecker = null;
        this._beforSeekTime = -1;
        this._playbackStreamOffset = 0; //in seconds 定位流的播放时间，用于录像实际开始时间比指定时间晚时。

        this._mediaElement = null;
        this._msectl = null;
        this._transmuxer = null;

        this._mseSourceOpened = false;
        this._hasPendingLoad = false;
        this._receivedCanPlay = false;
        //this._loadedMetadata = false;

        this._mediaInfo = null;
        this._statisticsInfo = null;

        this._chromeNeedIDRFix = _browser2.default.chrome && (_browser2.default.version.major < 50 || _browser2.default.version.major === 50 && _browser2.default.version.build < 2661);
        this._alwaysSeekKeyframe = (this._chromeNeedIDRFix || _browser2.default.msedge || _browser2.default.msie) && this._mediaType === 'flv' ? true : false;

        this._checkseeking = this._chromeNeedIDRFix || _browser2.default.msedge || _browser2.default.msie ? true : false;

        if (this._alwaysSeekKeyframe) {
            this._config.accurateSeek = false;
        } else {
            this._config.accurateSeek = true; //没有时间戳 必须为true
        }

        this._mediaDataSource.channelInfo.fixiframe = this._chromeNeedIDRFix ? true : false;

        this._currentRange = null;
        this._duration = 0;
        this._edgeseeking = false;
        this._seektime = 0;
        this._loadingComplete = false;
        this._frameDuration = 0.040; //秒

        //this.attachMediaElement(mediaElement); 无法通知相关信息
        //this.load();
    }

    _createClass(FlvPlayer, [{
        key: 'destroy',
        value: function destroy() {
            if (this._progressChecker != null) {
                window.clearInterval(this._progressChecker);
                this._progressChecker = null;
            }
            if (this._transmuxer) {
                this.unload();
            }
            if (this._mediaElement) {
                this.detachMediaElement();
            }
            this.e = null;
            this._mediaDataSource = null;

            this._emitter.removeAllListeners();
            this._emitter = null;
        }
    }, {
        key: 'on',
        value: function on(event, listener) {
            var _this = this;

            if (event === _playerEvents2.default.MEDIA_INFO) {
                if (this._mediaInfo != null) {
                    Promise.resolve().then(function () {
                        _this._emitter.emit(_playerEvents2.default.MEDIA_INFO, _this.mediaInfo);
                    });
                }
            } else if (event === _playerEvents2.default.STATISTICS_INFO) {
                if (this._statisticsInfo != null) {
                    Promise.resolve().then(function () {
                        _this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, _this.statisticsInfo);
                    });
                }
            }
            this._emitter.addListener(event, listener);
        }
    }, {
        key: 'off',
        value: function off(event, listener) {
            this._emitter.removeListener(event, listener);
        }
    }, {
        key: 'attachMediaElement',
        value: function attachMediaElement(mediaElement) {
            var _this2 = this;

            this._mediaElement = mediaElement;
            this._mediaElement.load(); //错误时重新加载
            mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);
            mediaElement.addEventListener('seeking', this.e.onvSeeking);
            mediaElement.addEventListener('canplay', this.e.onvCanPlay);
            mediaElement.addEventListener('stalled', this.e.onvStalled);
            mediaElement.addEventListener('progress', this.e.onvProgress);
            mediaElement.addEventListener('seeked', this.e.onvSeeked);
            mediaElement.addEventListener('error', this.e.onvError);
            mediaElement.addEventListener('ratechange', this.e.onvRateChange);
            mediaElement.addEventListener('timeupdate', this.e.onvTimeUpdate);

            //mediaElement.crossOrigin = 'Anonymous';//为canvas抓图设置，CORS 策略
            //https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image

            this._msectl = new _mseController2.default(this._config);

            this._msectl.on(_mseEvents2.default.UPDATE_END, this._onmseUpdateEnd.bind(this));
            this._msectl.on(_mseEvents2.default.BUFFER_FULL, this._onmseBufferFull.bind(this));
            this._msectl.on(_mseEvents2.default.SOURCE_OPEN, function () {
                _this2._mseSourceOpened = true;
                if (_this2._hasPendingLoad) {
                    _this2._hasPendingLoad = false;
                    _this2.load();
                }
            });
            this._msectl.on(_mseEvents2.default.ERROR, function (info) {
                _this2._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.MEDIA_ERROR, _playerErrors.ErrorDetails.MEDIA_MSE_ERROR, info);
                if (_this2._callbacks && typeof _this2._callbacks.onerror === 'function') {
                    _this2._callbacks.onerror(_playerErrors.ErrorTypes.MEDIA_ERROR, _playerErrors.ErrorDetails.MEDIA_MSE_ERROR, info);
                }
            });
            this._msectl.on(_mseEvents2.default.SOURCE_SEEK, function (seconds) {
                if (_this2._mediaElement) {
                    _this2._requestSetTime = true;
                    _this2._mediaElement.currentTime = seconds;
                    _this2._edgeseeking = false;
                    //Log.v(this.TAG, `SOURCE_SEEK  _edgeseeking=false`);
                }
            });

            this._msectl.attachMediaElement(mediaElement);

            if (this._pendingSeekTime != null) {
                try {
                    mediaElement.currentTime = this._pendingSeekTime;
                    this._pendingSeekTime = null;
                } catch (e) {
                    // IE11 may throw InvalidStateError if readyState === 0
                    // We can defer set currentTime operation after loadedmetadata
                }
            }
        }
    }, {
        key: 'detachMediaElement',
        value: function detachMediaElement() {
            if (this._mediaElement) {
                this._msectl.detachMediaElement();
                this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);
                this._mediaElement.removeEventListener('seeking', this.e.onvSeeking);
                this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);
                this._mediaElement.removeEventListener('stalled', this.e.onvStalled);
                this._mediaElement.removeEventListener('progress', this.e.onvProgress);
                this._mediaElement.removeEventListener('seeked', this.e.onvSeeked);
                this._mediaElement.removeEventListener('error', this.e.onvError);
                this._mediaElement.removeEventListener('ratechange', this.e.onvRateChange);
                this._mediaElement.removeEventListener('timeupdate', this.e.onvTimeUpdate);

                this._mediaElement = null;
            }
            if (this._msectl) {
                this._msectl.destroy();
                this._msectl = null;
            }
        }
    }, {
        key: 'load',
        value: function load() {
            var _this3 = this;

            if (!this._mediaElement) {
                throw new _exception.IllegalStateException('HTMLMediaElement must be attached before load()!');
            }
            if (this._transmuxer) {
                throw new _exception.IllegalStateException('FlvPlayer.load() has been called, please call unload() first!');
            }
            if (this._hasPendingLoad) {
                return;
            }

            if (this._config.deferLoadAfterSourceOpen && this._mseSourceOpened === false) {
                this._hasPendingLoad = true;
                return;
            }

            if (this._mediaElement.readyState > 0) {
                this._requestSetTime = true;
                // IE11 may throw InvalidStateError if readyState === 0
                this._mediaElement.currentTime = 0;
            }

            this._transmuxer = new _transmuxer2.default(this._mediaDataSource, this._config);

            this._transmuxer.on(_transmuxingEvents2.default.COMMAND_RESPONSE, function (response) {
                _this3._wsCommandResponse(response);
            });

            this._transmuxer.on(_transmuxingEvents2.default.INIT_SEGMENT, function (type, is) {
                // console.log(new Date().format("hh:mm:ss.S"), "transmuxer::TransmuxingEvents.INIT_SEGMENT");
                _this3._msectl.appendInitSegment(is);
            });
            this._transmuxer.on(_transmuxingEvents2.default.MEDIA_SEGMENT, function (type, ms) {
                //console.log(new Date().format("hh:mm:ss.S"), "transmuxer::TransmuxingEvents.MEDIA_SEGMENT");
                _this3._msectl.appendMediaSegment(ms);

                // lazyLoad check
                if (_this3._config.lazyLoad && !_this3._mediaDataSource.isLive && _this3._mediaType === 'flv') {
                    var currentTime = _this3._mediaElement.currentTime;
                    if (ms.info.endDts >= (currentTime + _this3._config.lazyLoadMaxDuration) * 1000) {
                        if (_this3._progressChecker == null) {
                            _logger2.default.v(_this3.TAG, 'Maximum buffering duration exceeded, suspend transmuxing task');
                            _this3._suspendTransmuxer();
                        }
                    }
                }
            });
            this._transmuxer.on(_transmuxingEvents2.default.LOADING_COMPLETE, function () {
                if (_this3._mediaType != 'flv') {
                    _this3._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.NETWORK_ERROR, 'WebsocketClosed', { error: -1 });
                } else {
                    _this3._msectl.endOfStream();
                    _this3._emitter.emit(_playerEvents2.default.LOADING_COMPLETE);
                }
            });
            this._transmuxer.on(_transmuxingEvents2.default.IO_ERROR, function (detail, info) {
                _this3._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.NETWORK_ERROR, detail, info);
                if (_this3._callbacks && typeof _this3._callbacks.onerror === 'function') {
                    _this3._callbacks.onerror(_playerErrors.ErrorTypes.NETWORK_ERROR, detail, info);
                }
            });

            this._transmuxer.on(_transmuxingEvents2.default.RECOVERED_EARLY_EOF, function () {
                _this3._emitter.emit(_playerEvents2.default.RECOVERED_EARLY_EOF);
            });
            this._transmuxer.on(_transmuxingEvents2.default.DEMUX_ERROR, function (detail, info) {
                _this3._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.MEDIA_ERROR, detail, { code: -1, msg: info });
            });
            this._transmuxer.on(_transmuxingEvents2.default.MEDIA_INFO, function (mediaInfo) {
                _this3._mediaInfo = mediaInfo;
                if (typeof mediaInfo.fps === 'number' && mediaInfo.fps != 0) {
                    _this3._frameDuration = 1 / mediaInfo.fps;
                }
                // console.log(this._mediaInfo);
                _this3._emitter.emit(_playerEvents2.default.MEDIA_INFO, Object.assign({}, mediaInfo));
            });
            this._transmuxer.on(_transmuxingEvents2.default.METADATA_ARRIVED, function (metadata) {
                //  console.log(metadata);
                _this3._emitter.emit(_playerEvents2.default.METADATA_ARRIVED, metadata);
            });
            this._transmuxer.on(_transmuxingEvents2.default.SCRIPTDATA_ARRIVED, function (data) {
                _this3._emitter.emit(_playerEvents2.default.SCRIPTDATA_ARRIVED, data);
            });
            this._transmuxer.on(_transmuxingEvents2.default.STATISTICS_INFO, function (statInfo) {
                _this3._statisticsInfo = _this3._fillStatisticsInfo(statInfo);
                _this3._emitter.emit(_playerEvents2.default.STATISTICS_INFO, Object.assign({}, _this3._statisticsInfo));
            });
            this._transmuxer.on(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, function (milliseconds) {
                if (_this3._mediaElement && !_this3._config.accurateSeek) {
                    _this3._requestSetTime = true;
                    _this3._mediaElement.currentTime = milliseconds / 1000;
                }
            });

            this._transmuxer.open();
            try {
                this._mediaElement.muted = true;
                this._mediaElement.autoplay = true;
                this._mediaElement.play().catch(function (e) {
                    //Log.v(this.TAG, 'play() catch');
                });
            } catch (e) {}
        }
    }, {
        key: 'unload',
        value: function unload() {
            if (this._mediaElement) {
                this._mediaElement.playbackRate = this._mediaElement.defaultPlaybackRate;
                try {
                    this._mediaElement.pause();
                    this._mediaElement.src = ''; //清除chrome低版本video播放失败后残留黑色
                    this._mediaElement.removeAttribute('src');
                } catch (error) {
                    // 
                }
            }
            if (this._msectl) {
                this._msectl.seek(0);
            }
            if (this._transmuxer) {
                this._transmuxer.close();
                this._transmuxer.destroy();
                this._transmuxer = null;
            }
        }
    }, {
        key: 'play',
        value: function play() {
            if (!this._mediaDataSource.isLive) {
                this._emitter.emit(_playerEvents2.default.VIDEOPLAY);
                if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                    this._callbacks.onnotify(_playerEvents2.default.VIDEOPLAY);
                }
                try {
                    this._mediaElement.play().catch(function (e) {
                        //Log.v(this.TAG, 'play() catch');
                    });
                } catch (e) {}
                return true;
            }
            return false;
        }
    }, {
        key: 'pause',
        value: function pause() {
            if (!this._mediaDataSource.isLive) {
                this._emitter.emit(_playerEvents2.default.VIDEOPAUSE);
                if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                    this._callbacks.onnotify(_playerEvents2.default.VIDEOPAUSE);
                }
                this._mediaElement.pause();
                return true;
            }
            return false;
        }
    }, {
        key: 'setPlaybackOffset',
        value: function setPlaybackOffset(offset) {
            this._playbackStreamOffset = offset;
        }
    }, {
        key: 'ptzControl',
        value: function ptzControl(cmd, param) {
            if (this._mediaElement && this._transmuxer) {
                if (this._mediaDataSource.isLive) {
                    this._transmuxer.sendcmd({ type: 'command', name: 'PtzControl', param: { 'cmd': parseInt(cmd), 'value': parseInt(param) } });
                    return true;
                }
            }
            return false;
        }
    }, {
        key: 'ptzLock',
        value: function ptzLock(locktime) {
            if (this._mediaElement && this._transmuxer) {
                if (this._mediaDataSource.isLive) {
                    this._transmuxer.sendcmd({ type: 'command', name: 'PtzLock', param: { 'value': parseInt(locktime) } });
                    return true;
                }
            }
            return false;
        }
    }, {
        key: 'ptzControl3D',
        value: function ptzControl3D(direct, x, y, w, h) {
            if (this._mediaElement && this._transmuxer) {
                if (this._mediaDataSource.isLive) {
                    this._transmuxer.sendcmd({ type: 'command', name: 'PtzControl3D', param: { 'direct': parseInt(direct), 'x': x, 'y': y, 'w': w, 'h': h } });
                    return true;
                }
            }
            return false;
        }
    }, {
        key: 'queryRecord',
        value: function queryRecord(info) {
            if (!this._mediaDataSource.isLive) {
                this._transmuxer.sendcmd({ type: 'command', name: 'QueryRecord', param: info });
            }
        }

        ///内部方法

        //发送的命令的相应

    }, {
        key: '_wsCommandResponse',
        value: function _wsCommandResponse(response) {
            //Log.v(this.TAG, response);
            var obj = JSON.parse(response);
            if (obj && obj.type) {
                if (obj.type === 'response') {
                    //this._emitter.emit(PlayerEvents.COMMAND_RESPONSE, obj.name, obj.param, obj.rederved);
                    switch (obj.name) {
                        case 'StartStream':
                            {
                                this._emitter.emit(_playerEvents2.default.STARTSTREAM, obj.param.error);
                                if (obj.param.error !== 0) {
                                    this._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.STREAM_ERROR, _playerErrors.ErrorDetails.STARTSTREAM_ERROR, Object.assign({}, obj.param, obj.rederved));
                                    if (this._callbacks && typeof this._callbacks.onerror === 'function') {
                                        this._callbacks.onerror(_playerErrors.ErrorTypes.STREAM_ERROR, _playerErrors.ErrorDetails.STARTSTREAM_ERROR, Object.assign({}, obj.param, obj.rederved));
                                    }
                                } else {
                                    if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                                        this._callbacks.onnotify(_playerEvents2.default.STARTSTREAM);
                                    }
                                }
                                break;
                            }
                        case 'PtzControl':
                        case 'PtzControl3D':
                            {
                                this._emitter.emit(_playerEvents2.default.PTZCONTROL, Object.assign({}, obj.param, obj.rederved));

                                if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                                    this._callbacks.onnotify(_playerEvents2.default.PTZCONTROL, Object.assign({}, obj.param, obj.rederved));
                                }
                                break;
                            }
                        case 'SetSpeed':
                            {
                                this._emitter.emit(_playerEvents2.default.SPEEDCHANGE, Object.assign({ playbackRate: this._mediaElement.playbackRate }, obj.param, obj.rederved));
                                if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                                    this._callbacks.onnotify(_playerEvents2.default.SPEEDCHANGE, Object.assign({ playbackRate: this._mediaElement.playbackRate }, obj.param, obj.rederved));
                                }
                                break;
                            }
                        case 'Seek':
                            {
                                if (this._loadingComplete) {
                                    this._loadingComplete = false;
                                }
                                if (obj.param.error === 0) {
                                    var seconds = obj.param.value / 1000;
                                    this._msectl.seek(seconds);
                                    if (this._config.accurateSeek) {
                                        this._requestSetTime = true;
                                        this._mediaElement.currentTime = seconds;
                                    }
                                    //Log.v(this.TAG,  `_wsCommandResponse Seek(${obj.param.value/1000}) ${obj.param.error} `);
                                } else {
                                    this._emitter.emit(_playerEvents2.default.VIDEOSEEK, { error: obj.param.error });
                                    //this._mediaElement.currentTime = this._beforSeekTime;
                                    this._edgeseeking = false;
                                    _logger2.default.e(this.TAG, '_wsCommandResponse Seek(' + obj.param.value / 1000 + ') ' + obj.param.error + ' ');
                                }
                                break;
                            }
                        case 'Pause':
                            {
                                _logger2.default.v(this.TAG, '_wsCommandResponse Pause ' + obj.param.error + ' ');
                                break;
                            }
                        case 'QueryRecord':
                            {
                                this._emitter.emit(_playerEvents2.default.QUERYRECORD, Object.assign({}, obj.param, obj.rederved));

                                break;
                            }
                    }
                } else if (obj.type === 'notify') {
                    if (obj.name == 'VodEnd') {
                        this._loadingComplete = true;
                        this._emitter.emit(_playerEvents2.default.LOADING_COMPLETE);
                        //this._emitter.emit(PlayerEvents.COMMAND_NOTIFY, obj.name, obj.param, obj.rederved);    
                    } else if (obj.name == 'ReadFileError') {
                        this._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.STREAM_ERROR, _playerErrors.ErrorDetails.READFILEERROR_ERROR, Object.assign({}, obj.param, obj.rederved));
                        if (this._callbacks && typeof this._callbacks.onerror === 'function') {
                            this._callbacks.onerror(_playerErrors.ErrorTypes.STREAM_ERROR, _playerErrors.ErrorDetails.READFILEERROR_ERROR, Object.assign({}, obj.param, obj.rederved));
                        }
                    } else if (obj.name == 'frameduration') {
                        this._frameDuration = obj.param / 1000;
                        //console.log("frameduration:", this._frameDuration);
                    } else {
                        this._emitter.emit(_playerEvents2.default.COMMAND_NOTIFY, obj.name, obj.name, Object.assign({}, obj.param, obj.rederved));
                        if (this._callbacks && typeof this._callbacks.onerror === 'function') {
                            this._callbacks.onnotify(obj.name, Object.assign({}, obj.param, obj.rederved));
                        }
                    }
                } else if (obj.type === 'objectinfo') {
                    //console.log(obj);
                    this._emitter.emit(_playerEvents2.default.OBJECTINFO, obj);
                }
            } else {
                _logger2.default.e(this.TAG, '_wsCommandResponse ' + response + ' ');
            }
        }
    }, {
        key: '_fillStatisticsInfo',
        value: function _fillStatisticsInfo(statInfo) {
            statInfo.playerType = this._type;

            if (!(this._mediaElement instanceof HTMLVideoElement)) {
                return statInfo;
            }

            var hasQualityInfo = true;
            var decoded = 0;
            var dropped = 0;

            if (this._mediaElement.getVideoPlaybackQuality) {
                var quality = this._mediaElement.getVideoPlaybackQuality();
                decoded = quality.totalVideoFrames;
                dropped = quality.droppedVideoFrames;
            } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {
                decoded = this._mediaElement.webkitDecodedFrameCount;
                dropped = this._mediaElement.webkitDroppedFrameCount;
            } else {
                hasQualityInfo = false;
            }

            if (hasQualityInfo) {
                statInfo.decodedFrames = decoded;
                statInfo.droppedFrames = dropped;
            }

            return statInfo;
        }
    }, {
        key: '_onmseUpdateEnd',
        value: function _onmseUpdateEnd() {
            if (!this._config.lazyLoad || this._config.adaptiveSpeedDurationForLive <= 0 || this._progressChecker || this._loadingComplete) {
                return;
            }

            var buffered = this._mediaElement.buffered;
            var currentTime = this._mediaElement.currentTime;
            var currentRangeStart = 0;
            var currentRangeEnd = 0;
            var bfind = false;

            for (var i = 0; i < buffered.length; i++) {
                var start = buffered.start(i);
                var end = buffered.end(i);
                // if (i > 0) {
                //     Log.v(this.TAG, `_onmseUpdateEnd buffered ${buffered.length} ${i} from ${start} to ${end}`);
                // }
                if (start <= currentTime && currentTime < end) {
                    currentRangeStart = start;
                    currentRangeEnd = end;
                    bfind = true;
                    break;
                }
            }
            ///  
            if (this._currentRange === null) {
                //记录
                this._currentRange = {};
                this._currentRange.start = currentRangeStart;
                this._currentRange.end = currentRangeEnd;
            }
            //没有缓冲到当前段 && 不是seeking
            //else if (this._currentRange.end === currentRangeEnd && !this._mediaElement.seeking && !this._edgeseeking) {
            else if (this._currentRange.end === currentRangeEnd && !this._edgeseeking) {

                    if (currentTime >= currentRangeEnd - 0.5) {
                        //即将播完 含此段小于0.5秒
                        //Log.w(this.TAG, `_onmseUpdateEnd bufferedchange buffered.length ${buffered.length} [${currentRangeStart} to ${currentRangeEnd}] currentTime[${currentTime}]`);
                        var findtype = 0;
                        var nextRangeStart = 0;
                        var nextRangeEnd = 0;
                        var nextbackRangeStart = 0;
                        var nextbackRangeEnd = 0;
                        for (var _i = 0; _i < buffered.length; _i++) {
                            var _start = buffered.start(_i);
                            var _end = buffered.end(_i);
                            if (_start > currentTime) {
                                //向前 第一个
                                nextRangeStart = _start;
                                nextRangeEnd = _end;
                                findtype = 1;
                                _logger2.default.w(this.TAG, '_onmseUpdateEnd fount bufferedchange seek ' + currentTime + ' to ' + _start);
                                break; //有向前的 不选向后的
                            } else if (_start != currentRangeStart) {
                                //向后 第一个
                                nextRangeStart = _start;
                                nextRangeStart = _end;
                                findtype = 2;
                                _logger2.default.w(this.TAG, '_onmseUpdateEnd back bufferedchange seek ' + currentTime + ' to ' + _start);
                                //break;
                            }
                        }
                        if (findtype != 0 && this._mediaType === 'fmp4') {
                            currentRangeStart = nextRangeStart;
                            currentRangeEnd = nextRangeEnd;
                            currentTime = this._mediaElement.currentTime = currentRangeStart;
                        }
                    }
                } else if (!bfind && !this._edgeseeking && this._mediaType === 'fmp4') {
                    if (buffered.length >= 1) {
                        currentRangeStart = buffered.start(buffered.length - 1);
                        currentRangeEnd = buffered.end(buffered.length - 1);;
                        currentTime = this._mediaElement.currentTime = currentRangeStart;
                        _logger2.default.w(this.TAG, '_onmseUpdateEnd bufferedcannotfind seek ' + currentTime + ' to ' + currentRangeStart);
                    }
                }

            this._currentRange.start = currentRangeStart;
            this._currentRange.end = currentRangeEnd;

            var blazyLoad = !this._mediaDataSource.isLive && currentRangeEnd >= currentTime + this._config.lazyLoadMaxDuration;
            var badaptive = this._mediaDataSource.isLive && this._config.adaptiveSpeedDurationForLive > 0 && currentRangeEnd >= currentTime + this._config.adaptiveSpeedDurationForLive;
            // 隐藏状态下执行此处无效
            if (badaptive && currentRangeEnd >= currentTime + this._config.adaptiveSpeedDurationForLive * 2 && this._mediaType === 'fmp4') {
                _logger2.default.v(this.TAG, '_onmseUpdateEnd buffered.length ' + buffered.length + ' ' + currentRangeStart + ' to ' + currentRangeEnd);
                var seekpos = currentRangeEnd - this._config.adaptiveSpeedDurationForLive;
                this._mediaElement.currentTime = seekpos;
                _logger2.default.v(this.TAG, '_onmseUpdateEnd seek ' + currentTime + ' to ' + seekpos);
            }
            if ((blazyLoad || badaptive) && !this._mediaElement.seeking && !this._edgeseeking) {
                this._suspendTransmuxer();
                _logger2.default.v(this.TAG, 'Maximum buffering duration exceeded, suspend task');
            }
        }
    }, {
        key: '_onmseBufferFull',
        value: function _onmseBufferFull() {
            _logger2.default.v(this.TAG, 'MSE SourceBuffer is full, suspend task');
            if (this._progressChecker == null && !this._mediaElement.seeking && !this._edgeseeking) {
                this._suspendTransmuxer();
            }
        }
    }, {
        key: '_suspendTransmuxer',
        value: function _suspendTransmuxer() {
            if (this._transmuxer) {

                if (!this._mediaDataSource.isLive) {
                    if (this._mediaType === "flv") {
                        this._transmuxer.pause();
                    } else {
                        this._transmuxer.sendcmd({ type: 'command', name: 'Pause', param: { 'value': 1 } });
                    }
                } else {
                    this._mediaElement.playbackRate = 1.75; //数据多，改变速度
                }

                if (this._progressChecker == null) {
                    this._progressChecker = window.setInterval(this._checkProgressAndResume.bind(this), 1000);
                }
            }
        }
    }, {
        key: '_checkProgressAndResume',
        value: function _checkProgressAndResume() {
            var currentTime = this._mediaElement.currentTime;
            var buffered = this._mediaElement.buffered; //秒

            var needResume = true;
            var currentRangeEnd = 0;

            for (var i = 0; i < buffered.length; i++) {
                var from = buffered.start(i);
                var to = buffered.end(i);
                // if (i > 0) {
                //     Log.v(this.TAG, `_checkProgressAndResume buffered[${buffered.length}][${i}] from[${from}] to[${to}]`);
                // }
                if (currentTime >= from && currentTime < to) {
                    if (!this._mediaDataSource.isLive && currentTime >= to - this._config.lazyLoadRecoverDuration || this._mediaDataSource.isLive && currentTime >= to - 1) {
                        needResume = true;
                    } else {
                        needResume = false;
                    }
                    currentRangeEnd = to;
                    break;
                }
            }

            if (needResume || this._mediaElement.seeking || this._edgeseeking) {
                window.clearInterval(this._progressChecker);
                this._progressChecker = null;
                if (needResume) {
                    _logger2.default.v(this.TAG, 'Continue loading from paused position');
                    if (!this._mediaDataSource.isLive) {
                        if (this._mediaType === "flv") {
                            this._transmuxer.resume();
                        } else {
                            this._transmuxer.sendcmd({ type: 'command', name: 'Pause', param: { 'value': 0 } });
                        }
                    } else {
                        this._mediaElement.playbackRate = 1; //恢复速度
                    }
                }
            } else {
                // 隐藏状态下执行此处无效 重新设置
                if (this._mediaDataSource.isLive && currentRangeEnd >= currentTime + this._config.adaptiveSpeedDurationForLive * 2 && this._mediaType === 'fmp4') {
                    this._mediaElement.currentTime = currentRangeEnd - this._config.adaptiveSpeedDurationForLive;
                    _logger2.default.v(this.TAG, '_checkProgressAndResume reset currentTime = ' + this._mediaElement.currentTime);
                }
                if (this._mediaDataSource.isLive) {
                    this._mediaElement.playbackRate = 1.75;
                }
            }
        }
    }, {
        key: '_isTimepointBuffered',
        value: function _isTimepointBuffered(seconds) {
            var buffered = this._mediaElement.buffered;

            for (var i = 0; i < buffered.length; i++) {
                var from = buffered.start(i);
                var to = buffered.end(i);
                if (seconds >= from && seconds < to) {
                    return true;
                }
            }
            return false;
        }
    }, {
        key: '_internalSeek',
        value: function _internalSeek(seconds) {
            //改变播放时间了
            if (seconds < 0 || isFinite(this._mediaElement.duration) && seconds > this._mediaElement.duration) {
                return;
            }
            //if(seconds >= this._mediaElement.duration - 1) {
            //    seconds = this._mediaElement.duration - 1;
            //}

            this._seektime = seconds;
            var directSeek = this._isTimepointBuffered(seconds);

            var directSeekBegin = false;
            var directSeekBeginTime = 0;

            if (seconds < 1.0 && this._mediaElement.buffered.length > 0) {
                var videoBeginTime = this._mediaElement.buffered.start(0);
                if (videoBeginTime < 1.0 && seconds < videoBeginTime || _browser2.default.safari) {
                    directSeekBegin = true;
                    // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid
                    directSeekBeginTime = _browser2.default.safari ? 0.1 : videoBeginTime;
                }
            }

            if (directSeekBegin) {
                // seek to video begin, set currentTime directly if beginPTS buffered
                this._requestSetTime = true;
                this._mediaElement.currentTime = directSeekBeginTime;
                //Log.v(this.TAG, `_internalSeek directSeekBegin ${directSeekBeginTime}`);
            } else if (directSeek) {
                // buffered position
                if (!this._alwaysSeekKeyframe) {
                    //console.log("directSeek range " +this._mediaElement.buffered.start(0)+" to "+this._mediaElement.buffered.end(0));
                    //console.log("directSeek " +this._mediaElement.currentTime+" to "+seconds);
                    this._requestSetTime = true;
                    this._mediaElement.currentTime = seconds;
                    _logger2.default.v(this.TAG, '_internalSeek directSeek ' + seconds);
                } else {
                    var idr = this._msectl.getNearestKeyframe(Math.floor(seconds * 1000));
                    this._requestSetTime = true;
                    if (idr != null) {
                        this._mediaElement.currentTime = idr.dts / 1000;
                    } else {
                        this._mediaElement.currentTime = seconds;
                    }
                    //Log.v(this.TAG, `_internalSeek getNearestKeyframe ${seconds}`);
                }
                if (this._progressChecker != null) {
                    this._checkProgressAndResume();
                }
            } else {
                //seek 视频流
                this._edgeseeking = true; //this._checkseeking;
                if (this._edgeseeking) {
                    //Log.v(this.TAG, `_internalSeek _edgeseeking = true ${seconds}`);
                }
                if (this._progressChecker != null) {
                    window.clearInterval(this._progressChecker);
                    this._progressChecker = null;
                }

                console.log("_msectl seek " + seconds);
                //console.log("_msectlSeek " +this._mediaElement.currentTime+" to "+seconds);
                //Log.v(this.TAG, `_internalSeek  msestreamseek ${seconds}`);
                if (this._mediaType != "flv") {
                    this._transmuxer.sendcmd({ type: 'command', name: 'Seek', param: { 'value': parseInt((seconds + this._playbackStreamOffset) * 1000) } }); // in milliseconds
                } else {
                    this._msectl.seek(seconds);
                    this._transmuxer.seek(Math.floor(seconds * 1000)); // in milliseconds
                    // no need to set mediaElement.currentTime if non-accurateSeek,
                    // just wait for the recommend_seekpoint callback
                    if (this._config.accurateSeek) {
                        this._requestSetTime = true;
                        this._mediaElement.currentTime = seconds;
                    }
                }
            }
            window.setTimeout(this._checkSeekingTimeout.bind(this), 5000);
            //Log.v(this.TAG, `_internalSeek ${seconds} finish`);
        }
    }, {
        key: '_checkSeekingTimeout',
        value: function _checkSeekingTimeout() {
            if (this._edgeseeking) {
                this._edgeseeking = false;
            }
        }
    }, {
        key: '_checkAndApplyUnbufferedSeekpoint',
        value: function _checkAndApplyUnbufferedSeekpoint() {
            if (this._seekpointRecord) {
                if (this._seekpointRecord.recordTime <= this._now() - 100) {
                    var target = this._mediaElement.currentTime;
                    this._seekpointRecord = null;
                    if (!this._isTimepointBuffered(target)) {
                        if (this._progressChecker != null) {
                            window.clearTimeout(this._progressChecker);
                            this._progressChecker = null;
                        }
                        // .currentTime is consists with .buffered timestamp
                        // Chrome/Edge use DTS, while FireFox/Safari use PTS
                        _logger2.default.v(this.TAG, '_checkAndApplyUnbufferedSeekpoint  msestreamseek ' + target);
                        if (this._mediaType != "flv") {
                            this._transmuxer.sendcmd({ type: 'command', name: 'Seek', param: { 'value': parseInt((target + this._playbackStreamOffset) * 1000) } }); // in milliseconds
                        } else {
                            // 放到seek的回调中，防止出现设置失败情况
                            this._msectl.seek(target);
                            this._transmuxer.seek(Math.floor(target * 1000));
                            // // set currentTime if accurateSeek, or wait for recommend_seekpoint callback
                            if (this._config.accurateSeek) {
                                this._requestSetTime = true;
                                this._mediaElement.currentTime = target;
                            }
                        }
                    }
                } else {
                    window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);
                }
            }
        }
    }, {
        key: '_checkAndResumeStuckPlayback',
        value: function _checkAndResumeStuckPlayback(stalled) {
            if (this._loadingComplete) {
                return;
            }
            var media = this._mediaElement;
            if (stalled || !this._receivedCanPlay || media.readyState < 2) {
                // HAVE_CURRENT_DATA
                var buffered = media.buffered;
                if (buffered.length > 0 && media.currentTime < buffered.start(0)) {
                    _logger2.default.w(this.TAG, 'Playback seems stuck at ' + media.currentTime + ', seek to ' + buffered.start(0));
                    this._requestSetTime = true;
                    this._mediaElement.currentTime = buffered.start(0);
                    this._mediaElement.removeEventListener('progress', this.e.onvProgress);
                }
            } else {
                // Playback didn't stuck, remove progress event listener
                this._mediaElement.removeEventListener('progress', this.e.onvProgress);
            }
        }
    }, {
        key: '_onvLoadedMetadata',
        value: function _onvLoadedMetadata(e) {
            if (this._pendingSeekTime != null) {
                this._mediaElement.currentTime = this._pendingSeekTime;
                this._pendingSeekTime = null;
            }
            //if (this._loadedMetadata === false) {
            //   if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
            //        this._callbacks.onnotify(PlayerEvents.FIRST_CANPLAY); //对外
            //    }
            //    this._emitter.emit(PlayerEvents.LOADED_METADATA); //对内
            //    this._loadedMetadata = true;
            //}
            //this._emitter.emit(PlayerEvents.MEDIA_INFO, this.mediaInfo);
        }
    }, {
        key: '_onvSeeking',
        value: function _onvSeeking(e) {
            // handle seeking request from browser's progress bar
            var target = this._mediaElement.currentTime;
            var buffered = this._mediaElement.buffered;

            //if(this._edgeseeking) {
            //    console.log("addEventListener timeupdate");
            //    this._mediaElement.addEventListener('timeupdate', this.e.onvTimeUpdate);
            //}
            if (this._requestSetTime) {
                this._requestSetTime = false;
                return;
            }

            if (target < 1.0 && buffered.length > 0) {
                // seek to video begin, set currentTime directly if beginPTS buffered
                var videoBeginTime = buffered.start(0);
                if (videoBeginTime < 1.0 && target < videoBeginTime || _browser2.default.safari) {
                    this._requestSetTime = true;
                    // also workaround for Safari: Seek to 0 may cause video stuck, use 0.1 to avoid
                    this._mediaElement.currentTime = _browser2.default.safari ? 0.1 : videoBeginTime;
                    return;
                }
            }

            if (this._isTimepointBuffered(target)) {
                if (this._alwaysSeekKeyframe) {
                    var idr = this._msectl.getNearestKeyframe(Math.floor(target * 1000));
                    if (idr != null) {
                        this._requestSetTime = true;
                        this._mediaElement.currentTime = idr.dts / 1000;
                    }
                }
                if (this._progressChecker != null) {
                    this._checkProgressAndResume();
                }
                return;
            }
            if (this._mediaDataSource.isLive) {
                return;
            }
            this._seekpointRecord = {
                seekPoint: target,
                recordTime: this._now()
            };
            window.setTimeout(this._checkAndApplyUnbufferedSeekpoint.bind(this), 50);
        }
    }, {
        key: '_onvTimeUpdate',
        value: function _onvTimeUpdate(e) {
            //if(this._edgeseeking) {
            //    this._edgeseeking = false;
            //    Log.v(this.TAG, `_onvTimeUpdate _edgeseeking`);
            //    this._mediaElement.removeEventListener('timeupdate', this.e.onvTimeUpdate);
            //}
            this._emitter.emit(_playerEvents2.default.PLAYTIME, this._mediaElement.currentTime);
            if (this._callbacks && typeof this._callbacks.onplaytime === 'function' && this._mediaElement) {
                this._callbacks.onplaytime(this._mediaElement.currentTime);
            }
        }
    }, {
        key: '_onvCanPlay',
        value: function _onvCanPlay(e) {
            if (this._receivedCanPlay === false) {
                this._emitter.emit(_playerEvents2.default.FIRST_CANPLAY); //解码第一帧
                if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                    this._callbacks.onnotify(_playerEvents2.default.FIRST_CANPLAY);
                }
            }
            this._receivedCanPlay = true;
            this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);
        }
    }, {
        key: '_onvStalled',
        value: function _onvStalled(e) {
            this._checkAndResumeStuckPlayback(true);
        }
    }, {
        key: '_onvProgress',
        value: function _onvProgress(e) {
            this._checkAndResumeStuckPlayback();
        }
    }, {
        key: '_onvSeeked',
        value: function _onvSeeked(e) {
            if (this._mediaDataSource.isLive) {
                return;
            }
            if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                this._callbacks.onnotify(_playerEvents2.default.VIDEOSEEK, { error: 0, currentTime: this._mediaElement.currentTime });
            }
            this._emitter.emit(_playerEvents2.default.VIDEOSEEK, { error: 0, currentTime: this._mediaElement.currentTime });
        }
    }, {
        key: '_onvError',
        value: function _onvError(e) {
            var errorcode = this._mediaElement.error.code ? this._mediaElement.error.code : e.code;
            this._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.MEDIA_ERROR, _playerErrors.ErrorDetails.MEDIA_VIDEO_ERROR, { code: errorcode });
            if (this._callbacks && typeof this._callbacks.onerror === 'function') {
                this._callbacks.onerror(_playerErrors.ErrorTypes.MEDIA_ERROR, _playerErrors.ErrorDetails.MEDIA_VIDEO_ERROR, { code: errorcode });
            }
        }
    }, {
        key: '_onvRateChange',
        value: function _onvRateChange(e) {}
    }, {
        key: '_setStreamRate',
        value: function _setStreamRate(speed) {
            if (this._mediaDataSource.isLive) {
                return;
            }
            var nspeed = 0;
            if (speed <= 0.25) {
                nspeed = -1;
            } else if (speed <= 0.5) {
                nspeed = 0;
            } else if (speed <= 1) {
                nspeed = 1;
            } else if (speed <= 2) {
                nspeed = 2;
            } else if (speed <= 4) {
                nspeed = 3;
            } else {
                nspeed = 4;
            }
            if (this._transmuxer) {
                this._transmuxer.sendcmd({ type: 'command', name: 'SetSpeed', param: { 'value': nspeed } });
            }
        }
    }, {
        key: 'type',
        get: function get() {
            return this._type;
        }
    }, {
        key: 'buffered',
        get: function get() {
            return this._mediaElement.buffered;
        }
    }, {
        key: 'duration',
        get: function get() {
            this._duration = this._mediaElement.duration;
            return this._mediaElement.duration;
        }
    }, {
        key: 'volume',
        get: function get() {
            return this._mediaElement.volume;
        },
        set: function set(value) {
            this._mediaElement.volume = value;
        }
    }, {
        key: 'muted',
        get: function get() {
            return this._mediaElement.muted;
        },
        set: function set(muted) {
            this._mediaElement.muted = muted;
        }
    }, {
        key: 'currentTime',
        get: function get() {
            if (this._mediaElement) {
                //当前播放时间小于总时长
                if (isFinite(this._duration)) {
                    if (this._mediaElement.currentTime > this._duration) {
                        return this._duration;
                    }
                    //当前播放时间微调，3秒内同步为总时长
                    if (this._mediaElement.readyState == 2 && this._duration - this._mediaElement.currentTime < 3 && !this._mediaElement.paused) {
                        return this._duration;
                    }
                    if (this._edgeseeking) {
                        return this._seektime;
                    }
                    return this._mediaElement.currentTime;
                } else {
                    return this._mediaElement.currentTime;
                }
            }
            return 0;
        },
        set: function set(seconds) {
            if (!this._mediaDataSource.isLive) {
                if (this._mediaElement && this._receivedCanPlay) {
                    this._beforSeekTime = this._mediaElement.currentTime;
                    this._internalSeek(seconds);
                } else {
                    this._pendingSeekTime = seconds;
                }

                if (this._mediaElement.paused) {
                    this._emitter.emit(_playerEvents2.default.VIDEOPAUSE);
                } else {
                    this._emitter.emit(_playerEvents2.default.VIDEOPLAY);
                }
            }
        }
    }, {
        key: 'playbackRate',
        get: function get() {
            if (this._mediaElement) {
                if (this._mediaDataSource.isLive) {
                    return 1;
                } else {
                    return this._mediaElement.playbackRate;
                }
            }
            return 0;
        },
        set: function set(speed) {
            if (this._mediaElement) {
                if (this._mediaDataSource.isLive) {
                    return;
                } else {
                    this._setStreamRate(speed);
                    return this._mediaElement.playbackRate = speed > 16 ? 16 : speed;
                }
            }
        }
    }, {
        key: 'mediaInfo',
        get: function get() {
            if (this._mediaElement) {
                if (this._mediaInfo == null) {
                    this._mediaInfo = {};
                }
                this._mediaInfo.duration = this._mediaElement.duration;
                this._mediaInfo.videoWidth = this._mediaElement.videoWidth;
                this._mediaInfo.videoHeight = this._mediaElement.videoHeight;
            }
            return Object.assign({}, this._mediaInfo);
        }
    }, {
        key: 'frameDuration',
        get: function get() {
            return this._frameDuration;
        }
    }, {
        key: 'statisticsInfo',
        get: function get() {
            if (this._statisticsInfo == null) {
                this._statisticsInfo = {};
            }
            this._statisticsInfo = this._fillStatisticsInfo(this._statisticsInfo);
            return Object.assign({}, this._statisticsInfo);
        }
    }]);

    return FlvPlayer;
}();

exports.default = FlvPlayer;

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var Browser = {};

function detect() {
    // modified from jquery-browser-plugin

    var ua = window.navigator.userAgent.toLowerCase();

    var match = /(edge)\/([\w.]+)/.exec(ua) || /(opr)[\/]([\w.]+)/.exec(ua) || /(chrome)[ \/]([\w.]+)/.exec(ua) || /(iemobile)[\/]([\w.]+)/.exec(ua) || /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) || /(webkit)[ \/]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf('trident') >= 0 && /(rv)(?::| )([\w.]+)/.exec(ua) || ua.indexOf('compatible') < 0 && /(firefox)[ \/]([\w.]+)/.exec(ua) || [];

    var platform_match = /(ipad)/.exec(ua) || /(ipod)/.exec(ua) || /(windows phone)/.exec(ua) || /(iphone)/.exec(ua) || /(kindle)/.exec(ua) || /(android)/.exec(ua) || /(windows)/.exec(ua) || /(mac)/.exec(ua) || /(linux)/.exec(ua) || /(cros)/.exec(ua) || [];

    var matched = {
        browser: match[5] || match[3] || match[1] || '',
        version: match[2] || match[4] || '0',
        majorVersion: match[4] || match[2] || '0',
        platform: platform_match[0] || ''
    };

    var browser = {};
    if (matched.browser) {
        browser[matched.browser] = true;

        var versionArray = matched.majorVersion.split('.');
        browser.version = {
            major: parseInt(matched.majorVersion, 10),
            string: matched.version
        };
        if (versionArray.length > 1) {
            browser.version.minor = parseInt(versionArray[1], 10);
        }
        if (versionArray.length > 2) {
            browser.version.build = parseInt(versionArray[2], 10);
        }
    }

    if (matched.platform) {
        browser[matched.platform] = true;
    }

    if (browser.chrome || browser.opr || browser.safari) {
        browser.webkit = true;
    }

    // MSIE. IE11 has 'rv' identifer
    if (browser.rv || browser.iemobile) {
        if (browser.rv) {
            delete browser.rv;
        }
        var msie = 'msie';
        matched.browser = msie;
        browser[msie] = true;
    }

    // Microsoft Edge
    if (browser.edge) {
        delete browser.edge;
        var msedge = 'msedge';
        matched.browser = msedge;
        browser[msedge] = true;
    }

    // Opera 15+
    if (browser.opr) {
        var opera = 'opera';
        matched.browser = opera;
        browser[opera] = true;
    }

    // Stock android browsers are marked as Safari
    if (browser.safari && browser.android) {
        var android = 'android';
        matched.browser = android;
        browser[android] = true;
    }

    browser.name = matched.browser;
    browser.platform = matched.platform;

    for (var key in Browser) {
        if (Browser.hasOwnProperty(key)) {
            delete Browser[key];
        }
    }
    Object.assign(Browser, browser);
}

detect();

exports.default = Browser;

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = __webpack_require__(343);

var _events2 = _interopRequireDefault(_events);

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _loggingControl = __webpack_require__(353);

var _loggingControl2 = _interopRequireDefault(_loggingControl);

var _transmuxingController = __webpack_require__(354);

var _transmuxingController2 = _interopRequireDefault(_transmuxingController);

var _transmuxingEvents = __webpack_require__(374);

var _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);

var _transmuxingWorker = __webpack_require__(375);

var _transmuxingWorker2 = _interopRequireDefault(_transmuxingWorker);

var _mediaInfo = __webpack_require__(355);

var _mediaInfo2 = _interopRequireDefault(_mediaInfo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Transmuxer = function () {
    function Transmuxer(mediaDataSource, config) {
        _classCallCheck(this, Transmuxer);

        this.TAG = 'Transmuxer';
        this._emitter = new _events2.default();
        this._mediaType = mediaDataSource.mediaType ? mediaDataSource.mediaType.toLowerCase() : '';
        if (config.enableWorker && typeof Worker !== 'undefined' && this._mediaType === 'flv') {
            try {
                var work = __webpack_require__(379);
                this._worker = work(_transmuxingWorker2.default);
                this._workerDestroying = false;
                this._worker.addEventListener('message', this._onWorkerMessage.bind(this));
                this._worker.postMessage({ cmd: 'init', param: [mediaDataSource, config] });
                this.e = {
                    onLoggingConfigChanged: this._onLoggingConfigChanged.bind(this)
                };
                _loggingControl2.default.registerListener(this.e.onLoggingConfigChanged);
                this._worker.postMessage({ cmd: 'logging_config', param: _loggingControl2.default.getConfig() });
            } catch (error) {
                _logger2.default.e(this.TAG, 'Error while initialize transmuxing worker, fallback to inline transmuxing');
                this._worker = null;
                this._controller = new _transmuxingController2.default(mediaDataSource, config);
            }
        } else {
            this._controller = new _transmuxingController2.default(mediaDataSource, config);
        }

        if (this._controller) {
            var ctl = this._controller;
            ctl.on(_transmuxingEvents2.default.IO_ERROR, this._onIOError.bind(this));
            ctl.on(_transmuxingEvents2.default.DEMUX_ERROR, this._onDemuxError.bind(this));
            ctl.on(_transmuxingEvents2.default.INIT_SEGMENT, this._onInitSegment.bind(this));
            ctl.on(_transmuxingEvents2.default.MEDIA_SEGMENT, this._onMediaSegment.bind(this));
            ctl.on(_transmuxingEvents2.default.LOADING_COMPLETE, this._onLoadingComplete.bind(this));
            ctl.on(_transmuxingEvents2.default.RECOVERED_EARLY_EOF, this._onRecoveredEarlyEof.bind(this));
            ctl.on(_transmuxingEvents2.default.MEDIA_INFO, this._onMediaInfo.bind(this));
            ctl.on(_transmuxingEvents2.default.METADATA_ARRIVED, this._onMetaDataArrived.bind(this));
            ctl.on(_transmuxingEvents2.default.SCRIPTDATA_ARRIVED, this._onScriptDataArrived.bind(this));
            ctl.on(_transmuxingEvents2.default.STATISTICS_INFO, this._onStatisticsInfo.bind(this));
            ctl.on(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, this._onRecommendSeekpoint.bind(this));
            ctl.on(_transmuxingEvents2.default.COMMAND_RESPONSE, this._onCommandResponse.bind(this));
        }
    }

    _createClass(Transmuxer, [{
        key: 'destroy',
        value: function destroy() {
            if (this._worker) {
                if (!this._workerDestroying) {
                    this._workerDestroying = true;
                    this._worker.postMessage({ cmd: 'destroy' });
                    _loggingControl2.default.removeListener(this.e.onLoggingConfigChanged);
                    this.e = null;
                }
            } else {
                this._controller.destroy();
                this._controller = null;
            }
            this._emitter.removeAllListeners();
            this._emitter = null;
        }
    }, {
        key: 'on',
        value: function on(event, listener) {
            this._emitter.addListener(event, listener);
        }
    }, {
        key: 'off',
        value: function off(event, listener) {
            this._emitter.removeListener(event, listener);
        }
    }, {
        key: 'hasWorker',
        value: function hasWorker() {
            return this._worker != null;
        }
    }, {
        key: 'open',
        value: function open() {
            if (this._worker) {
                this._worker.postMessage({ cmd: 'start' });
            } else {
                this._controller.start();
            }
        }
    }, {
        key: 'close',
        value: function close() {
            if (this._worker) {
                this._worker.postMessage({ cmd: 'stop' });
            } else {
                this._controller.stop();
            }
        }
    }, {
        key: 'sendcmd',
        value: function sendcmd(obj) {
            if (this._worker) {
                this._worker.postMessage({ cmd: 'sendcmd', param: obj });
            } else {
                this._controller.sendcmd(obj);
            }
        }
    }, {
        key: 'seek',
        value: function seek(milliseconds) {
            if (this._worker) {
                this._worker.postMessage({ cmd: 'seek', param: milliseconds });
            } else {
                this._controller.seek(milliseconds);
            }
        }
    }, {
        key: 'pause',
        value: function pause() {
            if (this._worker) {
                this._worker.postMessage({ cmd: 'pause' });
            } else {
                this._controller.pause();
            }
        }
    }, {
        key: 'resume',
        value: function resume() {
            if (this._worker) {
                this._worker.postMessage({ cmd: 'resume' });
            } else {
                this._controller.resume();
            }
        }
    }, {
        key: '_onCommandResponse',
        value: function _onCommandResponse(response) {
            var _this = this;

            if (!this._emitter) return;
            Promise.resolve().then(function () {
                _this._emitter.emit(_transmuxingEvents2.default.COMMAND_RESPONSE, response);
            });
        }
    }, {
        key: '_onInitSegment',
        value: function _onInitSegment(type, initSegment) {
            var _this2 = this;

            // do async invoke
            if (!this._emitter) return;
            Promise.resolve().then(function () {
                _this2._emitter.emit(_transmuxingEvents2.default.INIT_SEGMENT, type, initSegment);
            });
        }
    }, {
        key: '_onMediaSegment',
        value: function _onMediaSegment(type, mediaSegment) {
            var _this3 = this;

            if (!this._emitter) return;
            Promise.resolve().then(function () {
                _this3._emitter.emit(_transmuxingEvents2.default.MEDIA_SEGMENT, type, mediaSegment);
            });
        }
    }, {
        key: '_onLoadingComplete',
        value: function _onLoadingComplete() {
            var _this4 = this;

            if (!this._emitter) return;
            Promise.resolve().then(function () {
                _this4._emitter.emit(_transmuxingEvents2.default.LOADING_COMPLETE);
            });
        }
    }, {
        key: '_onRecoveredEarlyEof',
        value: function _onRecoveredEarlyEof() {
            var _this5 = this;

            if (!this._emitter) return;
            Promise.resolve().then(function () {
                _this5._emitter.emit(_transmuxingEvents2.default.RECOVERED_EARLY_EOF);
            });
        }
    }, {
        key: '_onMediaInfo',
        value: function _onMediaInfo(mediaInfo) {
            var _this6 = this;

            if (!this._emitter) return;
            Promise.resolve().then(function () {
                _this6._emitter.emit(_transmuxingEvents2.default.MEDIA_INFO, mediaInfo);
            });
        }
    }, {
        key: '_onMetaDataArrived',
        value: function _onMetaDataArrived(metadata) {
            var _this7 = this;

            if (!this._emitter) return;
            Promise.resolve().then(function () {
                _this7._emitter.emit(_transmuxingEvents2.default.METADATA_ARRIVED, metadata);
            });
        }
    }, {
        key: '_onScriptDataArrived',
        value: function _onScriptDataArrived(data) {
            var _this8 = this;

            if (!this._emitter) return;
            Promise.resolve().then(function () {
                _this8._emitter.emit(_transmuxingEvents2.default.SCRIPTDATA_ARRIVED, data);
            });
        }
    }, {
        key: '_onStatisticsInfo',
        value: function _onStatisticsInfo(statisticsInfo) {
            var _this9 = this;

            if (!this._emitter) return;
            Promise.resolve().then(function () {
                _this9._emitter.emit(_transmuxingEvents2.default.STATISTICS_INFO, statisticsInfo);
            });
        }
    }, {
        key: '_onIOError',
        value: function _onIOError(type, info) {
            var _this10 = this;

            if (!this._emitter) return;
            Promise.resolve().then(function () {
                _this10._emitter.emit(_transmuxingEvents2.default.IO_ERROR, type, info);
            });
        }
    }, {
        key: '_onDemuxError',
        value: function _onDemuxError(type, info) {
            var _this11 = this;

            if (!this._emitter) return;
            Promise.resolve().then(function () {
                _this11._emitter.emit(_transmuxingEvents2.default.DEMUX_ERROR, type, info);
            });
        }
    }, {
        key: '_onRecommendSeekpoint',
        value: function _onRecommendSeekpoint(milliseconds) {
            var _this12 = this;

            if (!this._emitter) return;
            Promise.resolve().then(function () {
                _this12._emitter.emit(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, milliseconds);
            });
        }
    }, {
        key: '_onLoggingConfigChanged',
        value: function _onLoggingConfigChanged(config) {
            if (this._worker) {
                this._worker.postMessage({ cmd: 'logging_config', param: config });
            }
        }
    }, {
        key: '_onWorkerMessage',
        value: function _onWorkerMessage(e) {
            var message = e.data;
            var data = message.data;

            if (message.msg === 'destroyed' || this._workerDestroying) {
                this._workerDestroying = false;
                this._worker.terminate();
                this._worker = null;
                return;
            }
            if (!this._emitter) return;

            switch (message.msg) {
                case _transmuxingEvents2.default.INIT_SEGMENT:
                case _transmuxingEvents2.default.MEDIA_SEGMENT:
                    this._emitter.emit(message.msg, data.type, data.data);
                    break;
                case _transmuxingEvents2.default.LOADING_COMPLETE:
                case _transmuxingEvents2.default.RECOVERED_EARLY_EOF:
                    this._emitter.emit(message.msg);
                    break;
                case _transmuxingEvents2.default.MEDIA_INFO:
                    Object.setPrototypeOf(data, _mediaInfo2.default.prototype);
                    this._emitter.emit(message.msg, data);
                    break;
                case _transmuxingEvents2.default.METADATA_ARRIVED:
                case _transmuxingEvents2.default.SCRIPTDATA_ARRIVED:
                case _transmuxingEvents2.default.STATISTICS_INFO:
                    this._emitter.emit(message.msg, data);
                    break;
                case _transmuxingEvents2.default.IO_ERROR:
                case _transmuxingEvents2.default.DEMUX_ERROR:
                    this._emitter.emit(message.msg, data.type, data.info);
                    break;
                case _transmuxingEvents2.default.RECOMMEND_SEEKPOINT:
                    this._emitter.emit(message.msg, data);
                    break;
                case 'logcat_callback':
                    _logger2.default.emitter.emit('log', data.type, data.logcat);
                    break;
                default:
                    break;
            }
        }
    }]);

    return Transmuxer;
}();

exports.default = Transmuxer;

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = __webpack_require__(343);

var _events2 = _interopRequireDefault(_events);

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoggingControl = function () {
    function LoggingControl() {
        _classCallCheck(this, LoggingControl);
    }

    _createClass(LoggingControl, null, [{
        key: 'getConfig',
        value: function getConfig() {
            return {
                globalTag: _logger2.default.GLOBAL_TAG,
                forceGlobalTag: _logger2.default.FORCE_GLOBAL_TAG,
                enableVerbose: _logger2.default.ENABLE_VERBOSE,
                enableDebug: _logger2.default.ENABLE_DEBUG,
                enableInfo: _logger2.default.ENABLE_INFO,
                enableWarn: _logger2.default.ENABLE_WARN,
                enableError: _logger2.default.ENABLE_ERROR,
                enableCallback: _logger2.default.ENABLE_CALLBACK
            };
        }
    }, {
        key: 'applyConfig',
        value: function applyConfig(config) {
            _logger2.default.GLOBAL_TAG = config.globalTag;
            _logger2.default.FORCE_GLOBAL_TAG = config.forceGlobalTag;
            _logger2.default.ENABLE_VERBOSE = config.enableVerbose;
            _logger2.default.ENABLE_DEBUG = config.enableDebug;
            _logger2.default.ENABLE_INFO = config.enableInfo;
            _logger2.default.ENABLE_WARN = config.enableWarn;
            _logger2.default.ENABLE_ERROR = config.enableError;
            _logger2.default.ENABLE_CALLBACK = config.enableCallback;
        }
    }, {
        key: '_notifyChange',
        value: function _notifyChange() {
            var emitter = LoggingControl.emitter;

            if (emitter.listenerCount('change') > 0) {
                var config = LoggingControl.getConfig();
                emitter.emit('change', config);
            }
        }
    }, {
        key: 'registerListener',
        value: function registerListener(listener) {
            LoggingControl.emitter.addListener('change', listener);
        }
    }, {
        key: 'removeListener',
        value: function removeListener(listener) {
            LoggingControl.emitter.removeListener('change', listener);
        }
    }, {
        key: 'addLogListener',
        value: function addLogListener(listener) {
            _logger2.default.emitter.addListener('log', listener);
            if (_logger2.default.emitter.listenerCount('log') > 0) {
                _logger2.default.ENABLE_CALLBACK = true;
                LoggingControl._notifyChange();
            }
        }
    }, {
        key: 'removeLogListener',
        value: function removeLogListener(listener) {
            _logger2.default.emitter.removeListener('log', listener);
            if (_logger2.default.emitter.listenerCount('log') === 0) {
                _logger2.default.ENABLE_CALLBACK = false;
                LoggingControl._notifyChange();
            }
        }
    }, {
        key: 'forceGlobalTag',
        get: function get() {
            return _logger2.default.FORCE_GLOBAL_TAG;
        },
        set: function set(enable) {
            _logger2.default.FORCE_GLOBAL_TAG = enable;
            LoggingControl._notifyChange();
        }
    }, {
        key: 'globalTag',
        get: function get() {
            return _logger2.default.GLOBAL_TAG;
        },
        set: function set(tag) {
            _logger2.default.GLOBAL_TAG = tag;
            LoggingControl._notifyChange();
        }
    }, {
        key: 'enableAll',
        get: function get() {
            return _logger2.default.ENABLE_VERBOSE && _logger2.default.ENABLE_DEBUG && _logger2.default.ENABLE_INFO && _logger2.default.ENABLE_WARN && _logger2.default.ENABLE_ERROR;
        },
        set: function set(enable) {
            _logger2.default.ENABLE_VERBOSE = enable;
            _logger2.default.ENABLE_DEBUG = enable;
            _logger2.default.ENABLE_INFO = enable;
            _logger2.default.ENABLE_WARN = enable;
            _logger2.default.ENABLE_ERROR = enable;
            LoggingControl._notifyChange();
        }
    }, {
        key: 'enableDebug',
        get: function get() {
            return _logger2.default.ENABLE_DEBUG;
        },
        set: function set(enable) {
            _logger2.default.ENABLE_DEBUG = enable;
            LoggingControl._notifyChange();
        }
    }, {
        key: 'enableVerbose',
        get: function get() {
            return _logger2.default.ENABLE_VERBOSE;
        },
        set: function set(enable) {
            _logger2.default.ENABLE_VERBOSE = enable;
            LoggingControl._notifyChange();
        }
    }, {
        key: 'enableInfo',
        get: function get() {
            return _logger2.default.ENABLE_INFO;
        },
        set: function set(enable) {
            _logger2.default.ENABLE_INFO = enable;
            LoggingControl._notifyChange();
        }
    }, {
        key: 'enableWarn',
        get: function get() {
            return _logger2.default.ENABLE_WARN;
        },
        set: function set(enable) {
            _logger2.default.ENABLE_WARN = enable;
            LoggingControl._notifyChange();
        }
    }, {
        key: 'enableError',
        get: function get() {
            return _logger2.default.ENABLE_ERROR;
        },
        set: function set(enable) {
            _logger2.default.ENABLE_ERROR = enable;
            LoggingControl._notifyChange();
        }
    }]);

    return LoggingControl;
}();

LoggingControl.emitter = new _events2.default();

exports.default = LoggingControl;

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = __webpack_require__(343);

var _events2 = _interopRequireDefault(_events);

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _browser = __webpack_require__(351);

var _browser2 = _interopRequireDefault(_browser);

var _mediaInfo = __webpack_require__(355);

var _mediaInfo2 = _interopRequireDefault(_mediaInfo);

var _flvDemuxer = __webpack_require__(356);

var _flvDemuxer2 = _interopRequireDefault(_flvDemuxer);

var _mp4Remuxer = __webpack_require__(361);

var _mp4Remuxer2 = _interopRequireDefault(_mp4Remuxer);

var _demuxErrors = __webpack_require__(349);

var _demuxErrors2 = _interopRequireDefault(_demuxErrors);

var _ioController = __webpack_require__(365);

var _ioController2 = _interopRequireDefault(_ioController);

var _transmuxingEvents = __webpack_require__(374);

var _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);

var _loader = __webpack_require__(347);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Transmuxing (IO, Demuxing, Remuxing) controller, with multipart support
var TransmuxingController = function () {
    function TransmuxingController(mediaDataSource, config) {
        _classCallCheck(this, TransmuxingController);

        this.TAG = 'TransmuxingController';
        this._emitter = new _events2.default();

        this._config = config;

        // treat single part media as multipart media, which has only one segment
        if (!mediaDataSource.segments) {
            mediaDataSource.segments = [{
                url: mediaDataSource.url,
                channelInfo: mediaDataSource.channelInfo,
                mediaType: mediaDataSource.mediaType,
                duration: mediaDataSource.duration,
                filesize: mediaDataSource.filesize
            }];
        }

        // fill in default IO params if not exists
        if (typeof mediaDataSource.cors !== 'boolean') {
            mediaDataSource.cors = true;
        }
        if (typeof mediaDataSource.withCredentials !== 'boolean') {
            mediaDataSource.withCredentials = false;
        }
        this._mediaType = mediaDataSource.mediaType.toLowerCase();
        this._mediaDataSource = mediaDataSource;
        this._currentSegmentIndex = 0;
        var totalDuration = 0;

        this._mediaDataSource.segments.forEach(function (segment) {
            // timestampBase for each segment, and calculate total duration
            segment.timestampBase = totalDuration;
            totalDuration += segment.duration;
            // params needed by IOController
            segment.cors = mediaDataSource.cors;
            segment.withCredentials = mediaDataSource.withCredentials;
            // referrer policy control, if exist
            if (config.referrerPolicy) {
                segment.referrerPolicy = config.referrerPolicy;
            }
        });

        if (!isNaN(totalDuration) && this._mediaDataSource.duration !== totalDuration) {
            this._mediaDataSource.duration = totalDuration;
        }

        this._mediaInfo = null;
        this._demuxer = null;
        this._remuxer = null;
        this._ioctl = null;

        this._pendingSeekTime = null;
        this._pendingResolveSeekPoint = null;
        this._statisticsReporter = null;
    }

    _createClass(TransmuxingController, [{
        key: 'destroy',
        value: function destroy() {
            this._mediaInfo = null;
            this._mediaDataSource = null;

            if (this._statisticsReporter) {
                this._disableStatisticsReporter();
            }
            if (this._ioctl) {
                this._ioctl.destroy();
                this._ioctl = null;
            }
            if (this._demuxer) {
                this._demuxer.destroy();
                this._demuxer = null;
            }
            if (this._remuxer) {
                this._remuxer.destroy();
                this._remuxer = null;
            }

            this._emitter.removeAllListeners();
            this._emitter = null;
        }
    }, {
        key: 'on',
        value: function on(event, listener) {
            this._emitter.addListener(event, listener);
        }
    }, {
        key: 'off',
        value: function off(event, listener) {
            this._emitter.removeListener(event, listener);
        }
    }, {
        key: 'start',
        value: function start() {
            this._loadSegment(0);
            this._enableStatisticsReporter();
        }
    }, {
        key: '_loadSegment',
        value: function _loadSegment(segmentIndex, optionalFrom) {
            this._currentSegmentIndex = segmentIndex;
            var dataSource = this._mediaDataSource.segments[segmentIndex];
            //创建IO即websocket
            var ioctl = this._ioctl = new _ioController2.default(dataSource, this._config, segmentIndex);
            ioctl.onError = this._onIOException.bind(this);
            ioctl.onSeeked = this._onIOSeeked.bind(this);
            ioctl.onComplete = this._onIOComplete.bind(this);
            ioctl.onRedirect = this._onIORedirect.bind(this);
            ioctl.onRecoveredEarlyEof = this._onIORecoveredEarlyEof.bind(this);
            if (this._mediaType != 'flv') {
                ioctl.onDataArrival = this._onInitDataFmp4Arrival.bind(this); //fmp4直接走这里，送数据给MSE
            } else {
                //flv 分析并组装成fmp4
                if (optionalFrom != undefined) {
                    //seek时使用，_demuxer已经存在了
                    this._demuxer.bindDataSource(this._ioctl);
                } else {
                    ioctl.onDataArrival = this._onInitChunkArrival.bind(this); //flv走这里
                }
            }
            ioctl.onCommand = this._onCmdResponse.bind(this);
            ioctl.open(optionalFrom);
        }
    }, {
        key: 'stop',
        value: function stop() {
            this._internalAbort();
            this._disableStatisticsReporter();
        }
    }, {
        key: '_internalAbort',
        value: function _internalAbort() {
            if (this._ioctl) {
                this._ioctl.destroy();
                this._ioctl = null;
            }
        }
    }, {
        key: 'pause',
        value: function pause() {
            // take a rest
            if (this._ioctl && this._ioctl.isWorking()) {
                this._ioctl.pause();
                this._disableStatisticsReporter();
            }
        }
    }, {
        key: 'resume',
        value: function resume() {
            if (this._ioctl && this._ioctl.isPaused()) {
                this._ioctl.resume();
                this._enableStatisticsReporter();
            }
        }
    }, {
        key: 'seek',
        value: function seek(milliseconds) {
            if (this._mediaInfo == null || !this._mediaInfo.isSeekable()) {
                return;
            }

            var targetSegmentIndex = this._searchSegmentIndexContains(milliseconds);

            if (targetSegmentIndex === this._currentSegmentIndex) {
                // intra-segment seeking
                var segmentInfo = this._mediaInfo.segments[targetSegmentIndex];

                if (segmentInfo == undefined) {
                    // current segment loading started, but mediainfo hasn't received yet
                    // wait for the metadata loaded, then seek to expected position
                    this._pendingSeekTime = milliseconds;
                } else {
                    var keyframe = segmentInfo.getNearestKeyframe(milliseconds);
                    this._remuxer.seek(keyframe.milliseconds);
                    this._ioctl.seek(keyframe.fileposition);
                    // Will be resolved in _onRemuxerMediaSegmentArrival()
                    this._pendingResolveSeekPoint = keyframe.milliseconds;
                }
            } else {
                // cross-segment seeking
                var targetSegmentInfo = this._mediaInfo.segments[targetSegmentIndex];

                if (targetSegmentInfo == undefined) {
                    // target segment hasn't been loaded. We need metadata then seek to expected time
                    this._pendingSeekTime = milliseconds;
                    this._internalAbort();
                    this._remuxer.seek();
                    this._remuxer.insertDiscontinuity();
                    this._loadSegment(targetSegmentIndex);
                    // Here we wait for the metadata loaded, then seek to expected position
                } else {
                    // We have target segment's metadata, direct seek to target position
                    var _keyframe = targetSegmentInfo.getNearestKeyframe(milliseconds);
                    this._internalAbort();
                    this._remuxer.seek(milliseconds);
                    this._remuxer.insertDiscontinuity();
                    this._demuxer.resetMediaInfo();
                    this._demuxer.timestampBase = this._mediaDataSource.segments[targetSegmentIndex].timestampBase;
                    this._loadSegment(targetSegmentIndex, _keyframe.fileposition);
                    this._pendingResolveSeekPoint = _keyframe.milliseconds;
                    this._reportSegmentMediaInfo(targetSegmentIndex);
                }
            }

            this._enableStatisticsReporter();
        }
    }, {
        key: '_searchSegmentIndexContains',
        value: function _searchSegmentIndexContains(milliseconds) {
            var segments = this._mediaDataSource.segments;
            var idx = segments.length - 1;

            for (var i = 0; i < segments.length; i++) {
                if (milliseconds < segments[i].timestampBase) {
                    idx = i - 1;
                    break;
                }
            }
            return idx;
        }
    }, {
        key: 'sendcmd',
        value: function sendcmd(obj) {
            if (this._ioctl && this._ioctl.isWorking()) {
                this._ioctl.sendcmd(obj);
                //this._disableStatisticsReporter();
            }
        }

        //收到非fmp4数据

    }, {
        key: '_onInitChunkArrival',
        value: function _onInitChunkArrival(data, byteStart) {
            var _this = this;

            //loader的数据
            console.log(new Date().format("hh:mm:ss.S"), "TransmuxingController::_onInitChunkArrival");
            var probeData = null;
            var consumed = 0;
            if (byteStart > 0 && this._demuxer) {
                // IOController seeked immediately after opened, byteStart > 0 callback may received
                this._demuxer.bindDataSource(this._ioctl); ////对loader的FLV数据进行解析 防止定位后IO重连导致没有绑定
                this._demuxer.timestampBase = this._mediaDataSource.segments[this._currentSegmentIndex].timestampBase;

                consumed = this._demuxer.parseChunks(data, byteStart);
            } else if ((probeData = _flvDemuxer2.default.probe(data)).match) {
                // Always create new FLVDemuxer
                this._demuxer = new _flvDemuxer2.default(probeData, this._config); //创建解封装

                if (!this._remuxer) {
                    this._remuxer = new _mp4Remuxer2.default(this._config); //封装
                }

                var mds = this._mediaDataSource;
                if (mds.duration != undefined && !isNaN(mds.duration)) {
                    this._demuxer.overridedDuration = mds.duration;
                }
                if (typeof mds.hasAudio === 'boolean') {
                    this._demuxer.overridedHasAudio = mds.hasAudio;
                }
                if (typeof mds.hasVideo === 'boolean') {
                    this._demuxer.overridedHasVideo = mds.hasVideo;
                }

                this._demuxer.timestampBase = mds.segments[this._currentSegmentIndex].timestampBase;

                this._demuxer.onError = this._onDemuxException.bind(this);
                this._demuxer.onMediaInfo = this._onMediaInfo.bind(this);
                this._demuxer.onMetaDataArrived = this._onMetaDataArrived.bind(this); //仅发送消息
                this._demuxer.onScriptDataArrived = this._onScriptDataArrived.bind(this); //仅发送消息

                this._remuxer.bindDataSource(this._demuxer //对demuxer的数据进行fmp4封装
                .bindDataSource(this._ioctl //对loader的FLV数据进行解析
                ));

                this._remuxer.onInitSegment = this._onRemuxerInitSegmentArrival.bind(this); //remuxer的后的initSegment直接给MSE
                this._remuxer.onMediaSegment = this._onRemuxerMediaSegmentArrival.bind(this); //remuxer的后的Segment直接给MSE

                consumed = this._demuxer.parseChunks(data, byteStart);
            } else {
                probeData = null;
                _logger2.default.e(this.TAG, 'Non-FLV, Unsupported media type!');
                Promise.resolve().then(function () {
                    _this._internalAbort();
                });
                this._emitter.emit(_transmuxingEvents2.default.DEMUX_ERROR, _demuxErrors2.default.FORMAT_UNSUPPORTED, 'Non-FLV, Unsupported media type');

                consumed = 0;
            }

            return consumed;
        }
    }, {
        key: '_onMediaInfo',
        value: function _onMediaInfo(mediaInfo) {
            var _this2 = this;

            if (this._mediaInfo == null) {
                // Store first segment's mediainfo as global mediaInfo
                this._mediaInfo = Object.assign({}, mediaInfo);
                this._mediaInfo.keyframesIndex = null;
                this._mediaInfo.segments = [];
                this._mediaInfo.segmentCount = this._mediaDataSource.segments.length;
                Object.setPrototypeOf(this._mediaInfo, _mediaInfo2.default.prototype);
            }

            var segmentInfo = Object.assign({}, mediaInfo);
            Object.setPrototypeOf(segmentInfo, _mediaInfo2.default.prototype);
            this._mediaInfo.segments[this._currentSegmentIndex] = segmentInfo;

            // notify mediaInfo update
            this._reportSegmentMediaInfo(this._currentSegmentIndex);

            if (this._pendingSeekTime != null) {
                Promise.resolve().then(function () {
                    var target = _this2._pendingSeekTime;
                    _this2._pendingSeekTime = null;
                    _this2.seek(target);
                });
            }
        }
    }, {
        key: '_onMetaDataArrived',
        value: function _onMetaDataArrived(metadata) {
            //仅通知
            console.log(new Date().format("hh:mm:ss.S"), "TransmuxingController::_onMetaDataArrived");
            this._emitter.emit(_transmuxingEvents2.default.METADATA_ARRIVED, metadata);
        }
    }, {
        key: '_onScriptDataArrived',
        value: function _onScriptDataArrived(data) {
            this._emitter.emit(_transmuxingEvents2.default.SCRIPTDATA_ARRIVED, data);
        }
    }, {
        key: '_onIOSeeked',
        value: function _onIOSeeked() {
            this._remuxer.insertDiscontinuity();
        }
    }, {
        key: '_onIOComplete',
        value: function _onIOComplete(extraData) {
            //flv
            if (this._mediaType === 'flv') {
                var segmentIndex = extraData;
                var nextSegmentIndex = segmentIndex + 1;

                if (nextSegmentIndex < this._mediaDataSource.segments.length) {
                    this._internalAbort();
                    this._remuxer.flushStashedSamples();
                    this._loadSegment(nextSegmentIndex);
                } else {
                    this._remuxer.flushStashedSamples();
                    this._emitter.emit(_transmuxingEvents2.default.LOADING_COMPLETE);
                    this._disableStatisticsReporter();
                }
            } else {
                //fmp4
                this._emitter.emit(_transmuxingEvents2.default.LOADING_COMPLETE);
                this._disableStatisticsReporter();
            }
        }
    }, {
        key: '_onIORedirect',
        value: function _onIORedirect(redirectedURL) {
            var segmentIndex = this._ioctl.extraData;
            this._mediaDataSource.segments[segmentIndex].redirectedURL = redirectedURL;
        }
    }, {
        key: '_onIORecoveredEarlyEof',
        value: function _onIORecoveredEarlyEof() {
            this._emitter.emit(_transmuxingEvents2.default.RECOVERED_EARLY_EOF);
        }
    }, {
        key: '_onCmdResponse',
        value: function _onCmdResponse(response) {
            this._emitter.emit(_transmuxingEvents2.default.COMMAND_RESPONSE, response);
        }
    }, {
        key: '_onIOException',
        value: function _onIOException(type, info) {
            _logger2.default.e(this.TAG, 'IOException: type = ' + type + ', code = ' + info.code + ', msg = ' + info.msg);
            if (this._emitter) {
                this._emitter.emit(_transmuxingEvents2.default.IO_ERROR, type, info);
            }
            this._disableStatisticsReporter();
        }

        ////收到fmp4数据

    }, {
        key: '_onInitDataFmp4Arrival',
        value: function _onInitDataFmp4Arrival(bufferdata) {
            //console.log(new Date().format("hh:mm:ss.S"), "TransmuxingController::_onInitDataFmp4Arrival");
            var type = 'video';
            var is = {
                type: 'video',
                data: bufferdata,
                container: 'video/mp4',
                codec: 'avc1.4D4028' //MAIN
            };
            this._emitter.emit(_transmuxingEvents2.default.INIT_SEGMENT, type, is);
            this._ioctl.onDataArrival = this._onDataFmp4Arrival.bind(this);
        }
    }, {
        key: '_onDataFmp4Arrival',
        value: function _onDataFmp4Arrival(bufferdata) {
            //console.log(new Date().format("hh:mm:ss.S"), "TransmuxingController::_onDataFmp4Arrival");
            var type = 'video';
            this._emitter.emit(_transmuxingEvents2.default.MEDIA_SEGMENT, type, { type: 'video', data: bufferdata });
        }
    }, {
        key: '_onDemuxException',
        value: function _onDemuxException(type, info) {
            _logger2.default.e(this.TAG, 'DemuxException: type = ' + type + ', info = ' + info);
            this._emitter.emit(_transmuxingEvents2.default.DEMUX_ERROR, type, info);
        }
    }, {
        key: '_onRemuxerInitSegmentArrival',
        value: function _onRemuxerInitSegmentArrival(type, initSegment) {
            this._emitter.emit(_transmuxingEvents2.default.INIT_SEGMENT, type, initSegment);
        }
    }, {
        key: '_onRemuxerMediaSegmentArrival',
        value: function _onRemuxerMediaSegmentArrival(type, mediaSegment) {
            if (this._pendingSeekTime != null) {
                // Media segments after new-segment cross-seeking should be dropped.
                return;
            }
            this._emitter.emit(_transmuxingEvents2.default.MEDIA_SEGMENT, type, mediaSegment);

            // Resolve pending seekPoint
            if (this._pendingResolveSeekPoint != null && type === 'video') {
                var syncPoints = mediaSegment.info.syncPoints;
                var seekpoint = this._pendingResolveSeekPoint;
                this._pendingResolveSeekPoint = null;

                // Safari: Pass PTS for recommend_seekpoint
                if (_browser2.default.safari && syncPoints.length > 0 && syncPoints[0].originalDts === seekpoint) {
                    seekpoint = syncPoints[0].pts;
                }
                // else: use original DTS (keyframe.milliseconds)

                this._emitter.emit(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, seekpoint);
            }
        }
    }, {
        key: '_enableStatisticsReporter',
        value: function _enableStatisticsReporter() {
            if (this._statisticsReporter == null) {
                this._statisticsReporter = window.setInterval(this._reportStatisticsInfo.bind(this), this._config.statisticsInfoReportInterval);
            }
        }
    }, {
        key: '_disableStatisticsReporter',
        value: function _disableStatisticsReporter() {
            if (this._statisticsReporter) {
                //this._emitter.emit(TransmuxingEvents.STATISTICS_INFO, {dataRate: 0, loaderType: ''});
                window.clearInterval(this._statisticsReporter);
                this._statisticsReporter = null;
            }
        }
    }, {
        key: '_reportSegmentMediaInfo',
        value: function _reportSegmentMediaInfo(segmentIndex) {
            var segmentInfo = this._mediaInfo.segments[segmentIndex];
            var exportInfo = Object.assign({}, segmentInfo);

            exportInfo.duration = this._mediaInfo.duration;
            exportInfo.segmentCount = this._mediaInfo.segmentCount;
            delete exportInfo.segments;
            delete exportInfo.keyframesIndex;

            this._emitter.emit(_transmuxingEvents2.default.MEDIA_INFO, exportInfo);
        }
    }, {
        key: '_reportStatisticsInfo',
        value: function _reportStatisticsInfo() {
            var info = {};

            info.url = this._ioctl.currentURL;
            info.hasRedirect = this._ioctl.hasRedirect;
            if (info.hasRedirect) {
                info.redirectedURL = this._ioctl.currentRedirectedURL;
            }
            info.dataRate = this._ioctl.currentSpeed;
            info.loaderType = this._ioctl.loaderType;
            info.currentSegmentIndex = this._currentSegmentIndex;
            info.totalSegmentCount = this._mediaDataSource.segments.length;

            this._emitter.emit(_transmuxingEvents2.default.STATISTICS_INFO, info);
        }
    }]);

    return TransmuxingController;
}();

exports.default = TransmuxingController;

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MediaInfo = function () {
    function MediaInfo() {
        _classCallCheck(this, MediaInfo);

        this.mimeType = null;
        this.duration = null;

        this.hasAudio = null;
        this.hasVideo = null;
        this.audioCodec = null;
        this.videoCodec = null;
        this.audioDataRate = null;
        this.videoDataRate = null;

        this.audioSampleRate = null;
        this.audioChannelCount = null;

        this.width = null;
        this.height = null;
        this.fps = null;
        this.profile = null;
        this.level = null;
        this.refFrames = null;
        this.chromaFormat = null;
        this.sarNum = null;
        this.sarDen = null;

        this.metadata = null;
        this.segments = null; // MediaInfo[]
        this.segmentCount = null;
        this.hasKeyframesIndex = null;
        this.keyframesIndex = null;
    }

    _createClass(MediaInfo, [{
        key: "isComplete",
        value: function isComplete() {
            var audioInfoComplete = this.hasAudio === false || this.hasAudio === true && this.audioCodec != null && this.audioSampleRate != null && this.audioChannelCount != null;

            var videoInfoComplete = this.hasVideo === false || this.hasVideo === true && this.videoCodec != null && this.width != null && this.height != null && this.fps != null && this.profile != null && this.level != null && this.refFrames != null && this.chromaFormat != null && this.sarNum != null && this.sarDen != null;

            // keyframesIndex may not be present
            return this.mimeType != null && this.duration != null && this.metadata != null && this.hasKeyframesIndex != null && audioInfoComplete && videoInfoComplete;
        }
    }, {
        key: "isSeekable",
        value: function isSeekable() {
            return this.hasKeyframesIndex === true;
        }
    }, {
        key: "getNearestKeyframe",
        value: function getNearestKeyframe(milliseconds) {
            if (this.keyframesIndex == null) {
                return null;
            }

            var table = this.keyframesIndex;
            var keyframeIdx = this._search(table.times, milliseconds);

            return {
                index: keyframeIdx,
                milliseconds: table.times[keyframeIdx],
                fileposition: table.filepositions[keyframeIdx]
            };
        }
    }, {
        key: "_search",
        value: function _search(list, value) {
            var idx = 0;

            var last = list.length - 1;
            var mid = 0;
            var lbound = 0;
            var ubound = last;

            if (value < list[0]) {
                idx = 0;
                lbound = ubound + 1; // skip search
            }

            while (lbound <= ubound) {
                mid = lbound + Math.floor((ubound - lbound) / 2);
                if (mid === last || value >= list[mid] && value < list[mid + 1]) {
                    idx = mid;
                    break;
                } else if (list[mid] < value) {
                    lbound = mid + 1;
                } else {
                    ubound = mid - 1;
                }
            }

            return idx;
        }
    }]);

    return MediaInfo;
}();

exports.default = MediaInfo;

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _amfParser = __webpack_require__(357);

var _amfParser2 = _interopRequireDefault(_amfParser);

var _spsParser = __webpack_require__(359);

var _spsParser2 = _interopRequireDefault(_spsParser);

var _demuxErrors = __webpack_require__(349);

var _demuxErrors2 = _interopRequireDefault(_demuxErrors);

var _mediaInfo = __webpack_require__(355);

var _mediaInfo2 = _interopRequireDefault(_mediaInfo);

var _exception = __webpack_require__(348);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function Swap16(src) {
    return src >>> 8 & 0xFF | (src & 0xFF) << 8;
}

function Swap32(src) {
    return (src & 0xFF000000) >>> 24 | (src & 0x00FF0000) >>> 8 | (src & 0x0000FF00) << 8 | (src & 0x000000FF) << 24;
}

function ReadBig32(array, index) {
    return array[index] << 24 | array[index + 1] << 16 | array[index + 2] << 8 | array[index + 3];
}

var FLVDemuxer = function () {
    function FLVDemuxer(probeData, config) {
        _classCallCheck(this, FLVDemuxer);

        this.TAG = 'FLVDemuxer';

        this._config = config;

        this._onError = null;
        this._onMediaInfo = null;
        this._onMetaDataArrived = null;
        this._onScriptDataArrived = null;
        this._onTrackMetadata = null;
        this._onDataAvailable = null;

        this._dataOffset = probeData.dataOffset;
        this._firstParse = true;
        this._dispatch = false;

        this._hasAudio = probeData.hasAudioTrack;
        this._hasVideo = probeData.hasVideoTrack;

        this._hasAudioFlagOverrided = false;
        this._hasVideoFlagOverrided = false;

        this._audioInitialMetadataDispatched = false;
        this._videoInitialMetadataDispatched = false;

        this._mediaInfo = new _mediaInfo2.default();
        this._mediaInfo.hasAudio = this._hasAudio;
        this._mediaInfo.hasVideo = this._hasVideo;
        this._metadata = null;
        this._audioMetadata = null;
        this._videoMetadata = null;

        this._naluLengthSize = 4;
        this._timestampBase = 0; // int32, in milliseconds
        this._timescale = 1000;
        this._duration = 0; // int32, in milliseconds
        this._durationOverrided = false;
        this._referenceFrameRate = {
            fixed: true,
            fps: 23.976,
            fps_num: 23976,
            fps_den: 1000
        };

        this._flvSoundRateTable = [5500, 11025, 22050, 44100, 48000];

        this._mpegSamplingRates = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];

        this._mpegAudioV10SampleRateTable = [44100, 48000, 32000, 0];
        this._mpegAudioV20SampleRateTable = [22050, 24000, 16000, 0];
        this._mpegAudioV25SampleRateTable = [11025, 12000, 8000, 0];

        this._mpegAudioL1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1];
        this._mpegAudioL2BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, -1];
        this._mpegAudioL3BitRateTable = [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1];

        this._videoTrack = { type: 'video', id: 1, sequenceNumber: 0, samples: [], length: 0 };
        this._audioTrack = { type: 'audio', id: 2, sequenceNumber: 0, samples: [], length: 0 };

        this._littleEndian = function () {
            var buf = new ArrayBuffer(2);
            new DataView(buf).setInt16(0, 256, true); // little-endian write
            return new Int16Array(buf)[0] === 256; // platform-spec read, if equal then LE
        }();
    }

    _createClass(FLVDemuxer, [{
        key: 'destroy',
        value: function destroy() {
            this._mediaInfo = null;
            this._metadata = null;
            this._audioMetadata = null;
            this._videoMetadata = null;
            this._videoTrack = null;
            this._audioTrack = null;

            this._onError = null;
            this._onMediaInfo = null;
            this._onMetaDataArrived = null;
            this._onScriptDataArrived = null;
            this._onTrackMetadata = null;
            this._onDataAvailable = null;
        }
    }, {
        key: 'bindDataSource',
        value: function bindDataSource(loader) {
            loader.onDataArrival = this.parseChunks.bind(this); //loader数据进行解析
            return this;
        }

        // prototype: function(type: string, metadata: any): void

    }, {
        key: 'resetMediaInfo',
        value: function resetMediaInfo() {
            this._mediaInfo = new _mediaInfo2.default();
        }
    }, {
        key: '_isInitialMetadataDispatched',
        value: function _isInitialMetadataDispatched() {
            if (this._hasAudio && this._hasVideo) {
                // both audio & video
                return this._videoInitialMetadataDispatched;
                return this._audioInitialMetadataDispatched && this._videoInitialMetadataDispatched;
            }
            if (this._hasAudio && !this._hasVideo) {
                // audio only
                return this._audioInitialMetadataDispatched;
            }
            if (!this._hasAudio && this._hasVideo) {
                // video only
                return this._videoInitialMetadataDispatched;
            }
            return false;
        }

        // function parseChunks(chunk: ArrayBuffer, byteStart: number): number;

    }, {
        key: 'parseChunks',
        value: function parseChunks(chunk, byteStart) {
            //loader的FLV数据 byteStart 相对于FLV头
            if (!this._onError || !this._onMediaInfo || !this._onTrackMetadata || !this._onDataAvailable) {
                throw new _exception.IllegalStateException('Flv: onError & onMediaInfo & onTrackMetadata & onDataAvailable callback must be specified');
            }

            var offset = 0;
            var le = this._littleEndian;

            if (byteStart === 0) {
                // buffer with FLV header
                if (chunk.byteLength > 13) {
                    var probeData = FLVDemuxer.probe(chunk);
                    offset = probeData.dataOffset;
                } else {
                    return 0;
                }
            }

            if (this._firstParse) {
                // handle PreviousTagSize0 before Tag1
                this._firstParse = false;
                if (byteStart + offset !== this._dataOffset) {
                    _logger2.default.w(this.TAG, 'First time parsing but chunk byteStart invalid!');
                    //看是不是FLV
                }

                var v = new DataView(chunk, offset);
                var prevTagSize0 = v.getUint32(0, !le);
                if (prevTagSize0 !== 0) {
                    _logger2.default.w(this.TAG, 'PrevTagSize0 !== 0 !!!');
                    //prevtagsize0应该为0
                }
                offset += 4;
            }

            while (offset < chunk.byteLength) {
                this._dispatch = true;

                var _v = new DataView(chunk, offset);

                if (offset + 11 + 4 > chunk.byteLength) {
                    // data not enough for parsing an flv tag
                    // tag head 为 11 Byte  +后面的tagsize 4 Byte
                    break;
                }

                var tagType = _v.getUint8(0); //tag类型 8-audio 9-video 18-script 其他-保留
                var dataSize = _v.getUint32(0, !le) & 0x00FFFFFF; //tag数据区大小

                if (offset + 11 + dataSize + 4 > chunk.byteLength) {
                    // data not enough for parsing actual data body
                    break;
                }

                if (tagType !== 8 && tagType !== 9 && tagType !== 18) {
                    _logger2.default.w(this.TAG, 'Unsupported tag type ' + tagType + ', skipped');
                    // consume the whole tag (skip it)
                    offset += 11 + dataSize + 4; //忽略这个tag
                    continue;
                }

                //时间戳 U24+U8 U8为高8位
                var ts2 = _v.getUint8(4);
                var ts1 = _v.getUint8(5);
                var ts0 = _v.getUint8(6);
                var ts3 = _v.getUint8(7);

                var timestamp = ts0 | ts1 << 8 | ts2 << 16 | ts3 << 24;

                var streamId = _v.getUint32(7, !le) & 0x00FFFFFF;
                if (streamId !== 0) {
                    _logger2.default.w(this.TAG, 'Meet tag which has StreamID != 0!');
                }

                var dataOffset = offset + 11;

                switch (tagType) {
                    case 8:
                        // Audio
                        this._parseAudioData(chunk, dataOffset, dataSize, timestamp);
                        break;
                    case 9:
                        // Video
                        this._parseVideoData(chunk, dataOffset, dataSize, timestamp, byteStart + offset);
                        break;
                    case 18:
                        // ScriptDataObject
                        this._parseScriptData(chunk, dataOffset, dataSize);
                        break;
                }

                var prevTagSize = _v.getUint32(11 + dataSize, !le);
                if (prevTagSize !== 11 + dataSize) {
                    _logger2.default.w(this.TAG, 'Invalid PrevTagSize ' + prevTagSize);
                }

                offset += 11 + dataSize + 4; // tagBody + dataSize + prevTagSize
            }

            // dispatch parsed frames to consumer (typically, the remuxer)
            if (this._isInitialMetadataDispatched()) {
                if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {
                    this._onDataAvailable(this._audioTrack, this._videoTrack);
                }
            }

            return offset; // consumed bytes, just equals latest offset index
        }
    }, {
        key: '_parseScriptData',
        value: function _parseScriptData(arrayBuffer, dataOffset, dataSize) {
            var scriptData = _amfParser2.default.parseScriptData(arrayBuffer, dataOffset, dataSize);

            if (scriptData.hasOwnProperty('onMetaData')) {
                if (scriptData.onMetaData == null || _typeof(scriptData.onMetaData) !== 'object') {
                    _logger2.default.w(this.TAG, 'Invalid onMetaData structure!');
                    return;
                }
                if (this._metadata) {
                    _logger2.default.w(this.TAG, 'Found another onMetaData tag!');
                }
                this._metadata = scriptData;
                var onMetaData = this._metadata.onMetaData;

                if (this._onMetaDataArrived) {
                    this._onMetaDataArrived(Object.assign({}, onMetaData));
                }

                if (typeof onMetaData.hasAudio === 'boolean') {
                    // hasAudio
                    if (this._hasAudioFlagOverrided === false) {
                        this._hasAudio = onMetaData.hasAudio;
                        this._mediaInfo.hasAudio = this._hasAudio;
                    }
                }
                if (typeof onMetaData.hasVideo === 'boolean') {
                    // hasVideo
                    if (this._hasVideoFlagOverrided === false) {
                        this._hasVideo = onMetaData.hasVideo;
                        this._mediaInfo.hasVideo = this._hasVideo;
                    }
                }
                if (typeof onMetaData.audiodatarate === 'number') {
                    // audiodatarate
                    this._mediaInfo.audioDataRate = onMetaData.audiodatarate;
                }
                if (typeof onMetaData.videodatarate === 'number') {
                    // videodatarate
                    this._mediaInfo.videoDataRate = onMetaData.videodatarate;
                }
                if (typeof onMetaData.width === 'number') {
                    // width
                    this._mediaInfo.width = onMetaData.width;
                }
                if (typeof onMetaData.height === 'number') {
                    // height
                    this._mediaInfo.height = onMetaData.height;
                }
                if (typeof onMetaData.duration === 'number') {
                    // duration
                    if (!this._durationOverrided) {
                        var duration = Math.floor(onMetaData.duration * this._timescale);
                        this._duration = duration;
                        this._mediaInfo.duration = duration;
                    }
                } else {
                    this._mediaInfo.duration = 0;
                }
                if (typeof onMetaData.framerate === 'number') {
                    // framerate
                    var fps_num = Math.floor(onMetaData.framerate * 1000);
                    if (fps_num > 0) {
                        var fps = fps_num / 1000;
                        this._referenceFrameRate.fixed = true;
                        this._referenceFrameRate.fps = fps;
                        this._referenceFrameRate.fps_num = fps_num;
                        this._referenceFrameRate.fps_den = 1000;
                        this._mediaInfo.fps = fps;
                    }
                }
                if (_typeof(onMetaData.keyframes) === 'object') {
                    // keyframes
                    this._mediaInfo.hasKeyframesIndex = true;
                    var keyframes = onMetaData.keyframes;
                    this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(keyframes);
                    onMetaData.keyframes = null; // keyframes has been extracted, remove it
                } else {
                    this._mediaInfo.hasKeyframesIndex = false;
                }
                this._dispatch = false;
                this._mediaInfo.metadata = onMetaData;
                _logger2.default.v(this.TAG, 'Parsed onMetaData');
                if (this._mediaInfo.isComplete()) {
                    this._onMediaInfo(this._mediaInfo);
                }
            }

            if (Object.keys(scriptData).length > 0) {
                if (this._onScriptDataArrived) {
                    this._onScriptDataArrived(Object.assign({}, scriptData));
                }
            }
        }
    }, {
        key: '_parseKeyframesIndex',
        value: function _parseKeyframesIndex(keyframes) {
            var times = [];
            var filepositions = [];

            // ignore first keyframe which is actually AVC Sequence Header (AVCDecoderConfigurationRecord)
            for (var i = 1; i < keyframes.times.length; i++) {
                var time = this._timestampBase + Math.floor(keyframes.times[i] * 1000);
                times.push(time);
                filepositions.push(keyframes.filepositions[i]);
            }

            return {
                times: times,
                filepositions: filepositions
            };
        }
    }, {
        key: '_parseAudioData',
        value: function _parseAudioData(arrayBuffer, dataOffset, dataSize, tagTimestamp) {
            if (dataSize <= 1) {
                _logger2.default.w(this.TAG, 'Flv: Invalid audio packet, missing SoundData payload!');
                return;
            }

            if (this._hasAudioFlagOverrided === true && this._hasAudio === false) {
                // If hasAudio: false indicated explicitly in MediaDataSource,
                // Ignore all the audio packets
                return;
            }

            var le = this._littleEndian;
            var v = new DataView(arrayBuffer, dataOffset, dataSize);

            var soundSpec = v.getUint8(0);

            var soundFormat = soundSpec >>> 4; //音频格式
            if (soundFormat !== 2 && soundFormat !== 10) {
                // 只支持MP3 or AAC
                this._onError(_demuxErrors2.default.CODEC_UNSUPPORTED, 'Flv: Unsupported audio codec idx: ' + soundFormat);
                return;
            }

            var soundRate = 0;
            var soundRateIndex = (soundSpec & 12) >>> 2; // samplerate 采样率
            if (soundRateIndex >= 0 && soundRateIndex <= 4) {
                soundRate = this._flvSoundRateTable[soundRateIndex];
            } else {
                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid audio sample rate idx: ' + soundRateIndex);
                return;
            }

            var soundSize = (soundSpec & 2) >>> 1; // unused 采样长度 0-8b 1-16b
            var soundType = soundSpec & 1; //类型 0-Momo 1-Stereo


            var meta = this._audioMetadata;
            var track = this._audioTrack;

            if (!meta) {
                if (this._hasAudio === false && this._hasAudioFlagOverrided === false) {
                    this._hasAudio = true;
                    this._mediaInfo.hasAudio = true;
                }

                // initial metadata
                meta = this._audioMetadata = {};
                meta.type = 'audio';
                meta.id = track.id; //默认
                meta.timescale = this._timescale; //默认1000
                meta.duration = this._duration;
                meta.audioSampleRate = soundRate;
                meta.channelCount = soundType === 0 ? 1 : 2;
            }

            if (soundFormat === 10) {
                // AAC
                var aacData = this._parseAACAudioData(arrayBuffer, dataOffset + 1, dataSize - 1);
                if (aacData == undefined) {
                    return;
                }

                if (aacData.packetType === 0) {
                    // AAC sequence header (AudioSpecificConfig)
                    if (meta.config) {
                        _logger2.default.w(this.TAG, 'Found another AudioSpecificConfig!');
                    }
                    var misc = aacData.data;
                    meta.audioSampleRate = misc.samplingRate;
                    meta.channelCount = misc.channelCount;
                    meta.codec = misc.codec;
                    meta.originalCodec = misc.originalCodec;
                    meta.config = misc.config;
                    // The decode result of an aac sample is 1024 PCM samples
                    meta.refSampleDuration = 1024 / meta.audioSampleRate * meta.timescale;
                    _logger2.default.v(this.TAG, 'Parsed AudioSpecificConfig');

                    if (this._isInitialMetadataDispatched()) {
                        // Non-initial metadata, force dispatch (or flush) parsed frames to remuxer
                        if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {
                            this._onDataAvailable(this._audioTrack, this._videoTrack);
                        }
                    } else {
                        this._audioInitialMetadataDispatched = true;
                    }
                    // then notify new metadata
                    this._dispatch = false;
                    this._onTrackMetadata('audio', meta);

                    var mi = this._mediaInfo;
                    mi.audioCodec = meta.originalCodec;
                    mi.audioSampleRate = meta.audioSampleRate;
                    mi.audioChannelCount = meta.channelCount;
                    if (mi.hasVideo) {
                        if (mi.videoCodec != null) {
                            mi.mimeType = 'video/x-flv; codecs="' + mi.videoCodec + ',' + mi.audioCodec + '"';
                        }
                    } else {
                        mi.mimeType = 'video/x-flv; codecs="' + mi.audioCodec + '"';
                    }
                    if (mi.isComplete()) {
                        this._onMediaInfo(mi);
                    }
                } else if (aacData.packetType === 1) {
                    // AAC raw frame data
                    var dts = this._timestampBase + tagTimestamp;
                    var aacSample = { unit: aacData.data, length: aacData.data.byteLength, dts: dts, pts: dts };
                    track.samples.push(aacSample);
                    track.length += aacData.data.length;
                } else {
                    _logger2.default.e(this.TAG, 'Flv: Unsupported AAC data type ' + aacData.packetType);
                }
            } else if (soundFormat === 2) {
                // MP3
                if (!meta.codec) {
                    // We need metadata for mp3 audio track, extract info from frame header
                    var _misc = this._parseMP3AudioData(arrayBuffer, dataOffset + 1, dataSize - 1, true);
                    if (_misc == undefined) {
                        return;
                    }
                    meta.audioSampleRate = _misc.samplingRate;
                    meta.channelCount = _misc.channelCount;
                    meta.codec = _misc.codec;
                    meta.originalCodec = _misc.originalCodec;
                    // The decode result of an mp3 sample is 1152 PCM samples
                    meta.refSampleDuration = 1152 / meta.audioSampleRate * meta.timescale;
                    _logger2.default.v(this.TAG, 'Parsed MPEG Audio Frame Header');

                    this._audioInitialMetadataDispatched = true;
                    this._onTrackMetadata('audio', meta);

                    var _mi = this._mediaInfo;
                    _mi.audioCodec = meta.codec;
                    _mi.audioSampleRate = meta.audioSampleRate;
                    _mi.audioChannelCount = meta.channelCount;
                    _mi.audioDataRate = _misc.bitRate;
                    if (_mi.hasVideo) {
                        if (_mi.videoCodec != null) {
                            _mi.mimeType = 'video/x-flv; codecs="' + _mi.videoCodec + ',' + _mi.audioCodec + '"';
                        }
                    } else {
                        _mi.mimeType = 'video/x-flv; codecs="' + _mi.audioCodec + '"';
                    }
                    if (_mi.isComplete()) {
                        this._onMediaInfo(_mi);
                    }
                }

                // This packet is always a valid audio packet, extract it
                var data = this._parseMP3AudioData(arrayBuffer, dataOffset + 1, dataSize - 1, false);
                if (data == undefined) {
                    return;
                }
                var _dts = this._timestampBase + tagTimestamp;
                var mp3Sample = { unit: data, length: data.byteLength, dts: _dts, pts: _dts };
                track.samples.push(mp3Sample);
                track.length += data.length;
            }
        }
    }, {
        key: '_parseAACAudioData',
        value: function _parseAACAudioData(arrayBuffer, dataOffset, dataSize) {
            if (dataSize <= 1) {
                _logger2.default.w(this.TAG, 'Flv: Invalid AAC packet, missing AACPacketType or/and Data!');
                return;
            }

            var result = {};
            var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);

            result.packetType = array[0]; //AAC的packetType 0为序列头 1为数据

            if (array[0] === 0) {
                result.data = this._parseAACAudioSpecificConfig(arrayBuffer, dataOffset + 1, dataSize - 1);
            } else {
                result.data = array.subarray(1);
            }

            return result;
        }
    }, {
        key: '_parseAACAudioSpecificConfig',
        value: function _parseAACAudioSpecificConfig(arrayBuffer, dataOffset, dataSize) {
            var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);
            var config = null;

            /* Audio Object Type:
               0: Null
               1: AAC Main
               2: AAC LC
               3: AAC SSR (Scalable Sample Rate)
               4: AAC LTP (Long Term Prediction)
               5: HE-AAC / SBR (Spectral Band Replication)
               6: AAC Scalable
            */

            var audioObjectType = 0;
            var originalAudioObjectType = 0;
            var audioExtensionObjectType = null;
            var samplingIndex = 0;
            var extensionSamplingIndex = null;

            // 5 bits 编码类型
            audioObjectType = originalAudioObjectType = array[0] >>> 3;
            // 4 bits 采样率索引
            samplingIndex = (array[0] & 0x07) << 1 | array[1] >>> 7;
            //samplingIndec = 0xF即15时，后面跟24bit的采样率，否则无此占位
            //本例直接忽略了
            if (samplingIndex < 0 || samplingIndex >= this._mpegSamplingRates.length) {
                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: AAC invalid sampling frequency index!');
                return;
            }

            var samplingFrequence = this._mpegSamplingRates[samplingIndex];

            // 4 bits 声道信息 如双通道为2
            var channelConfig = (array[1] & 0x78) >>> 3;
            if (channelConfig < 0 || channelConfig >= 8) {
                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: AAC invalid channel configuration');
                return;
            }

            if (audioObjectType === 5) {
                // HE-AAC?
                // 4 bits
                extensionSamplingIndex = (array[1] & 0x07) << 1 | array[2] >>> 7;
                // 5 bits
                audioExtensionObjectType = (array[2] & 0x7C) >>> 2;
            }

            // workarounds for various browsers
            var userAgent = window.navigator.userAgent.toLowerCase();

            if (userAgent.indexOf('firefox') !== -1) {
                // firefox: use SBR (HE-AAC) if freq less than 24kHz
                if (samplingIndex >= 6) {
                    audioObjectType = 5;
                    config = new Array(4);
                    extensionSamplingIndex = samplingIndex - 3;
                } else {
                    // use LC-AAC
                    audioObjectType = 2;
                    config = new Array(2);
                    extensionSamplingIndex = samplingIndex;
                }
            } else if (userAgent.indexOf('android') !== -1) {
                // android: always use LC-AAC
                audioObjectType = 2;
                config = new Array(2);
                extensionSamplingIndex = samplingIndex;
            } else {
                // for other browsers, e.g. chrome...
                // Always use HE-AAC to make it easier to switch aac codec profile
                audioObjectType = 5;
                extensionSamplingIndex = samplingIndex;
                config = new Array(4);

                if (samplingIndex >= 6) {
                    extensionSamplingIndex = samplingIndex - 3;
                } else if (channelConfig === 1) {
                    // Mono channel
                    audioObjectType = 2;
                    config = new Array(2);
                    extensionSamplingIndex = samplingIndex;
                }
            }

            config[0] = audioObjectType << 3;
            config[0] |= (samplingIndex & 0x0F) >>> 1;
            config[1] = (samplingIndex & 0x0F) << 7;
            config[1] |= (channelConfig & 0x0F) << 3;
            if (audioObjectType === 5) {
                config[1] |= (extensionSamplingIndex & 0x0F) >>> 1;
                config[2] = (extensionSamplingIndex & 0x01) << 7;
                // extended audio object type: force to 2 (LC-AAC)
                config[2] |= 2 << 2;
                config[3] = 0;
            }

            return {
                config: config,
                samplingRate: samplingFrequence,
                channelCount: channelConfig,
                codec: 'mp4a.40.' + audioObjectType,
                originalCodec: 'mp4a.40.' + originalAudioObjectType
            };
        }
    }, {
        key: '_parseMP3AudioData',
        value: function _parseMP3AudioData(arrayBuffer, dataOffset, dataSize, requestHeader) {
            if (dataSize < 4) {
                _logger2.default.w(this.TAG, 'Flv: Invalid MP3 packet, header missing!');
                return;
            }

            var le = this._littleEndian;
            var array = new Uint8Array(arrayBuffer, dataOffset, dataSize);
            var result = null;

            if (requestHeader) {
                if (array[0] !== 0xFF) {
                    return;
                }
                var ver = array[1] >>> 3 & 0x03;
                var layer = (array[1] & 0x06) >> 1;

                var bitrate_index = (array[2] & 0xF0) >>> 4;
                var sampling_freq_index = (array[2] & 0x0C) >>> 2;

                var channel_mode = array[3] >>> 6 & 0x03;
                var channel_count = channel_mode !== 3 ? 2 : 1;

                var sample_rate = 0;
                var bit_rate = 0;
                var object_type = 34; // Layer-3, listed in MPEG-4 Audio Object Types

                var codec = 'mp3';

                switch (ver) {
                    case 0:
                        // MPEG 2.5
                        sample_rate = this._mpegAudioV25SampleRateTable[sampling_freq_index];
                        break;
                    case 2:
                        // MPEG 2
                        sample_rate = this._mpegAudioV20SampleRateTable[sampling_freq_index];
                        break;
                    case 3:
                        // MPEG 1
                        sample_rate = this._mpegAudioV10SampleRateTable[sampling_freq_index];
                        break;
                }

                switch (layer) {
                    case 1:
                        // Layer 3
                        object_type = 34;
                        if (bitrate_index < this._mpegAudioL3BitRateTable.length) {
                            bit_rate = this._mpegAudioL3BitRateTable[bitrate_index];
                        }
                        break;
                    case 2:
                        // Layer 2
                        object_type = 33;
                        if (bitrate_index < this._mpegAudioL2BitRateTable.length) {
                            bit_rate = this._mpegAudioL2BitRateTable[bitrate_index];
                        }
                        break;
                    case 3:
                        // Layer 1
                        object_type = 32;
                        if (bitrate_index < this._mpegAudioL1BitRateTable.length) {
                            bit_rate = this._mpegAudioL1BitRateTable[bitrate_index];
                        }
                        break;
                }

                result = {
                    bitRate: bit_rate,
                    samplingRate: sample_rate,
                    channelCount: channel_count,
                    codec: codec,
                    originalCodec: codec
                };
            } else {
                result = array;
            }

            return result;
        }
    }, {
        key: '_parseVideoData',
        value: function _parseVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition) {
            if (dataSize <= 1) {
                _logger2.default.w(this.TAG, 'Flv: Invalid video packet, missing VideoData payload!');
                return;
            }

            if (this._hasVideoFlagOverrided === true && this._hasVideo === false) {
                // If hasVideo: false indicated explicitly in MediaDataSource,
                // Ignore all the video packets
                return;
            }

            var spec = new Uint8Array(arrayBuffer, dataOffset, dataSize)[0];

            var frameType = (spec & 240) >>> 4; //240=0xF0, 高4位，帧类型 1-keyframe 2-innerframe
            var codecId = spec & 15; //编码类型 video tag data[0] 低4位 7-H264  9-mpeg4 12-h265

            if (codecId !== 7) {
                if (codecId == 9 || codecId == 12) {
                    // 直接将数据抛出去
                }

                this._onError(_demuxErrors2.default.CODEC_UNSUPPORTED, 'Flv: Unsupported codec in video frame: ' + codecId);
                return;
            } else {
                this._parseAVCVideoPacket(arrayBuffer, dataOffset + 1, dataSize - 1, tagTimestamp, tagPosition, frameType);
            }
        }
    }, {
        key: '_parseAVCVideoPacket',
        value: function _parseAVCVideoPacket(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType) {
            if (dataSize < 4) {
                _logger2.default.w(this.TAG, 'Flv: Invalid AVC packet, missing AVCPacketType or/and CompositionTime');
                return;
            }

            var le = this._littleEndian;
            var v = new DataView(arrayBuffer, dataOffset, dataSize);

            var packetType = v.getUint8(0);
            var cts_unsigned = v.getUint32(0, !le) & 0x00FFFFFF;
            var cts = cts_unsigned << 8 >> 8; // convert to 24-bit signed int
            //PTS相对于DTS的偏移值
            //显示时间 = 解码时间（tag的第5~8字节） +  CompositionTime(视频tag的第14~16字节)

            if (packetType === 0) {
                // AVCDecoderConfigurationRecord AVC序列头
                this._parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset + 4, dataSize - 4);
            } else if (packetType === 1) {
                // One or more Nalus
                this._parseAVCVideoData(arrayBuffer, dataOffset + 4, dataSize - 4, tagTimestamp, tagPosition, frameType, cts);
            } else if (packetType === 2) {
                // empty, AVC end of sequence
            } else {
                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid video packet type ' + packetType);
                return;
            }
        }
    }, {
        key: '_parseAVCDecoderConfigurationRecord',
        value: function _parseAVCDecoderConfigurationRecord(arrayBuffer, dataOffset, dataSize) {
            if (dataSize < 7) {
                _logger2.default.w(this.TAG, 'Flv: Invalid AVCDecoderConfigurationRecord, lack of data!');
                return;
            }

            var meta = this._videoMetadata;
            var track = this._videoTrack;
            var le = this._littleEndian;
            var v = new DataView(arrayBuffer, dataOffset, dataSize);

            if (!meta) {
                if (this._hasVideo === false && this._hasVideoFlagOverrided === false) {
                    this._hasVideo = true;
                    this._mediaInfo.hasVideo = true;
                }

                meta = this._videoMetadata = {};
                meta.type = 'video';
                meta.id = track.id; //默认1
                meta.timescale = this._timescale; //默认1000
                meta.duration = this._duration; //默认0，script中可改写
            } else {
                if (typeof meta.avcc !== 'undefined') {
                    _logger2.default.w(this.TAG, 'Found another AVCDecoderConfigurationRecord!');
                }
            }

            var version = v.getUint8(0); // configurationVersion =1
            var avcProfile = v.getUint8(1); // avcProfileIndication  
            // profile 视频会议和移动应用baseline-66 标清main-77 高清high-100
            var profileCompatibility = v.getUint8(2); // profile_compatibility 兼容性
            var avcLevel = v.getUint8(3); // AVCLevelIndication
            // level 可指定最大的图像分辨率和帧率等

            if (version !== 1 || avcProfile === 0) {
                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord');
                return;
            }

            this._naluLengthSize = (v.getUint8(4) & 3) + 1; // lengthSizeMinusOne
            // H264的NALU的长度，低2位+1，一般为4 
            if (this._naluLengthSize !== 3 && this._naluLengthSize !== 4) {
                // holy shit!!!
                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Strange NaluLengthSizeMinusOne: ' + (this._naluLengthSize - 1));
                return;
            }

            var spsCount = v.getUint8(5) & 31; // numOfSequenceParameterSets
            //SPS个数，低5位 一般为1
            if (spsCount === 0) {
                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No SPS');
                return;
            } else if (spsCount > 1) {
                _logger2.default.w(this.TAG, 'Flv: Strange AVCDecoderConfigurationRecord: SPS Count = ' + spsCount);
            }

            var offset = 6;

            for (var i = 0; i < spsCount; i++) {
                //SPS解析
                var len = v.getUint16(offset, !le); // sequenceParameterSetLength
                //SPS长度
                offset += 2;

                if (len === 0) {
                    continue;
                }

                // Notice: Nalu without startcode header (00 00 00 01)
                // SPS内容
                var sps = new Uint8Array(arrayBuffer, dataOffset + offset, len);
                offset += len;

                var config = _spsParser2.default.parseSPS(sps);
                if (i !== 0) {
                    // ignore other sps's config
                    continue;
                }

                meta.codecWidth = config.codec_size.width;
                meta.codecHeight = config.codec_size.height;
                meta.presentWidth = config.present_size.width;
                meta.presentHeight = config.present_size.height;

                meta.profile = config.profile_string;
                meta.level = config.level_string;
                meta.bitDepth = config.bit_depth;
                meta.chromaFormat = config.chroma_format;
                meta.sarRatio = config.sar_ratio;
                meta.frameRate = config.frame_rate;

                if (config.frame_rate.fixed === false || config.frame_rate.fps_num === 0 || config.frame_rate.fps_den === 0) {
                    meta.frameRate = this._referenceFrameRate;
                }

                var fps_den = meta.frameRate.fps_den;
                var fps_num = meta.frameRate.fps_num;
                meta.refSampleDuration = meta.timescale * (fps_den / fps_num);

                var codecArray = sps.subarray(1, 4);
                var codecString = 'avc1.';
                for (var j = 0; j < 3; j++) {
                    var h = codecArray[j].toString(16);
                    if (h.length < 2) {
                        h = '0' + h;
                    }
                    codecString += h;
                }
                meta.codec = codecString;

                var mi = this._mediaInfo;
                mi.width = meta.codecWidth;
                mi.height = meta.codecHeight;
                mi.fps = meta.frameRate.fps;
                mi.profile = meta.profile;
                mi.level = meta.level;
                mi.refFrames = config.ref_frames;
                mi.chromaFormat = config.chroma_format_string;
                mi.sarNum = meta.sarRatio.width;
                mi.sarDen = meta.sarRatio.height;
                mi.videoCodec = codecString;

                if (mi.hasAudio) {
                    if (mi.audioCodec != null) {
                        mi.mimeType = 'video/x-flv; codecs="' + mi.videoCodec + ',' + mi.audioCodec + '"';
                    }
                } else {
                    mi.mimeType = 'video/x-flv; codecs="' + mi.videoCodec + '"';
                }
                if (mi.isComplete()) {
                    this._onMediaInfo(mi);
                }
            } //SPS解析

            // PPS解析
            var ppsCount = v.getUint8(offset); // numOfPictureParameterSets
            //一般为1
            if (ppsCount === 0) {
                this._onError(_demuxErrors2.default.FORMAT_ERROR, 'Flv: Invalid AVCDecoderConfigurationRecord: No PPS');
                return;
            } else if (ppsCount > 1) {
                _logger2.default.w(this.TAG, 'Flv: Strange AVCDecoderConfigurationRecord: PPS Count = ' + ppsCount);
            }

            offset++;

            for (var _i = 0; _i < ppsCount; _i++) {
                //PPS 长度
                var _len = v.getUint16(offset, !le); // pictureParameterSetLength
                offset += 2;

                if (_len === 0) {
                    continue;
                }

                // pps is useless for extracting video information
                offset += _len;
            }

            meta.avcc = new Uint8Array(dataSize);
            meta.avcc.set(new Uint8Array(arrayBuffer, dataOffset, dataSize), 0);
            _logger2.default.v(this.TAG, 'Parsed AVCDecoderConfigurationRecord');

            if (this._isInitialMetadataDispatched()) {
                // flush parsed frames
                if (this._dispatch && (this._audioTrack.length || this._videoTrack.length)) {
                    this._onDataAvailable(this._audioTrack, this._videoTrack);
                }
            } else {
                this._videoInitialMetadataDispatched = true;
            }
            // notify new metadata
            this._dispatch = false;
            this._onTrackMetadata('video', meta); //在MP4remuxer中生成initSegment
            //console.log(meta, this._mediaInfo);
        }
    }, {
        key: '_parseAVCVideoData',
        value: function _parseAVCVideoData(arrayBuffer, dataOffset, dataSize, tagTimestamp, tagPosition, frameType, cts) {
            var le = this._littleEndian;
            var v = new DataView(arrayBuffer, dataOffset, dataSize);

            var units = [],
                length = 0;

            var offset = 0;
            var lengthSize = this._naluLengthSize;
            var dts = this._timestampBase + tagTimestamp; //解码时间
            var keyframe = frameType === 1; // from FLV Frame Type constants

            while (offset < dataSize) {
                if (offset + 4 >= dataSize) {
                    _logger2.default.w(this.TAG, 'Malformed Nalu near timestamp ' + dts + ', offset = ' + offset + ', dataSize = ' + dataSize);
                    break; // data not enough for next Nalu
                }
                // Nalu with length-header (AVC1)
                // 相当于把00 00 00 01的开始码换成nalu数据长度
                var naluSize = v.getUint32(offset, !le); // Big-Endian read
                if (lengthSize === 3) {
                    naluSize >>>= 8;
                }
                if (naluSize > dataSize - lengthSize) {
                    _logger2.default.w(this.TAG, 'Malformed Nalus near timestamp ' + dts + ', NaluSize > DataSize!');
                    return;
                }

                var unitType = v.getUint8(offset + lengthSize) & 0x1F;

                if (unitType === 5) {
                    // IDR
                    keyframe = true;
                }

                var data = new Uint8Array(arrayBuffer, dataOffset + offset, lengthSize + naluSize);
                var unit = { type: unitType, data: data };
                units.push(unit);
                length += data.byteLength;

                offset += lengthSize + naluSize;
            }

            if (units.length) {
                var track = this._videoTrack;
                var avcSample = {
                    units: units,
                    length: length,
                    isKeyframe: keyframe,
                    dts: dts,
                    cts: cts,
                    pts: dts + cts
                };
                // console.log(avcSample);
                if (keyframe) {
                    avcSample.fileposition = tagPosition;
                }
                track.samples.push(avcSample);
                track.length += length;
            }
        }
    }, {
        key: 'onTrackMetadata',
        get: function get() {
            return this._onTrackMetadata;
        },
        set: function set(callback) {
            this._onTrackMetadata = callback;
        }

        // prototype: function(mediaInfo: MediaInfo): void

    }, {
        key: 'onMediaInfo',
        get: function get() {
            return this._onMediaInfo;
        },
        set: function set(callback) {
            this._onMediaInfo = callback;
        }
    }, {
        key: 'onMetaDataArrived',
        get: function get() {
            return this._onMetaDataArrived;
        },
        set: function set(callback) {
            this._onMetaDataArrived = callback;
        }
    }, {
        key: 'onScriptDataArrived',
        get: function get() {
            return this._onScriptDataArrived;
        },
        set: function set(callback) {
            this._onScriptDataArrived = callback;
        }

        // prototype: function(type: number, info: string): void

    }, {
        key: 'onError',
        get: function get() {
            return this._onError;
        },
        set: function set(callback) {
            this._onError = callback;
        }

        // prototype: function(videoTrack: any, audioTrack: any): void

    }, {
        key: 'onDataAvailable',
        get: function get() {
            return this._onDataAvailable;
        },
        set: function set(callback) {
            this._onDataAvailable = callback;
        }

        // timestamp base for output samples, must be in milliseconds

    }, {
        key: 'timestampBase',
        get: function get() {
            return this._timestampBase;
        },
        set: function set(base) {
            this._timestampBase = base;
        }
    }, {
        key: 'overridedDuration',
        get: function get() {
            return this._duration;
        }

        // Force-override media duration. Must be in milliseconds, int32
        ,
        set: function set(duration) {
            this._durationOverrided = true;
            this._duration = duration;
            this._mediaInfo.duration = duration;
        }

        // Force-override audio track present flag, boolean

    }, {
        key: 'overridedHasAudio',
        set: function set(hasAudio) {
            this._hasAudioFlagOverrided = true;
            this._hasAudio = hasAudio;
            this._mediaInfo.hasAudio = hasAudio;
        }

        // Force-override video track present flag, boolean

    }, {
        key: 'overridedHasVideo',
        set: function set(hasVideo) {
            this._hasVideoFlagOverrided = true;
            this._hasVideo = hasVideo;
            this._mediaInfo.hasVideo = hasVideo;
        }
    }], [{
        key: 'probe',
        value: function probe(buffer) {
            //获取是否含有音频和视频
            var data = new Uint8Array(buffer);
            var mismatch = { match: false };

            if (data[0] !== 0x46 || data[1] !== 0x4C || data[2] !== 0x56 || data[3] !== 0x01) {
                //"FLV"+0x01 - 文件类型+version
                return mismatch;
            }

            var hasAudio = (data[4] & 4) >>> 2 !== 0; //倒数第三bit为1表示有音频
            var hasVideo = (data[4] & 1) !== 0; //倒数第一bit为1表示有视频

            var offset = ReadBig32(data, 5); //4Byte 文件头长度

            if (offset < 9) {
                return mismatch;
            }

            return {
                match: true,
                consumed: offset,
                dataOffset: offset,
                hasAudioTrack: hasAudio,
                hasVideoTrack: hasVideo
            };
        }
    }]);

    return FLVDemuxer;
}();

exports.default = FLVDemuxer;

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _utf8Conv = __webpack_require__(358);

var _utf8Conv2 = _interopRequireDefault(_utf8Conv);

var _exception = __webpack_require__(348);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var le = function () {
    var buf = new ArrayBuffer(2);
    new DataView(buf).setInt16(0, 256, true); // little-endian write
    return new Int16Array(buf)[0] === 256; // platform-spec read, if equal then LE
}();

var AMF = function () {
    function AMF() {
        _classCallCheck(this, AMF);
    }

    _createClass(AMF, null, [{
        key: 'parseScriptData',
        value: function parseScriptData(arrayBuffer, dataOffset, dataSize) {
            var data = {};

            try {
                var name = AMF.parseValue(arrayBuffer, dataOffset, dataSize);
                var value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);

                data[name.data] = value.data;
            } catch (e) {
                _logger2.default.e('AMF', e.toString());
            }

            return data;
        }
    }, {
        key: 'parseObject',
        value: function parseObject(arrayBuffer, dataOffset, dataSize) {
            if (dataSize < 3) {
                throw new _exception.IllegalStateException('Data not enough when parse ScriptDataObject');
            }
            var name = AMF.parseString(arrayBuffer, dataOffset, dataSize);
            var value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);
            var isObjectEnd = value.objectEnd;

            return {
                data: {
                    name: name.data,
                    value: value.data
                },
                size: name.size + value.size,
                objectEnd: isObjectEnd
            };
        }
    }, {
        key: 'parseVariable',
        value: function parseVariable(arrayBuffer, dataOffset, dataSize) {
            return AMF.parseObject(arrayBuffer, dataOffset, dataSize);
        }
    }, {
        key: 'parseString',
        value: function parseString(arrayBuffer, dataOffset, dataSize) {
            if (dataSize < 2) {
                throw new _exception.IllegalStateException('Data not enough when parse String');
            }
            //数据类型+数据长度+数据;可确定长度的数据长度会省略
            var v = new DataView(arrayBuffer, dataOffset, dataSize);
            var length = v.getUint16(0, !le);

            var str = void 0;
            if (length > 0) {
                str = (0, _utf8Conv2.default)(new Uint8Array(arrayBuffer, dataOffset + 2, length));
            } else {
                str = '';
            }

            return {
                data: str,
                size: 2 + length
            };
        }
    }, {
        key: 'parseLongString',
        value: function parseLongString(arrayBuffer, dataOffset, dataSize) {
            if (dataSize < 4) {
                throw new _exception.IllegalStateException('Data not enough when parse LongString');
            }
            var v = new DataView(arrayBuffer, dataOffset, dataSize);
            var length = v.getUint32(0, !le);

            var str = void 0;
            if (length > 0) {
                str = (0, _utf8Conv2.default)(new Uint8Array(arrayBuffer, dataOffset + 4, length));
            } else {
                str = '';
            }

            return {
                data: str,
                size: 4 + length
            };
        }
    }, {
        key: 'parseDate',
        value: function parseDate(arrayBuffer, dataOffset, dataSize) {
            if (dataSize < 10) {
                throw new _exception.IllegalStateException('Data size invalid when parse Date');
            }
            var v = new DataView(arrayBuffer, dataOffset, dataSize);
            var timestamp = v.getFloat64(0, !le);
            var localTimeOffset = v.getInt16(8, !le);
            timestamp += localTimeOffset * 60 * 1000; // get UTC time

            return {
                data: new Date(timestamp),
                size: 8 + 2
            };
        }
    }, {
        key: 'parseValue',
        value: function parseValue(arrayBuffer, dataOffset, dataSize) {
            if (dataSize < 1) {
                throw new _exception.IllegalStateException('Data not enough when parse Value');
            }

            var v = new DataView(arrayBuffer, dataOffset, dataSize);

            var offset = 1;
            var type = v.getUint8(0);
            var value = void 0;
            var objectEnd = false;

            try {
                switch (type) {
                    case 0:
                        // Number(Double) type
                        value = v.getFloat64(1, !le);
                        offset += 8;
                        break;
                    case 1:
                        {
                            // Boolean type
                            var b = v.getUint8(1);
                            value = b ? true : false;
                            offset += 1;
                            break;
                        }
                    case 2:
                        {
                            // String type
                            var amfstr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);
                            value = amfstr.data;
                            offset += amfstr.size;
                            break;
                        }
                    case 3:
                        {
                            // Object(s) type
                            value = {};
                            var terminal = 0; // workaround for malformed Objects which has missing ScriptDataObjectEnd
                            if ((v.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {
                                terminal = 3;
                            }
                            while (offset < dataSize - 4) {
                                // 4 === type(UI8) + ScriptDataObjectEnd(UI24)
                                var amfobj = AMF.parseObject(arrayBuffer, dataOffset + offset, dataSize - offset - terminal);
                                if (amfobj.objectEnd) break;
                                value[amfobj.data.name] = amfobj.data.value;
                                offset += amfobj.size;
                            }
                            if (offset <= dataSize - 3) {
                                var marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;
                                if (marker === 9) {
                                    offset += 3;
                                }
                            }
                            break;
                        }
                    case 8:
                        {
                            // ECMA array type (Mixed array)
                            value = {};
                            offset += 4; // ECMAArrayLength(UI32)
                            var _terminal = 0; // workaround for malformed MixedArrays which has missing ScriptDataObjectEnd
                            if ((v.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {
                                _terminal = 3;
                            }
                            while (offset < dataSize - 8) {
                                // 8 === type(UI8) + ECMAArrayLength(UI32) + ScriptDataVariableEnd(UI24)
                                var amfvar = AMF.parseVariable(arrayBuffer, dataOffset + offset, dataSize - offset - _terminal);
                                if (amfvar.objectEnd) break;
                                value[amfvar.data.name] = amfvar.data.value;
                                offset += amfvar.size;
                            }
                            if (offset <= dataSize - 3) {
                                var _marker = v.getUint32(offset - 1, !le) & 0x00FFFFFF;
                                if (_marker === 9) {
                                    offset += 3;
                                }
                            }
                            break;
                        }
                    case 9:
                        // ScriptDataObjectEnd
                        value = undefined;
                        offset = 1;
                        objectEnd = true;
                        break;
                    case 10:
                        {
                            // Strict array type
                            // ScriptDataValue[n]. NOTE: according to video_file_format_spec_v10_1.pdf
                            value = [];
                            var strictArrayLength = v.getUint32(1, !le);
                            offset += 4;
                            for (var i = 0; i < strictArrayLength; i++) {
                                var val = AMF.parseValue(arrayBuffer, dataOffset + offset, dataSize - offset);
                                value.push(val.data);
                                offset += val.size;
                            }
                            break;
                        }
                    case 11:
                        {
                            // Date type
                            var date = AMF.parseDate(arrayBuffer, dataOffset + 1, dataSize - 1);
                            value = date.data;
                            offset += date.size;
                            break;
                        }
                    case 12:
                        {
                            // Long string type
                            var amfLongStr = AMF.parseString(arrayBuffer, dataOffset + 1, dataSize - 1);
                            value = amfLongStr.data;
                            offset += amfLongStr.size;
                            break;
                        }
                    default:
                        // ignore and skip
                        offset = dataSize;
                        _logger2.default.w('AMF', 'Unsupported AMF value type ' + type);
                }
            } catch (e) {
                _logger2.default.e('AMF', e.toString());
            }

            return {
                data: value,
                size: offset,
                objectEnd: objectEnd
            };
        }
    }]);

    return AMF;
}();

exports.default = AMF;

/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});


function checkContinuation(uint8array, start, checkLength) {
    var array = uint8array;
    if (start + checkLength < array.length) {
        while (checkLength--) {
            if ((array[++start] & 0xC0) !== 0x80) return false;
        }
        return true;
    } else {
        return false;
    }
}

function decodeUTF8(uint8array) {
    var out = [];
    var input = uint8array;
    var i = 0;
    var length = uint8array.length;

    while (i < length) {
        if (input[i] < 0x80) {
            out.push(String.fromCharCode(input[i]));
            ++i;
            continue;
        } else if (input[i] < 0xC0) {
            // fallthrough
        } else if (input[i] < 0xE0) {
            if (checkContinuation(input, i, 1)) {
                var ucs4 = (input[i] & 0x1F) << 6 | input[i + 1] & 0x3F;
                if (ucs4 >= 0x80) {
                    out.push(String.fromCharCode(ucs4 & 0xFFFF));
                    i += 2;
                    continue;
                }
            }
        } else if (input[i] < 0xF0) {
            if (checkContinuation(input, i, 2)) {
                var _ucs = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;
                if (_ucs >= 0x800 && (_ucs & 0xF800) !== 0xD800) {
                    out.push(String.fromCharCode(_ucs & 0xFFFF));
                    i += 3;
                    continue;
                }
            }
        } else if (input[i] < 0xF8) {
            if (checkContinuation(input, i, 3)) {
                var _ucs2 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12 | (input[i + 2] & 0x3F) << 6 | input[i + 3] & 0x3F;
                if (_ucs2 > 0x10000 && _ucs2 < 0x110000) {
                    _ucs2 -= 0x10000;
                    out.push(String.fromCharCode(_ucs2 >>> 10 | 0xD800));
                    out.push(String.fromCharCode(_ucs2 & 0x3FF | 0xDC00));
                    i += 4;
                    continue;
                }
            }
        }
        out.push(String.fromCharCode(0xFFFD));
        ++i;
    }

    return out.join('');
}

exports.default = decodeUTF8;

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _expGolomb = __webpack_require__(360);

var _expGolomb2 = _interopRequireDefault(_expGolomb);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SPSParser = function () {
    function SPSParser() {
        _classCallCheck(this, SPSParser);
    }

    _createClass(SPSParser, null, [{
        key: '_ebsp2rbsp',
        value: function _ebsp2rbsp(uint8array) {
            var src = uint8array;
            var src_length = src.byteLength;
            var dst = new Uint8Array(src_length);
            var dst_idx = 0;

            for (var i = 0; i < src_length; i++) {
                if (i >= 2) {
                    // Unescape: Skip 0x03 after 00 00
                    if (src[i] === 0x03 && src[i - 1] === 0x00 && src[i - 2] === 0x00) {
                        continue;
                    }
                }
                dst[dst_idx] = src[i];
                dst_idx++;
            }

            return new Uint8Array(dst.buffer, 0, dst_idx);
        }
    }, {
        key: 'parseSPS',
        value: function parseSPS(uint8array) {
            var rbsp = SPSParser._ebsp2rbsp(uint8array);
            var gb = new _expGolomb2.default(rbsp);

            gb.readByte();
            var profile_idc = gb.readByte(); // profile_idc
            gb.readByte(); // constraint_set_flags[5] + reserved_zero[3]
            var level_idc = gb.readByte(); // level_idc
            gb.readUEG(); // seq_parameter_set_id

            var profile_string = SPSParser.getProfileString(profile_idc);
            var level_string = SPSParser.getLevelString(level_idc);
            var chroma_format_idc = 1;
            var chroma_format = 420;
            var chroma_format_table = [0, 420, 422, 444];
            var bit_depth = 8;

            if (profile_idc === 100 || profile_idc === 110 || profile_idc === 122 || profile_idc === 244 || profile_idc === 44 || profile_idc === 83 || profile_idc === 86 || profile_idc === 118 || profile_idc === 128 || profile_idc === 138 || profile_idc === 144) {

                chroma_format_idc = gb.readUEG();
                if (chroma_format_idc === 3) {
                    gb.readBits(1); // separate_colour_plane_flag
                }
                if (chroma_format_idc <= 3) {
                    chroma_format = chroma_format_table[chroma_format_idc];
                }

                bit_depth = gb.readUEG() + 8; // bit_depth_luma_minus8
                gb.readUEG(); // bit_depth_chroma_minus8
                gb.readBits(1); // qpprime_y_zero_transform_bypass_flag
                if (gb.readBool()) {
                    // seq_scaling_matrix_present_flag
                    var scaling_list_count = chroma_format_idc !== 3 ? 8 : 12;
                    for (var i = 0; i < scaling_list_count; i++) {
                        if (gb.readBool()) {
                            // seq_scaling_list_present_flag
                            if (i < 6) {
                                SPSParser._skipScalingList(gb, 16);
                            } else {
                                SPSParser._skipScalingList(gb, 64);
                            }
                        }
                    }
                }
            }
            gb.readUEG(); // log2_max_frame_num_minus4
            var pic_order_cnt_type = gb.readUEG();
            if (pic_order_cnt_type === 0) {
                gb.readUEG(); // log2_max_pic_order_cnt_lsb_minus_4
            } else if (pic_order_cnt_type === 1) {
                gb.readBits(1); // delta_pic_order_always_zero_flag
                gb.readSEG(); // offset_for_non_ref_pic
                gb.readSEG(); // offset_for_top_to_bottom_field
                var num_ref_frames_in_pic_order_cnt_cycle = gb.readUEG();
                for (var _i = 0; _i < num_ref_frames_in_pic_order_cnt_cycle; _i++) {
                    gb.readSEG(); // offset_for_ref_frame
                }
            }
            var ref_frames = gb.readUEG(); // max_num_ref_frames
            gb.readBits(1); // gaps_in_frame_num_value_allowed_flag

            var pic_width_in_mbs_minus1 = gb.readUEG();
            var pic_height_in_map_units_minus1 = gb.readUEG();

            var frame_mbs_only_flag = gb.readBits(1);
            if (frame_mbs_only_flag === 0) {
                gb.readBits(1); // mb_adaptive_frame_field_flag
            }
            gb.readBits(1); // direct_8x8_inference_flag

            var frame_crop_left_offset = 0;
            var frame_crop_right_offset = 0;
            var frame_crop_top_offset = 0;
            var frame_crop_bottom_offset = 0;

            var frame_cropping_flag = gb.readBool();
            if (frame_cropping_flag) {
                frame_crop_left_offset = gb.readUEG();
                frame_crop_right_offset = gb.readUEG();
                frame_crop_top_offset = gb.readUEG();
                frame_crop_bottom_offset = gb.readUEG();
            }

            var sar_width = 1,
                sar_height = 1;
            var fps = 0,
                fps_fixed = true,
                fps_num = 0,
                fps_den = 0;

            var vui_parameters_present_flag = gb.readBool();
            if (vui_parameters_present_flag) {
                if (gb.readBool()) {
                    // aspect_ratio_info_present_flag
                    var aspect_ratio_idc = gb.readByte();
                    var sar_w_table = [1, 12, 10, 16, 40, 24, 20, 32, 80, 18, 15, 64, 160, 4, 3, 2];
                    var sar_h_table = [1, 11, 11, 11, 33, 11, 11, 11, 33, 11, 11, 33, 99, 3, 2, 1];

                    if (aspect_ratio_idc > 0 && aspect_ratio_idc < 16) {
                        sar_width = sar_w_table[aspect_ratio_idc - 1];
                        sar_height = sar_h_table[aspect_ratio_idc - 1];
                    } else if (aspect_ratio_idc === 255) {
                        sar_width = gb.readByte() << 8 | gb.readByte();
                        sar_height = gb.readByte() << 8 | gb.readByte();
                    }
                }

                if (gb.readBool()) {
                    // overscan_info_present_flag
                    gb.readBool(); // overscan_appropriate_flag
                }
                if (gb.readBool()) {
                    // video_signal_type_present_flag
                    gb.readBits(4); // video_format & video_full_range_flag
                    if (gb.readBool()) {
                        // colour_description_present_flag
                        gb.readBits(24); // colour_primaries & transfer_characteristics & matrix_coefficients
                    }
                }
                if (gb.readBool()) {
                    // chroma_loc_info_present_flag
                    gb.readUEG(); // chroma_sample_loc_type_top_field
                    gb.readUEG(); // chroma_sample_loc_type_bottom_field
                }
                if (gb.readBool()) {
                    // timing_info_present_flag
                    var num_units_in_tick = gb.readBits(32);
                    var time_scale = gb.readBits(32);
                    fps_fixed = gb.readBool(); // fixed_frame_rate_flag

                    fps_num = time_scale;
                    fps_den = num_units_in_tick * 2;
                    fps = fps_num / fps_den;
                }
            }

            var sarScale = 1;
            if (sar_width !== 1 || sar_height !== 1) {
                sarScale = sar_width / sar_height;
            }

            var crop_unit_x = 0,
                crop_unit_y = 0;
            if (chroma_format_idc === 0) {
                crop_unit_x = 1;
                crop_unit_y = 2 - frame_mbs_only_flag;
            } else {
                var sub_wc = chroma_format_idc === 3 ? 1 : 2;
                var sub_hc = chroma_format_idc === 1 ? 2 : 1;
                crop_unit_x = sub_wc;
                crop_unit_y = sub_hc * (2 - frame_mbs_only_flag);
            }

            var codec_width = (pic_width_in_mbs_minus1 + 1) * 16;
            var codec_height = (2 - frame_mbs_only_flag) * ((pic_height_in_map_units_minus1 + 1) * 16);

            codec_width -= (frame_crop_left_offset + frame_crop_right_offset) * crop_unit_x;
            codec_height -= (frame_crop_top_offset + frame_crop_bottom_offset) * crop_unit_y;

            var present_width = Math.ceil(codec_width * sarScale);

            gb.destroy();
            gb = null;

            return {
                profile_string: profile_string, // baseline, high, high10, ...
                level_string: level_string, // 3, 3.1, 4, 4.1, 5, 5.1, ...
                bit_depth: bit_depth, // 8bit, 10bit, ...
                ref_frames: ref_frames,
                chroma_format: chroma_format, // 4:2:0, 4:2:2, ...
                chroma_format_string: SPSParser.getChromaFormatString(chroma_format),

                frame_rate: {
                    fixed: fps_fixed,
                    fps: fps,
                    fps_den: fps_den,
                    fps_num: fps_num
                },

                sar_ratio: {
                    width: sar_width,
                    height: sar_height
                },

                codec_size: {
                    width: codec_width,
                    height: codec_height
                },

                present_size: {
                    width: present_width,
                    height: codec_height
                }
            };
        }
    }, {
        key: '_skipScalingList',
        value: function _skipScalingList(gb, count) {
            var last_scale = 8,
                next_scale = 8;
            var delta_scale = 0;
            for (var i = 0; i < count; i++) {
                if (next_scale !== 0) {
                    delta_scale = gb.readSEG();
                    next_scale = (last_scale + delta_scale + 256) % 256;
                }
                last_scale = next_scale === 0 ? last_scale : next_scale;
            }
        }
    }, {
        key: 'getProfileString',
        value: function getProfileString(profile_idc) {
            switch (profile_idc) {
                case 66:
                    return 'Baseline';
                case 77:
                    return 'Main';
                case 88:
                    return 'Extended';
                case 100:
                    return 'High';
                case 110:
                    return 'High10';
                case 122:
                    return 'High422';
                case 244:
                    return 'High444';
                default:
                    return 'Unknown';
            }
        }
    }, {
        key: 'getLevelString',
        value: function getLevelString(level_idc) {
            return (level_idc / 10).toFixed(1);
        }
    }, {
        key: 'getChromaFormatString',
        value: function getChromaFormatString(chroma) {
            switch (chroma) {
                case 420:
                    return '4:2:0';
                case 422:
                    return '4:2:2';
                case 444:
                    return '4:4:4';
                default:
                    return 'Unknown';
            }
        }
    }]);

    return SPSParser;
}();

exports.default = SPSParser;

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _exception = __webpack_require__(348);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Exponential-Golomb buffer decoder
var ExpGolomb = function () {
    function ExpGolomb(uint8array) {
        _classCallCheck(this, ExpGolomb);

        this.TAG = 'ExpGolomb';

        this._buffer = uint8array;
        this._buffer_index = 0;
        this._total_bytes = uint8array.byteLength;
        this._total_bits = uint8array.byteLength * 8;
        this._current_word = 0;
        this._current_word_bits_left = 0;
    }

    _createClass(ExpGolomb, [{
        key: 'destroy',
        value: function destroy() {
            this._buffer = null;
        }
    }, {
        key: '_fillCurrentWord',
        value: function _fillCurrentWord() {
            var buffer_bytes_left = this._total_bytes - this._buffer_index;
            if (buffer_bytes_left <= 0) throw new _exception.IllegalStateException('ExpGolomb: _fillCurrentWord() but no bytes available');

            var bytes_read = Math.min(4, buffer_bytes_left);
            var word = new Uint8Array(4);
            word.set(this._buffer.subarray(this._buffer_index, this._buffer_index + bytes_read));
            this._current_word = new DataView(word.buffer).getUint32(0, false);

            this._buffer_index += bytes_read;
            this._current_word_bits_left = bytes_read * 8;
        }
    }, {
        key: 'readBits',
        value: function readBits(bits) {
            if (bits > 32) throw new _exception.InvalidArgumentException('ExpGolomb: readBits() bits exceeded max 32bits!');

            if (bits <= this._current_word_bits_left) {
                var _result = this._current_word >>> 32 - bits;
                this._current_word <<= bits;
                this._current_word_bits_left -= bits;
                return _result;
            }

            var result = this._current_word_bits_left ? this._current_word : 0;
            result = result >>> 32 - this._current_word_bits_left;
            var bits_need_left = bits - this._current_word_bits_left;

            this._fillCurrentWord();
            var bits_read_next = Math.min(bits_need_left, this._current_word_bits_left);

            var result2 = this._current_word >>> 32 - bits_read_next;
            this._current_word <<= bits_read_next;
            this._current_word_bits_left -= bits_read_next;

            result = result << bits_read_next | result2;
            return result;
        }
    }, {
        key: 'readBool',
        value: function readBool() {
            return this.readBits(1) === 1;
        }
    }, {
        key: 'readByte',
        value: function readByte() {
            return this.readBits(8);
        }
    }, {
        key: '_skipLeadingZero',
        value: function _skipLeadingZero() {
            var zero_count = void 0;
            for (zero_count = 0; zero_count < this._current_word_bits_left; zero_count++) {
                if (0 !== (this._current_word & 0x80000000 >>> zero_count)) {
                    this._current_word <<= zero_count;
                    this._current_word_bits_left -= zero_count;
                    return zero_count;
                }
            }
            this._fillCurrentWord();
            return zero_count + this._skipLeadingZero();
        }
    }, {
        key: 'readUEG',
        value: function readUEG() {
            // unsigned exponential golomb
            var leading_zeros = this._skipLeadingZero();
            return this.readBits(leading_zeros + 1) - 1;
        }
    }, {
        key: 'readSEG',
        value: function readSEG() {
            // signed exponential golomb
            var value = this.readUEG();
            if (value & 0x01) {
                return value + 1 >>> 1;
            } else {
                return -1 * (value >>> 1);
            }
        }
    }]);

    return ExpGolomb;
}();

exports.default = ExpGolomb;

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _mp4Generator = __webpack_require__(362);

var _mp4Generator2 = _interopRequireDefault(_mp4Generator);

var _aacSilent = __webpack_require__(363);

var _aacSilent2 = _interopRequireDefault(_aacSilent);

var _browser = __webpack_require__(351);

var _browser2 = _interopRequireDefault(_browser);

var _mediaSegmentInfo = __webpack_require__(364);

var _exception = __webpack_require__(348);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Fragmented mp4 remuxer
var MP4Remuxer = function () {
    function MP4Remuxer(config) {
        _classCallCheck(this, MP4Remuxer);

        this.TAG = 'MP4Remuxer';

        this._config = config;
        this._isLive = config.isLive === true ? true : false;

        this._dtsBase = -1;
        this._dtsBaseInited = false;
        this._audioDtsBase = Infinity;
        this._videoDtsBase = Infinity;
        this._audioNextDts = undefined;
        this._videoNextDts = undefined;
        this._audioStashedLastSample = null;
        this._videoStashedLastSample = null;

        this._audioMeta = null;
        this._videoMeta = null;

        this._audioSegmentInfoList = new _mediaSegmentInfo.MediaSegmentInfoList('audio');
        this._videoSegmentInfoList = new _mediaSegmentInfo.MediaSegmentInfoList('video');

        this._onInitSegment = null;
        this._onMediaSegment = null;

        // Workaround for chrome < 50: Always force first sample as a Random Access Point in media segment
        // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412
        this._forceFirstIDR = _browser2.default.chrome && (_browser2.default.version.major < 50 || _browser2.default.version.major === 50 && _browser2.default.version.build < 2661) ? true : false;

        // Workaround for IE11/Edge: Fill silent aac frame after keyframe-seeking
        // Make audio beginDts equals with video beginDts, in order to fix seek freeze
        this._fillSilentAfterSeek = _browser2.default.msedge || _browser2.default.msie;

        // While only FireFox supports 'audio/mp4, codecs="mp3"', use 'audio/mpeg' for chrome, safari, ...
        this._mp3UseMpegAudio = !_browser2.default.firefox;

        this._fillAudioTimestampGap = this._config.fixAudioTimestampGap;
    }

    _createClass(MP4Remuxer, [{
        key: 'destroy',
        value: function destroy() {
            this._dtsBase = -1;
            this._dtsBaseInited = false;
            this._audioMeta = null;
            this._videoMeta = null;
            this._audioSegmentInfoList.clear();
            this._audioSegmentInfoList = null;
            this._videoSegmentInfoList.clear();
            this._videoSegmentInfoList = null;
            this._onInitSegment = null;
            this._onMediaSegment = null;
        }
    }, {
        key: 'bindDataSource',
        value: function bindDataSource(producer) {
            producer.onDataAvailable = this.remux.bind(this); //对demuer的数据进行封装
            producer.onTrackMetadata = this._onTrackMetadataReceived.bind(this); //生成InitSegment
            return this;
        }

        /* prototype: function onInitSegment(type: string, initSegment: ArrayBuffer): void
           InitSegment: {
               type: string,
               data: ArrayBuffer,
               codec: string,
               container: string
           }
        */

    }, {
        key: 'insertDiscontinuity',
        value: function insertDiscontinuity() {
            this._audioNextDts = this._videoNextDts = undefined;
        }
    }, {
        key: 'seek',
        value: function seek(originalDts) {
            this._audioStashedLastSample = null;
            this._videoStashedLastSample = null;
            this._videoSegmentInfoList.clear();
            this._audioSegmentInfoList.clear();
        }
    }, {
        key: 'remux',
        value: function remux(audioTrack, videoTrack) {
            if (!this._onMediaSegment) {
                throw new _exception.IllegalStateException('MP4Remuxer: onMediaSegment callback must be specificed!');
            }
            if (!this._dtsBaseInited) {
                this._calculateDtsBase(audioTrack, videoTrack);
            }
            this._remuxVideo(videoTrack);
            this._remuxAudio(audioTrack);
        }
    }, {
        key: '_onTrackMetadataReceived',
        value: function _onTrackMetadataReceived(type, metadata) {
            var metabox = null;

            var container = 'mp4';
            var codec = metadata.codec;

            if (type === 'audio') {
                this._audioMeta = metadata;
                if (metadata.codec === 'mp3' && this._mp3UseMpegAudio) {
                    // 'audio/mpeg' for MP3 audio track
                    container = 'mpeg';
                    codec = '';
                    metabox = new Uint8Array();
                } else {
                    // 'audio/mp4, codecs="codec"'
                    metabox = _mp4Generator2.default.generateInitSegment(metadata);
                }
            } else if (type === 'video') {
                this._videoMeta = metadata;
                metabox = _mp4Generator2.default.generateInitSegment(metadata);
            } else {
                return;
            }

            // dispatch metabox (Initialization Segment)
            if (!this._onInitSegment) {
                throw new _exception.IllegalStateException('MP4Remuxer: onInitSegment callback must be specified!');
            }
            this._onInitSegment(type, {
                type: type,
                data: metabox.buffer,
                codec: codec,
                container: type + '/' + container,
                mediaDuration: metadata.duration // in timescale 1000 (milliseconds)
            });
        }
    }, {
        key: '_calculateDtsBase',
        value: function _calculateDtsBase(audioTrack, videoTrack) {
            if (this._dtsBaseInited) {
                return;
            }

            if (audioTrack.samples && audioTrack.samples.length) {
                this._audioDtsBase = audioTrack.samples[0].dts;
            }
            if (videoTrack.samples && videoTrack.samples.length) {
                this._videoDtsBase = videoTrack.samples[0].dts;
            }

            this._dtsBase = Math.min(this._audioDtsBase, this._videoDtsBase);
            this._dtsBaseInited = true;
        }
    }, {
        key: 'flushStashedSamples',
        value: function flushStashedSamples() {
            var videoSample = this._videoStashedLastSample;
            var audioSample = this._audioStashedLastSample;

            var videoTrack = {
                type: 'video',
                id: 1,
                sequenceNumber: 0,
                samples: [],
                length: 0
            };

            if (videoSample != null) {
                videoTrack.samples.push(videoSample);
                videoTrack.length = videoSample.length;
            }

            var audioTrack = {
                type: 'audio',
                id: 2,
                sequenceNumber: 0,
                samples: [],
                length: 0
            };

            if (audioSample != null) {
                audioTrack.samples.push(audioSample);
                audioTrack.length = audioSample.length;
            }

            this._videoStashedLastSample = null;
            this._audioStashedLastSample = null;

            this._remuxVideo(videoTrack, true);
            this._remuxAudio(audioTrack, true);
        }
    }, {
        key: '_remuxAudio',
        value: function _remuxAudio(audioTrack, force) {
            if (this._audioMeta == null) {
                return;
            }

            var track = audioTrack;
            var samples = track.samples;
            var dtsCorrection = undefined;
            var firstDts = -1,
                lastDts = -1,
                lastPts = -1;
            var refSampleDuration = this._audioMeta.refSampleDuration;

            var mpegRawTrack = this._audioMeta.codec === 'mp3' && this._mp3UseMpegAudio;
            var firstSegmentAfterSeek = this._dtsBaseInited && this._audioNextDts === undefined;

            var insertPrefixSilentFrame = false;

            if (!samples || samples.length === 0) {
                return;
            }
            if (samples.length === 1 && !force) {
                // If [sample count in current batch] === 1 && (force != true)
                // Ignore and keep in demuxer's queue
                return;
            } // else if (force === true) do remux

            var offset = 0;
            var mdatbox = null;
            var mdatBytes = 0;

            // calculate initial mdat size
            if (mpegRawTrack) {
                // for raw mpeg buffer
                offset = 0;
                mdatBytes = track.length;
            } else {
                // for fmp4 mdat box
                offset = 8; // size + type
                mdatBytes = 8 + track.length;
            }

            var lastSample = null;

            // Pop the lastSample and waiting for stash
            if (samples.length > 1) {
                lastSample = samples.pop();
                mdatBytes -= lastSample.length;
            }

            // Insert [stashed lastSample in the previous batch] to the front
            if (this._audioStashedLastSample != null) {
                var sample = this._audioStashedLastSample;
                this._audioStashedLastSample = null;
                samples.unshift(sample);
                mdatBytes += sample.length;
            }

            // Stash the lastSample of current batch, waiting for next batch
            if (lastSample != null) {
                this._audioStashedLastSample = lastSample;
            }

            var firstSampleOriginalDts = samples[0].dts - this._dtsBase;

            // calculate dtsCorrection
            if (this._audioNextDts) {
                dtsCorrection = firstSampleOriginalDts - this._audioNextDts;
            } else {
                // this._audioNextDts == undefined
                if (this._audioSegmentInfoList.isEmpty()) {
                    dtsCorrection = 0;
                    if (this._fillSilentAfterSeek && !this._videoSegmentInfoList.isEmpty()) {
                        if (this._audioMeta.originalCodec !== 'mp3') {
                            insertPrefixSilentFrame = true;
                        }
                    }
                } else {
                    var _lastSample = this._audioSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);
                    if (_lastSample != null) {
                        var distance = firstSampleOriginalDts - (_lastSample.originalDts + _lastSample.duration);
                        if (distance <= 3) {
                            distance = 0;
                        }
                        var expectedDts = _lastSample.dts + _lastSample.duration + distance;
                        dtsCorrection = firstSampleOriginalDts - expectedDts;
                    } else {
                        // lastSample == null, cannot found
                        dtsCorrection = 0;
                    }
                }
            }

            if (insertPrefixSilentFrame) {
                // align audio segment beginDts to match with current video segment's beginDts
                var firstSampleDts = firstSampleOriginalDts - dtsCorrection;
                var videoSegment = this._videoSegmentInfoList.getLastSegmentBefore(firstSampleOriginalDts);
                if (videoSegment != null && videoSegment.beginDts < firstSampleDts) {
                    var silentUnit = _aacSilent2.default.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);
                    if (silentUnit) {
                        var dts = videoSegment.beginDts;
                        var silentFrameDuration = firstSampleDts - videoSegment.beginDts;
                        _logger2.default.v(this.TAG, 'InsertPrefixSilentAudio: dts: ' + dts + ', duration: ' + silentFrameDuration);
                        samples.unshift({ unit: silentUnit, dts: dts, pts: dts });
                        mdatBytes += silentUnit.byteLength;
                    } // silentUnit == null: Cannot generate, skip
                } else {
                    insertPrefixSilentFrame = false;
                }
            }

            var mp4Samples = [];

            // Correct dts for each sample, and calculate sample duration. Then output to mp4Samples
            for (var i = 0; i < samples.length; i++) {
                var _sample = samples[i];
                var unit = _sample.unit;
                var originalDts = _sample.dts - this._dtsBase;
                var _dts = originalDts - dtsCorrection;

                if (firstDts === -1) {
                    firstDts = _dts;
                }

                var sampleDuration = 0;

                if (i !== samples.length - 1) {
                    var nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;
                    sampleDuration = nextDts - _dts;
                } else {
                    // the last sample
                    if (lastSample != null) {
                        // use stashed sample's dts to calculate sample duration
                        var _nextDts = lastSample.dts - this._dtsBase - dtsCorrection;
                        sampleDuration = _nextDts - _dts;
                    } else if (mp4Samples.length >= 1) {
                        // use second last sample duration
                        sampleDuration = mp4Samples[mp4Samples.length - 1].duration;
                    } else {
                        // the only one sample, use reference sample duration
                        sampleDuration = Math.floor(refSampleDuration);
                    }
                }

                var needFillSilentFrames = false;
                var silentFrames = null;

                // Silent frame generation, if large timestamp gap detected && config.fixAudioTimestampGap
                if (sampleDuration > refSampleDuration * 1.5 && this._audioMeta.codec !== 'mp3' && this._fillAudioTimestampGap && !_browser2.default.safari) {
                    // We need to insert silent frames to fill timestamp gap
                    needFillSilentFrames = true;
                    var delta = Math.abs(sampleDuration - refSampleDuration);
                    var frameCount = Math.ceil(delta / refSampleDuration);
                    var currentDts = _dts + refSampleDuration; // Notice: in float

                    _logger2.default.w(this.TAG, 'Large audio timestamp gap detected, may cause AV sync to drift. ' + 'Silent frames will be generated to avoid unsync.\n' + ('dts: ' + (_dts + sampleDuration) + ' ms, expected: ' + (_dts + Math.round(refSampleDuration)) + ' ms, ') + ('delta: ' + Math.round(delta) + ' ms, generate: ' + frameCount + ' frames'));

                    var _silentUnit = _aacSilent2.default.getSilentFrame(this._audioMeta.originalCodec, this._audioMeta.channelCount);
                    if (_silentUnit == null) {
                        _logger2.default.w(this.TAG, 'Unable to generate silent frame for ' + (this._audioMeta.originalCodec + ' with ' + this._audioMeta.channelCount + ' channels, repeat last frame'));
                        // Repeat last frame
                        _silentUnit = unit;
                    }
                    silentFrames = [];

                    for (var j = 0; j < frameCount; j++) {
                        var intDts = Math.round(currentDts); // round to integer
                        if (silentFrames.length > 0) {
                            // Set previous frame sample duration
                            var previousFrame = silentFrames[silentFrames.length - 1];
                            previousFrame.duration = intDts - previousFrame.dts;
                        }
                        var frame = {
                            dts: intDts,
                            pts: intDts,
                            cts: 0,
                            unit: _silentUnit,
                            size: _silentUnit.byteLength,
                            duration: 0, // wait for next sample
                            originalDts: originalDts,
                            flags: {
                                isLeading: 0,
                                dependsOn: 1,
                                isDependedOn: 0,
                                hasRedundancy: 0
                            }
                        };
                        silentFrames.push(frame);
                        mdatBytes += frame.size;
                        currentDts += refSampleDuration;
                    }

                    // last frame: align end time to next frame dts
                    var lastFrame = silentFrames[silentFrames.length - 1];
                    lastFrame.duration = _dts + sampleDuration - lastFrame.dts;

                    // silentFrames.forEach((frame) => {
                    //     Log.w(this.TAG, `SilentAudio: dts: ${frame.dts}, duration: ${frame.duration}`);
                    // });

                    // Set correct sample duration for current frame
                    sampleDuration = Math.round(refSampleDuration);
                }

                mp4Samples.push({
                    dts: _dts,
                    pts: _dts,
                    cts: 0,
                    unit: _sample.unit,
                    size: _sample.unit.byteLength,
                    duration: sampleDuration,
                    originalDts: originalDts,
                    flags: {
                        isLeading: 0,
                        dependsOn: 1,
                        isDependedOn: 0,
                        hasRedundancy: 0
                    }
                });

                if (needFillSilentFrames) {
                    // Silent frames should be inserted after wrong-duration frame
                    mp4Samples.push.apply(mp4Samples, silentFrames);
                }
            }

            // allocate mdatbox
            if (mpegRawTrack) {
                // allocate for raw mpeg buffer
                mdatbox = new Uint8Array(mdatBytes);
            } else {
                // allocate for fmp4 mdat box
                mdatbox = new Uint8Array(mdatBytes);
                // size field
                mdatbox[0] = mdatBytes >>> 24 & 0xFF;
                mdatbox[1] = mdatBytes >>> 16 & 0xFF;
                mdatbox[2] = mdatBytes >>> 8 & 0xFF;
                mdatbox[3] = mdatBytes & 0xFF;
                // type field (fourCC)
                mdatbox.set(_mp4Generator2.default.types.mdat, 4);
            }

            // Write samples into mdatbox
            for (var _i = 0; _i < mp4Samples.length; _i++) {
                var _unit = mp4Samples[_i].unit;
                mdatbox.set(_unit, offset);
                offset += _unit.byteLength;
            }

            var latest = mp4Samples[mp4Samples.length - 1];
            lastDts = latest.dts + latest.duration;
            this._audioNextDts = lastDts;

            // fill media segment info & add to info list
            var info = new _mediaSegmentInfo.MediaSegmentInfo();
            info.beginDts = firstDts;
            info.endDts = lastDts;
            info.beginPts = firstDts;
            info.endPts = lastDts;
            info.originalBeginDts = mp4Samples[0].originalDts;
            info.originalEndDts = latest.originalDts + latest.duration;
            info.firstSample = new _mediaSegmentInfo.SampleInfo(mp4Samples[0].dts, mp4Samples[0].pts, mp4Samples[0].duration, mp4Samples[0].originalDts, false);
            info.lastSample = new _mediaSegmentInfo.SampleInfo(latest.dts, latest.pts, latest.duration, latest.originalDts, false);
            if (!this._isLive) {
                this._audioSegmentInfoList.append(info);
            }

            track.samples = mp4Samples;
            track.sequenceNumber++;

            var moofbox = null;

            if (mpegRawTrack) {
                // Generate empty buffer, because useless for raw mpeg
                moofbox = new Uint8Array();
            } else {
                // Generate moof for fmp4 segment
                moofbox = _mp4Generator2.default.moof(track, firstDts);
            }

            track.samples = [];
            track.length = 0;

            var segment = {
                type: 'audio',
                data: this._mergeBoxes(moofbox, mdatbox).buffer,
                sampleCount: mp4Samples.length,
                info: info
            };

            if (mpegRawTrack && firstSegmentAfterSeek) {
                // For MPEG audio stream in MSE, if seeking occurred, before appending new buffer
                // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.
                segment.timestampOffset = firstDts;
            }

            this._onMediaSegment('audio', segment);
        }
    }, {
        key: '_remuxVideo',
        value: function _remuxVideo(videoTrack, force) {
            if (this._videoMeta == null) {
                return;
            }

            var track = videoTrack;
            var samples = track.samples;
            var dtsCorrection = undefined;
            var firstDts = -1,
                lastDts = -1;
            var firstPts = -1,
                lastPts = -1;

            if (!samples || samples.length === 0) {
                return;
            }
            if (samples.length === 1 && !force) {
                // If [sample count in current batch] === 1 && (force != true)
                // Ignore and keep in demuxer's queue
                return;
            } // else if (force === true) do remux

            var offset = 8;
            var mdatbox = null;
            var mdatBytes = 8 + videoTrack.length;

            var lastSample = null;

            // Pop the lastSample and waiting for stash
            if (samples.length > 1) {
                lastSample = samples.pop();
                mdatBytes -= lastSample.length;
            }

            // Insert [stashed lastSample in the previous batch] to the front
            if (this._videoStashedLastSample != null) {
                var sample = this._videoStashedLastSample;
                this._videoStashedLastSample = null;
                samples.unshift(sample);
                mdatBytes += sample.length;
            }

            // Stash the lastSample of current batch, waiting for next batch
            if (lastSample != null) {
                this._videoStashedLastSample = lastSample;
            }

            var firstSampleOriginalDts = samples[0].dts - this._dtsBase;

            // calculate dtsCorrection
            if (this._videoNextDts) {
                dtsCorrection = firstSampleOriginalDts - this._videoNextDts;
            } else {
                // this._videoNextDts == undefined
                if (this._videoSegmentInfoList.isEmpty()) {
                    dtsCorrection = 0;
                } else {
                    var _lastSample2 = this._videoSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);
                    if (_lastSample2 != null) {
                        var distance = firstSampleOriginalDts - (_lastSample2.originalDts + _lastSample2.duration);
                        if (distance <= 3) {
                            distance = 0;
                        }
                        var expectedDts = _lastSample2.dts + _lastSample2.duration + distance;
                        dtsCorrection = firstSampleOriginalDts - expectedDts;
                    } else {
                        // lastSample == null, cannot found
                        dtsCorrection = 0;
                    }
                }
            }

            var info = new _mediaSegmentInfo.MediaSegmentInfo();
            var mp4Samples = [];

            // Correct dts for each sample, and calculate sample duration. Then output to mp4Samples
            for (var i = 0; i < samples.length; i++) {
                var _sample2 = samples[i];
                var originalDts = _sample2.dts - this._dtsBase;
                var isKeyframe = _sample2.isKeyframe;
                var dts = originalDts - dtsCorrection;
                var cts = _sample2.cts;
                var pts = dts + cts;

                if (firstDts === -1) {
                    firstDts = dts;
                    firstPts = pts;
                }

                var sampleDuration = 0;

                if (i !== samples.length - 1) {
                    var nextDts = samples[i + 1].dts - this._dtsBase - dtsCorrection;
                    sampleDuration = nextDts - dts;
                } else {
                    // the last sample
                    if (lastSample != null) {
                        // use stashed sample's dts to calculate sample duration
                        var _nextDts2 = lastSample.dts - this._dtsBase - dtsCorrection;
                        sampleDuration = _nextDts2 - dts;
                    } else if (mp4Samples.length >= 1) {
                        // use second last sample duration
                        sampleDuration = mp4Samples[mp4Samples.length - 1].duration;
                    } else {
                        // the only one sample, use reference sample duration
                        sampleDuration = Math.floor(this._videoMeta.refSampleDuration);
                    }
                }

                if (isKeyframe) {
                    var syncPoint = new _mediaSegmentInfo.SampleInfo(dts, pts, sampleDuration, _sample2.dts, true);
                    syncPoint.fileposition = _sample2.fileposition;
                    info.appendSyncPoint(syncPoint);
                }

                mp4Samples.push({
                    dts: dts,
                    pts: pts,
                    cts: cts,
                    units: _sample2.units,
                    size: _sample2.length,
                    isKeyframe: isKeyframe,
                    duration: sampleDuration,
                    originalDts: originalDts,
                    flags: {
                        isLeading: 0,
                        dependsOn: isKeyframe ? 2 : 1,
                        isDependedOn: isKeyframe ? 1 : 0,
                        hasRedundancy: 0,
                        isNonSync: isKeyframe ? 0 : 1
                    }
                });
            }

            // allocate mdatbox
            mdatbox = new Uint8Array(mdatBytes);
            mdatbox[0] = mdatBytes >>> 24 & 0xFF;
            mdatbox[1] = mdatBytes >>> 16 & 0xFF;
            mdatbox[2] = mdatBytes >>> 8 & 0xFF;
            mdatbox[3] = mdatBytes & 0xFF;
            mdatbox.set(_mp4Generator2.default.types.mdat, 4);

            // Write samples into mdatbox
            for (var _i2 = 0; _i2 < mp4Samples.length; _i2++) {
                var units = mp4Samples[_i2].units;
                while (units.length) {
                    var unit = units.shift();
                    var data = unit.data;
                    mdatbox.set(data, offset);
                    offset += data.byteLength;
                }
            }

            var latest = mp4Samples[mp4Samples.length - 1];
            lastDts = latest.dts + latest.duration;
            lastPts = latest.pts + latest.duration;
            this._videoNextDts = lastDts;

            // fill media segment info & add to info list
            info.beginDts = firstDts;
            info.endDts = lastDts;
            info.beginPts = firstPts;
            info.endPts = lastPts;
            info.originalBeginDts = mp4Samples[0].originalDts;
            info.originalEndDts = latest.originalDts + latest.duration;
            info.firstSample = new _mediaSegmentInfo.SampleInfo(mp4Samples[0].dts, mp4Samples[0].pts, mp4Samples[0].duration, mp4Samples[0].originalDts, mp4Samples[0].isKeyframe);
            info.lastSample = new _mediaSegmentInfo.SampleInfo(latest.dts, latest.pts, latest.duration, latest.originalDts, latest.isKeyframe);
            if (!this._isLive) {
                this._videoSegmentInfoList.append(info);
            }

            track.samples = mp4Samples;
            track.sequenceNumber++;

            // workaround for chrome < 50: force first sample as a random access point
            // see https://bugs.chromium.org/p/chromium/issues/detail?id=229412
            if (this._forceFirstIDR) {
                var flags = mp4Samples[0].flags;
                flags.dependsOn = 2;
                flags.isNonSync = 0;
            }

            var moofbox = _mp4Generator2.default.moof(track, firstDts);
            track.samples = [];
            track.length = 0;

            this._onMediaSegment('video', {
                type: 'video',
                data: this._mergeBoxes(moofbox, mdatbox).buffer,
                sampleCount: mp4Samples.length,
                info: info
            });
        }
    }, {
        key: '_mergeBoxes',
        value: function _mergeBoxes(moof, mdat) {
            var result = new Uint8Array(moof.byteLength + mdat.byteLength);
            result.set(moof, 0);
            result.set(mdat, moof.byteLength);
            return result;
        }
    }, {
        key: 'onInitSegment',
        get: function get() {
            return this._onInitSegment;
        },
        set: function set(callback) {
            this._onInitSegment = callback;
        }

        /* prototype: function onMediaSegment(type: string, mediaSegment: MediaSegment): void
           MediaSegment: {
               type: string,
               data: ArrayBuffer,
               sampleCount: int32
               info: MediaSegmentInfo
           }
        */

    }, {
        key: 'onMediaSegment',
        get: function get() {
            return this._onMediaSegment;
        },
        set: function set(callback) {
            this._onMediaSegment = callback;
        }
    }]);

    return MP4Remuxer;
}();

exports.default = MP4Remuxer;

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//  MP4 boxes generator for ISO BMFF (ISO Base Media File Format, defined in ISO/IEC 14496-12)
var MP4 = function () {
    function MP4() {
        _classCallCheck(this, MP4);
    }

    _createClass(MP4, null, [{
        key: 'init',
        value: function init() {
            MP4.types = {
                avc1: [], avcC: [], btrt: [], dinf: [],
                dref: [], esds: [], ftyp: [], hdlr: [],
                mdat: [], mdhd: [], mdia: [], mfhd: [],
                minf: [], moof: [], moov: [], mp4a: [],
                mvex: [], mvhd: [], sdtp: [], stbl: [],
                stco: [], stsc: [], stsd: [], stsz: [],
                stts: [], tfdt: [], tfhd: [], traf: [],
                trak: [], trun: [], trex: [], tkhd: [],
                vmhd: [], smhd: [], '.mp3': []
            };

            for (var name in MP4.types) {
                if (MP4.types.hasOwnProperty(name)) {
                    MP4.types[name] = [name.charCodeAt(0), name.charCodeAt(1), name.charCodeAt(2), name.charCodeAt(3)];
                }
            }

            var constants = MP4.constants = {};

            constants.FTYP = new Uint8Array([0x69, 0x73, 0x6F, 0x6D, // major_brand: isom
            0x0, 0x0, 0x0, 0x1, // minor_version: 0x01
            0x69, 0x73, 0x6F, 0x6D, // isom
            0x61, 0x76, 0x63, 0x31 // avc1
            ]);

            constants.STSD_PREFIX = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
            0x00, 0x00, 0x00, 0x01 // entry_count
            ]);

            constants.STTS = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
            0x00, 0x00, 0x00, 0x00 // entry_count
            ]);

            constants.STSC = constants.STCO = constants.STTS;

            constants.STSZ = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
            0x00, 0x00, 0x00, 0x00, // sample_size
            0x00, 0x00, 0x00, 0x00 // sample_count
            ]);

            constants.HDLR_VIDEO = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
            0x00, 0x00, 0x00, 0x00, // pre_defined
            0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'
            0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x69, 0x64, 0x65, 0x6F, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00 // name: VideoHandler
            ]);

            constants.HDLR_AUDIO = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
            0x00, 0x00, 0x00, 0x00, // pre_defined
            0x73, 0x6F, 0x75, 0x6E, // handler_type: 'soun'
            0x00, 0x00, 0x00, 0x00, // reserved: 3 * 4 bytes
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x6F, 0x75, 0x6E, 0x64, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x72, 0x00 // name: SoundHandler
            ]);

            constants.DREF = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
            0x00, 0x00, 0x00, 0x01, // entry_count
            0x00, 0x00, 0x00, 0x0C, // entry_size
            0x75, 0x72, 0x6C, 0x20, // type 'url '
            0x00, 0x00, 0x00, 0x01 // version(0) + flags
            ]);

            // Sound media header
            constants.SMHD = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
            0x00, 0x00, 0x00, 0x00 // balance(2) + reserved(2)
            ]);

            // video media header
            constants.VMHD = new Uint8Array([0x00, 0x00, 0x00, 0x01, // version(0) + flags
            0x00, 0x00, // graphicsmode: 2 bytes
            0x00, 0x00, 0x00, 0x00, // opcolor: 3 * 2 bytes
            0x00, 0x00]);
        }

        // Generate a box

    }, {
        key: 'box',
        value: function box(type) {
            var size = 8;
            var result = null;
            var datas = Array.prototype.slice.call(arguments, 1);
            var arrayCount = datas.length;

            for (var i = 0; i < arrayCount; i++) {
                size += datas[i].byteLength;
            }

            result = new Uint8Array(size);
            result[0] = size >>> 24 & 0xFF; // size
            result[1] = size >>> 16 & 0xFF;
            result[2] = size >>> 8 & 0xFF;
            result[3] = size & 0xFF;

            result.set(type, 4); // type

            var offset = 8;
            for (var _i = 0; _i < arrayCount; _i++) {
                // data body
                result.set(datas[_i], offset);
                offset += datas[_i].byteLength;
            }

            return result;
        }

        // emit ftyp & moov

    }, {
        key: 'generateInitSegment',
        value: function generateInitSegment(meta) {
            var ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);
            var moov = MP4.moov(meta);

            var result = new Uint8Array(ftyp.byteLength + moov.byteLength);
            result.set(ftyp, 0);
            result.set(moov, ftyp.byteLength);
            return result;
        }

        // Movie metadata box

    }, {
        key: 'moov',
        value: function moov(meta) {
            var mvhd = MP4.mvhd(meta.timescale, meta.duration);
            var trak = MP4.trak(meta);
            var mvex = MP4.mvex(meta);
            return MP4.box(MP4.types.moov, mvhd, trak, mvex);
        }

        // Movie header box

    }, {
        key: 'mvhd',
        value: function mvhd(timescale, duration) {
            return MP4.box(MP4.types.mvhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
            0x00, 0x00, 0x00, 0x00, // creation_time
            0x00, 0x00, 0x00, 0x00, // modification_time
            timescale >>> 24 & 0xFF, // timescale: 4 bytes
            timescale >>> 16 & 0xFF, timescale >>> 8 & 0xFF, timescale & 0xFF, duration >>> 24 & 0xFF, // duration: 4 bytes
            duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x00, 0x01, 0x00, 0x00, // Preferred rate: 1.0
            0x01, 0x00, 0x00, 0x00, // PreferredVolume(1.0, 2bytes) + reserved(2bytes)
            0x00, 0x00, 0x00, 0x00, // reserved: 4 + 4 bytes
            0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // ----end composition matrix----
            0x00, 0x00, 0x00, 0x00, // ----begin pre_defined 6 * 4 bytes----
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ----end pre_defined 6 * 4 bytes----
            0xFF, 0xFF, 0xFF, 0xFF // next_track_ID
            ]));
        }

        // Track box

    }, {
        key: 'trak',
        value: function trak(meta) {
            return MP4.box(MP4.types.trak, MP4.tkhd(meta), MP4.mdia(meta));
        }

        // Track header box

    }, {
        key: 'tkhd',
        value: function tkhd(meta) {
            var trackId = meta.id,
                duration = meta.duration;
            var width = meta.presentWidth,
                height = meta.presentHeight;

            return MP4.box(MP4.types.tkhd, new Uint8Array([0x00, 0x00, 0x00, 0x07, // version(0) + flags
            0x00, 0x00, 0x00, 0x00, // creation_time
            0x00, 0x00, 0x00, 0x00, // modification_time
            trackId >>> 24 & 0xFF, // track_ID: 4 bytes
            trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF, 0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes
            duration >>> 24 & 0xFF, // duration: 4 bytes
            duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // layer(2bytes) + alternate_group(2bytes)
            0x00, 0x00, 0x00, 0x00, // volume(2bytes) + reserved(2bytes)
            0x00, 0x01, 0x00, 0x00, // ----begin composition matrix----
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // ----end composition matrix----
            width >>> 8 & 0xFF, // width and height
            width & 0xFF, 0x00, 0x00, height >>> 8 & 0xFF, height & 0xFF, 0x00, 0x00]));
        }

        // Media Box

    }, {
        key: 'mdia',
        value: function mdia(meta) {
            return MP4.box(MP4.types.mdia, MP4.mdhd(meta), MP4.hdlr(meta), MP4.minf(meta));
        }

        // Media header box

    }, {
        key: 'mdhd',
        value: function mdhd(meta) {
            var timescale = meta.timescale;
            var duration = meta.duration;
            return MP4.box(MP4.types.mdhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
            0x00, 0x00, 0x00, 0x00, // creation_time
            0x00, 0x00, 0x00, 0x00, // modification_time
            timescale >>> 24 & 0xFF, // timescale: 4 bytes
            timescale >>> 16 & 0xFF, timescale >>> 8 & 0xFF, timescale & 0xFF, duration >>> 24 & 0xFF, // duration: 4 bytes
            duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, 0x55, 0xC4, // language: und (undetermined)
            0x00, 0x00 // pre_defined = 0
            ]));
        }

        // Media handler reference box

    }, {
        key: 'hdlr',
        value: function hdlr(meta) {
            var data = null;
            if (meta.type === 'audio') {
                data = MP4.constants.HDLR_AUDIO;
            } else {
                data = MP4.constants.HDLR_VIDEO;
            }
            return MP4.box(MP4.types.hdlr, data);
        }

        // Media infomation box

    }, {
        key: 'minf',
        value: function minf(meta) {
            var xmhd = null;
            if (meta.type === 'audio') {
                xmhd = MP4.box(MP4.types.smhd, MP4.constants.SMHD);
            } else {
                xmhd = MP4.box(MP4.types.vmhd, MP4.constants.VMHD);
            }
            return MP4.box(MP4.types.minf, xmhd, MP4.dinf(), MP4.stbl(meta));
        }

        // Data infomation box

    }, {
        key: 'dinf',
        value: function dinf() {
            var result = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, MP4.constants.DREF));
            return result;
        }

        // Sample table box

    }, {
        key: 'stbl',
        value: function stbl(meta) {
            var result = MP4.box(MP4.types.stbl, // type: stbl
            MP4.stsd(meta), // Sample Description Table
            MP4.box(MP4.types.stts, MP4.constants.STTS), // Time-To-Sample
            MP4.box(MP4.types.stsc, MP4.constants.STSC), // Sample-To-Chunk
            MP4.box(MP4.types.stsz, MP4.constants.STSZ), // Sample size
            MP4.box(MP4.types.stco, MP4.constants.STCO) // Chunk offset
            );
            return result;
        }

        // Sample description box

    }, {
        key: 'stsd',
        value: function stsd(meta) {
            if (meta.type === 'audio') {
                if (meta.codec === 'mp3') {
                    return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp3(meta));
                }
                // else: aac -> mp4a
                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.mp4a(meta));
            } else {
                return MP4.box(MP4.types.stsd, MP4.constants.STSD_PREFIX, MP4.avc1(meta));
            }
        }
    }, {
        key: 'mp3',
        value: function mp3(meta) {
            var channelCount = meta.channelCount;
            var sampleRate = meta.audioSampleRate;

            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)
            0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)
            0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes
            0x00, 0x00, 0x00, 0x00, 0x00, channelCount, // channelCount(2)
            0x00, 0x10, // sampleSize(2)
            0x00, 0x00, 0x00, 0x00, // reserved(4)
            sampleRate >>> 8 & 0xFF, // Audio sample rate
            sampleRate & 0xFF, 0x00, 0x00]);

            return MP4.box(MP4.types['.mp3'], data);
        }
    }, {
        key: 'mp4a',
        value: function mp4a(meta) {
            var channelCount = meta.channelCount;
            var sampleRate = meta.audioSampleRate;

            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)
            0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)
            0x00, 0x00, 0x00, 0x00, // reserved: 2 * 4 bytes
            0x00, 0x00, 0x00, 0x00, 0x00, channelCount, // channelCount(2)
            0x00, 0x10, // sampleSize(2)
            0x00, 0x00, 0x00, 0x00, // reserved(4)
            sampleRate >>> 8 & 0xFF, // Audio sample rate
            sampleRate & 0xFF, 0x00, 0x00]);

            return MP4.box(MP4.types.mp4a, data, MP4.esds(meta));
        }
    }, {
        key: 'esds',
        value: function esds(meta) {
            var config = meta.config || [];
            var configSize = config.length;
            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version 0 + flags

            0x03, // descriptor_type
            0x17 + configSize, // length3
            0x00, 0x01, // es_id
            0x00, // stream_priority

            0x04, // descriptor_type
            0x0F + configSize, // length
            0x40, // codec: mpeg4_audio
            0x15, // stream_type: Audio
            0x00, 0x00, 0x00, // buffer_size
            0x00, 0x00, 0x00, 0x00, // maxBitrate
            0x00, 0x00, 0x00, 0x00, // avgBitrate

            0x05 // descriptor_type
            ].concat([configSize]).concat(config).concat([0x06, 0x01, 0x02 // GASpecificConfig
            ]));
            return MP4.box(MP4.types.esds, data);
        }
    }, {
        key: 'avc1',
        value: function avc1(meta) {
            var avcc = meta.avcc;
            var width = meta.codecWidth,
                height = meta.codecHeight;

            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // reserved(4)
            0x00, 0x00, 0x00, 0x01, // reserved(2) + data_reference_index(2)
            0x00, 0x00, 0x00, 0x00, // pre_defined(2) + reserved(2)
            0x00, 0x00, 0x00, 0x00, // pre_defined: 3 * 4 bytes
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, width >>> 8 & 0xFF, // width: 2 bytes
            width & 0xFF, height >>> 8 & 0xFF, // height: 2 bytes
            height & 0xFF, 0x00, 0x48, 0x00, 0x00, // horizresolution: 4 bytes
            0x00, 0x48, 0x00, 0x00, // vertresolution: 4 bytes
            0x00, 0x00, 0x00, 0x00, // reserved: 4 bytes
            0x00, 0x01, // frame_count
            0x0A, // strlen
            0x78, 0x71, 0x71, 0x2F, // compressorname: 32 bytes
            0x66, 0x6C, 0x76, 0x2E, 0x6A, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, // depth
            0xFF, 0xFF // pre_defined = -1
            ]);
            return MP4.box(MP4.types.avc1, data, MP4.box(MP4.types.avcC, avcc));
        }

        // Movie Extends box

    }, {
        key: 'mvex',
        value: function mvex(meta) {
            return MP4.box(MP4.types.mvex, MP4.trex(meta));
        }

        // Track Extends box

    }, {
        key: 'trex',
        value: function trex(meta) {
            var trackId = meta.id;
            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) + flags
            trackId >>> 24 & 0xFF, // track_ID
            trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF, 0x00, 0x00, 0x00, 0x01, // default_sample_description_index
            0x00, 0x00, 0x00, 0x00, // default_sample_duration
            0x00, 0x00, 0x00, 0x00, // default_sample_size
            0x00, 0x01, 0x00, 0x01 // default_sample_flags
            ]);
            return MP4.box(MP4.types.trex, data);
        }

        // Movie fragment box

    }, {
        key: 'moof',
        value: function moof(track, baseMediaDecodeTime) {
            return MP4.box(MP4.types.moof, MP4.mfhd(track.sequenceNumber), MP4.traf(track, baseMediaDecodeTime));
        }
    }, {
        key: 'mfhd',
        value: function mfhd(sequenceNumber) {
            var data = new Uint8Array([0x00, 0x00, 0x00, 0x00, sequenceNumber >>> 24 & 0xFF, // sequence_number: int32
            sequenceNumber >>> 16 & 0xFF, sequenceNumber >>> 8 & 0xFF, sequenceNumber & 0xFF]);
            return MP4.box(MP4.types.mfhd, data);
        }

        // Track fragment box

    }, {
        key: 'traf',
        value: function traf(track, baseMediaDecodeTime) {
            var trackId = track.id;

            // Track fragment header box
            var tfhd = MP4.box(MP4.types.tfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) & flags
            trackId >>> 24 & 0xFF, // track_ID
            trackId >>> 16 & 0xFF, trackId >>> 8 & 0xFF, trackId & 0xFF]));
            // Track Fragment Decode Time
            var tfdt = MP4.box(MP4.types.tfdt, new Uint8Array([0x00, 0x00, 0x00, 0x00, // version(0) & flags
            baseMediaDecodeTime >>> 24 & 0xFF, // baseMediaDecodeTime: int32
            baseMediaDecodeTime >>> 16 & 0xFF, baseMediaDecodeTime >>> 8 & 0xFF, baseMediaDecodeTime & 0xFF]));
            var sdtp = MP4.sdtp(track);
            var trun = MP4.trun(track, sdtp.byteLength + 16 + 16 + 8 + 16 + 8 + 8);

            return MP4.box(MP4.types.traf, tfhd, tfdt, trun, sdtp);
        }

        // Sample Dependency Type box

    }, {
        key: 'sdtp',
        value: function sdtp(track) {
            var samples = track.samples || [];
            var sampleCount = samples.length;
            var data = new Uint8Array(4 + sampleCount);
            // 0~4 bytes: version(0) & flags
            for (var i = 0; i < sampleCount; i++) {
                var flags = samples[i].flags;
                data[i + 4] = flags.isLeading << 6 | // is_leading: 2 (bit)
                flags.dependsOn << 4 // sample_depends_on
                | flags.isDependedOn << 2 // sample_is_depended_on
                | flags.hasRedundancy; // sample_has_redundancy
            }
            return MP4.box(MP4.types.sdtp, data);
        }

        // Track fragment run box

    }, {
        key: 'trun',
        value: function trun(track, offset) {
            var samples = track.samples || [];
            var sampleCount = samples.length;
            var dataSize = 12 + 16 * sampleCount;
            var data = new Uint8Array(dataSize);
            offset += 8 + dataSize;

            data.set([0x00, 0x00, 0x0F, 0x01, // version(0) & flags
            sampleCount >>> 24 & 0xFF, // sample_count
            sampleCount >>> 16 & 0xFF, sampleCount >>> 8 & 0xFF, sampleCount & 0xFF, offset >>> 24 & 0xFF, // data_offset
            offset >>> 16 & 0xFF, offset >>> 8 & 0xFF, offset & 0xFF], 0);

            for (var i = 0; i < sampleCount; i++) {
                var duration = samples[i].duration;
                var size = samples[i].size;
                var flags = samples[i].flags;
                var cts = samples[i].cts;
                data.set([duration >>> 24 & 0xFF, // sample_duration
                duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, size >>> 24 & 0xFF, // sample_size
                size >>> 16 & 0xFF, size >>> 8 & 0xFF, size & 0xFF, flags.isLeading << 2 | flags.dependsOn, // sample_flags
                flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.isNonSync, 0x00, 0x00, // sample_degradation_priority
                cts >>> 24 & 0xFF, // sample_composition_time_offset
                cts >>> 16 & 0xFF, cts >>> 8 & 0xFF, cts & 0xFF], 12 + 16 * i);
            }
            return MP4.box(MP4.types.trun, data);
        }
    }, {
        key: 'mdat',
        value: function mdat(data) {
            return MP4.box(MP4.types.mdat, data);
        }
    }]);

    return MP4;
}();

MP4.init();

exports.default = MP4;

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AAC = function () {
    function AAC() {
        _classCallCheck(this, AAC);
    }

    _createClass(AAC, null, [{
        key: 'getSilentFrame',
        value: function getSilentFrame(codec, channelCount) {
            if (codec === 'mp4a.40.2') {
                // handle LC-AAC
                if (channelCount === 1) {
                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);
                } else if (channelCount === 2) {
                    return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);
                } else if (channelCount === 3) {
                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);
                } else if (channelCount === 4) {
                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);
                } else if (channelCount === 5) {
                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);
                } else if (channelCount === 6) {
                    return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);
                }
            } else {
                // handle HE-AAC (mp4a.40.5 / mp4a.40.29)
                if (channelCount === 1) {
                    // ffmpeg -y -f lavfi -i "aevalsrc=0:d=0.05" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
                    return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
                } else if (channelCount === 2) {
                    // ffmpeg -y -f lavfi -i "aevalsrc=0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
                    return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
                } else if (channelCount === 3) {
                    // ffmpeg -y -f lavfi -i "aevalsrc=0|0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
                    return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
                }
            }
            return null;
        }
    }]);

    return AAC;
}();

exports.default = AAC;

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Represents an media sample (audio / video)
var SampleInfo = exports.SampleInfo = function SampleInfo(dts, pts, duration, originalDts, isSync) {
    _classCallCheck(this, SampleInfo);

    this.dts = dts;
    this.pts = pts;
    this.duration = duration;
    this.originalDts = originalDts;
    this.isSyncPoint = isSync;
    this.fileposition = null;
};

// Media Segment concept is defined in Media Source Extensions spec.
// Particularly in ISO BMFF format, an Media Segment contains a moof box followed by a mdat box.


var MediaSegmentInfo = exports.MediaSegmentInfo = function () {
    function MediaSegmentInfo() {
        _classCallCheck(this, MediaSegmentInfo);

        this.beginDts = 0;
        this.endDts = 0;
        this.beginPts = 0;
        this.endPts = 0;
        this.originalBeginDts = 0;
        this.originalEndDts = 0;
        this.syncPoints = []; // SampleInfo[n], for video IDR frames only
        this.firstSample = null; // SampleInfo
        this.lastSample = null; // SampleInfo
    }

    _createClass(MediaSegmentInfo, [{
        key: "appendSyncPoint",
        value: function appendSyncPoint(sampleInfo) {
            // also called Random Access Point
            sampleInfo.isSyncPoint = true;
            this.syncPoints.push(sampleInfo);
        }
    }]);

    return MediaSegmentInfo;
}();

// Ordered list for recording video IDR frames, sorted by originalDts


var IDRSampleList = exports.IDRSampleList = function () {
    function IDRSampleList() {
        _classCallCheck(this, IDRSampleList);

        this._list = [];
    }

    _createClass(IDRSampleList, [{
        key: "clear",
        value: function clear() {
            this._list = [];
        }
    }, {
        key: "appendArray",
        value: function appendArray(syncPoints) {
            var list = this._list;

            if (syncPoints.length === 0) {
                return;
            }

            if (list.length > 0 && syncPoints[0].originalDts < list[list.length - 1].originalDts) {
                this.clear();
            }

            Array.prototype.push.apply(list, syncPoints);
        }
    }, {
        key: "getLastSyncPointBeforeDts",
        value: function getLastSyncPointBeforeDts(dts) {
            if (this._list.length == 0) {
                return null;
            }

            var list = this._list;
            var idx = 0;
            var last = list.length - 1;
            var mid = 0;
            var lbound = 0;
            var ubound = last;

            if (dts < list[0].dts) {
                idx = 0;
                lbound = ubound + 1;
            }

            while (lbound <= ubound) {
                mid = lbound + Math.floor((ubound - lbound) / 2);
                if (mid === last || dts >= list[mid].dts && dts < list[mid + 1].dts) {
                    idx = mid;
                    break;
                } else if (list[mid].dts < dts) {
                    lbound = mid + 1;
                } else {
                    ubound = mid - 1;
                }
            }
            return this._list[idx];
        }
    }]);

    return IDRSampleList;
}();

// Data structure for recording information of media segments in single track.


var MediaSegmentInfoList = exports.MediaSegmentInfoList = function () {
    function MediaSegmentInfoList(type) {
        _classCallCheck(this, MediaSegmentInfoList);

        this._type = type;
        this._list = [];
        this._lastAppendLocation = -1; // cached last insert location
    }

    _createClass(MediaSegmentInfoList, [{
        key: "isEmpty",
        value: function isEmpty() {
            return this._list.length === 0;
        }
    }, {
        key: "clear",
        value: function clear() {
            this._list = [];
            this._lastAppendLocation = -1;
        }
    }, {
        key: "_searchNearestSegmentBefore",
        value: function _searchNearestSegmentBefore(originalBeginDts) {
            var list = this._list;
            if (list.length === 0) {
                return -2;
            }
            var last = list.length - 1;
            var mid = 0;
            var lbound = 0;
            var ubound = last;

            var idx = 0;

            if (originalBeginDts < list[0].originalBeginDts) {
                idx = -1;
                return idx;
            }

            while (lbound <= ubound) {
                mid = lbound + Math.floor((ubound - lbound) / 2);
                if (mid === last || originalBeginDts > list[mid].lastSample.originalDts && originalBeginDts < list[mid + 1].originalBeginDts) {
                    idx = mid;
                    break;
                } else if (list[mid].originalBeginDts < originalBeginDts) {
                    lbound = mid + 1;
                } else {
                    ubound = mid - 1;
                }
            }
            return idx;
        }
    }, {
        key: "_searchNearestSegmentAfter",
        value: function _searchNearestSegmentAfter(originalBeginDts) {
            return this._searchNearestSegmentBefore(originalBeginDts) + 1;
        }
    }, {
        key: "append",
        value: function append(mediaSegmentInfo) {
            var list = this._list;
            var msi = mediaSegmentInfo;
            var lastAppendIdx = this._lastAppendLocation;
            var insertIdx = 0;

            if (lastAppendIdx !== -1 && lastAppendIdx < list.length && msi.originalBeginDts >= list[lastAppendIdx].lastSample.originalDts && (lastAppendIdx === list.length - 1 || lastAppendIdx < list.length - 1 && msi.originalBeginDts < list[lastAppendIdx + 1].originalBeginDts)) {
                insertIdx = lastAppendIdx + 1; // use cached location idx
            } else {
                if (list.length > 0) {
                    insertIdx = this._searchNearestSegmentBefore(msi.originalBeginDts) + 1;
                }
            }

            this._lastAppendLocation = insertIdx;
            this._list.splice(insertIdx, 0, msi);
        }
    }, {
        key: "getLastSegmentBefore",
        value: function getLastSegmentBefore(originalBeginDts) {
            var idx = this._searchNearestSegmentBefore(originalBeginDts);
            if (idx >= 0) {
                return this._list[idx];
            } else {
                // -1
                return null;
            }
        }
    }, {
        key: "getLastSampleBefore",
        value: function getLastSampleBefore(originalBeginDts) {
            var segment = this.getLastSegmentBefore(originalBeginDts);
            if (segment != null) {
                return segment.lastSample;
            } else {
                return null;
            }
        }
    }, {
        key: "getLastSyncPointBefore",
        value: function getLastSyncPointBefore(originalBeginDts) {
            var segmentIdx = this._searchNearestSegmentBefore(originalBeginDts);
            var syncPoints = this._list[segmentIdx].syncPoints;
            while (syncPoints.length === 0 && segmentIdx > 0) {
                segmentIdx--;
                syncPoints = this._list[segmentIdx].syncPoints;
            }
            if (syncPoints.length > 0) {
                return syncPoints[syncPoints.length - 1];
            } else {
                return null;
            }
        }
    }, {
        key: "type",
        get: function get() {
            return this._type;
        }
    }, {
        key: "length",
        get: function get() {
            return this._list.length;
        }
    }]);

    return MediaSegmentInfoList;
}();

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _speedSampler = __webpack_require__(366);

var _speedSampler2 = _interopRequireDefault(_speedSampler);

var _loader = __webpack_require__(347);

var _fetchStreamLoader = __webpack_require__(367);

var _fetchStreamLoader2 = _interopRequireDefault(_fetchStreamLoader);

var _xhrMozChunkedLoader = __webpack_require__(368);

var _xhrMozChunkedLoader2 = _interopRequireDefault(_xhrMozChunkedLoader);

var _xhrMsstreamLoader = __webpack_require__(369);

var _xhrMsstreamLoader2 = _interopRequireDefault(_xhrMsstreamLoader);

var _xhrRangeLoader = __webpack_require__(370);

var _xhrRangeLoader2 = _interopRequireDefault(_xhrRangeLoader);

var _websocketLoader = __webpack_require__(371);

var _websocketLoader2 = _interopRequireDefault(_websocketLoader);

var _rangeSeekHandler = __webpack_require__(372);

var _rangeSeekHandler2 = _interopRequireDefault(_rangeSeekHandler);

var _paramSeekHandler = __webpack_require__(373);

var _paramSeekHandler2 = _interopRequireDefault(_paramSeekHandler);

var _exception = __webpack_require__(348);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * DataSource: {
 *     url: string,
 *     filesize: number,
 *     cors: boolean,
 *     withCredentials: boolean
 * }
 * 
 */

// Manage IO Loaders
var IOController = function () {
    _createClass(IOController, null, [{
        key: 'isSupported',
        value: function isSupported() {
            return _websocketLoader2.default.isSupported();
        }
    }]);

    function IOController(dataSource, config, extraData) {
        _classCallCheck(this, IOController);

        this.TAG = 'IOController';

        this._config = config;
        this._extraData = extraData;

        this._stashInitialSize = 1024 * 384; // default initial size: 384KB
        if (config.stashInitialSize != undefined && config.stashInitialSize > 0) {
            // apply from config
            this._stashInitialSize = config.stashInitialSize;
        }

        this._stashUsed = 0;
        this._stashSize = this._stashInitialSize;
        this._bufferSize = 1024 * 1024 * 3; // initial size: 3MB
        this._stashBuffer = new ArrayBuffer(this._bufferSize);
        this._stashByteStart = 0;
        this._enableStash = true;
        if (config.enableStashBuffer === false) {
            this._enableStash = false;
        }

        this._loader = null;
        this._loaderClass = null;
        this._seekHandler = null;

        this._dataSource = dataSource;
        this._mediaType = typeof dataSource.mediaType === 'string' ? dataSource.mediaType.toLowerCase() : '';
        if (this._mediaType === 'flv') {
            this._isWebSocketURL = /wss?:\/\/(.+?)/.test(dataSource.url);
        } else {
            this._isWebSocketURL = true;
        }

        this._refTotalLength = dataSource.filesize ? dataSource.filesize : null;
        this._totalLength = this._refTotalLength;
        this._fullRequestFlag = false;
        this._currentRange = null;
        this._redirectedURL = null;

        this._speedNormalized = 0;
        this._speedSampler = new _speedSampler2.default();
        this._speedNormalizeList = [64, 128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096];

        this._isEarlyEofReconnecting = false;

        this._paused = false;
        this._resumeFrom = 0;

        this._onDataArrival = null;
        this._onSeeked = null;
        this._onError = null;
        this._onComplete = null;
        this._onCommand = null;
        this._onRedirect = null;
        this._onRecoveredEarlyEof = null;

        this._selectSeekHandler();
        this._selectLoader();

        this._createLoader();
    }

    _createClass(IOController, [{
        key: 'destroy',
        value: function destroy() {
            if (this._loader) {
                if (this._loader.isWorking()) {
                    this._loader.abort();
                }
                this._loader.destroy();
                this._loader = null;
            }
            this._loaderClass = null;
            this._dataSource = null;
            this._stashBuffer = null;
            this._stashUsed = this._stashSize = this._bufferSize = this._stashByteStart = 0;
            this._currentRange = null;
            this._speedSampler = null;

            this._isEarlyEofReconnecting = false;

            this._onDataArrival = null;
            this._onSeeked = null;
            this._onError = null;
            this._onComplete = null;
            this._onCommand = null;
            this._onRedirect = null;
            this._onRecoveredEarlyEof = null;

            this._extraData = null;
        }
    }, {
        key: 'isWorking',
        value: function isWorking() {
            return this._loader && this._loader.isWorking() && !this._paused;
        }
    }, {
        key: 'isPaused',
        value: function isPaused() {
            return this._paused;
        }
    }, {
        key: '_selectSeekHandler',
        value: function _selectSeekHandler() {
            if (this._mediaType != 'flv') {
                return;
            }
            var config = this._config;

            if (config.seekType === 'range') {
                this._seekHandler = new _rangeSeekHandler2.default(this._config.rangeLoadZeroStart);
            } else if (config.seekType === 'param') {
                var paramStart = config.seekParamStart || 'bstart';
                var paramEnd = config.seekParamEnd || 'bend';

                this._seekHandler = new _paramSeekHandler2.default(paramStart, paramEnd);
            } else if (config.seekType === 'custom') {
                if (typeof config.customSeekHandler !== 'function') {
                    throw new _exception.InvalidArgumentException('Custom seekType specified in config but invalid customSeekHandler!');
                }
                this._seekHandler = new config.customSeekHandler();
            } else {
                throw new _exception.InvalidArgumentException('Invalid seekType in config: ' + config.seekType);
            }
        }
    }, {
        key: '_selectLoader',
        value: function _selectLoader() {
            if (this._config.customLoader != null) {
                this._loaderClass = this._config.customLoader;
            } else if (this._isWebSocketURL) {
                this._loaderClass = _websocketLoader2.default;
            } else if (_fetchStreamLoader2.default.isSupported()) {
                this._loaderClass = _fetchStreamLoader2.default;
            } else if (_xhrMozChunkedLoader2.default.isSupported()) {
                this._loaderClass = _xhrMozChunkedLoader2.default;
            } else if (_xhrRangeLoader2.default.isSupported()) {
                this._loaderClass = _xhrRangeLoader2.default;
            } else {
                throw new _exception.RuntimeException('Your browser doesn\'t support xhr with arraybuffer responseType!');
            }
        }
    }, {
        key: '_createLoader',
        value: function _createLoader() {
            //if (!WebSocketLoader.isSupported()) {
            //    return;
            //}
            this._loader = new this._loaderClass(this._seekHandler, this._config);
            if (this._loader.needStashBuffer === false) {
                this._enableStash = false;
            }
            this._loader.onContentLengthKnown = this._onContentLengthKnown.bind(this);
            this._loader.onURLRedirect = this._onURLRedirect.bind(this);
            this._loader.onDataArrival = this._onLoaderChunkArrival.bind(this);
            this._loader.onComplete = this._onLoaderComplete.bind(this);
            this._loader.onError = this._onLoaderError.bind(this);
            this._loader.onCommand = this._onCmdResponse.bind(this);
        }
    }, {
        key: 'open',
        value: function open(optionalFrom) {
            this._currentRange = { from: 0, to: -1 };
            if (optionalFrom) {
                this._currentRange.from = optionalFrom;
            }
            if (!this._loader) {
                this._onLoaderError(_loader.LoaderErrors.UNSUPPORT, { code: -1, msg: 'unsupport websocket' });
                return;
            }
            this._speedSampler.reset();
            if (!optionalFrom) {
                this._fullRequestFlag = true;
            }

            this._loader.open(this._dataSource, Object.assign({}, this._currentRange));
        }
    }, {
        key: 'abort',
        value: function abort() {
            if (!this._loader) {
                this._onLoaderError(_loader.LoaderErrors.UNSUPPORT, { code: -1, msg: 'unsupport websocket' });
                return;
            }
            this._loader.abort();
            if (this._paused) {
                this._paused = false;
                this._resumeFrom = 0;
            }
        }
    }, {
        key: 'sendcmd',
        value: function sendcmd(obj) {
            if (!this._loader) {
                this._onLoaderError(_loader.LoaderErrors.UNSUPPORT, { code: -1, msg: 'unsupport websocket' });
                return;
            }
            this._loader.send(obj);
        }
    }, {
        key: 'pause',
        value: function pause() {
            if (this.isWorking()) {
                if (this._mediaType === 'flv') {
                    this._loader.abort();

                    if (this._stashUsed !== 0) {
                        this._resumeFrom = this._stashByteStart;
                        this._currentRange.to = this._stashByteStart - 1;
                    } else {
                        this._resumeFrom = this._currentRange.to + 1;
                    }
                    this._stashUsed = 0;
                    this._stashByteStart = 0;
                }
                this._paused = true;
            }
        }
    }, {
        key: 'resume',
        value: function resume() {
            if (this._paused) {
                this._paused = false;
                if (this._mediaType === 'flv') {
                    var bytes = this._resumeFrom;
                    this._resumeFrom = 0;
                    this._internalSeek(bytes, true);
                }
            }
        }
    }, {
        key: 'seek',
        value: function seek(bytes) {
            this._paused = false;
            if (this._mediaType === 'flv') {
                this._stashUsed = 0;
                this._stashByteStart = 0;
                this._internalSeek(bytes, true);
            }
        }

        /**
         * When seeking request is from media seeking, unconsumed stash data should be dropped
         * However, stash data shouldn't be dropped if seeking requested from http reconnection
         *
         * @dropUnconsumed: Ignore and discard all unconsumed data in stash buffer
         */

    }, {
        key: '_internalSeek',
        value: function _internalSeek(bytes, dropUnconsumed) {
            if (this._loader.isWorking()) {
                this._loader.abort();
            }

            // dispatch & flush stash buffer before seek
            this._flushStashBuffer(dropUnconsumed);

            this._loader.destroy();
            this._loader = null;

            var requestRange = { from: bytes, to: -1 };
            this._currentRange = { from: requestRange.from, to: -1 };

            this._speedSampler.reset();
            this._stashSize = this._stashInitialSize;
            this._createLoader();
            this._loader.open(this._dataSource, requestRange);

            if (this._onSeeked) {
                this._onSeeked();
            }
        }
    }, {
        key: 'updateUrl',
        value: function updateUrl(url) {
            if (!url || typeof url !== 'string' || url.length === 0) {
                throw new _exception.InvalidArgumentException('Url must be a non-empty string!');
            }

            this._dataSource.url = url;

            // TODO: replace with new url
        }
    }, {
        key: '_expandBuffer',
        value: function _expandBuffer(expectedBytes) {
            var bufferNewSize = this._stashSize;
            while (bufferNewSize + 1024 * 1024 * 1 < expectedBytes) {
                bufferNewSize *= 2;
            }

            bufferNewSize += 1024 * 1024 * 1; // bufferSize = stashSize + 1MB
            if (bufferNewSize === this._bufferSize) {
                return;
            }

            var newBuffer = new ArrayBuffer(bufferNewSize);

            if (this._stashUsed > 0) {
                // copy existing data into new buffer
                var stashOldArray = new Uint8Array(this._stashBuffer, 0, this._stashUsed);
                var stashNewArray = new Uint8Array(newBuffer, 0, bufferNewSize);
                stashNewArray.set(stashOldArray, 0);
            }

            this._stashBuffer = newBuffer;
            this._bufferSize = bufferNewSize;
        }
    }, {
        key: '_normalizeSpeed',
        value: function _normalizeSpeed(input) {
            var list = this._speedNormalizeList;
            var last = list.length - 1;
            var mid = 0;
            var lbound = 0;
            var ubound = last;

            if (input < list[0]) {
                return list[0];
            }

            // binary search
            while (lbound <= ubound) {
                mid = lbound + Math.floor((ubound - lbound) / 2);
                if (mid === last || input >= list[mid] && input < list[mid + 1]) {
                    return list[mid];
                } else if (list[mid] < input) {
                    lbound = mid + 1;
                } else {
                    ubound = mid - 1;
                }
            }
        }
    }, {
        key: '_adjustStashSize',
        value: function _adjustStashSize(normalized) {
            var stashSizeKB = 0;

            if (this._config.isLive) {
                // live stream: always use single normalized speed for size of stashSizeKB
                stashSizeKB = normalized;
            } else {
                if (normalized < 512) {
                    stashSizeKB = normalized;
                } else if (normalized >= 512 && normalized <= 1024) {
                    stashSizeKB = Math.floor(normalized * 1.5);
                } else {
                    stashSizeKB = normalized * 2;
                }
            }

            if (stashSizeKB > 8192) {
                stashSizeKB = 8192;
            }

            var bufferSize = stashSizeKB * 1024 + 1024 * 1024 * 1; // stashSize + 1MB
            if (this._bufferSize < bufferSize) {
                this._expandBuffer(bufferSize);
            }
            this._stashSize = stashSizeKB * 1024;
        }
    }, {
        key: '_dispatchChunks',
        value: function _dispatchChunks(chunks, byteStart) {
            this._currentRange.to = byteStart + chunks.byteLength - 1;
            return this._onDataArrival(chunks, byteStart);
        }
    }, {
        key: '_onURLRedirect',
        value: function _onURLRedirect(redirectedURL) {
            this._redirectedURL = redirectedURL;
            if (this._onRedirect) {
                this._onRedirect(redirectedURL);
            }
        }
    }, {
        key: '_onContentLengthKnown',
        value: function _onContentLengthKnown(contentLength) {
            if (contentLength && this._fullRequestFlag) {
                this._totalLength = contentLength;
                this._fullRequestFlag = false;
            }
        }
    }, {
        key: '_onLoaderChunkArrival',
        value: function _onLoaderChunkArrival(chunk, byteStart, receivedLength) {
            if (!this._onDataArrival) {
                throw new _exception.IllegalStateException('IOController: No existing consumer (onDataArrival) callback!');
            }

            this._speedSampler.addBytes(chunk.byteLength);
            if (this._mediaType != 'flv') {
                this._onDataArrival(chunk, byteStart);
                return;
            }
            //flv
            if (this._paused) {
                return;
            }
            if (this._isEarlyEofReconnecting) {
                // Auto-reconnect for EarlyEof succeed, notify to upper-layer by callback
                this._isEarlyEofReconnecting = false;
                if (this._onRecoveredEarlyEof) {
                    this._onRecoveredEarlyEof();
                }
            }

            // adjust stash buffer size according to network speed dynamically
            var KBps = this._speedSampler.lastSecondKBps;
            if (KBps !== 0) {
                var normalized = this._normalizeSpeed(KBps);
                if (this._speedNormalized !== normalized) {
                    this._speedNormalized = normalized;
                    this._adjustStashSize(normalized);
                }
            }

            if (!this._enableStash) {
                // disable stash
                if (this._stashUsed === 0) {
                    // dispatch chunk directly to consumer;
                    // check ret value (consumed bytes) and stash unconsumed to stashBuffer
                    var consumed = this._dispatchChunks(chunk, byteStart);
                    if (consumed < chunk.byteLength) {
                        // unconsumed data remain.
                        var remain = chunk.byteLength - consumed;
                        if (remain > this._bufferSize) {
                            this._expandBuffer(remain);
                        }
                        var stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
                        stashArray.set(new Uint8Array(chunk, consumed), 0);
                        this._stashUsed += remain;
                        this._stashByteStart = byteStart + consumed;
                    }
                } else {
                    // else: Merge chunk into stashBuffer, and dispatch stashBuffer to consumer.
                    if (this._stashUsed + chunk.byteLength > this._bufferSize) {
                        this._expandBuffer(this._stashUsed + chunk.byteLength);
                    }
                    var _stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
                    _stashArray.set(new Uint8Array(chunk), this._stashUsed);
                    this._stashUsed += chunk.byteLength;
                    var _consumed = this._dispatchChunks(this._stashBuffer.slice(0, this._stashUsed), this._stashByteStart);
                    if (_consumed < this._stashUsed && _consumed > 0) {
                        // unconsumed data remain
                        var remainArray = new Uint8Array(this._stashBuffer, _consumed);
                        _stashArray.set(remainArray, 0);
                    }
                    this._stashUsed -= _consumed;
                    this._stashByteStart += _consumed;
                }
            } else {
                // enable stash
                if (this._stashUsed === 0 && this._stashByteStart === 0) {
                    // seeked? or init chunk?
                    // This is the first chunk after seek action
                    this._stashByteStart = byteStart;
                }
                if (this._stashUsed + chunk.byteLength <= this._stashSize) {
                    // just stash
                    var _stashArray2 = new Uint8Array(this._stashBuffer, 0, this._stashSize);
                    _stashArray2.set(new Uint8Array(chunk), this._stashUsed);
                    this._stashUsed += chunk.byteLength;
                } else {
                    // stashUsed + chunkSize > stashSize, size limit exceeded
                    var _stashArray3 = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
                    if (this._stashUsed > 0) {
                        // There're stash datas in buffer
                        // dispatch the whole stashBuffer, and stash remain data
                        // then append chunk to stashBuffer (stash)
                        var buffer = this._stashBuffer.slice(0, this._stashUsed);
                        var _consumed2 = this._dispatchChunks(buffer, this._stashByteStart);
                        if (_consumed2 < buffer.byteLength) {
                            if (_consumed2 > 0) {
                                var _remainArray = new Uint8Array(buffer, _consumed2);
                                _stashArray3.set(_remainArray, 0);
                                this._stashUsed = _remainArray.byteLength;
                                this._stashByteStart += _consumed2;
                            }
                        } else {
                            this._stashUsed = 0;
                            this._stashByteStart += _consumed2;
                        }
                        if (this._stashUsed + chunk.byteLength > this._bufferSize) {
                            this._expandBuffer(this._stashUsed + chunk.byteLength);
                            _stashArray3 = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
                        }
                        _stashArray3.set(new Uint8Array(chunk), this._stashUsed);
                        this._stashUsed += chunk.byteLength;
                    } else {
                        // stash buffer empty, but chunkSize > stashSize (oh, holy shit)
                        // dispatch chunk directly and stash remain data
                        var _consumed3 = this._dispatchChunks(chunk, byteStart);
                        if (_consumed3 < chunk.byteLength) {
                            var _remain = chunk.byteLength - _consumed3;
                            if (_remain > this._bufferSize) {
                                this._expandBuffer(_remain);
                                _stashArray3 = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
                            }
                            _stashArray3.set(new Uint8Array(chunk, _consumed3), 0);
                            this._stashUsed += _remain;
                            this._stashByteStart = byteStart + _consumed3;
                        }
                    }
                }
            }
        }
    }, {
        key: '_flushStashBuffer',
        value: function _flushStashBuffer(dropUnconsumed) {
            if (this._stashUsed > 0) {
                var buffer = this._stashBuffer.slice(0, this._stashUsed);
                var consumed = this._dispatchChunks(buffer, this._stashByteStart);
                var remain = buffer.byteLength - consumed;

                if (consumed < buffer.byteLength) {
                    if (dropUnconsumed) {
                        _logger2.default.w(this.TAG, remain + ' bytes unconsumed data remain when flush buffer, dropped');
                    } else {
                        if (consumed > 0) {
                            var stashArray = new Uint8Array(this._stashBuffer, 0, this._bufferSize);
                            var remainArray = new Uint8Array(buffer, consumed);
                            stashArray.set(remainArray, 0);
                            this._stashUsed = remainArray.byteLength;
                            this._stashByteStart += consumed;
                        }
                        return 0;
                    }
                }
                this._stashUsed = 0;
                this._stashByteStart = 0;
                return remain;
            }
            return 0;
        }
    }, {
        key: '_onLoaderComplete',
        value: function _onLoaderComplete(from, to) {
            // Force-flush stash buffer, and drop unconsumed data
            this._flushStashBuffer(true);
            if (this._onComplete) {
                this._onComplete(this._extraData);
            }
        }
    }, {
        key: '_onCmdResponse',
        value: function _onCmdResponse(response) {
            if (this._onCommand) {
                this._onCommand(response);
            }
        }
    }, {
        key: '_onLoaderError',
        value: function _onLoaderError(type, data) {
            _logger2.default.e(this.TAG, 'Loader error, code = ' + data.code + ', msg = ' + data.msg);

            this._flushStashBuffer(false);

            if (this._isEarlyEofReconnecting) {
                // Auto-reconnect for EarlyEof failed, throw UnrecoverableEarlyEof error to upper-layer
                this._isEarlyEofReconnecting = false;
                type = _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF;
            }
            switch (type) {
                case _loader.LoaderErrors.EARLY_EOF:
                    {
                        if (!this._config.isLive) {
                            // Do internal http reconnect if not live stream
                            if (this._totalLength) {
                                var nextFrom = this._currentRange.to + 1;
                                if (nextFrom < this._totalLength) {
                                    _logger2.default.w(this.TAG, 'Connection lost, trying reconnect...');
                                    this._isEarlyEofReconnecting = true;
                                    this._internalSeek(nextFrom, false);
                                }
                                return;
                            }
                            // else: We don't know totalLength, throw UnrecoverableEarlyEof
                        }
                        // live stream: throw UnrecoverableEarlyEof error to upper-layer
                        type = _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF;
                        break;
                    }
                case _loader.LoaderErrors.UNRECOVERABLE_EARLY_EOF:
                case _loader.LoaderErrors.CONNECTING_TIMEOUT:
                case _loader.LoaderErrors.HTTP_STATUS_CODE_INVALID:
                case _loader.LoaderErrors.EXCEPTION:
                    break;
            }

            if (this._onError) {
                this._onError(type, data);
            } else {
                throw new _exception.RuntimeException('IOException: ' + data.msg);
            }
        }
    }, {
        key: 'status',
        get: function get() {
            return this._loader.status;
        }
    }, {
        key: 'extraData',
        get: function get() {
            return this._extraData;
        },
        set: function set(data) {
            this._extraData = data;
        }

        // prototype: function onDataArrival(chunks: ArrayBuffer, byteStart: number): number

    }, {
        key: 'onDataArrival',
        get: function get() {
            return this._onDataArrival;
        },
        set: function set(callback) {
            this._onDataArrival = callback;
        }
    }, {
        key: 'onCommand',
        get: function get() {
            return this._onCommand;
        },
        set: function set(callback) {
            this._onCommand = callback;
        }
    }, {
        key: 'onSeeked',
        get: function get() {
            return this._onSeeked;
        },
        set: function set(callback) {
            this._onSeeked = callback;
        }

        // prototype: function onError(type: number, info: {code: number, msg: string}): void

    }, {
        key: 'onError',
        get: function get() {
            return this._onError;
        },
        set: function set(callback) {
            this._onError = callback;
        }
    }, {
        key: 'onComplete',
        get: function get() {
            return this._onComplete;
        },
        set: function set(callback) {
            this._onComplete = callback;
        }
    }, {
        key: 'onRedirect',
        get: function get() {
            return this._onRedirect;
        },
        set: function set(callback) {
            this._onRedirect = callback;
        }
    }, {
        key: 'onRecoveredEarlyEof',
        get: function get() {
            return this._onRecoveredEarlyEof;
        },
        set: function set(callback) {
            this._onRecoveredEarlyEof = callback;
        }
    }, {
        key: 'currentURL',
        get: function get() {
            return this._dataSource.url;
        }
    }, {
        key: 'hasRedirect',
        get: function get() {
            return this._redirectedURL != null || this._dataSource.redirectedURL != undefined;
        }
    }, {
        key: 'currentRedirectedURL',
        get: function get() {
            return this._redirectedURL || this._dataSource.redirectedURL;
        }
        // in KB/s

    }, {
        key: 'currentSpeed',
        get: function get() {
            if (this._loaderClass === _xhrRangeLoader2.default) {
                // SpeedSampler is inaccuracy if loader is RangeLoader
                return this._loader.currentSpeed;
            }
            return this._speedSampler.lastSecondKBps;
        }
    }, {
        key: 'loaderType',
        get: function get() {
            return this._loader.type;
        }
    }]);

    return IOController;
}();

exports.default = IOController;

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Utility class to calculate realtime network I/O speed
var SpeedSampler = function () {
    function SpeedSampler() {
        _classCallCheck(this, SpeedSampler);

        // milliseconds
        this._firstCheckpoint = 0;
        this._lastCheckpoint = 0;
        this._intervalBytes = 0;
        this._totalBytes = 0;
        this._lastSecondBytes = 0;

        // compatibility detection
        if (window.performance && window.performance.now) {
            this._now = window.performance.now.bind(window.performance);
        } else {
            this._now = Date.now;
        }
    }

    _createClass(SpeedSampler, [{
        key: "reset",
        value: function reset() {
            this._firstCheckpoint = this._lastCheckpoint = 0;
            this._totalBytes = this._intervalBytes = 0;
            this._lastSecondBytes = 0;
        }
    }, {
        key: "addBytes",
        value: function addBytes(bytes) {
            if (this._firstCheckpoint === 0) {
                this._firstCheckpoint = this._now();
                this._lastCheckpoint = this._firstCheckpoint;
                this._intervalBytes += bytes;
                this._totalBytes += bytes;
            } else if (this._now() - this._lastCheckpoint < 1000) {
                this._intervalBytes += bytes;
                this._totalBytes += bytes;
            } else {
                // duration >= 1000
                this._lastSecondBytes = this._intervalBytes;
                this._intervalBytes = bytes;
                this._totalBytes += bytes;
                this._lastCheckpoint = this._now();
            }
        }
    }, {
        key: "currentKBps",
        get: function get() {
            this.addBytes(0);

            var durationSeconds = (this._now() - this._lastCheckpoint) / 1000;
            if (durationSeconds == 0) {
                durationSeconds = 1;
            }
            return this._intervalBytes / durationSeconds / 1024;
        }
    }, {
        key: "lastSecondKBps",
        get: function get() {
            this.addBytes(0);

            if (this._lastSecondBytes !== 0) {
                return this._lastSecondBytes / 1024;
            } else {
                // lastSecondBytes === 0
                if (this._now() - this._lastCheckpoint >= 500) {
                    // if time interval since last checkpoint has exceeded 500ms
                    // the speed is nearly accurate
                    return this.currentKBps;
                } else {
                    // We don't know
                    return 0;
                }
            }
        }
    }, {
        key: "averageKBps",
        get: function get() {
            var durationSeconds = (this._now() - this._firstCheckpoint) / 1000;
            return this._totalBytes / durationSeconds / 1024;
        }
    }]);

    return SpeedSampler;
}();

exports.default = SpeedSampler;

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _browser = __webpack_require__(351);

var _browser2 = _interopRequireDefault(_browser);

var _loader = __webpack_require__(347);

var _exception = __webpack_require__(348);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* fetch + stream IO loader. Currently working on chrome 43+.
 * fetch provides a better alternative http API to XMLHttpRequest
 *
 * fetch spec   https://fetch.spec.whatwg.org/
 * stream spec  https://streams.spec.whatwg.org/
 */
var FetchStreamLoader = function (_BaseLoader) {
    _inherits(FetchStreamLoader, _BaseLoader);

    _createClass(FetchStreamLoader, null, [{
        key: 'isSupported',
        value: function isSupported() {
            try {
                // fetch + stream is broken on Microsoft Edge. Disable before build 15048.
                // see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8196907/
                // Fixed in Jan 10, 2017. Build 15048+ removed from blacklist.
                var isWorkWellEdge = _browser2.default.msedge && _browser2.default.version.minor >= 15048;
                var browserNotBlacklisted = _browser2.default.msedge ? isWorkWellEdge : true;
                return window.fetch && window.ReadableStream && browserNotBlacklisted;
            } catch (e) {
                return false;
            }
        }
    }]);

    function FetchStreamLoader(seekHandler, config) {
        _classCallCheck(this, FetchStreamLoader);

        var _this = _possibleConstructorReturn(this, (FetchStreamLoader.__proto__ || Object.getPrototypeOf(FetchStreamLoader)).call(this, 'fetch-stream-loader'));

        _this.TAG = 'FetchStreamLoader';

        _this._seekHandler = seekHandler;
        _this._config = config;
        _this._needStash = true;

        _this._requestAbort = false;
        _this._contentLength = null;
        _this._receivedLength = 0;
        return _this;
    }

    _createClass(FetchStreamLoader, [{
        key: 'destroy',
        value: function destroy() {
            if (this.isWorking()) {
                this.abort();
            }
            _get(FetchStreamLoader.prototype.__proto__ || Object.getPrototypeOf(FetchStreamLoader.prototype), 'destroy', this).call(this);
        }
    }, {
        key: 'open',
        value: function open(dataSource, range) {
            var _this2 = this;

            this._dataSource = dataSource;
            this._range = range;

            var sourceURL = dataSource.url;
            if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {
                sourceURL = dataSource.redirectedURL;
            }

            var seekConfig = this._seekHandler.getConfig(sourceURL, range);

            var headers = new window.Headers();

            if (_typeof(seekConfig.headers) === 'object') {
                var configHeaders = seekConfig.headers;
                for (var key in configHeaders) {
                    if (configHeaders.hasOwnProperty(key)) {
                        headers.append(key, configHeaders[key]);
                    }
                }
            }

            var params = {
                method: 'GET',
                headers: headers,
                mode: 'cors',
                cache: 'default',
                // The default policy of Fetch API in the whatwg standard
                // Safari incorrectly indicates 'no-referrer' as default policy, fuck it
                referrerPolicy: 'no-referrer-when-downgrade'
            };

            // add additional headers
            if (_typeof(this._config.headers) === 'object') {
                for (var _key in this._config.headers) {
                    headers.append(_key, this._config.headers[_key]);
                }
            }

            // cors is enabled by default
            if (dataSource.cors === false) {
                // no-cors means 'disregard cors policy', which can only be used in ServiceWorker
                params.mode = 'same-origin';
            }

            // withCredentials is disabled by default
            if (dataSource.withCredentials) {
                params.credentials = 'include';
            }

            // referrerPolicy from config
            if (dataSource.referrerPolicy) {
                params.referrerPolicy = dataSource.referrerPolicy;
            }

            this._status = _loader.LoaderStatus.kConnecting;
            window.fetch(seekConfig.url, params).then(function (res) {
                if (_this2._requestAbort) {
                    _this2._requestAbort = false;
                    _this2._status = _loader.LoaderStatus.kIdle;
                    return;
                }
                if (res.ok && res.status >= 200 && res.status <= 299) {
                    if (res.url !== seekConfig.url) {
                        if (_this2._onURLRedirect) {
                            var redirectedURL = _this2._seekHandler.removeURLParameters(res.url);
                            _this2._onURLRedirect(redirectedURL);
                        }
                    }

                    var lengthHeader = res.headers.get('Content-Length');
                    if (lengthHeader != null) {
                        _this2._contentLength = parseInt(lengthHeader);
                        if (_this2._contentLength !== 0) {
                            if (_this2._onContentLengthKnown) {
                                _this2._onContentLengthKnown(_this2._contentLength);
                            }
                        }
                    }

                    return _this2._pump.call(_this2, res.body.getReader());
                } else {
                    _this2._status = _loader.LoaderStatus.kError;
                    if (_this2._onError) {
                        _this2._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: res.status, msg: res.statusText });
                    } else {
                        throw new _exception.RuntimeException('FetchStreamLoader: Http code invalid, ' + res.status + ' ' + res.statusText);
                    }
                }
            }).catch(function (e) {
                _this2._status = _loader.LoaderStatus.kError;
                if (_this2._onError) {
                    _this2._onError(_loader.LoaderErrors.EXCEPTION, { code: -1, msg: e.message });
                } else {
                    throw e;
                }
            });
        }
    }, {
        key: 'abort',
        value: function abort() {
            this._requestAbort = true;
        }
    }, {
        key: '_pump',
        value: function _pump(reader) {
            var _this3 = this;

            // ReadableStreamReader
            return reader.read().then(function (result) {
                if (result.done) {
                    // First check received length
                    if (_this3._contentLength !== null && _this3._receivedLength < _this3._contentLength) {
                        // Report Early-EOF
                        _this3._status = _loader.LoaderStatus.kError;
                        var type = _loader.LoaderErrors.EARLY_EOF;
                        var info = { code: -1, msg: 'Fetch stream meet Early-EOF' };
                        if (_this3._onError) {
                            _this3._onError(type, info);
                        } else {
                            throw new _exception.RuntimeException(info.msg);
                        }
                    } else {
                        // OK. Download complete
                        _this3._status = _loader.LoaderStatus.kComplete;
                        if (_this3._onComplete) {
                            _this3._onComplete(_this3._range.from, _this3._range.from + _this3._receivedLength - 1);
                        }
                    }
                } else {
                    if (_this3._requestAbort === true) {
                        _this3._requestAbort = false;
                        _this3._status = _loader.LoaderStatus.kComplete;
                        return reader.cancel();
                    }

                    _this3._status = _loader.LoaderStatus.kBuffering;

                    var chunk = result.value.buffer;
                    var byteStart = _this3._range.from + _this3._receivedLength;
                    _this3._receivedLength += chunk.byteLength;

                    if (_this3._onDataArrival) {
                        _this3._onDataArrival(chunk, byteStart, _this3._receivedLength);
                    }
                    // console.log("FetchStreamLoader get " + chunk.byteLength);

                    _this3._pump(reader);
                }
            }).catch(function (e) {
                if (e.code === 11 && _browser2.default.msedge) {
                    // InvalidStateError on Microsoft Edge
                    // Workaround: Edge may throw InvalidStateError after ReadableStreamReader.cancel() call
                    // Ignore the unknown exception.
                    // Related issue: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11265202/
                    return;
                }

                _this3._status = _loader.LoaderStatus.kError;
                var type = 0;
                var info = null;

                if ((e.code === 19 || e.message === 'network error') && ( // NETWORK_ERR
                _this3._contentLength === null || _this3._contentLength !== null && _this3._receivedLength < _this3._contentLength)) {
                    type = _loader.LoaderErrors.EARLY_EOF;
                    info = { code: e.code, msg: 'Fetch stream meet Early-EOF' };
                } else {
                    type = _loader.LoaderErrors.EXCEPTION;
                    info = { code: e.code, msg: e.message };
                }

                if (_this3._onError) {
                    _this3._onError(type, info);
                } else {
                    throw new _exception.RuntimeException(info.msg);
                }
            });
        }
    }]);

    return FetchStreamLoader;
}(_loader.BaseLoader);

exports.default = FetchStreamLoader;

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _loader = __webpack_require__(347);

var _exception = __webpack_require__(348);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// For FireFox browser which supports `xhr.responseType = 'moz-chunked-arraybuffer'`
var MozChunkedLoader = function (_BaseLoader) {
    _inherits(MozChunkedLoader, _BaseLoader);

    _createClass(MozChunkedLoader, null, [{
        key: 'isSupported',
        value: function isSupported() {
            try {
                var xhr = new XMLHttpRequest();
                // Firefox 37- requires .open() to be called before setting responseType
                xhr.open('GET', 'https://example.com', true);
                xhr.responseType = 'moz-chunked-arraybuffer';
                return xhr.responseType === 'moz-chunked-arraybuffer';
            } catch (e) {
                _logger2.default.w('MozChunkedLoader', e.message);
                return false;
            }
        }
    }]);

    function MozChunkedLoader(seekHandler, config) {
        _classCallCheck(this, MozChunkedLoader);

        var _this = _possibleConstructorReturn(this, (MozChunkedLoader.__proto__ || Object.getPrototypeOf(MozChunkedLoader)).call(this, 'xhr-moz-chunked-loader'));

        _this.TAG = 'MozChunkedLoader';

        _this._seekHandler = seekHandler;
        _this._config = config;
        _this._needStash = true;

        _this._xhr = null;
        _this._requestAbort = false;
        _this._contentLength = null;
        _this._receivedLength = 0;
        return _this;
    }

    _createClass(MozChunkedLoader, [{
        key: 'destroy',
        value: function destroy() {
            if (this.isWorking()) {
                this.abort();
            }
            if (this._xhr) {
                this._xhr.onreadystatechange = null;
                this._xhr.onprogress = null;
                this._xhr.onloadend = null;
                this._xhr.onerror = null;
                this._xhr = null;
            }
            _get(MozChunkedLoader.prototype.__proto__ || Object.getPrototypeOf(MozChunkedLoader.prototype), 'destroy', this).call(this);
        }
    }, {
        key: 'open',
        value: function open(dataSource, range) {
            this._dataSource = dataSource;
            this._range = range;

            var sourceURL = dataSource.url;
            if (this._config.reuseRedirectedURL && dataSource.redirectedURL != undefined) {
                sourceURL = dataSource.redirectedURL;
            }

            var seekConfig = this._seekHandler.getConfig(sourceURL, range);
            this._requestURL = seekConfig.url;

            var xhr = this._xhr = new XMLHttpRequest();
            xhr.open('GET', seekConfig.url, true);
            xhr.responseType = 'moz-chunked-arraybuffer';
            xhr.onreadystatechange = this._onReadyStateChange.bind(this);
            xhr.onprogress = this._onProgress.bind(this);
            xhr.onloadend = this._onLoadEnd.bind(this);
            xhr.onerror = this._onXhrError.bind(this);

            // cors is auto detected and enabled by xhr

            // withCredentials is disabled by default
            if (dataSource.withCredentials) {
                xhr.withCredentials = true;
            }

            if (_typeof(seekConfig.headers) === 'object') {
                var headers = seekConfig.headers;

                for (var key in headers) {
                    if (headers.hasOwnProperty(key)) {
                        xhr.setRequestHeader(key, headers[key]);
                    }
                }
            }

            // add additional headers
            if (_typeof(this._config.headers) === 'object') {
                var _headers = this._config.headers;

                for (var _key in _headers) {
                    if (_headers.hasOwnProperty(_key)) {
                        xhr.setRequestHeader(_key, _headers[_key]);
                    }
                }
            }

            this._status = _loader.LoaderStatus.kConnecting;
            xhr.send();
        }
    }, {
        key: 'abort',
        value: function abort() {
            this._requestAbort = true;
            if (this._xhr) {
                this._xhr.abort();
            }
            this._status = _loader.LoaderStatus.kComplete;
        }
    }, {
        key: '_onReadyStateChange',
        value: function _onReadyStateChange(e) {
            var xhr = e.target;

            if (xhr.readyState === 2) {
                // HEADERS_RECEIVED
                if (xhr.responseURL != undefined && xhr.responseURL !== this._requestURL) {
                    if (this._onURLRedirect) {
                        var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);
                        this._onURLRedirect(redirectedURL);
                    }
                }

                if (xhr.status !== 0 && (xhr.status < 200 || xhr.status > 299)) {
                    this._status = _loader.LoaderStatus.kError;
                    if (this._onError) {
                        this._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });
                    } else {
                        throw new _exception.RuntimeException('MozChunkedLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);
                    }
                } else {
                    this._status = _loader.LoaderStatus.kBuffering;
                }
            }
        }
    }, {
        key: '_onProgress',
        value: function _onProgress(e) {
            if (this._status === _loader.LoaderStatus.kError) {
                // Ignore error response
                return;
            }

            if (this._contentLength === null) {
                if (e.total !== null && e.total !== 0) {
                    this._contentLength = e.total;
                    if (this._onContentLengthKnown) {
                        this._onContentLengthKnown(this._contentLength);
                    }
                }
            }

            var chunk = e.target.response;
            var byteStart = this._range.from + this._receivedLength;
            this._receivedLength += chunk.byteLength;

            if (this._onDataArrival) {
                this._onDataArrival(chunk, byteStart, this._receivedLength);
            }
        }
    }, {
        key: '_onLoadEnd',
        value: function _onLoadEnd(e) {
            if (this._requestAbort === true) {
                this._requestAbort = false;
                return;
            } else if (this._status === _loader.LoaderStatus.kError) {
                return;
            }

            this._status = _loader.LoaderStatus.kComplete;
            if (this._onComplete) {
                this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);
            }
        }
    }, {
        key: '_onXhrError',
        value: function _onXhrError(e) {
            this._status = _loader.LoaderStatus.kError;
            var type = 0;
            var info = null;

            if (this._contentLength && e.loaded < this._contentLength) {
                type = _loader.LoaderErrors.EARLY_EOF;
                info = { code: -1, msg: 'Moz-Chunked stream meet Early-Eof' };
            } else {
                type = _loader.LoaderErrors.EXCEPTION;
                info = { code: -1, msg: e.constructor.name + ' ' + e.type };
            }

            if (this._onError) {
                this._onError(type, info);
            } else {
                throw new _exception.RuntimeException(info.msg);
            }
        }
    }]);

    return MozChunkedLoader;
}(_loader.BaseLoader);

exports.default = MozChunkedLoader;

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _loader = __webpack_require__(347);

var _exception = __webpack_require__(348);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* Notice: ms-stream may cause IE/Edge browser crash if seek too frequently!!!
 * The browser may crash in wininet.dll. Disable for now.
 *
 * For IE11/Edge browser by microsoft which supports `xhr.responseType = 'ms-stream'`
 * Notice that ms-stream API sucks. The buffer is always expanding along with downloading.
 *
 * We need to abort the xhr if buffer size exceeded limit size (e.g. 16 MiB), then do reconnect.
 * in order to release previous ArrayBuffer to avoid memory leak
 *
 * Otherwise, the ArrayBuffer will increase to a terrible size that equals final file size.
 */
var MSStreamLoader = function (_BaseLoader) {
    _inherits(MSStreamLoader, _BaseLoader);

    _createClass(MSStreamLoader, null, [{
        key: 'isSupported',
        value: function isSupported() {
            try {
                if (typeof window.MSStream === 'undefined' || typeof window.MSStreamReader === 'undefined') {
                    return false;
                }

                var xhr = new XMLHttpRequest();
                xhr.open('GET', 'https://example.com', true);
                xhr.responseType = 'ms-stream';
                return xhr.responseType === 'ms-stream';
            } catch (e) {
                _logger2.default.w('MSStreamLoader', e.message);
                return false;
            }
        }
    }]);

    function MSStreamLoader(seekHandler, config) {
        _classCallCheck(this, MSStreamLoader);

        var _this = _possibleConstructorReturn(this, (MSStreamLoader.__proto__ || Object.getPrototypeOf(MSStreamLoader)).call(this, 'xhr-msstream-loader'));

        _this.TAG = 'MSStreamLoader';

        _this._seekHandler = seekHandler;
        _this._config = config;
        _this._needStash = true;

        _this._xhr = null;
        _this._reader = null; // MSStreamReader

        _this._totalRange = null;
        _this._currentRange = null;

        _this._currentRequestURL = null;
        _this._currentRedirectedURL = null;

        _this._contentLength = null;
        _this._receivedLength = 0;

        _this._bufferLimit = 16 * 1024 * 1024; // 16MB
        _this._lastTimeBufferSize = 0;
        _this._isReconnecting = false;
        return _this;
    }

    _createClass(MSStreamLoader, [{
        key: 'destroy',
        value: function destroy() {
            if (this.isWorking()) {
                this.abort();
            }
            if (this._reader) {
                this._reader.onprogress = null;
                this._reader.onload = null;
                this._reader.onerror = null;
                this._reader = null;
            }
            if (this._xhr) {
                this._xhr.onreadystatechange = null;
                this._xhr = null;
            }
            _get(MSStreamLoader.prototype.__proto__ || Object.getPrototypeOf(MSStreamLoader.prototype), 'destroy', this).call(this);
        }
    }, {
        key: 'open',
        value: function open(dataSource, range) {
            this._internalOpen(dataSource, range, false);
        }
    }, {
        key: '_internalOpen',
        value: function _internalOpen(dataSource, range, isSubrange) {
            this._dataSource = dataSource;

            if (!isSubrange) {
                this._totalRange = range;
            } else {
                this._currentRange = range;
            }

            var sourceURL = dataSource.url;
            if (this._config.reuseRedirectedURL) {
                if (this._currentRedirectedURL != undefined) {
                    sourceURL = this._currentRedirectedURL;
                } else if (dataSource.redirectedURL != undefined) {
                    sourceURL = dataSource.redirectedURL;
                }
            }

            var seekConfig = this._seekHandler.getConfig(sourceURL, range);
            this._currentRequestURL = seekConfig.url;

            var reader = this._reader = new window.MSStreamReader();
            reader.onprogress = this._msrOnProgress.bind(this);
            reader.onload = this._msrOnLoad.bind(this);
            reader.onerror = this._msrOnError.bind(this);

            var xhr = this._xhr = new XMLHttpRequest();
            xhr.open('GET', seekConfig.url, true);
            xhr.responseType = 'ms-stream';
            xhr.onreadystatechange = this._xhrOnReadyStateChange.bind(this);
            xhr.onerror = this._xhrOnError.bind(this);

            if (dataSource.withCredentials) {
                xhr.withCredentials = true;
            }

            if (_typeof(seekConfig.headers) === 'object') {
                var headers = seekConfig.headers;

                for (var key in headers) {
                    if (headers.hasOwnProperty(key)) {
                        xhr.setRequestHeader(key, headers[key]);
                    }
                }
            }

            // add additional headers
            if (_typeof(this._config.headers) === 'object') {
                var _headers = this._config.headers;

                for (var _key in _headers) {
                    if (_headers.hasOwnProperty(_key)) {
                        xhr.setRequestHeader(_key, _headers[_key]);
                    }
                }
            }

            if (this._isReconnecting) {
                this._isReconnecting = false;
            } else {
                this._status = _loader.LoaderStatus.kConnecting;
            }
            xhr.send();
        }
    }, {
        key: 'abort',
        value: function abort() {
            this._internalAbort();
            this._status = _loader.LoaderStatus.kComplete;
        }
    }, {
        key: '_internalAbort',
        value: function _internalAbort() {
            if (this._reader) {
                if (this._reader.readyState === 1) {
                    // LOADING
                    this._reader.abort();
                }
                this._reader.onprogress = null;
                this._reader.onload = null;
                this._reader.onerror = null;
                this._reader = null;
            }
            if (this._xhr) {
                this._xhr.abort();
                this._xhr.onreadystatechange = null;
                this._xhr = null;
            }
        }
    }, {
        key: '_xhrOnReadyStateChange',
        value: function _xhrOnReadyStateChange(e) {
            var xhr = e.target;

            if (xhr.readyState === 2) {
                // HEADERS_RECEIVED
                if (xhr.status >= 200 && xhr.status <= 299) {
                    this._status = _loader.LoaderStatus.kBuffering;

                    if (xhr.responseURL != undefined) {
                        var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);
                        if (xhr.responseURL !== this._currentRequestURL && redirectedURL !== this._currentRedirectedURL) {
                            this._currentRedirectedURL = redirectedURL;
                            if (this._onURLRedirect) {
                                this._onURLRedirect(redirectedURL);
                            }
                        }
                    }

                    var lengthHeader = xhr.getResponseHeader('Content-Length');
                    if (lengthHeader != null && this._contentLength == null) {
                        var length = parseInt(lengthHeader);
                        if (length > 0) {
                            this._contentLength = length;
                            if (this._onContentLengthKnown) {
                                this._onContentLengthKnown(this._contentLength);
                            }
                        }
                    }
                } else {
                    this._status = _loader.LoaderStatus.kError;
                    if (this._onError) {
                        this._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });
                    } else {
                        throw new _exception.RuntimeException('MSStreamLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);
                    }
                }
            } else if (xhr.readyState === 3) {
                // LOADING
                if (xhr.status >= 200 && xhr.status <= 299) {
                    this._status = _loader.LoaderStatus.kBuffering;

                    var msstream = xhr.response;
                    this._reader.readAsArrayBuffer(msstream);
                }
            }
        }
    }, {
        key: '_xhrOnError',
        value: function _xhrOnError(e) {
            this._status = _loader.LoaderStatus.kError;
            var type = _loader.LoaderErrors.EXCEPTION;
            var info = { code: -1, msg: e.constructor.name + ' ' + e.type };

            if (this._onError) {
                this._onError(type, info);
            } else {
                throw new _exception.RuntimeException(info.msg);
            }
        }
    }, {
        key: '_msrOnProgress',
        value: function _msrOnProgress(e) {
            var reader = e.target;
            var bigbuffer = reader.result;
            if (bigbuffer == null) {
                // result may be null, workaround for buggy M$
                this._doReconnectIfNeeded();
                return;
            }

            var slice = bigbuffer.slice(this._lastTimeBufferSize);
            this._lastTimeBufferSize = bigbuffer.byteLength;
            var byteStart = this._totalRange.from + this._receivedLength;
            this._receivedLength += slice.byteLength;

            if (this._onDataArrival) {
                this._onDataArrival(slice, byteStart, this._receivedLength);
            }

            if (bigbuffer.byteLength >= this._bufferLimit) {
                _logger2.default.v(this.TAG, 'MSStream buffer exceeded max size near ' + (byteStart + slice.byteLength) + ', reconnecting...');
                this._doReconnectIfNeeded();
            }
        }
    }, {
        key: '_doReconnectIfNeeded',
        value: function _doReconnectIfNeeded() {
            if (this._contentLength == null || this._receivedLength < this._contentLength) {
                this._isReconnecting = true;
                this._lastTimeBufferSize = 0;
                this._internalAbort();

                var range = {
                    from: this._totalRange.from + this._receivedLength,
                    to: -1
                };
                this._internalOpen(this._dataSource, range, true);
            }
        }
    }, {
        key: '_msrOnLoad',
        value: function _msrOnLoad(e) {
            // actually it is onComplete event
            this._status = _loader.LoaderStatus.kComplete;
            if (this._onComplete) {
                this._onComplete(this._totalRange.from, this._totalRange.from + this._receivedLength - 1);
            }
        }
    }, {
        key: '_msrOnError',
        value: function _msrOnError(e) {
            this._status = _loader.LoaderStatus.kError;
            var type = 0;
            var info = null;

            if (this._contentLength && this._receivedLength < this._contentLength) {
                type = _loader.LoaderErrors.EARLY_EOF;
                info = { code: -1, msg: 'MSStream meet Early-Eof' };
            } else {
                type = _loader.LoaderErrors.EARLY_EOF;
                info = { code: -1, msg: e.constructor.name + ' ' + e.type };
            }

            if (this._onError) {
                this._onError(type, info);
            } else {
                throw new _exception.RuntimeException(info.msg);
            }
        }
    }]);

    return MSStreamLoader;
}(_loader.BaseLoader);

exports.default = MSStreamLoader;

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _speedSampler = __webpack_require__(366);

var _speedSampler2 = _interopRequireDefault(_speedSampler);

var _loader = __webpack_require__(347);

var _exception = __webpack_require__(348);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Universal IO Loader, implemented by adding Range header in xhr's request header
var RangeLoader = function (_BaseLoader) {
    _inherits(RangeLoader, _BaseLoader);

    _createClass(RangeLoader, null, [{
        key: 'isSupported',
        value: function isSupported() {
            try {
                var xhr = new XMLHttpRequest();
                xhr.open('GET', 'https://example.com', true);
                xhr.responseType = 'arraybuffer';
                return xhr.responseType === 'arraybuffer';
            } catch (e) {
                _logger2.default.w('RangeLoader', e.message);
                return false;
            }
        }
    }]);

    function RangeLoader(seekHandler, config) {
        _classCallCheck(this, RangeLoader);

        var _this = _possibleConstructorReturn(this, (RangeLoader.__proto__ || Object.getPrototypeOf(RangeLoader)).call(this, 'xhr-range-loader'));

        _this.TAG = 'RangeLoader';

        _this._seekHandler = seekHandler;
        _this._config = config;
        _this._needStash = false;

        _this._chunkSizeKBList = [128, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 5120, 6144, 7168, 8192];
        _this._currentChunkSizeKB = 384;
        _this._currentSpeedNormalized = 0;
        _this._zeroSpeedChunkCount = 0;

        _this._xhr = null;
        _this._speedSampler = new _speedSampler2.default();

        _this._requestAbort = false;
        _this._waitForTotalLength = false;
        _this._totalLengthReceived = false;

        _this._currentRequestURL = null;
        _this._currentRedirectedURL = null;
        _this._currentRequestRange = null;
        _this._totalLength = null; // size of the entire file
        _this._contentLength = null; // Content-Length of entire request range
        _this._receivedLength = 0; // total received bytes
        _this._lastTimeLoaded = 0; // received bytes of current request sub-range
        return _this;
    }

    _createClass(RangeLoader, [{
        key: 'destroy',
        value: function destroy() {
            if (this.isWorking()) {
                this.abort();
            }
            if (this._xhr) {
                this._xhr.onreadystatechange = null;
                this._xhr.onprogress = null;
                this._xhr.onload = null;
                this._xhr.onerror = null;
                this._xhr = null;
            }
            _get(RangeLoader.prototype.__proto__ || Object.getPrototypeOf(RangeLoader.prototype), 'destroy', this).call(this);
        }
    }, {
        key: 'open',
        value: function open(dataSource, range) {
            this._dataSource = dataSource;
            this._range = range;
            this._status = _loader.LoaderStatus.kConnecting;

            var useRefTotalLength = false;
            if (this._dataSource.filesize != undefined && this._dataSource.filesize !== 0) {
                useRefTotalLength = true;
                this._totalLength = this._dataSource.filesize;
            }

            if (!this._totalLengthReceived && !useRefTotalLength) {
                // We need total filesize
                this._waitForTotalLength = true;
                this._internalOpen(this._dataSource, { from: 0, to: -1 });
            } else {
                // We have filesize, start loading
                this._openSubRange();
            }
        }
    }, {
        key: '_openSubRange',
        value: function _openSubRange() {
            var chunkSize = this._currentChunkSizeKB * 1024;

            var from = this._range.from + this._receivedLength;
            var to = from + chunkSize;

            if (this._contentLength != null) {
                if (to - this._range.from >= this._contentLength) {
                    to = this._range.from + this._contentLength - 1;
                }
            }

            this._currentRequestRange = { from: from, to: to };
            this._internalOpen(this._dataSource, this._currentRequestRange);
        }
    }, {
        key: '_internalOpen',
        value: function _internalOpen(dataSource, range) {
            this._lastTimeLoaded = 0;

            var sourceURL = dataSource.url;
            if (this._config.reuseRedirectedURL) {
                if (this._currentRedirectedURL != undefined) {
                    sourceURL = this._currentRedirectedURL;
                } else if (dataSource.redirectedURL != undefined) {
                    sourceURL = dataSource.redirectedURL;
                }
            }

            var seekConfig = this._seekHandler.getConfig(sourceURL, range);
            this._currentRequestURL = seekConfig.url;

            var xhr = this._xhr = new XMLHttpRequest();
            xhr.open('GET', seekConfig.url, true);
            xhr.responseType = 'arraybuffer';
            xhr.onreadystatechange = this._onReadyStateChange.bind(this);
            xhr.onprogress = this._onProgress.bind(this);
            xhr.onload = this._onLoad.bind(this);
            xhr.onerror = this._onXhrError.bind(this);

            if (dataSource.withCredentials) {
                xhr.withCredentials = true;
            }

            if (_typeof(seekConfig.headers) === 'object') {
                var headers = seekConfig.headers;

                for (var key in headers) {
                    if (headers.hasOwnProperty(key)) {
                        xhr.setRequestHeader(key, headers[key]);
                    }
                }
            }

            // add additional headers
            if (_typeof(this._config.headers) === 'object') {
                var _headers = this._config.headers;

                for (var _key in _headers) {
                    if (_headers.hasOwnProperty(_key)) {
                        xhr.setRequestHeader(_key, _headers[_key]);
                    }
                }
            }

            xhr.send();
        }
    }, {
        key: 'abort',
        value: function abort() {
            this._requestAbort = true;
            this._internalAbort();
            this._status = _loader.LoaderStatus.kComplete;
        }
    }, {
        key: '_internalAbort',
        value: function _internalAbort() {
            if (this._xhr) {
                this._xhr.onreadystatechange = null;
                this._xhr.onprogress = null;
                this._xhr.onload = null;
                this._xhr.onerror = null;
                this._xhr.abort();
                this._xhr = null;
            }
        }
    }, {
        key: '_onReadyStateChange',
        value: function _onReadyStateChange(e) {
            var xhr = e.target;

            if (xhr.readyState === 2) {
                // HEADERS_RECEIVED
                if (xhr.responseURL != undefined) {
                    // if the browser support this property
                    var redirectedURL = this._seekHandler.removeURLParameters(xhr.responseURL);
                    if (xhr.responseURL !== this._currentRequestURL && redirectedURL !== this._currentRedirectedURL) {
                        this._currentRedirectedURL = redirectedURL;
                        if (this._onURLRedirect) {
                            this._onURLRedirect(redirectedURL);
                        }
                    }
                }

                if (xhr.status >= 200 && xhr.status <= 299) {
                    if (this._waitForTotalLength) {
                        return;
                    }
                    this._status = _loader.LoaderStatus.kBuffering;
                } else {
                    this._status = _loader.LoaderStatus.kError;
                    if (this._onError) {
                        this._onError(_loader.LoaderErrors.HTTP_STATUS_CODE_INVALID, { code: xhr.status, msg: xhr.statusText });
                    } else {
                        throw new _exception.RuntimeException('RangeLoader: Http code invalid, ' + xhr.status + ' ' + xhr.statusText);
                    }
                }
            }
        }
    }, {
        key: '_onProgress',
        value: function _onProgress(e) {
            if (this._status === _loader.LoaderStatus.kError) {
                // Ignore error response
                return;
            }

            if (this._contentLength === null) {
                var openNextRange = false;

                if (this._waitForTotalLength) {
                    this._waitForTotalLength = false;
                    this._totalLengthReceived = true;
                    openNextRange = true;

                    var total = e.total;
                    this._internalAbort();
                    if (total != null & total !== 0) {
                        this._totalLength = total;
                    }
                }

                // calculate currrent request range's contentLength
                if (this._range.to === -1) {
                    this._contentLength = this._totalLength - this._range.from;
                } else {
                    // to !== -1
                    this._contentLength = this._range.to - this._range.from + 1;
                }

                if (openNextRange) {
                    this._openSubRange();
                    return;
                }
                if (this._onContentLengthKnown) {
                    this._onContentLengthKnown(this._contentLength);
                }
            }

            var delta = e.loaded - this._lastTimeLoaded;
            this._lastTimeLoaded = e.loaded;
            this._speedSampler.addBytes(delta);
        }
    }, {
        key: '_normalizeSpeed',
        value: function _normalizeSpeed(input) {
            var list = this._chunkSizeKBList;
            var last = list.length - 1;
            var mid = 0;
            var lbound = 0;
            var ubound = last;

            if (input < list[0]) {
                return list[0];
            }

            while (lbound <= ubound) {
                mid = lbound + Math.floor((ubound - lbound) / 2);
                if (mid === last || input >= list[mid] && input < list[mid + 1]) {
                    return list[mid];
                } else if (list[mid] < input) {
                    lbound = mid + 1;
                } else {
                    ubound = mid - 1;
                }
            }
        }
    }, {
        key: '_onLoad',
        value: function _onLoad(e) {
            if (this._status === _loader.LoaderStatus.kError) {
                // Ignore error response
                return;
            }

            if (this._waitForTotalLength) {
                this._waitForTotalLength = false;
                return;
            }

            this._lastTimeLoaded = 0;
            var KBps = this._speedSampler.lastSecondKBps;
            if (KBps === 0) {
                this._zeroSpeedChunkCount++;
                if (this._zeroSpeedChunkCount >= 3) {
                    // Try get currentKBps after 3 chunks
                    KBps = this._speedSampler.currentKBps;
                }
            }

            if (KBps !== 0) {
                var normalized = this._normalizeSpeed(KBps);
                if (this._currentSpeedNormalized !== normalized) {
                    this._currentSpeedNormalized = normalized;
                    this._currentChunkSizeKB = normalized;
                }
            }

            var chunk = e.target.response;
            var byteStart = this._range.from + this._receivedLength;
            this._receivedLength += chunk.byteLength;

            var reportComplete = false;

            if (this._contentLength != null && this._receivedLength < this._contentLength) {
                // continue load next chunk
                this._openSubRange();
            } else {
                reportComplete = true;
            }

            // dispatch received chunk
            if (this._onDataArrival) {
                this._onDataArrival(chunk, byteStart, this._receivedLength);
            }

            if (reportComplete) {
                this._status = _loader.LoaderStatus.kComplete;
                if (this._onComplete) {
                    this._onComplete(this._range.from, this._range.from + this._receivedLength - 1);
                }
            }
        }
    }, {
        key: '_onXhrError',
        value: function _onXhrError(e) {
            this._status = _loader.LoaderStatus.kError;
            var type = 0;
            var info = null;

            if (this._contentLength && this._receivedLength > 0 && this._receivedLength < this._contentLength) {
                type = _loader.LoaderErrors.EARLY_EOF;
                info = { code: -1, msg: 'RangeLoader meet Early-Eof' };
            } else {
                type = _loader.LoaderErrors.EXCEPTION;
                info = { code: -1, msg: e.constructor.name + ' ' + e.type };
            }

            if (this._onError) {
                this._onError(type, info);
            } else {
                throw new _exception.RuntimeException(info.msg);
            }
        }
    }, {
        key: 'currentSpeed',
        get: function get() {
            return this._speedSampler.lastSecondKBps;
        }
    }]);

    return RangeLoader;
}(_loader.BaseLoader);

exports.default = RangeLoader;

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _loader = __webpack_require__(347);

var _exception = __webpack_require__(348);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* Loader has callbacks which have following prototypes:
 *     function onContentLengthKnown(contentLength: number): void
 *     function onDataArrival(chunk: ArrayBuffer, byteStart: number, receivedLength: number): void
 *     function onError(errorType: number, errorInfo: {code: number, msg: string}): void
 *     function onComplete(rangeFrom: number, rangeTo: number): void
 *     function onCommand(response: jsonstring): void
 */
var WebSocketLoader = function (_BaseLoader) {
    _inherits(WebSocketLoader, _BaseLoader);

    _createClass(WebSocketLoader, null, [{
        key: 'isSupported',
        value: function isSupported() {
            try {
                return typeof window.WebSocket !== 'undefined';
            } catch (e) {
                return false;
            }
        }
    }]);

    function WebSocketLoader() {
        _classCallCheck(this, WebSocketLoader);

        var _this = _possibleConstructorReturn(this, (WebSocketLoader.__proto__ || Object.getPrototypeOf(WebSocketLoader)).call(this, 'websocket-loader'));

        _this.TAG = 'WebSocketLoader';
        _this._type = 'websocket-loader';
        _this._needStash = true;
        _this._status = _loader.LoaderStatus.kIdle;

        // callbacks
        _this._onDataArrival = null;
        _this._onError = null;
        _this._onComplete = null;
        _this._onCommand = null;

        _this._ws = null;
        _this._requestAbort = false;
        _this._receivedLength = 0;
        _this._channelInfo = null;
        return _this;
    }

    _createClass(WebSocketLoader, [{
        key: 'destroy',
        value: function destroy() {
            if (this._ws) {
                this.abort();
            }
            this._status = _loader.LoaderStatus.kIdle;
            this._onDataArrival = null;
            this._onError = null;
            this._onComplete = null;
            this._onCommand = null;
            _get(WebSocketLoader.prototype.__proto__ || Object.getPrototypeOf(WebSocketLoader.prototype), 'destroy', this).call(this);
        }
    }, {
        key: 'isWorking',
        value: function isWorking() {
            return this._status === _loader.LoaderStatus.kConnecting || this._status === _loader.LoaderStatus.kBuffering;
        }
    }, {
        key: 'open',
        value: function open(dataSource) {
            try {
                var ws = this._ws = new window.WebSocket(dataSource.url); ///renly
                ws.binaryType = 'arraybuffer';
                ws.onopen = this._onWebSocketOpen.bind(this);
                ws.onclose = this._onWebSocketClose.bind(this);
                ws.onmessage = this._onWebSocketMessage.bind(this);
                ws.onerror = this._onWebSocketError.bind(this);
                this._channelInfo = dataSource.channelInfo;
                this._status = _loader.LoaderStatus.kConnecting;
            } catch (e) {
                this._status = _loader.LoaderStatus.kError;

                var info = { code: e.code, msg: e.message };

                if (this._onError) {
                    this._onError(_loader.LoaderErrors.EXCEPTION, info);
                } else {
                    throw new _exception.RuntimeException(info.msg);
                }
            }
        }

        /*
         * obj = {
         *    'type':'command',
         *    'name':'SetSpeed',
         *    'param':param
         * };
         */

    }, {
        key: 'send',
        value: function send(obj) {
            var ws = this._ws;
            if (ws && ws.readyState === 1) {
                // OPEN
                if (typeof obj === 'string') {
                    ws.send(obj);
                } else {
                    ws.send(JSON.stringify(obj));
                }
            } else {
                this._status = _loader.LoaderStatus.kError;
                var info = { code: -1, msg: 'Unsupported WebSocket readyState while sending' };

                if (this._onError) {
                    this._onError(_loader.LoaderErrors.EXCEPTION, info);
                } else {
                    throw new _exception.RuntimeException(info.msg);
                }
            }
        }
    }, {
        key: 'abort',
        value: function abort() {
            var ws = this._ws;
            if (ws && (ws.readyState === 0 || ws.readyState === 1)) {
                // CONNECTING || OPEN
                this._requestAbort = true;
                ws.close();
            }

            this._ws = null;
            this._status = _loader.LoaderStatus.kComplete;
        }
    }, {
        key: '_onWebSocketOpen',
        value: function _onWebSocketOpen(e) {
            this._status = _loader.LoaderStatus.kBuffering;
            if (this._channelInfo.devicetype.toLowerCase() != "flv") {
                this.send({ type: 'command', name: 'StartStream', param: this._channelInfo }); //发送开流命令
            }
        }
    }, {
        key: '_onWebSocketClose',
        value: function _onWebSocketClose(e) {
            if (this._requestAbort === true) {
                this._requestAbort = false;
                return;
            }

            this._status = _loader.LoaderStatus.kComplete;

            if (this._onComplete) {
                this._onComplete(0, this._receivedLength - 1);
            }
        }
    }, {
        key: '_onWebSocketMessage',
        value: function _onWebSocketMessage(e) {
            var _this2 = this;

            if (e.data instanceof ArrayBuffer) {
                this._dispatchArrayBuffer(e.data);
            } else if (typeof e.data === 'string') {
                //sendcommand的回复
                this._onCommandResponse(e.data);
            } else if (e.data instanceof Blob) {
                var reader = new FileReader();
                reader.onload = function () {
                    _this2._dispatchArrayBuffer(reader.result);
                };
                reader.readAsArrayBuffer(e.data);
            } else {
                this._status = _loader.LoaderStatus.kError;
                var info = { code: -1, msg: 'Unsupported WebSocket message type: ' + e.data.constructor.name };

                if (this._onError) {
                    this._onError(_loader.LoaderErrors.EXCEPTION, info);
                } else {
                    throw new _exception.RuntimeException(info.msg);
                }
            }
        }
    }, {
        key: '_onCommandResponse',
        value: function _onCommandResponse(response) {
            if (this._onCommand) {
                this._onCommand(response);
            }
        }
    }, {
        key: '_dispatchArrayBuffer',
        value: function _dispatchArrayBuffer(arraybuffer) {
            //let chunk = arraybuffer; // 去掉后内存好很多
            var byteStart = this._receivedLength;
            this._receivedLength += arraybuffer.byteLength;

            if (this._onDataArrival) {
                this._onDataArrival(arraybuffer, byteStart, this._receivedLength);
            }
        }
    }, {
        key: '_onWebSocketError',
        value: function _onWebSocketError(e) {
            this._status = _loader.LoaderStatus.kError;

            var info = {
                code: e.code,
                msg: e.message
            };

            if (this._onError) {
                this._onError(_loader.LoaderErrors.CONNECTING_ERROR, info);
            } else {
                throw new _exception.RuntimeException(info.msg);
            }
        }
    }, {
        key: 'type',
        get: function get() {
            return this._type;
        }
    }, {
        key: 'status',
        get: function get() {
            return this._status;
        }
    }, {
        key: 'onDataArrival',
        get: function get() {
            return this._onDataArrival;
        },
        set: function set(callback) {
            this._onDataArrival = callback;
        }
    }, {
        key: 'onCommand',
        get: function get() {
            return this._onCommand;
        },
        set: function set(callback) {
            this._onCommand = callback;
        }
    }, {
        key: 'onError',
        get: function get() {
            return this._onError;
        },
        set: function set(callback) {
            this._onError = callback;
        }
    }, {
        key: 'onComplete',
        get: function get() {
            return this._onComplete;
        },
        set: function set(callback) {
            this._onComplete = callback;
        }
    }]);

    return WebSocketLoader;
}(_loader.BaseLoader);

exports.default = WebSocketLoader;

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RangeSeekHandler = function () {
    function RangeSeekHandler(zeroStart) {
        _classCallCheck(this, RangeSeekHandler);

        this._zeroStart = zeroStart || false;
    }

    _createClass(RangeSeekHandler, [{
        key: 'getConfig',
        value: function getConfig(url, range) {
            var headers = {};

            if (range.from !== 0 || range.to !== -1) {
                var param = void 0;
                if (range.to !== -1) {
                    param = 'bytes=' + range.from.toString() + '-' + range.to.toString();
                } else {
                    param = 'bytes=' + range.from.toString() + '-';
                }
                headers['Range'] = param;
            } else if (this._zeroStart) {
                headers['Range'] = 'bytes=0-';
            }

            return {
                url: url,
                headers: headers
            };
        }
    }, {
        key: 'removeURLParameters',
        value: function removeURLParameters(seekedURL) {
            return seekedURL;
        }
    }]);

    return RangeSeekHandler;
}();

exports.default = RangeSeekHandler;

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ParamSeekHandler = function () {
    function ParamSeekHandler(paramStart, paramEnd) {
        _classCallCheck(this, ParamSeekHandler);

        this._startName = paramStart;
        this._endName = paramEnd;
    }

    _createClass(ParamSeekHandler, [{
        key: 'getConfig',
        value: function getConfig(baseUrl, range) {
            var url = baseUrl;

            if (range.from !== 0 || range.to !== -1) {
                var needAnd = true;
                if (url.indexOf('?') === -1) {
                    url += '?';
                    needAnd = false;
                }

                if (needAnd) {
                    url += '&';
                }

                url += this._startName + '=' + range.from.toString();

                if (range.to !== -1) {
                    url += '&' + this._endName + '=' + range.to.toString();
                }
            }

            return {
                url: url,
                headers: {}
            };
        }
    }, {
        key: 'removeURLParameters',
        value: function removeURLParameters(seekedURL) {
            var baseURL = seekedURL.split('?')[0];
            var params = undefined;

            var queryIndex = seekedURL.indexOf('?');
            if (queryIndex !== -1) {
                params = seekedURL.substring(queryIndex + 1);
            }

            var resultParams = '';

            if (params != undefined && params.length > 0) {
                var pairs = params.split('&');

                for (var i = 0; i < pairs.length; i++) {
                    var pair = pairs[i].split('=');
                    var requireAnd = i > 0;

                    if (pair[0] !== this._startName && pair[0] !== this._endName) {
                        if (requireAnd) {
                            resultParams += '&';
                        }
                        resultParams += pairs[i];
                    }
                }
            }

            return resultParams.length === 0 ? baseURL : baseURL + '?' + resultParams;
        }
    }]);

    return ParamSeekHandler;
}();

exports.default = ParamSeekHandler;

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});


var TransmuxingEvents = {
    IO_ERROR: 'io_error',
    DEMUX_ERROR: 'demux_error',
    INIT_SEGMENT: 'init_segment',
    MEDIA_SEGMENT: 'media_segment',
    LOADING_COMPLETE: 'loading_complete',
    RECOVERED_EARLY_EOF: 'recovered_early_eof',
    MEDIA_INFO: 'media_info',
    METADATA_ARRIVED: 'metadata_arrived',
    SCRIPTDATA_ARRIVED: 'scriptdata_arrived',
    STATISTICS_INFO: 'statistics_info',
    RECOMMEND_SEEKPOINT: 'recommend_seekpoint',
    COMMAND_RESPONSE: 'command_response'
};

exports.default = TransmuxingEvents;

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _loggingControl = __webpack_require__(353);

var _loggingControl2 = _interopRequireDefault(_loggingControl);

var _polyfill = __webpack_require__(376);

var _polyfill2 = _interopRequireDefault(_polyfill);

var _transmuxingController = __webpack_require__(354);

var _transmuxingController2 = _interopRequireDefault(_transmuxingController);

var _transmuxingEvents = __webpack_require__(374);

var _transmuxingEvents2 = _interopRequireDefault(_transmuxingEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* post message to worker:
   data: {
       cmd: string
       param: any
   }

   receive message from worker:
   data: {
       msg: string,
       data: any
   }
 */

var TransmuxingWorker = function TransmuxingWorker(self) {

    var TAG = 'TransmuxingWorker';
    var controller = null;
    var logcatListener = onLogcatCallback.bind(this);

    _polyfill2.default.install();

    window.addEventListener('message', function (e) {
        switch (e.data.cmd) {
            case 'init':
                controller = new _transmuxingController2.default(e.data.param[0], e.data.param[1]);
                controller.on(_transmuxingEvents2.default.IO_ERROR, onIOError.bind(this));
                controller.on(_transmuxingEvents2.default.DEMUX_ERROR, onDemuxError.bind(this));
                controller.on(_transmuxingEvents2.default.INIT_SEGMENT, onInitSegment.bind(this));
                controller.on(_transmuxingEvents2.default.MEDIA_SEGMENT, onMediaSegment.bind(this));
                controller.on(_transmuxingEvents2.default.LOADING_COMPLETE, onLoadingComplete.bind(this));
                controller.on(_transmuxingEvents2.default.RECOVERED_EARLY_EOF, onRecoveredEarlyEof.bind(this));
                controller.on(_transmuxingEvents2.default.MEDIA_INFO, onMediaInfo.bind(this));
                controller.on(_transmuxingEvents2.default.METADATA_ARRIVED, onMetaDataArrived.bind(this));
                controller.on(_transmuxingEvents2.default.SCRIPTDATA_ARRIVED, onScriptDataArrived.bind(this));
                controller.on(_transmuxingEvents2.default.STATISTICS_INFO, onStatisticsInfo.bind(this));
                controller.on(_transmuxingEvents2.default.RECOMMEND_SEEKPOINT, onRecommendSeekpoint.bind(this));
                break;
            case 'destroy':
                if (controller) {
                    controller.destroy();
                    controller = null;
                }
                window.postMessage({ msg: 'destroyed' });
                break;
            case 'start':
                controller.start();
                break;
            case 'stop':
                controller.stop();
                break;
            case 'sendcmd':
                controller.sendcmd(e.data.param);
                break;
            case 'seek':
                controller.seek(e.data.param);
                break;
            case 'pause':
                controller.pause();
                break;
            case 'resume':
                controller.resume();
                break;
            case 'logging_config':
                {
                    var config = e.data.param;
                    _loggingControl2.default.applyConfig(config);

                    if (config.enableCallback === true) {
                        _loggingControl2.default.addLogListener(logcatListener);
                    } else {
                        _loggingControl2.default.removeLogListener(logcatListener);
                    }
                    break;
                }
        }
    });

    function onInitSegment(type, initSegment) {
        var obj = {
            msg: _transmuxingEvents2.default.INIT_SEGMENT,
            data: {
                type: type,
                data: initSegment
            }
        };
        window.postMessage(obj, [initSegment.data]); // data: ArrayBuffer
    }

    function onMediaSegment(type, mediaSegment) {
        var obj = {
            msg: _transmuxingEvents2.default.MEDIA_SEGMENT,
            data: {
                type: type,
                data: mediaSegment
            }
        };
        window.postMessage(obj, [mediaSegment.data]); // data: ArrayBuffer
    }

    function onLoadingComplete() {
        var obj = {
            msg: _transmuxingEvents2.default.LOADING_COMPLETE
        };
        window.postMessage(obj);
    }

    function onRecoveredEarlyEof() {
        var obj = {
            msg: _transmuxingEvents2.default.RECOVERED_EARLY_EOF
        };
        window.postMessage(obj);
    }

    function onMediaInfo(mediaInfo) {
        var obj = {
            msg: _transmuxingEvents2.default.MEDIA_INFO,
            data: mediaInfo
        };
        window.postMessage(obj);
    }

    function onMetaDataArrived(metadata) {
        var obj = {
            msg: _transmuxingEvents2.default.METADATA_ARRIVED,
            data: metadata
        };
        window.postMessage(obj);
    }

    function onStatisticsInfo(statInfo) {
        var obj = {
            msg: _transmuxingEvents2.default.STATISTICS_INFO,
            data: statInfo
        };
        window.postMessage(obj);
    }

    function onIOError(type, info) {
        window.postMessage({
            msg: _transmuxingEvents2.default.IO_ERROR,
            data: {
                type: type,
                info: info
            }
        });
    }

    function onDemuxError(type, info) {
        window.postMessage({
            msg: _transmuxingEvents2.default.DEMUX_ERROR,
            data: {
                type: type,
                info: info
            }
        });
    }

    function onRecommendSeekpoint(milliseconds) {
        window.postMessage({
            msg: _transmuxingEvents2.default.RECOMMEND_SEEKPOINT,
            data: milliseconds
        });
    }

    function onLogcatCallback(type, str) {
        window.postMessage({
            msg: 'logcat_callback',
            data: {
                type: type,
                logcat: str
            }
        });
    }
};

exports.default = TransmuxingWorker;

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Polyfill = function () {
    function Polyfill() {
        _classCallCheck(this, Polyfill);
    }

    _createClass(Polyfill, null, [{
        key: 'install',
        value: function install() {
            // ES6 Object.setPrototypeOf
            Object.setPrototypeOf = Object.setPrototypeOf || function (obj, proto) {
                obj.__proto__ = proto;
                return obj;
            };

            // ES6 Object.assign
            Object.assign = Object.assign || function (target) {
                if (target === undefined || target === null) {
                    throw new TypeError('Cannot convert undefined or null to object');
                }

                var output = Object(target);
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    if (source !== undefined && source !== null) {
                        for (var key in source) {
                            if (source.hasOwnProperty(key)) {
                                output[key] = source[key];
                            }
                        }
                    }
                }
                return output;
            };

            // ES6 Promise (missing support in IE11)
            if (typeof window.Promise !== 'function') {
                __webpack_require__(377).polyfill();
            }
        }
    }]);

    return Polyfill;
}();

Polyfill.install();

exports.default = Polyfill;

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.6+9869a4bc
 */

(function (global, factory) {
	 true ? module.exports = factory() :
	undefined;
}(this, (function () { 'use strict';

function objectOrFunction(x) {
  var type = typeof x;
  return x !== null && (type === 'object' || type === 'function');
}

function isFunction(x) {
  return typeof x === 'function';
}



var _isArray = void 0;
if (Array.isArray) {
  _isArray = Array.isArray;
} else {
  _isArray = function (x) {
    return Object.prototype.toString.call(x) === '[object Array]';
  };
}

var isArray = _isArray;

var len = 0;
var vertxNext = void 0;
var customSchedulerFn = void 0;

var asap = function asap(callback, arg) {
  queue[len] = callback;
  queue[len + 1] = arg;
  len += 2;
  if (len === 2) {
    // If len is 2, that means that we need to schedule an async flush.
    // If additional callbacks are queued before the queue is flushed, they
    // will be processed by this flush that we are scheduling.
    if (customSchedulerFn) {
      customSchedulerFn(flush);
    } else {
      scheduleFlush();
    }
  }
};

function setScheduler(scheduleFn) {
  customSchedulerFn = scheduleFn;
}

function setAsap(asapFn) {
  asap = asapFn;
}

var browserWindow = typeof window !== 'undefined' ? window : undefined;
var browserGlobal = browserWindow || {};
var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

// test for web worker but not in IE10
var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

// node
function useNextTick() {
  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
  // see https://github.com/cujojs/when/issues/410 for details
  return function () {
    return process.nextTick(flush);
  };
}

// vertx
function useVertxTimer() {
  if (typeof vertxNext !== 'undefined') {
    return function () {
      vertxNext(flush);
    };
  }

  return useSetTimeout();
}

function useMutationObserver() {
  var iterations = 0;
  var observer = new BrowserMutationObserver(flush);
  var node = document.createTextNode('');
  observer.observe(node, { characterData: true });

  return function () {
    node.data = iterations = ++iterations % 2;
  };
}

// web worker
function useMessageChannel() {
  var channel = new MessageChannel();
  channel.port1.onmessage = flush;
  return function () {
    return channel.port2.postMessage(0);
  };
}

function useSetTimeout() {
  // Store setTimeout reference so es6-promise will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var globalSetTimeout = setTimeout;
  return function () {
    return globalSetTimeout(flush, 1);
  };
}

var queue = new Array(1000);
function flush() {
  for (var i = 0; i < len; i += 2) {
    var callback = queue[i];
    var arg = queue[i + 1];

    callback(arg);

    queue[i] = undefined;
    queue[i + 1] = undefined;
  }

  len = 0;
}

function attemptVertx() {
  try {
    var vertx = Function('return this')().require('vertx');
    vertxNext = vertx.runOnLoop || vertx.runOnContext;
    return useVertxTimer();
  } catch (e) {
    return useSetTimeout();
  }
}

var scheduleFlush = void 0;
// Decide what async method to use to triggering processing of queued callbacks:
if (isNode) {
  scheduleFlush = useNextTick();
} else if (BrowserMutationObserver) {
  scheduleFlush = useMutationObserver();
} else if (isWorker) {
  scheduleFlush = useMessageChannel();
} else if (browserWindow === undefined && "function" === 'function') {
  scheduleFlush = attemptVertx();
} else {
  scheduleFlush = useSetTimeout();
}

function then(onFulfillment, onRejection) {
  var parent = this;

  var child = new this.constructor(noop);

  if (child[PROMISE_ID] === undefined) {
    makePromise(child);
  }

  var _state = parent._state;


  if (_state) {
    var callback = arguments[_state - 1];
    asap(function () {
      return invokeCallback(_state, child, callback, parent._result);
    });
  } else {
    subscribe(parent, child, onFulfillment, onRejection);
  }

  return child;
}

/**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
function resolve$1(object) {
  /*jshint validthis:true */
  var Constructor = this;

  if (object && typeof object === 'object' && object.constructor === Constructor) {
    return object;
  }

  var promise = new Constructor(noop);
  resolve(promise, object);
  return promise;
}

var PROMISE_ID = Math.random().toString(36).substring(2);

function noop() {}

var PENDING = void 0;
var FULFILLED = 1;
var REJECTED = 2;

var TRY_CATCH_ERROR = { error: null };

function selfFulfillment() {
  return new TypeError("You cannot resolve a promise with itself");
}

function cannotReturnOwn() {
  return new TypeError('A promises callback cannot return that same promise.');
}

function getThen(promise) {
  try {
    return promise.then;
  } catch (error) {
    TRY_CATCH_ERROR.error = error;
    return TRY_CATCH_ERROR;
  }
}

function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
  try {
    then$$1.call(value, fulfillmentHandler, rejectionHandler);
  } catch (e) {
    return e;
  }
}

function handleForeignThenable(promise, thenable, then$$1) {
  asap(function (promise) {
    var sealed = false;
    var error = tryThen(then$$1, thenable, function (value) {
      if (sealed) {
        return;
      }
      sealed = true;
      if (thenable !== value) {
        resolve(promise, value);
      } else {
        fulfill(promise, value);
      }
    }, function (reason) {
      if (sealed) {
        return;
      }
      sealed = true;

      reject(promise, reason);
    }, 'Settle: ' + (promise._label || ' unknown promise'));

    if (!sealed && error) {
      sealed = true;
      reject(promise, error);
    }
  }, promise);
}

function handleOwnThenable(promise, thenable) {
  if (thenable._state === FULFILLED) {
    fulfill(promise, thenable._result);
  } else if (thenable._state === REJECTED) {
    reject(promise, thenable._result);
  } else {
    subscribe(thenable, undefined, function (value) {
      return resolve(promise, value);
    }, function (reason) {
      return reject(promise, reason);
    });
  }
}

function handleMaybeThenable(promise, maybeThenable, then$$1) {
  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
    handleOwnThenable(promise, maybeThenable);
  } else {
    if (then$$1 === TRY_CATCH_ERROR) {
      reject(promise, TRY_CATCH_ERROR.error);
      TRY_CATCH_ERROR.error = null;
    } else if (then$$1 === undefined) {
      fulfill(promise, maybeThenable);
    } else if (isFunction(then$$1)) {
      handleForeignThenable(promise, maybeThenable, then$$1);
    } else {
      fulfill(promise, maybeThenable);
    }
  }
}

function resolve(promise, value) {
  if (promise === value) {
    reject(promise, selfFulfillment());
  } else if (objectOrFunction(value)) {
    handleMaybeThenable(promise, value, getThen(value));
  } else {
    fulfill(promise, value);
  }
}

function publishRejection(promise) {
  if (promise._onerror) {
    promise._onerror(promise._result);
  }

  publish(promise);
}

function fulfill(promise, value) {
  if (promise._state !== PENDING) {
    return;
  }

  promise._result = value;
  promise._state = FULFILLED;

  if (promise._subscribers.length !== 0) {
    asap(publish, promise);
  }
}

function reject(promise, reason) {
  if (promise._state !== PENDING) {
    return;
  }
  promise._state = REJECTED;
  promise._result = reason;

  asap(publishRejection, promise);
}

function subscribe(parent, child, onFulfillment, onRejection) {
  var _subscribers = parent._subscribers;
  var length = _subscribers.length;


  parent._onerror = null;

  _subscribers[length] = child;
  _subscribers[length + FULFILLED] = onFulfillment;
  _subscribers[length + REJECTED] = onRejection;

  if (length === 0 && parent._state) {
    asap(publish, parent);
  }
}

function publish(promise) {
  var subscribers = promise._subscribers;
  var settled = promise._state;

  if (subscribers.length === 0) {
    return;
  }

  var child = void 0,
      callback = void 0,
      detail = promise._result;

  for (var i = 0; i < subscribers.length; i += 3) {
    child = subscribers[i];
    callback = subscribers[i + settled];

    if (child) {
      invokeCallback(settled, child, callback, detail);
    } else {
      callback(detail);
    }
  }

  promise._subscribers.length = 0;
}

function tryCatch(callback, detail) {
  try {
    return callback(detail);
  } catch (e) {
    TRY_CATCH_ERROR.error = e;
    return TRY_CATCH_ERROR;
  }
}

function invokeCallback(settled, promise, callback, detail) {
  var hasCallback = isFunction(callback),
      value = void 0,
      error = void 0,
      succeeded = void 0,
      failed = void 0;

  if (hasCallback) {
    value = tryCatch(callback, detail);

    if (value === TRY_CATCH_ERROR) {
      failed = true;
      error = value.error;
      value.error = null;
    } else {
      succeeded = true;
    }

    if (promise === value) {
      reject(promise, cannotReturnOwn());
      return;
    }
  } else {
    value = detail;
    succeeded = true;
  }

  if (promise._state !== PENDING) {
    // noop
  } else if (hasCallback && succeeded) {
    resolve(promise, value);
  } else if (failed) {
    reject(promise, error);
  } else if (settled === FULFILLED) {
    fulfill(promise, value);
  } else if (settled === REJECTED) {
    reject(promise, value);
  }
}

function initializePromise(promise, resolver) {
  try {
    resolver(function resolvePromise(value) {
      resolve(promise, value);
    }, function rejectPromise(reason) {
      reject(promise, reason);
    });
  } catch (e) {
    reject(promise, e);
  }
}

var id = 0;
function nextId() {
  return id++;
}

function makePromise(promise) {
  promise[PROMISE_ID] = id++;
  promise._state = undefined;
  promise._result = undefined;
  promise._subscribers = [];
}

function validationError() {
  return new Error('Array Methods must be provided an Array');
}

var Enumerator = function () {
  function Enumerator(Constructor, input) {
    this._instanceConstructor = Constructor;
    this.promise = new Constructor(noop);

    if (!this.promise[PROMISE_ID]) {
      makePromise(this.promise);
    }

    if (isArray(input)) {
      this.length = input.length;
      this._remaining = input.length;

      this._result = new Array(this.length);

      if (this.length === 0) {
        fulfill(this.promise, this._result);
      } else {
        this.length = this.length || 0;
        this._enumerate(input);
        if (this._remaining === 0) {
          fulfill(this.promise, this._result);
        }
      }
    } else {
      reject(this.promise, validationError());
    }
  }

  Enumerator.prototype._enumerate = function _enumerate(input) {
    for (var i = 0; this._state === PENDING && i < input.length; i++) {
      this._eachEntry(input[i], i);
    }
  };

  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
    var c = this._instanceConstructor;
    var resolve$$1 = c.resolve;


    if (resolve$$1 === resolve$1) {
      var _then = getThen(entry);

      if (_then === then && entry._state !== PENDING) {
        this._settledAt(entry._state, i, entry._result);
      } else if (typeof _then !== 'function') {
        this._remaining--;
        this._result[i] = entry;
      } else if (c === Promise$1) {
        var promise = new c(noop);
        handleMaybeThenable(promise, entry, _then);
        this._willSettleAt(promise, i);
      } else {
        this._willSettleAt(new c(function (resolve$$1) {
          return resolve$$1(entry);
        }), i);
      }
    } else {
      this._willSettleAt(resolve$$1(entry), i);
    }
  };

  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
    var promise = this.promise;


    if (promise._state === PENDING) {
      this._remaining--;

      if (state === REJECTED) {
        reject(promise, value);
      } else {
        this._result[i] = value;
      }
    }

    if (this._remaining === 0) {
      fulfill(promise, this._result);
    }
  };

  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
    var enumerator = this;

    subscribe(promise, undefined, function (value) {
      return enumerator._settledAt(FULFILLED, i, value);
    }, function (reason) {
      return enumerator._settledAt(REJECTED, i, reason);
    });
  };

  return Enumerator;
}();

/**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/
function all(entries) {
  return new Enumerator(this, entries).promise;
}

/**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/
function race(entries) {
  /*jshint validthis:true */
  var Constructor = this;

  if (!isArray(entries)) {
    return new Constructor(function (_, reject) {
      return reject(new TypeError('You must pass an array to race.'));
    });
  } else {
    return new Constructor(function (resolve, reject) {
      var length = entries.length;
      for (var i = 0; i < length; i++) {
        Constructor.resolve(entries[i]).then(resolve, reject);
      }
    });
  }
}

/**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
function reject$1(reason) {
  /*jshint validthis:true */
  var Constructor = this;
  var promise = new Constructor(noop);
  reject(promise, reason);
  return promise;
}

function needsResolver() {
  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
}

function needsNew() {
  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
}

/**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {Function} resolver
  Useful for tooling.
  @constructor
*/

var Promise$1 = function () {
  function Promise(resolver) {
    this[PROMISE_ID] = nextId();
    this._result = this._state = undefined;
    this._subscribers = [];

    if (noop !== resolver) {
      typeof resolver !== 'function' && needsResolver();
      this instanceof Promise ? initializePromise(this, resolver) : needsNew();
    }
  }

  /**
  The primary way of interacting with a promise is through its `then` method,
  which registers callbacks to receive either a promise's eventual value or the
  reason why the promise cannot be fulfilled.
   ```js
  findUser().then(function(user){
    // user is available
  }, function(reason){
    // user is unavailable, and you are given the reason why
  });
  ```
   Chaining
  --------
   The return value of `then` is itself a promise.  This second, 'downstream'
  promise is resolved with the return value of the first promise's fulfillment
  or rejection handler, or rejected if the handler throws an exception.
   ```js
  findUser().then(function (user) {
    return user.name;
  }, function (reason) {
    return 'default name';
  }).then(function (userName) {
    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
    // will be `'default name'`
  });
   findUser().then(function (user) {
    throw new Error('Found user, but still unhappy');
  }, function (reason) {
    throw new Error('`findUser` rejected and we're unhappy');
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
  });
  ```
  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
   ```js
  findUser().then(function (user) {
    throw new PedagogicalException('Upstream error');
  }).then(function (value) {
    // never reached
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // The `PedgagocialException` is propagated all the way down to here
  });
  ```
   Assimilation
  ------------
   Sometimes the value you want to propagate to a downstream promise can only be
  retrieved asynchronously. This can be achieved by returning a promise in the
  fulfillment or rejection handler. The downstream promise will then be pending
  until the returned promise is settled. This is called *assimilation*.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // The user's comments are now available
  });
  ```
   If the assimliated promise rejects, then the downstream promise will also reject.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // If `findCommentsByAuthor` fulfills, we'll have the value here
  }, function (reason) {
    // If `findCommentsByAuthor` rejects, we'll have the reason here
  });
  ```
   Simple Example
  --------------
   Synchronous Example
   ```javascript
  let result;
   try {
    result = findResult();
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
  findResult(function(result, err){
    if (err) {
      // failure
    } else {
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findResult().then(function(result){
    // success
  }, function(reason){
    // failure
  });
  ```
   Advanced Example
  --------------
   Synchronous Example
   ```javascript
  let author, books;
   try {
    author = findAuthor();
    books  = findBooksByAuthor(author);
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
   function foundBooks(books) {
   }
   function failure(reason) {
   }
   findAuthor(function(author, err){
    if (err) {
      failure(err);
      // failure
    } else {
      try {
        findBoooksByAuthor(author, function(books, err) {
          if (err) {
            failure(err);
          } else {
            try {
              foundBooks(books);
            } catch(reason) {
              failure(reason);
            }
          }
        });
      } catch(error) {
        failure(err);
      }
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findAuthor().
    then(findBooksByAuthor).
    then(function(books){
      // found books
  }).catch(function(reason){
    // something went wrong
  });
  ```
   @method then
  @param {Function} onFulfilled
  @param {Function} onRejected
  Useful for tooling.
  @return {Promise}
  */

  /**
  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
  as the catch block of a try/catch statement.
  ```js
  function findAuthor(){
  throw new Error('couldn't find that author');
  }
  // synchronous
  try {
  findAuthor();
  } catch(reason) {
  // something went wrong
  }
  // async with promises
  findAuthor().catch(function(reason){
  // something went wrong
  });
  ```
  @method catch
  @param {Function} onRejection
  Useful for tooling.
  @return {Promise}
  */


  Promise.prototype.catch = function _catch(onRejection) {
    return this.then(null, onRejection);
  };

  /**
    `finally` will be invoked regardless of the promise's fate just as native
    try/catch/finally behaves
  
    Synchronous example:
  
    ```js
    findAuthor() {
      if (Math.random() > 0.5) {
        throw new Error();
      }
      return new Author();
    }
  
    try {
      return findAuthor(); // succeed or fail
    } catch(error) {
      return findOtherAuther();
    } finally {
      // always runs
      // doesn't affect the return value
    }
    ```
  
    Asynchronous example:
  
    ```js
    findAuthor().catch(function(reason){
      return findOtherAuther();
    }).finally(function(){
      // author was either found, or not
    });
    ```
  
    @method finally
    @param {Function} callback
    @return {Promise}
  */


  Promise.prototype.finally = function _finally(callback) {
    var promise = this;
    var constructor = promise.constructor;

    if (isFunction(callback)) {
      return promise.then(function (value) {
        return constructor.resolve(callback()).then(function () {
          return value;
        });
      }, function (reason) {
        return constructor.resolve(callback()).then(function () {
          throw reason;
        });
      });
    }

    return promise.then(callback, callback);
  };

  return Promise;
}();

Promise$1.prototype.then = then;
Promise$1.all = all;
Promise$1.race = race;
Promise$1.resolve = resolve$1;
Promise$1.reject = reject$1;
Promise$1._setScheduler = setScheduler;
Promise$1._setAsap = setAsap;
Promise$1._asap = asap;

/*global self*/
function polyfill() {
  var local = void 0;

  if (typeof global !== 'undefined') {
    local = global;
  } else if (typeof self !== 'undefined') {
    local = self;
  } else {
    try {
      local = Function('return this')();
    } catch (e) {
      throw new Error('polyfill failed because global object is unavailable in this environment');
    }
  }

  var P = local.Promise;

  if (P) {
    var promiseToString = null;
    try {
      promiseToString = Object.prototype.toString.call(P.resolve());
    } catch (e) {
      // silently ignored
    }

    if (promiseToString === '[object Promise]' && !P.cast) {
      return;
    }
  }

  local.Promise = Promise$1;
}

// Strange compat..
Promise$1.polyfill = polyfill;
Promise$1.Promise = Promise$1;

return Promise$1;

})));



//# sourceMappingURL=es6-promise.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(378), __webpack_require__(2)))

/***/ }),
/* 378 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 379 */
/***/ (function(module, exports) {

var bundleFn = arguments[3];
var sources = arguments[4];
var cache = arguments[5];

var stringify = JSON.stringify;

module.exports = function (fn, options) {
    var wkey;
    var cacheKeys = Object.keys(cache);

    for (var i = 0, l = cacheKeys.length; i < l; i++) {
        var key = cacheKeys[i];
        var exp = cache[key].exports;
        // Using babel as a transpiler to use esmodule, the export will always
        // be an object with the default export as a property of it. To ensure
        // the existing api and babel esmodule exports are both supported we
        // check for both
        if (exp === fn || exp && exp.default === fn) {
            wkey = key;
            break;
        }
    }

    if (!wkey) {
        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);
        var wcache = {};
        for (var i = 0, l = cacheKeys.length; i < l; i++) {
            var key = cacheKeys[i];
            wcache[key] = key;
        }
        sources[wkey] = [
            'function(require,module,exports){' + fn + '(self); }',
            wcache
        ];
    }
    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);

    var scache = {}; scache[wkey] = wkey;
    sources[skey] = [
        'function(require,module,exports){' +
            // try to call default if defined to also support babel esmodule exports
            'var f = require(' + stringify(wkey) + ');' +
            '(f.default ? f.default : f)(self);' +
        '}',
        scache
    ];

    var workerSources = {};
    resolveSources(skey);

    function resolveSources(key) {
        workerSources[key] = true;

        for (var depPath in sources[key][1]) {
            var depKey = sources[key][1][depPath];
            if (!workerSources[depKey]) {
                resolveSources(depKey);
            }
        }
    }

    var src = '(' + bundleFn + ')({'
        + Object.keys(workerSources).map(function (key) {
            return stringify(key) + ':['
                + sources[key][0]
                + ',' + stringify(sources[key][1]) + ']'
            ;
        }).join(',')
        + '},{},[' + stringify(skey) + '])'
    ;

    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;

    var blob = new Blob([src], { type: 'text/javascript' });
    if (options && options.bare) { return blob; }
    var workerUrl = URL.createObjectURL(blob);
    var worker = new Worker(workerUrl);
    worker.objectURL = workerUrl;
    return worker;
};


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = __webpack_require__(343);

var _events2 = _interopRequireDefault(_events);

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _browser = __webpack_require__(351);

var _browser2 = _interopRequireDefault(_browser);

var _mseEvents = __webpack_require__(381);

var _mseEvents2 = _interopRequireDefault(_mseEvents);

var _mediaSegmentInfo = __webpack_require__(364);

var _exception = __webpack_require__(348);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Media Source Extensions controller
var MSEController = function () {
    function MSEController(config) {
        _classCallCheck(this, MSEController);

        this.TAG = 'MSEController';

        this._config = config;
        this._emitter = new _events2.default();

        if (this._config.isLive && this._config.autoCleanupSourceBuffer == undefined) {
            // For live stream, do auto cleanup by default
            this._config.autoCleanupSourceBuffer = true;
        }

        this._config.autoCleanupSourceBuffer = true; //forall

        this.e = {
            onSourceOpen: this._onSourceOpen.bind(this),
            onSourceEnded: this._onSourceEnded.bind(this),
            onSourceClose: this._onSourceClose.bind(this),
            onSourceBufferError: this._onSourceBufferError.bind(this),
            onSourceBufferUpdateEnd: this._onSourceBufferUpdateEnd.bind(this)
        };

        this._mediaSource = null;
        this._mediaSourceObjectURL = null;
        this._mediaElement = null;

        this._isBufferFull = false;
        this._hasPendingEos = false;

        this._requireSetMediaDuration = false;
        this._pendingMediaDuration = 0;
        this._defseekchecktime = 10; //用于定位时，没有成功播放 chrome<50
        this._seekpos = -1 - this._defseekchecktime;
        this._bufferdlength = 0;
        this._defremovechecktime = 2;
        this._removechecktime = 0;

        this._pendingSourceBufferInit = [];
        this._mimeTypes = {
            video: null,
            audio: null
        };
        this._sourceBuffers = {
            video: null,
            audio: null
        };
        this._lastInitSegments = {
            video: null,
            audio: null
        };
        this._pendingSegments = {
            video: [],
            audio: []
        };
        this._pendingRemoveRanges = {
            video: [],
            audio: []
        };
        this._idrList = new _mediaSegmentInfo.IDRSampleList();

        // this._currentRange = {start:0, end:0};
        // this._lastBufferedRanges = [];

        // this._debugtime = 30;
        // this._debugtime2 = 300;
        this._afterseek = false;
    }

    _createClass(MSEController, [{
        key: 'destroy',
        value: function destroy() {
            if (this._mediaElement || this._mediaSource) {
                this.detachMediaElement();
            }
            this.e = null;
            this._emitter.removeAllListeners();
            this._emitter = null;
        }
    }, {
        key: 'on',
        value: function on(event, listener) {
            this._emitter.addListener(event, listener);
        }
    }, {
        key: 'off',
        value: function off(event, listener) {
            this._emitter.removeListener(event, listener);
        }
    }, {
        key: 'attachMediaElement',
        value: function attachMediaElement(mediaElement) {
            if (this._mediaSource) {
                throw new _exception.IllegalStateException('MediaSource has been attached to an HTMLMediaElement!');
            }
            this._mediaElement = mediaElement;
            //debugger;
            var ms = this._mediaSource = new window.MediaSource();
            ms.addEventListener('sourceopen', this.e.onSourceOpen);
            ms.addEventListener('sourceended', this.e.onSourceEnded);
            ms.addEventListener('sourceclose', this.e.onSourceClose);

            this._mediaSourceObjectURL = window.URL.createObjectURL(this._mediaSource);
            mediaElement.src = this._mediaSourceObjectURL;
        }
    }, {
        key: 'detachMediaElement',
        value: function detachMediaElement() {
            if (this._mediaSource) {
                var ms = this._mediaSource;
                for (var type in this._sourceBuffers) {
                    // pending segments should be discard
                    var ps = this._pendingSegments[type];
                    ps.splice(0, ps.length);
                    this._pendingSegments[type] = null;
                    this._pendingRemoveRanges[type] = null;
                    this._lastInitSegments[type] = null;

                    // remove all sourcebuffers
                    var sb = this._sourceBuffers[type];
                    if (sb) {
                        if (ms.readyState !== 'closed') {
                            // ms edge can throw an error: Unexpected call to method or property access
                            try {
                                ms.removeSourceBuffer(sb);
                            } catch (error) {
                                _logger2.default.e(this.TAG, error.message);
                            }
                            sb.removeEventListener('error', this.e.onSourceBufferError);
                            sb.removeEventListener('updateend', this.e.onSourceBufferUpdateEnd);
                        }
                        this._mimeTypes[type] = null;
                        this._sourceBuffers[type] = null;
                    }
                }
                if (ms.readyState === 'open') {
                    try {
                        ms.endOfStream();
                    } catch (error) {
                        _logger2.default.e(this.TAG, error.message);
                    }
                }
                ms.removeEventListener('sourceopen', this.e.onSourceOpen);
                ms.removeEventListener('sourceended', this.e.onSourceEnded);
                ms.removeEventListener('sourceclose', this.e.onSourceClose);
                this._pendingSourceBufferInit = [];
                this._isBufferFull = false;
                this._idrList.clear();
                this._mediaSource = null;
            }

            if (this._mediaElement) {
                try {
                    this._mediaElement.pause();
                    this._mediaElement.src = '';
                    this._mediaElement.removeAttribute('src');
                } catch (error) {
                    // 
                }
                this._mediaElement = null;
            }
            if (this._mediaSourceObjectURL) {
                window.URL.revokeObjectURL(this._mediaSourceObjectURL);
                this._mediaSourceObjectURL = null;
            }
        }
    }, {
        key: 'appendInitSegment',
        value: function appendInitSegment(initSegment, deferred) {
            if (!this._mediaSource || this._mediaSource.readyState !== 'open') {
                // sourcebuffer creation requires mediaSource.readyState === 'open'
                // so we defer the sourcebuffer creation, until sourceopen event triggered
                this._pendingSourceBufferInit.push(initSegment);
                // make sure that this InitSegment is in the front of pending segments queue
                this._pendingSegments[initSegment.type].push(initSegment);
                return;
            }

            var is = initSegment;
            var mimeType = '' + is.container;
            if (is.codec && is.codec.length > 0) {
                mimeType += ';codecs=' + is.codec;
            }

            var firstInitSegment = false;

            _logger2.default.v(this.TAG, 'Received Initialization Segment, mimeType: ' + mimeType);
            this._lastInitSegments[is.type] = is;

            if (mimeType !== this._mimeTypes[is.type]) {
                if (!this._mimeTypes[is.type]) {
                    // empty, first chance create sourcebuffer
                    firstInitSegment = true;
                    try {
                        var sb = this._sourceBuffers[is.type] = this._mediaSource.addSourceBuffer(mimeType);
                        sb.addEventListener('error', this.e.onSourceBufferError);
                        sb.addEventListener('updateend', this.e.onSourceBufferUpdateEnd);
                    } catch (error) {
                        _logger2.default.e(this.TAG, error.message);
                        this._emitter.emit(_mseEvents2.default.ERROR, { code: error.code, msg: error.message });
                        return;
                    }
                } else {
                    _logger2.default.v(this.TAG, 'Notice: ' + is.type + ' mimeType changed, origin: ' + this._mimeTypes[is.type] + ', target: ' + mimeType);
                }
                this._mimeTypes[is.type] = mimeType;
            }

            if (!deferred) {
                // deferred means this InitSegment has been pushed to pendingSegments queue
                this._pendingSegments[is.type].push(is);
            }
            if (!firstInitSegment) {
                // append immediately only if init segment in subsequence
                if (this._sourceBuffers[is.type] && !this._sourceBuffers[is.type].updating) {
                    this._doAppendSegments();
                }
            }
            if (_browser2.default.safari && is.container === 'audio/mpeg' && is.mediaDuration > 0) {
                // 'audio/mpeg' track under Safari may cause MediaElement's duration to be NaN
                // Manually correct MediaSource.duration to make progress bar seekable, and report right duration
                this._requireSetMediaDuration = true;
                this._pendingMediaDuration = is.mediaDuration / 1000; // in seconds
                this._updateMediaSourceDuration();
            }
        }
    }, {
        key: 'appendMediaSegment',
        value: function appendMediaSegment(mediaSegment) {
            var ms = mediaSegment;
            this._pendingSegments[ms.type].push(ms);
            //+!this._hasPendingRemoveRanges()，防止chrome31-36出现删除不掉的短出现死循环
            if (this._config.autoCleanupSourceBuffer && this._needCleanupSourceBuffer() && !this._hasPendingRemoveRanges()) {
                this._doCleanupSourceBuffer();
            }

            var sb = this._sourceBuffers[ms.type];
            if (sb && !sb.updating && !this._hasPendingRemoveRanges()) {
                this._doAppendSegments();
            }
        }
    }, {
        key: 'seek',
        value: function seek(seconds) {
            this._seekpos = seconds;
            this._removechecktime = 0;
            this._afterseek = true;
            //Log.v(this.TAG, `seek ${seconds}`);
            // remove all appended buffers
            for (var type in this._sourceBuffers) {
                if (!this._sourceBuffers[type]) {
                    continue;
                }

                // abort current buffer append algorithm
                var sb = this._sourceBuffers[type];
                if (this._mediaSource.readyState === 'open') {
                    try {
                        // If range removal algorithm is running, InvalidStateError will be throwed
                        // Ignore it.
                        sb.abort();
                    } catch (error) {
                        _logger2.default.e(this.TAG, error.message);
                    }
                }

                // IDRList should be clear
                this._idrList.clear();

                // pending segments should be discard
                var ps = this._pendingSegments[type];
                ps.splice(0, ps.length);

                if (this._mediaSource.readyState === 'closed') {
                    // Parent MediaSource object has been detached from HTMLMediaElement
                    continue;
                }

                // record ranges to be remove from SourceBuffer
                for (var i = 0; i < sb.buffered.length; i++) {
                    var start = sb.buffered.start(i);
                    var end = sb.buffered.end(i);
                    this._pendingRemoveRanges[type].push({ start: start, end: end });
                    //Log.v(this.TAG, `seek _pendingRemoveRanges ${start} to ${end}`);
                }

                // if sb is not updating, let's remove ranges now!
                if (!sb.updating) {
                    //Log.v(this.TAG, `seek _doRemoveRanges begin`);
                    this._doRemoveRanges();
                    //Log.v(this.TAG, `seek _doRemoveRanges end`);
                    //for (let i = 0; i < sb.buffered.length; i++) { 
                    //   Log.v(this.TAG, `after _doRemoveRanges, buffered ${this._sourceBuffers[type].buffered.start(i)} to ${this._sourceBuffers[type].buffered.end(i)}`);
                    //}
                }

                // Safari 10 may get InvalidStateError in the later appendBuffer() after SourceBuffer.remove() call
                // Internal parser's state may be invalid at this time. Re-append last InitSegment to workaround.
                // Related issue: https://bugs.webkit.org/show_bug.cgi?id=159230
                if (_browser2.default.safari) {
                    var lastInitSegment = this._lastInitSegments[type];
                    if (lastInitSegment) {
                        this._pendingSegments[type].push(lastInitSegment);
                        if (!sb.updating) {
                            this._doAppendSegments();
                        }
                    }
                }
            }
        }
    }, {
        key: 'endOfStream',
        value: function endOfStream() {
            var ms = this._mediaSource;
            var sb = this._sourceBuffers;
            if (!ms || ms.readyState !== 'open') {
                if (ms && ms.readyState === 'closed' && this._hasPendingSegments()) {
                    // If MediaSource hasn't turned into open state, and there're pending segments
                    // Mark pending endOfStream, defer call until all pending segments appended complete
                    this._hasPendingEos = true;
                }
                return;
            }
            if (sb.video && sb.video.updating || sb.audio && sb.audio.updating) {
                // If any sourcebuffer is updating, defer endOfStream operation
                // See _onSourceBufferUpdateEnd()
                this._hasPendingEos = true;
            } else {
                this._hasPendingEos = false;
                // Notify media data loading complete
                // This is helpful for correcting total duration to match last media segment
                // Otherwise MediaElement's ended event may not be triggered
                ms.endOfStream();
            }
        }
    }, {
        key: 'getNearestKeyframe',
        value: function getNearestKeyframe(dts) {
            return this._idrList.getLastSyncPointBeforeDts(dts);
        }
    }, {
        key: '_needCleanupSourceBuffer',
        value: function _needCleanupSourceBuffer() {
            if (!this._config.autoCleanupSourceBuffer) {
                return false;
            }

            var currentTime = this._mediaElement.currentTime;

            for (var type in this._sourceBuffers) {
                var sb = this._sourceBuffers[type];
                if (sb) {
                    var buffered = sb.buffered;
                    for (var i = 0; i < buffered.length; i++) {
                        var start = buffered.start(i);
                        var end = buffered.end(i);
                        //if (buffered.length >= 1) {
                        if (currentTime - start >= this._config.autoCleanupMaxBackwardDuration) {
                            return true;
                        }
                    }
                }
            }

            return false;
        }
    }, {
        key: '_doCleanupSourceBuffer',
        value: function _doCleanupSourceBuffer() {
            var currentTime = this._mediaElement.currentTime;

            for (var type in this._sourceBuffers) {
                var sb = this._sourceBuffers[type];
                if (sb) {
                    var buffered = sb.buffered;
                    var doRemove = false;

                    for (var i = 0; i < buffered.length; i++) {
                        var start = buffered.start(i);
                        var end = buffered.end(i);

                        if (start <= currentTime && currentTime < end + 3) {
                            // padding 3 seconds
                            if (currentTime - start >= this._config.autoCleanupMaxBackwardDuration) {
                                doRemove = true;
                                var removeEnd = currentTime - this._config.autoCleanupMinBackwardDuration;
                                var ranges = this._pendingRemoveRanges[type];
                                var _bfind = false;
                                for (var j = 0; j < ranges.length; j++) {
                                    if (ranges[j].start === start) {
                                        ranges[j].end = removeEnd;
                                        _bfind = true;
                                        //Log.v(this.TAG, `_doCleanupSourceBuffer reset _pendingRemoveRanges  currentTime ${currentTime} from ${start} to ${removeEnd}`);
                                        break;
                                    }
                                }
                                if (!_bfind) {
                                    //this._debugtime2 = this._debugtime2 -1;
                                    //if(this._debugtime2<0) {
                                    //debugger;
                                    //}
                                    this._pendingRemoveRanges[type].push({ start: start, end: removeEnd });
                                    //Log.v(this.TAG, `_doCleanupSourceBuffer _pendingRemoveRanges currentTime ${currentTime} from ${start} to ${removeEnd}`);
                                }
                            }
                        } else if (end < currentTime) {
                            if (!this._config.isLive) {
                                // record 删除时间戳变小的
                                doRemove = true;
                                var _ranges = this._pendingRemoveRanges[type];
                                var _bfind2 = false;
                                for (var _j = 0; _j < _ranges.length; _j++) {
                                    if (_ranges[_j].start === start) {
                                        _ranges[_j].end = end;
                                        _bfind2 = true;
                                        _logger2.default.v(this.TAG, '_doCleanupSourceBuffer reset _pendingRemoveRanges  currentTime ' + currentTime + ' from ' + start + ' to ' + end);
                                        break;
                                    }
                                }
                                if (!_bfind2) {
                                    //this._debugtime2 = this._debugtime2 -1;
                                    //if(this._debugtime2<0) {
                                    //debugger;
                                    //}
                                    this._pendingRemoveRanges[type].push({ start: start, end: end });
                                    //Log.v(this.TAG, `_doCleanupSourceBuffer _pendingRemoveRanges currentTime ${currentTime} from ${start} to ${end}`);
                                }
                            } else {
                                //实时流不应该存在时间戳小的
                                doRemove = true;
                                this._pendingRemoveRanges[type].push({ start: start, end: end });
                                _logger2.default.w(this.TAG, '_doCleanupSourceBuffer from ' + start + ' to ' + end + '  doRemove ' + doRemove);
                            }
                        }
                    }

                    if (doRemove && !sb.updating) {
                        this._doRemoveRanges();
                    }
                }
            }
        }
    }, {
        key: '_updateMediaSourceDuration',
        value: function _updateMediaSourceDuration() {
            var sb = this._sourceBuffers;
            if (this._mediaElement.readyState === 0 || this._mediaSource.readyState !== 'open') {
                return;
            }
            if (sb.video && sb.video.updating || sb.audio && sb.audio.updating) {
                return;
            }

            var current = this._mediaSource.duration;
            var target = this._pendingMediaDuration;

            if (target > 0 && (isNaN(current) || target > current)) {
                _logger2.default.v(this.TAG, 'Update MediaSource duration from ' + current + ' to ' + target);
                this._mediaSource.duration = target;
            }

            this._requireSetMediaDuration = false;
            this._pendingMediaDuration = 0;
        }
    }, {
        key: '_doRemoveRanges',
        value: function _doRemoveRanges() {
            for (var type in this._pendingRemoveRanges) {
                if (!this._sourceBuffers[type] || this._sourceBuffers[type].updating) {
                    continue;
                }
                var sb = this._sourceBuffers[type];
                var ranges = this._pendingRemoveRanges[type];
                while (ranges.length && !sb.updating) {
                    var range = ranges.shift();
                    //Log.v(this.TAG, `_doRemoveRanges duration from ${range.start} to ${range.end}`);
                    try {
                        sb.remove(range.start, range.end);
                    } catch (error) {
                        _logger2.default.e(this.TAG, error.message);
                    }
                }
            }
        }
    }, {
        key: '_doAppendSegments',
        value: function _doAppendSegments() {
            var pendingSegments = this._pendingSegments;

            for (var type in pendingSegments) {
                if (!this._sourceBuffers[type] || this._sourceBuffers[type].updating) {
                    continue;
                }

                if (pendingSegments[type].length > 0) {

                    // if(this._seekpos > 0) {
                    //     for (let i = 0; i < this._sourceBuffers[type].buffered.length; i++) {
                    //         Log.v(this.TAG, `befor _doAppendSegments, buffered ${this._sourceBuffers[type].buffered.start(i)} to ${this._sourceBuffers[type].buffered.end(i)}`);
                    //     }
                    // }
                    var segment = pendingSegments[type].shift();

                    if (segment.timestampOffset) {
                        // For MPEG audio stream in MSE, if unbuffered-seeking occurred
                        // We need explicitly set timestampOffset to the desired point in timeline for mpeg SourceBuffer.
                        var currentOffset = this._sourceBuffers[type].timestampOffset;
                        var targetOffset = segment.timestampOffset / 1000; // in seconds

                        var delta = Math.abs(currentOffset - targetOffset);
                        if (delta > 0.1) {
                            // If time delta > 100ms
                            _logger2.default.v(this.TAG, 'Update MPEG audio timestampOffset from ' + currentOffset + ' to ' + targetOffset);
                            this._sourceBuffers[type].timestampOffset = targetOffset;
                        }
                        delete segment.timestampOffset;
                    }

                    if (!segment.data || segment.data.byteLength === 0) {
                        // Ignore empty buffer
                        continue;
                    }

                    try {

                        var sb = this._sourceBuffers[type];
                        sb.appendBuffer(segment.data);
                        this._isBufferFull = false;
                        if (this._afterseek) {
                            _logger2.default.v(this.TAG, '_afterseek appendBuffer');
                            this._afterseek = false;
                        }
                        if (type === 'video') {
                            if (segment.hasOwnProperty('info')) {
                                this._idrList.appendArray(segment.info.syncPoints);
                            }
                            // if(sb.buffered) { //找到正在缓冲的Range
                            //     if(sb.buffered.length === 1) {
                            //         this._currentRange = {start:sb.buffered.start(0), start:sb.buffered.end(0)};
                            //     } else {sb.buffered.length > 1} {
                            //         for(let i = 0; i < sb.buffered.length; i++) {
                            //             for(let j = 0; j < this._lastBufferedRanges.length; j++) {
                            //                 let _last = this._lastBufferedRanges;
                            //                 this._lastBufferedRanges.push({start:sb.buffered.start(i), start:sb.buffered.end(i)});
                            //             }
                            //         }
                            //     }
                            //     this._lastBufferedRanges.splice(0, this._lastBufferedRanges.length);
                            //     for(let i = 0; i < sb.buffered.length; i++) {
                            //         this._lastBufferedRanges.push({start:sb.buffered.start(i), start:sb.buffered.end(i)});
                            //     }
                            // }
                        }
                    } catch (error) {
                        this._pendingSegments[type].unshift(segment);
                        if (error.code === 22) {
                            // QuotaExceededError
                            /* Notice that FireFox may not throw QuotaExceededError if SourceBuffer is full
                             * Currently we can only do lazy-load to avoid SourceBuffer become scattered.
                             * SourceBuffer eviction policy may be changed in future version of FireFox.
                             *
                             * Related issues:
                             * https://bugzilla.mozilla.org/show_bug.cgi?id=1279885
                             * https://bugzilla.mozilla.org/show_bug.cgi?id=1280023
                             */

                            // report buffer full, abort network IO
                            if (!this._isBufferFull) {
                                this._emitter.emit(_mseEvents2.default.BUFFER_FULL);
                            }
                            this._isBufferFull = true;
                        } else {
                            _logger2.default.e(this.TAG, error.message);
                            this._emitter.emit(_mseEvents2.default.ERROR, { code: error.code, msg: error.message });
                        }
                    }

                    //if(this._seekpos > 0) {
                    //    for (let i = 0; i < this._sourceBuffers[type].buffered.length; i++) {
                    //       Log.v(this.TAG, `after _doAppendSegments, buffered ${this._sourceBuffers[type].buffered.start(i)} to ${this._sourceBuffers[type].buffered.end(i)}`);
                    //   }
                    //}
                }
            }
        }
    }, {
        key: '_onSourceOpen',
        value: function _onSourceOpen() {
            _logger2.default.v(this.TAG, 'MediaSource onSourceOpen');
            this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);
            // deferred sourcebuffer creation / initialization
            if (this._pendingSourceBufferInit.length > 0) {
                var pendings = this._pendingSourceBufferInit;
                while (pendings.length) {
                    var segment = pendings.shift();
                    this.appendInitSegment(segment, true);
                }
            }
            // there may be some pending media segments, append them
            if (this._hasPendingSegments()) {
                this._doAppendSegments();
            }
            this._emitter.emit(_mseEvents2.default.SOURCE_OPEN);
        }
    }, {
        key: '_onSourceEnded',
        value: function _onSourceEnded() {
            // fired on endOfStream
            _logger2.default.v(this.TAG, 'MediaSource onSourceEnded');
        }
    }, {
        key: '_onSourceClose',
        value: function _onSourceClose() {
            // fired on detaching from media element
            _logger2.default.v(this.TAG, 'MediaSource onSourceClose');
            if (this._mediaSource && this.e != null) {
                this._mediaSource.removeEventListener('sourceopen', this.e.onSourceOpen);
                this._mediaSource.removeEventListener('sourceended', this.e.onSourceEnded);
                this._mediaSource.removeEventListener('sourceclose', this.e.onSourceClose);
            }
        }
    }, {
        key: '_hasPendingSegments',
        value: function _hasPendingSegments() {
            var ps = this._pendingSegments;
            return ps && (ps.video && ps.video.length > 0 || ps.audio && ps.audio.length > 0);
        }
    }, {
        key: '_hasPendingRemoveRanges',
        value: function _hasPendingRemoveRanges() {
            var prr = this._pendingRemoveRanges;
            return prr && (prr.video && prr.video.length > 0 || prr.audio && prr.audio.length > 0);
        }
    }, {
        key: '_onSourceBufferUpdateEnd',
        value: function _onSourceBufferUpdateEnd() {
            if (!this._mediaElement) {
                return;
            }
            if (this._requireSetMediaDuration) {
                this._updateMediaSourceDuration();
            } else if (this._hasPendingRemoveRanges()) {
                if (this._pendingSegments && this._pendingSegments.video && this._pendingSegments.video.length > 20) {
                    this._doAppendSegments();
                }
                //this._debugtime = this._debugtime -1;
                // if (this._debugtime <= 0) {
                //debugger;
                //}
                this._doRemoveRanges();
            } else if (this._hasPendingSegments()) {
                this._doAppendSegments();
                //this._debugtime = 30;
            } else if (this._hasPendingEos) {
                this.endOfStream();
            }
            if (this._seekpos >= 0) {
                this._checkSourceSeek();
            }

            this._emitter.emit(_mseEvents2.default.UPDATE_END);
        }
    }, {
        key: '_onSourceBufferError',
        value: function _onSourceBufferError(e) {
            _logger2.default.e(this.TAG, 'SourceBuffer Error: ' + e);
            // this error might not always be fatal, just ignore it
        }
    }, {
        key: '_checkSourceSeek',
        value: function _checkSourceSeek() {
            // 定位时间不准确 播放不了
            if (!this._mediaElement) {
                return;
            }
            try {
                var currentTime = this._mediaElement.currentTime;
                for (var type in this._sourceBuffers) {
                    if (type !== 'video') {
                        //只检测video
                        continue;
                    }
                    var sb = this._sourceBuffers[type];
                    if (sb) {
                        var buffered = sb.buffered;

                        if (this._bufferdlength !== buffered.length) {
                            this._bufferdlength = buffered.length;
                        }
                        for (var i = 0; i < buffered.length; i++) {
                            var start = buffered.start(i);
                            var end = buffered.end(i);
                            if (this._seekpos >= 0) {
                                var _dif = this._seekpos - start;
                                if (_dif > 10 && this._removechecktime++ < this._defremovechecktime) {
                                    //去掉无效的段
                                    var _temp = end < this._seekpos - 10 ? end : this._seekpos - 10;
                                    this._pendingRemoveRanges[type].push({ start: start, end: _temp });
                                    //Log.v(this.TAG, `_checkSourceSeek _pendingRemoveRanges1 ${start} to ${_temp}`);
                                    if (!sb.updating) {
                                        this._doRemoveRanges();
                                    }
                                }
                                if (end - this._seekpos > 10 && this._removechecktime++ < this._defremovechecktime) {
                                    //去掉无效的段
                                    var _temp2 = start > this._seekpos + 10 ? start : this._seekpos + 10;
                                    this._pendingRemoveRanges[type].push({ start: _temp2, end: end });
                                    //Log.v(this.TAG, `_checkSourceSeek _pendingRemoveRanges2 ${_temp} to ${end}`);
                                    if (!sb.updating) {
                                        this._doRemoveRanges();
                                    }
                                }
                                if (_dif >= 0 && (this._seekpos <= end || _dif < 3)) {
                                    _logger2.default.w(this.TAG, '_seekpos: ' + this._seekpos);
                                    this._emitter.emit(_mseEvents2.default.SOURCE_SEEK, _dif < 3 ? start : this._seekpos); // chrome<50存在一次seek后仍不播放的问题
                                    this._seekpos = -1;
                                    return;
                                } else if (_dif > -3 && this._seekpos <= end) {
                                    //三秒容错
                                    _logger2.default.w(this.TAG, 'MSEEvents.SOURCE_SEEK: ' + this._seekpos + ' to ' + start);
                                    this._seekpos = -1;
                                    this._emitter.emit(_mseEvents2.default.SOURCE_SEEK, start);
                                    return;
                                }
                            } else if (this._seekpos >= -this._defseekchecktime) {
                                if (currentTime == start) {
                                    //防止多段
                                    this._seekpos = this._seekpos - 1; //可以设置两次
                                    if (this._seekpos <= -this._defseekchecktime) {
                                        //  Log.w(this.TAG, `MSEEvents.SOURCE_SEEK after _defseekchecktime: to ${start}`);
                                        this._emitter.emit(_mseEvents2.default.SOURCE_SEEK, start);
                                    }
                                }

                                if (end > currentTime - 10) {
                                    var _temp3 = start > currentTime - 10 ? start : currentTime - 10;
                                    this._pendingRemoveRanges[type].push({ _temp: start, end: end });
                                    //Log.v(this.TAG, `_checkSourceSeek _pendingRemoveRanges3 ${_temp} to ${end}`);
                                    if (!sb.updating) {
                                        this._doRemoveRanges();
                                    }
                                }
                                return;
                            }
                        }
                    }
                }
            } catch (e) {}
        }
    }]);

    return MSEController;
}();

exports.default = MSEController;

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var MSEEvents = {
    ERROR: 'error',
    SOURCE_OPEN: 'source_open',
    UPDATE_END: 'update_end',
    BUFFER_FULL: 'buffer_full',
    SOURCE_SEEK: 'source_seek'
};

exports.default = MSEEvents;

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = __webpack_require__(343);

var _events2 = _interopRequireDefault(_events);

var _playerEvents = __webpack_require__(345);

var _playerEvents2 = _interopRequireDefault(_playerEvents);

var _playerErrors = __webpack_require__(346);

var _exception = __webpack_require__(348);

var _hls = __webpack_require__(383);

var _hls2 = _interopRequireDefault(_hls);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// HlsPlayer baseon hls.js //https://github.com/video-dev/hls.js. master 2019-05-13
var HlsPlayer = function () {
    function HlsPlayer(mediaDataSource, config) {
        _classCallCheck(this, HlsPlayer);

        this.TAG = 'HlsPlayer';
        this._type = 'HlsPlayer';
        this._emitter = new _events2.default();

        this._config = config;
        this._callbacks = null;
        if (_typeof(mediaDataSource.callbacks) === 'object') {
            this._callbacks = mediaDataSource.callbacks;
        }

        if (mediaDataSource.channelInfo.devicetype.toLowerCase() !== 'hls') {
            throw new _exception.InvalidArgumentException('HlsPlayer does\'t support stream input!');
        }

        this.e = {
            onvLoadedMetadata: this._onvLoadedMetadata.bind(this),
            onvCanPlay: this._onvCanPlay.bind(this),
            onvSeeked: this._onvSeeked.bind(this),
            onvError: this._onvError.bind(this),
            onvTimeUpdate: this._onvTimeUpdate.bind(this),
            onvRateChange: this._onvRateChange.bind(this)
        };

        this._statisticsReporter = null;

        this._mediaDataSource = mediaDataSource;
        this._mediaElement = null;
        this._receivedCanPlay = false; //后
        //this._loadedMetadata = false; //先
        this._frameDuration = 0.040;

        this._player = new _hls2.default(this._config);
    }

    _createClass(HlsPlayer, [{
        key: 'destroy',
        value: function destroy() {
            if (this._mediaElement) {
                this.unload();
                this.detachMediaElement();
            }
            if (this._player) {
                this._player.destroy();
                this._player = null;
            }
            this.e = null;
            this._mediaDataSource = null;
            this._emitter.removeAllListeners();
            this._emitter = null;
        }
    }, {
        key: 'on',
        value: function on(event, listener) {
            var _this = this;

            if (event === _playerEvents2.default.MEDIA_INFO) {
                if (this._mediaElement != null && this._mediaElement.readyState !== 0) {
                    // HAVE_NOTHING
                    Promise.resolve().then(function () {
                        _this._emitter.emit(_playerEvents2.default.MEDIA_INFO, _this.mediaInfo);
                    });
                }
            } else if (event === _playerEvents2.default.STATISTICS_INFO) {
                if (this._mediaElement != null && this._mediaElement.readyState !== 0) {
                    Promise.resolve().then(function () {
                        _this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, _this.statisticsInfo);
                    });
                }
            }
            this._emitter.addListener(event, listener);
        }
    }, {
        key: 'off',
        value: function off(event, listener) {
            this._emitter.removeListener(event, listener);
        }
    }, {
        key: 'attachMediaElement',
        value: function attachMediaElement(mediaElement) {
            if (!this._player) {
                throw new _exception.IllegalStateException('HlsPlayer has been destroyed!');
            }
            this._mediaElement = mediaElement;
            mediaElement.addEventListener('loadedmetadata', this.e.onvLoadedMetadata);
            mediaElement.addEventListener('canplay', this.e.onvCanPlay);
            mediaElement.addEventListener('seeked', this.e.onvSeeked);
            mediaElement.addEventListener('error', this.e.onvError);
            mediaElement.addEventListener('ratechange', this.e.onvRateChange);
            mediaElement.addEventListener('timeupdate', this.e.onvTimeUpdate);
            //mediaElement.crossOrigin = 'Anonymous'; //为canvas抓图设置，CORS 策略
            //https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image
            this._player.attachMedia(mediaElement);

            this._player.on(_hls2.default.Events.ERROR, this._onHlsError.bind(this));
        }
    }, {
        key: 'detachMediaElement',
        value: function detachMediaElement() {
            if (this._mediaElement) {
                if (this._player) {
                    this._player.detachMedia();
                }
                this._mediaElement.src = '';
                this._mediaElement.removeAttribute('src');
                this._mediaElement.removeEventListener('loadedmetadata', this.e.onvLoadedMetadata);
                this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);
                this._mediaElement.removeEventListener('seeked', this.e.onvSeeked);
                this._mediaElement.removeEventListener('error', this.e.onvError);
                this._mediaElement.removeEventListener('ratechange', this.e.onvRateChange);
                this._mediaElement.removeEventListener('timeupdate', this.e.onvTimeUpdate);
                this._mediaElement = null;
            }
            if (this._statisticsReporter != null) {
                window.clearInterval(this._statisticsReporter);
                this._statisticsReporter = null;
            }
        }
    }, {
        key: 'load',
        value: function load() {
            if (!this._mediaElement || !this._player) {
                throw new _exception.IllegalStateException('HTMLMediaElement must be attached before load()!');
            }

            this._mediaElement.muted = true;
            this._mediaElement.autoplay = true;

            this._player.loadSource(this._mediaDataSource.channelInfo.url);
            this._player.startLoad();
            this._statisticsReporter = window.setInterval(this._reportStatisticsInfo.bind(this), 1000);
        }
    }, {
        key: 'unload',
        value: function unload() {
            if (this._player) {
                this._player.stopLoad();
            }
            if (this._statisticsReporter != null) {
                window.clearInterval(this._statisticsReporter);
                this._statisticsReporter = null;
            }
        }
    }, {
        key: 'play',
        value: function play() {
            if (!this._mediaDataSource.isLive) {
                this._emitter.emit(_playerEvents2.default.VIDEOPLAY);
                if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                    this._callbacks.onnotify(_playerEvents2.default.VIDEOPLAY);
                }
                try {
                    this._mediaElement.play().catch(function (e) {
                        //Log.v(this.TAG, 'play() catch');
                    });
                } catch (e) {}
                return true;
            }
            return false;
        }
    }, {
        key: 'pause',
        value: function pause() {
            if (!this._mediaDataSource.isLive) {
                this._emitter.emit(_playerEvents2.default.VIDEOPAUSE);
                if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                    this._callbacks.onnotify(_playerEvents2.default.VIDEOPAUSE);
                }
                this._mediaElement.pause();
                return true;
            }
            return false;
        }
    }, {
        key: '_onvCanPlay',
        value: function _onvCanPlay(e) {
            if (this._receivedCanPlay === false) {
                this._emitter.emit(_playerEvents2.default.FIRST_CANPLAY); //解码第一帧
                if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                    this._callbacks.onnotify(_playerEvents2.default.FIRST_CANPLAY);
                }
            }
            this._receivedCanPlay = true;
            this._mediaElement.removeEventListener('canplay', this.e.onvCanPlay);
        }
    }, {
        key: '_onvTimeUpdate',
        value: function _onvTimeUpdate(e) {
            this._emitter.emit(_playerEvents2.default.PLAYTIME, this._mediaElement.currentTime);
            if (this._callbacks && typeof this._callbacks.onplaytime === 'function' && this._mediaElement) {
                this._callbacks.onplaytime(this._mediaElement.currentTime);
            }
        }
    }, {
        key: '_onvLoadedMetadata',
        value: function _onvLoadedMetadata(e) {
            if (this._pendingSeekTime != null) {
                this._mediaElement.currentTime = this._pendingSeekTime;
                this._pendingSeekTime = null;
            }
        }
    }, {
        key: '_onvSeeked',
        value: function _onvSeeked(e) {
            if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                this._callbacks.onnotify(_playerEvents2.default.VIDEOSEEK, { currentTime: this._mediaElement.currentTime });
            }
            this._emitter.emit(_playerEvents2.default.VIDEOSEEK, { currentTime: this._mediaElement.currentTime });
        }
    }, {
        key: '_onvRateChange',
        value: function _onvRateChange(e) {
            this._emitter.emit(_playerEvents2.default.SPEEDCHANGE, { playbackRate: this._mediaElement.playbackRate });
            if (this._callbacks && typeof this._callbacks.onnotify === 'function') {
                this._callbacks.onnotify(_playerEvents2.default.SPEEDCHANGE, { playbackRate: this._mediaElement.playbackRate });
            }
        }
    }, {
        key: '_onvError',
        value: function _onvError(e) {
            this._emitter.emit(_playerEvents2.default.ERROR, _playerErrors.ErrorTypes.MEDIA_ERROR, _playerErrors.ErrorDetails.MEDIA_VIDEO_ERROR, { code: e.code });
            if (this._callbacks && typeof this._callbacks.onerror === 'function') {
                this._callbacks.onerror(_playerErrors.ErrorTypes.MEDIA_ERROR, _playerErrors.ErrorDetails.MEDIA_VIDEO_ERROR, { code: e.code });
            }
        }
    }, {
        key: '_reportStatisticsInfo',
        value: function _reportStatisticsInfo() {
            this._emitter.emit(_playerEvents2.default.STATISTICS_INFO, this.statisticsInfo);
        }
    }, {
        key: '_onHlsError',
        value: function _onHlsError(e, data) {
            if (data.fatal == false) {
                //hls.js will try to recover it 
                console.log(data);
                return;
            } else {
                var eType = _playerErrors.ErrorTypes.OTHER_ERROR;
                switch (data.type) {
                    case _hls2.default.ErrorTypes.NETWORK_ERROR:
                        //// Identifier for a network error (loading error / timeout ...)
                        eType = _playerErrors.ErrorTypes.NETWORK_ERROR;
                        break;
                    case _hls2.default.ErrorTypes.MEDIA_ERROR: //// Identifier for a media Error (video/parsing/mediasource error)
                    case _hls2.default.ErrorTypes.KEY_SYSTEM_ERROR: //// EME (encrypted media extensions) errors
                    case _hls2.default.ErrorTypes.MUX_ERROR:
                        //// Identifier for a mux Error (demuxing/remuxing)
                        eType = _playerErrors.ErrorTypes.MEDIA_ERROR;
                        break;
                    default:
                        break;
                }
                this._emitter.emit(_playerEvents2.default.ERROR, eType, data.details, { code: e.code });
                if (this._callbacks && typeof this._callbacks.onerror === 'function') {
                    this._callbacks.onerror(eType, data.details, { code: e.code });
                }
            }
        }
    }, {
        key: 'type',
        get: function get() {
            return this._type;
        }
    }, {
        key: 'buffered',
        get: function get() {
            return this._mediaElement.buffered;
        }
    }, {
        key: 'duration',
        get: function get() {
            return this._mediaElement.duration;
        }
    }, {
        key: 'volume',
        get: function get() {
            return this._mediaElement.volume;
        },
        set: function set(value) {
            this._mediaElement.volume = value;
        }
    }, {
        key: 'muted',
        get: function get() {
            return this._mediaElement.muted;
        },
        set: function set(muted) {
            this._mediaElement.muted = muted;
        }
    }, {
        key: 'currentTime',
        get: function get() {
            return this._mediaElement.currentTime;
        },
        set: function set(seconds) {
            if (!this._mediaDataSource.isLive) {
                this._mediaElement.currentTime = seconds;
            }
        }
    }, {
        key: 'playbackRate',
        get: function get() {
            if (this._mediaElement) {
                if (this._mediaDataSource.isLive) {
                    return 1;
                } else {
                    return this._mediaElement.playbackRate;
                }
            }
            return 0;
        },
        set: function set(speed) {
            if (this._mediaElement) {
                if (this._mediaDataSource.isLive) {
                    return;
                } else {
                    return this._mediaElement.playbackRate = speed > 16 ? 16 : speed;
                }
            }
        }
    }, {
        key: 'mediaInfo',
        get: function get() {
            if (this._mediaElement) {
                if (this._mediaInfo == null) {
                    this._mediaInfo = {};
                }
                this._mediaInfo.duration = this._mediaElement.duration;
                this._mediaInfo.videoWidth = this._mediaElement.videoWidth;
                this._mediaInfo.videoHeight = this._mediaElement.videoHeight;
            }
            return Object.assign({}, this._mediaInfo);
        }
    }, {
        key: 'frameDuration',
        get: function get() {
            return this._frameDuration;
        }
    }, {
        key: 'statisticsInfo',
        get: function get() {
            var info = {
                playerType: this._type
            };

            if (!(this._mediaElement instanceof HTMLVideoElement)) {
                return info;
            }

            var hasQualityInfo = true;
            var decoded = 0;
            var dropped = 0;

            if (this._mediaElement.getVideoPlaybackQuality) {
                var quality = this._mediaElement.getVideoPlaybackQuality();
                decoded = quality.totalVideoFrames;
                dropped = quality.droppedVideoFrames;
            } else if (this._mediaElement.webkitDecodedFrameCount != undefined) {
                decoded = this._mediaElement.webkitDecodedFrameCount;
                dropped = this._mediaElement.webkitDroppedFrameCount;
            } else {
                hasQualityInfo = false;
            }

            if (hasQualityInfo) {
                info.decodedFrames = decoded;
                info.droppedFrames = dropped;
            }
            return info;
        }
    }]);

    return HlsPlayer;
}();

exports.default = HlsPlayer;

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

typeof window !== "undefined" &&
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/hls.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/eventemitter3/index.js":
/*!*********************************************!*\
  !*** ./node_modules/eventemitter3/index.js ***!
  \*********************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ "./node_modules/url-toolkit/src/url-toolkit.js":
/*!*****************************************************!*\
  !*** ./node_modules/url-toolkit/src/url-toolkit.js ***!
  \*****************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

// see https://tools.ietf.org/html/rfc1808

/* jshint ignore:start */
(function(root) { 
/* jshint ignore:end */

  var URL_REGEX = /^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/\?#]*\/)*.*?)??(;.*?)?(\?.*?)?(#.*?)?$/;
  var FIRST_SEGMENT_REGEX = /^([^\/?#]*)(.*)$/;
  var SLASH_DOT_REGEX = /(?:\/|^)\.(?=\/)/g;
  var SLASH_DOT_DOT_REGEX = /(?:\/|^)\.\.\/(?!\.\.\/).*?(?=\/)/g;

  var URLToolkit = { // jshint ignore:line
    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //
    // E.g
    // With opts.alwaysNormalize = false (default, spec compliant)
    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g
    // With opts.alwaysNormalize = true (not spec compliant)
    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g
    buildAbsoluteURL: function(baseURL, relativeURL, opts) {
      opts = opts || {};
      // remove any remaining space and CRLF
      baseURL = baseURL.trim();
      relativeURL = relativeURL.trim();
      if (!relativeURL) {
        // 2a) If the embedded URL is entirely empty, it inherits the
        // entire base URL (i.e., is set equal to the base URL)
        // and we are done.
        if (!opts.alwaysNormalize) {
          return baseURL;
        }
        var basePartsForNormalise = URLToolkit.parseURL(baseURL);
        if (!basePartsForNormalise) {
          throw new Error('Error trying to parse base URL.');
        }
        basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);
        return URLToolkit.buildURLFromParts(basePartsForNormalise);
      }
      var relativeParts = URLToolkit.parseURL(relativeURL);
      if (!relativeParts) {
        throw new Error('Error trying to parse relative URL.');
      }
      if (relativeParts.scheme) {
        // 2b) If the embedded URL starts with a scheme name, it is
        // interpreted as an absolute URL and we are done.
        if (!opts.alwaysNormalize) {
          return relativeURL;
        }
        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);
        return URLToolkit.buildURLFromParts(relativeParts);
      }
      var baseParts = URLToolkit.parseURL(baseURL);
      if (!baseParts) {
        throw new Error('Error trying to parse base URL.');
      }
      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {
        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc
        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'
        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);
        baseParts.netLoc = pathParts[1];
        baseParts.path = pathParts[2];
      }
      if (baseParts.netLoc && !baseParts.path) {
        baseParts.path = '/';
      }
      var builtParts = {
        // 2c) Otherwise, the embedded URL inherits the scheme of
        // the base URL.
        scheme: baseParts.scheme,
        netLoc: relativeParts.netLoc,
        path: null,
        params: relativeParts.params,
        query: relativeParts.query,
        fragment: relativeParts.fragment
      };
      if (!relativeParts.netLoc) {
        // 3) If the embedded URL's <net_loc> is non-empty, we skip to
        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>
        // (if any) of the base URL.
        builtParts.netLoc = baseParts.netLoc;
        // 4) If the embedded URL path is preceded by a slash "/", the
        // path is not relative and we skip to Step 7.
        if (relativeParts.path[0] !== '/') {
          if (!relativeParts.path) {
            // 5) If the embedded URL path is empty (and not preceded by a
            // slash), then the embedded URL inherits the base URL path
            builtParts.path = baseParts.path;
            // 5a) if the embedded URL's <params> is non-empty, we skip to
            // step 7; otherwise, it inherits the <params> of the base
            // URL (if any) and
            if (!relativeParts.params) {
              builtParts.params = baseParts.params;
              // 5b) if the embedded URL's <query> is non-empty, we skip to
              // step 7; otherwise, it inherits the <query> of the base
              // URL (if any) and we skip to step 7.
              if (!relativeParts.query) {
                builtParts.query = baseParts.query;
              }
            }
          } else {
            // 6) The last segment of the base URL's path (anything
            // following the rightmost slash "/", or the entire path if no
            // slash is present) is removed and the embedded URL's path is
            // appended in its place.
            var baseURLPath = baseParts.path;
            var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;
            builtParts.path = URLToolkit.normalizePath(newPath);
          }
        }
      }
      if (builtParts.path === null) {
        builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;
      }
      return URLToolkit.buildURLFromParts(builtParts);
    },
    parseURL: function(url) {
      var parts = URL_REGEX.exec(url);
      if (!parts) {
        return null;
      }
      return {
        scheme: parts[1] || '',
        netLoc: parts[2] || '',
        path: parts[3] || '',
        params: parts[4] || '',
        query: parts[5] || '',
        fragment: parts[6] || ''
      };
    },
    normalizePath: function(path) {
      // The following operations are
      // then applied, in order, to the new path:
      // 6a) All occurrences of "./", where "." is a complete path
      // segment, are removed.
      // 6b) If the path ends with "." as a complete path segment,
      // that "." is removed.
      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');
      // 6c) All occurrences of "<segment>/../", where <segment> is a
      // complete path segment not equal to "..", are removed.
      // Removal of these path segments is performed iteratively,
      // removing the leftmost matching pattern on each iteration,
      // until no matching pattern remains.
      // 6d) If the path ends with "<segment>/..", where <segment> is a
      // complete path segment not equal to "..", that
      // "<segment>/.." is removed.
      while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length) {} // jshint ignore:line
      return path.split('').reverse().join('');
    },
    buildURLFromParts: function(parts) {
      return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;
    }
  };

/* jshint ignore:start */
  if(true)
    module.exports = URLToolkit;
  else {}
})(this);
/* jshint ignore:end */


/***/ }),

/***/ "./node_modules/webworkify-webpack/index.js":
/*!**************************************************!*\
  !*** ./node_modules/webworkify-webpack/index.js ***!
  \**************************************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports, __webpack_require__) {

function webpackBootstrapFunc (modules) {
/******/  // The module cache
/******/  var installedModules = {};

/******/  // The require function
/******/  function __webpack_require__(moduleId) {

/******/    // Check if module is in cache
/******/    if(installedModules[moduleId])
/******/      return installedModules[moduleId].exports;

/******/    // Create a new module (and put it into the cache)
/******/    var module = installedModules[moduleId] = {
/******/      i: moduleId,
/******/      l: false,
/******/      exports: {}
/******/    };

/******/    // Execute the module function
/******/    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/    // Flag the module as loaded
/******/    module.l = true;

/******/    // Return the exports of the module
/******/    return module.exports;
/******/  }

/******/  // expose the modules object (__webpack_modules__)
/******/  __webpack_require__.m = modules;

/******/  // expose the module cache
/******/  __webpack_require__.c = installedModules;

/******/  // identity function for calling harmony imports with the correct context
/******/  __webpack_require__.i = function(value) { return value; };

/******/  // define getter function for harmony exports
/******/  __webpack_require__.d = function(exports, name, getter) {
/******/    if(!__webpack_require__.o(exports, name)) {
/******/      Object.defineProperty(exports, name, {
/******/        configurable: false,
/******/        enumerable: true,
/******/        get: getter
/******/      });
/******/    }
/******/  };

/******/  // define __esModule on exports
/******/  __webpack_require__.r = function(exports) {
/******/    Object.defineProperty(exports, '__esModule', { value: true });
/******/  };

/******/  // getDefaultExport function for compatibility with non-harmony modules
/******/  __webpack_require__.n = function(module) {
/******/    var getter = module && module.__esModule ?
/******/      function getDefault() { return module['default']; } :
/******/      function getModuleExports() { return module; };
/******/    __webpack_require__.d(getter, 'a', getter);
/******/    return getter;
/******/  };

/******/  // Object.prototype.hasOwnProperty.call
/******/  __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/  // __webpack_public_path__
/******/  __webpack_require__.p = "/";

/******/  // on error function for async loading
/******/  __webpack_require__.oe = function(err) { console.error(err); throw err; };

  var f = __webpack_require__(__webpack_require__.s = ENTRY_MODULE)
  return f.default || f // try to call default if defined to also support babel esmodule exports
}

var moduleNameReqExp = '[\\.|\\-|\\+|\\w|\/|@]+'
var dependencyRegExp = '\\(\\s*(\/\\*.*?\\*\/)?\\s*.*?(' + moduleNameReqExp + ').*?\\)' // additional chars when output.pathinfo is true

// http://stackoverflow.com/a/2593661/130442
function quoteRegExp (str) {
  return (str + '').replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&')
}

function isNumeric(n) {
  return !isNaN(1 * n); // 1 * n converts integers, integers as string ("123"), 1e3 and "1e3" to integers and strings to NaN
}

function getModuleDependencies (sources, module, queueName) {
  var retval = {}
  retval[queueName] = []

  var fnString = module.toString()
  var wrapperSignature = fnString.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/)
  if (!wrapperSignature) return retval
  var webpackRequireName = wrapperSignature[1]

  // main bundle deps
  var re = new RegExp('(\\\\n|\\W)' + quoteRegExp(webpackRequireName) + dependencyRegExp, 'g')
  var match
  while ((match = re.exec(fnString))) {
    if (match[3] === 'dll-reference') continue
    retval[queueName].push(match[3])
  }

  // dll deps
  re = new RegExp('\\(' + quoteRegExp(webpackRequireName) + '\\("(dll-reference\\s(' + moduleNameReqExp + '))"\\)\\)' + dependencyRegExp, 'g')
  while ((match = re.exec(fnString))) {
    if (!sources[match[2]]) {
      retval[queueName].push(match[1])
      sources[match[2]] = __webpack_require__(match[1]).m
    }
    retval[match[2]] = retval[match[2]] || []
    retval[match[2]].push(match[4])
  }

  // convert 1e3 back to 1000 - this can be important after uglify-js converted 1000 to 1e3
  var keys = Object.keys(retval);
  for (var i = 0; i < keys.length; i++) {
    for (var j = 0; j < retval[keys[i]].length; j++) {
      if (isNumeric(retval[keys[i]][j])) {
        retval[keys[i]][j] = 1 * retval[keys[i]][j];
      }
    }
  }

  return retval
}

function hasValuesInQueues (queues) {
  var keys = Object.keys(queues)
  return keys.reduce(function (hasValues, key) {
    return hasValues || queues[key].length > 0
  }, false)
}

function getRequiredModules (sources, moduleId) {
  var modulesQueue = {
    main: [moduleId]
  }
  var requiredModules = {
    main: []
  }
  var seenModules = {
    main: {}
  }

  while (hasValuesInQueues(modulesQueue)) {
    var queues = Object.keys(modulesQueue)
    for (var i = 0; i < queues.length; i++) {
      var queueName = queues[i]
      var queue = modulesQueue[queueName]
      var moduleToCheck = queue.pop()
      seenModules[queueName] = seenModules[queueName] || {}
      if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck]) continue
      seenModules[queueName][moduleToCheck] = true
      requiredModules[queueName] = requiredModules[queueName] || []
      requiredModules[queueName].push(moduleToCheck)
      var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName)
      var newModulesKeys = Object.keys(newModules)
      for (var j = 0; j < newModulesKeys.length; j++) {
        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]] || []
        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]])
      }
    }
  }

  return requiredModules
}

module.exports = function (moduleId, options) {
  options = options || {}
  var sources = {
    main: __webpack_require__.m
  }

  var requiredModules = options.all ? { main: Object.keys(sources.main) } : getRequiredModules(sources, moduleId)

  var src = ''

  Object.keys(requiredModules).filter(function (m) { return m !== 'main' }).forEach(function (module) {
    var entryModule = 0
    while (requiredModules[module][entryModule]) {
      entryModule++
    }
    requiredModules[module].push(entryModule)
    sources[module][entryModule] = '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })'
    src = src + 'var ' + module + ' = (' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(entryModule)) + ')({' + requiredModules[module].map(function (id) { return '' + JSON.stringify(id) + ': ' + sources[module][id].toString() }).join(',') + '});\n'
  })

  src = src + 'new ((' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.main.map(function (id) { return '' + JSON.stringify(id) + ': ' + sources.main[id].toString() }).join(',') + '}))(self);'

  var blob = new window.Blob([src], { type: 'text/javascript' })
  if (options.bare) { return blob }

  var URL = window.URL || window.webkitURL || window.mozURL || window.msURL

  var workerUrl = URL.createObjectURL(blob)
  var worker = new window.Worker(workerUrl)
  worker.objectURL = workerUrl

  return worker
}


/***/ }),

/***/ "./src/crypt/decrypter.js":
/*!********************************************!*\
  !*** ./src/crypt/decrypter.js + 3 modules ***!
  \********************************************/
/*! exports provided: default */
/*! ModuleConcatenation bailout: Cannot concat with ./src/errors.js because of ./src/hls.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/events.js because of ./src/hls.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/get-self-scope.js because of ./src/hls.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/logger.js because of ./src/hls.js */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./src/crypt/aes-crypto.js
var AESCrypto =
/*#__PURE__*/
function () {
  function AESCrypto(subtle, iv) {
    this.subtle = subtle;
    this.aesIV = iv;
  }

  var _proto = AESCrypto.prototype;

  _proto.decrypt = function decrypt(data, key) {
    return this.subtle.decrypt({
      name: 'AES-CBC',
      iv: this.aesIV
    }, key, data);
  };

  return AESCrypto;
}();


// CONCATENATED MODULE: ./src/crypt/fast-aes-key.js
var FastAESKey =
/*#__PURE__*/
function () {
  function FastAESKey(subtle, key) {
    this.subtle = subtle;
    this.key = key;
  }

  var _proto = FastAESKey.prototype;

  _proto.expandKey = function expandKey() {
    return this.subtle.importKey('raw', this.key, {
      name: 'AES-CBC'
    }, false, ['encrypt', 'decrypt']);
  };

  return FastAESKey;
}();

/* harmony default export */ var fast_aes_key = (FastAESKey);
// CONCATENATED MODULE: ./src/crypt/aes-decryptor.js
// PKCS7
function removePadding(buffer) {
  var outputBytes = buffer.byteLength;
  var paddingBytes = outputBytes && new DataView(buffer).getUint8(outputBytes - 1);

  if (paddingBytes) {
    return buffer.slice(0, outputBytes - paddingBytes);
  } else {
    return buffer;
  }
}

var AESDecryptor =
/*#__PURE__*/
function () {
  function AESDecryptor() {
    // Static after running initTable
    this.rcon = [0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
    this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];
    this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)];
    this.sBox = new Uint32Array(256);
    this.invSBox = new Uint32Array(256); // Changes during runtime

    this.key = new Uint32Array(0);
    this.initTable();
  } // Using view.getUint32() also swaps the byte order.


  var _proto = AESDecryptor.prototype;

  _proto.uint8ArrayToUint32Array_ = function uint8ArrayToUint32Array_(arrayBuffer) {
    var view = new DataView(arrayBuffer);
    var newArray = new Uint32Array(4);

    for (var i = 0; i < 4; i++) {
      newArray[i] = view.getUint32(i * 4);
    }

    return newArray;
  };

  _proto.initTable = function initTable() {
    var sBox = this.sBox;
    var invSBox = this.invSBox;
    var subMix = this.subMix;
    var subMix0 = subMix[0];
    var subMix1 = subMix[1];
    var subMix2 = subMix[2];
    var subMix3 = subMix[3];
    var invSubMix = this.invSubMix;
    var invSubMix0 = invSubMix[0];
    var invSubMix1 = invSubMix[1];
    var invSubMix2 = invSubMix[2];
    var invSubMix3 = invSubMix[3];
    var d = new Uint32Array(256);
    var x = 0;
    var xi = 0;
    var i = 0;

    for (i = 0; i < 256; i++) {
      if (i < 128) {
        d[i] = i << 1;
      } else {
        d[i] = i << 1 ^ 0x11b;
      }
    }

    for (i = 0; i < 256; i++) {
      var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
      sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
      sBox[x] = sx;
      invSBox[sx] = x; // Compute multiplication

      var x2 = d[x];
      var x4 = d[x2];
      var x8 = d[x4]; // Compute sub/invSub bytes, mix columns tables

      var t = d[sx] * 0x101 ^ sx * 0x1010100;
      subMix0[x] = t << 24 | t >>> 8;
      subMix1[x] = t << 16 | t >>> 16;
      subMix2[x] = t << 8 | t >>> 24;
      subMix3[x] = t; // Compute inv sub bytes, inv mix columns tables

      t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
      invSubMix0[sx] = t << 24 | t >>> 8;
      invSubMix1[sx] = t << 16 | t >>> 16;
      invSubMix2[sx] = t << 8 | t >>> 24;
      invSubMix3[sx] = t; // Compute next counter

      if (!x) {
        x = xi = 1;
      } else {
        x = x2 ^ d[d[d[x8 ^ x2]]];
        xi ^= d[d[xi]];
      }
    }
  };

  _proto.expandKey = function expandKey(keyBuffer) {
    // convert keyBuffer to Uint32Array
    var key = this.uint8ArrayToUint32Array_(keyBuffer);
    var sameKey = true;
    var offset = 0;

    while (offset < key.length && sameKey) {
      sameKey = key[offset] === this.key[offset];
      offset++;
    }

    if (sameKey) {
      return;
    }

    this.key = key;
    var keySize = this.keySize = key.length;

    if (keySize !== 4 && keySize !== 6 && keySize !== 8) {
      throw new Error('Invalid aes key size=' + keySize);
    }

    var ksRows = this.ksRows = (keySize + 6 + 1) * 4;
    var ksRow;
    var invKsRow;
    var keySchedule = this.keySchedule = new Uint32Array(ksRows);
    var invKeySchedule = this.invKeySchedule = new Uint32Array(ksRows);
    var sbox = this.sBox;
    var rcon = this.rcon;
    var invSubMix = this.invSubMix;
    var invSubMix0 = invSubMix[0];
    var invSubMix1 = invSubMix[1];
    var invSubMix2 = invSubMix[2];
    var invSubMix3 = invSubMix[3];
    var prev;
    var t;

    for (ksRow = 0; ksRow < ksRows; ksRow++) {
      if (ksRow < keySize) {
        prev = keySchedule[ksRow] = key[ksRow];
        continue;
      }

      t = prev;

      if (ksRow % keySize === 0) {
        // Rot word
        t = t << 8 | t >>> 24; // Sub word

        t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 0xff] << 16 | sbox[t >>> 8 & 0xff] << 8 | sbox[t & 0xff]; // Mix Rcon

        t ^= rcon[ksRow / keySize | 0] << 24;
      } else if (keySize > 6 && ksRow % keySize === 4) {
        // Sub word
        t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 0xff] << 16 | sbox[t >>> 8 & 0xff] << 8 | sbox[t & 0xff];
      }

      keySchedule[ksRow] = prev = (keySchedule[ksRow - keySize] ^ t) >>> 0;
    }

    for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
      ksRow = ksRows - invKsRow;

      if (invKsRow & 3) {
        t = keySchedule[ksRow];
      } else {
        t = keySchedule[ksRow - 4];
      }

      if (invKsRow < 4 || ksRow <= 4) {
        invKeySchedule[invKsRow] = t;
      } else {
        invKeySchedule[invKsRow] = invSubMix0[sbox[t >>> 24]] ^ invSubMix1[sbox[t >>> 16 & 0xff]] ^ invSubMix2[sbox[t >>> 8 & 0xff]] ^ invSubMix3[sbox[t & 0xff]];
      }

      invKeySchedule[invKsRow] = invKeySchedule[invKsRow] >>> 0;
    }
  }; // Adding this as a method greatly improves performance.


  _proto.networkToHostOrderSwap = function networkToHostOrderSwap(word) {
    return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;
  };

  _proto.decrypt = function decrypt(inputArrayBuffer, offset, aesIV, removePKCS7Padding) {
    var nRounds = this.keySize + 6;
    var invKeySchedule = this.invKeySchedule;
    var invSBOX = this.invSBox;
    var invSubMix = this.invSubMix;
    var invSubMix0 = invSubMix[0];
    var invSubMix1 = invSubMix[1];
    var invSubMix2 = invSubMix[2];
    var invSubMix3 = invSubMix[3];
    var initVector = this.uint8ArrayToUint32Array_(aesIV);
    var initVector0 = initVector[0];
    var initVector1 = initVector[1];
    var initVector2 = initVector[2];
    var initVector3 = initVector[3];
    var inputInt32 = new Int32Array(inputArrayBuffer);
    var outputInt32 = new Int32Array(inputInt32.length);
    var t0, t1, t2, t3;
    var s0, s1, s2, s3;
    var inputWords0, inputWords1, inputWords2, inputWords3;
    var ksRow, i;
    var swapWord = this.networkToHostOrderSwap;

    while (offset < inputInt32.length) {
      inputWords0 = swapWord(inputInt32[offset]);
      inputWords1 = swapWord(inputInt32[offset + 1]);
      inputWords2 = swapWord(inputInt32[offset + 2]);
      inputWords3 = swapWord(inputInt32[offset + 3]);
      s0 = inputWords0 ^ invKeySchedule[0];
      s1 = inputWords3 ^ invKeySchedule[1];
      s2 = inputWords2 ^ invKeySchedule[2];
      s3 = inputWords1 ^ invKeySchedule[3];
      ksRow = 4; // Iterate through the rounds of decryption

      for (i = 1; i < nRounds; i++) {
        t0 = invSubMix0[s0 >>> 24] ^ invSubMix1[s1 >> 16 & 0xff] ^ invSubMix2[s2 >> 8 & 0xff] ^ invSubMix3[s3 & 0xff] ^ invKeySchedule[ksRow];
        t1 = invSubMix0[s1 >>> 24] ^ invSubMix1[s2 >> 16 & 0xff] ^ invSubMix2[s3 >> 8 & 0xff] ^ invSubMix3[s0 & 0xff] ^ invKeySchedule[ksRow + 1];
        t2 = invSubMix0[s2 >>> 24] ^ invSubMix1[s3 >> 16 & 0xff] ^ invSubMix2[s0 >> 8 & 0xff] ^ invSubMix3[s1 & 0xff] ^ invKeySchedule[ksRow + 2];
        t3 = invSubMix0[s3 >>> 24] ^ invSubMix1[s0 >> 16 & 0xff] ^ invSubMix2[s1 >> 8 & 0xff] ^ invSubMix3[s2 & 0xff] ^ invKeySchedule[ksRow + 3]; // Update state

        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
        ksRow = ksRow + 4;
      } // Shift rows, sub bytes, add round key


      t0 = invSBOX[s0 >>> 24] << 24 ^ invSBOX[s1 >> 16 & 0xff] << 16 ^ invSBOX[s2 >> 8 & 0xff] << 8 ^ invSBOX[s3 & 0xff] ^ invKeySchedule[ksRow];
      t1 = invSBOX[s1 >>> 24] << 24 ^ invSBOX[s2 >> 16 & 0xff] << 16 ^ invSBOX[s3 >> 8 & 0xff] << 8 ^ invSBOX[s0 & 0xff] ^ invKeySchedule[ksRow + 1];
      t2 = invSBOX[s2 >>> 24] << 24 ^ invSBOX[s3 >> 16 & 0xff] << 16 ^ invSBOX[s0 >> 8 & 0xff] << 8 ^ invSBOX[s1 & 0xff] ^ invKeySchedule[ksRow + 2];
      t3 = invSBOX[s3 >>> 24] << 24 ^ invSBOX[s0 >> 16 & 0xff] << 16 ^ invSBOX[s1 >> 8 & 0xff] << 8 ^ invSBOX[s2 & 0xff] ^ invKeySchedule[ksRow + 3];
      ksRow = ksRow + 3; // Write

      outputInt32[offset] = swapWord(t0 ^ initVector0);
      outputInt32[offset + 1] = swapWord(t3 ^ initVector1);
      outputInt32[offset + 2] = swapWord(t2 ^ initVector2);
      outputInt32[offset + 3] = swapWord(t1 ^ initVector3); // reset initVector to last 4 unsigned int

      initVector0 = inputWords0;
      initVector1 = inputWords1;
      initVector2 = inputWords2;
      initVector3 = inputWords3;
      offset = offset + 4;
    }

    return removePKCS7Padding ? removePadding(outputInt32.buffer) : outputInt32.buffer;
  };

  _proto.destroy = function destroy() {
    this.key = undefined;
    this.keySize = undefined;
    this.ksRows = undefined;
    this.sBox = undefined;
    this.invSBox = undefined;
    this.subMix = undefined;
    this.invSubMix = undefined;
    this.keySchedule = undefined;
    this.invKeySchedule = undefined;
    this.rcon = undefined;
  };

  return AESDecryptor;
}();

/* harmony default export */ var aes_decryptor = (AESDecryptor);
// EXTERNAL MODULE: ./src/errors.js
var errors = __webpack_require__("./src/errors.js");

// EXTERNAL MODULE: ./src/utils/logger.js
var logger = __webpack_require__("./src/utils/logger.js");

// EXTERNAL MODULE: ./src/events.js
var events = __webpack_require__("./src/events.js");

// EXTERNAL MODULE: ./src/utils/get-self-scope.js
var get_self_scope = __webpack_require__("./src/utils/get-self-scope.js");

// CONCATENATED MODULE: ./src/crypt/decrypter.js






 // see https://stackoverflow.com/a/11237259/589493

var global = Object(get_self_scope["getSelfScope"])(); // safeguard for code that might run both on worker and main thread

var decrypter_Decrypter =
/*#__PURE__*/
function () {
  function Decrypter(observer, config, _temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        _ref$removePKCS7Paddi = _ref.removePKCS7Padding,
        removePKCS7Padding = _ref$removePKCS7Paddi === void 0 ? true : _ref$removePKCS7Paddi;

    this.logEnabled = true;
    this.observer = observer;
    this.config = config;
    this.removePKCS7Padding = removePKCS7Padding; // built in decryptor expects PKCS7 padding

    if (removePKCS7Padding) {
      try {
        var browserCrypto = global.crypto;

        if (browserCrypto) {
          this.subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;
        }
      } catch (e) {}
    }

    this.disableWebCrypto = !this.subtle;
  }

  var _proto = Decrypter.prototype;

  _proto.isSync = function isSync() {
    return this.disableWebCrypto && this.config.enableSoftwareAES;
  };

  _proto.decrypt = function decrypt(data, key, iv, callback) {
    var _this = this;

    if (this.disableWebCrypto && this.config.enableSoftwareAES) {
      if (this.logEnabled) {
        logger["logger"].log('JS AES decrypt');
        this.logEnabled = false;
      }

      var decryptor = this.decryptor;

      if (!decryptor) {
        this.decryptor = decryptor = new aes_decryptor();
      }

      decryptor.expandKey(key);
      callback(decryptor.decrypt(data, 0, iv, this.removePKCS7Padding));
    } else {
      if (this.logEnabled) {
        logger["logger"].log('WebCrypto AES decrypt');
        this.logEnabled = false;
      }

      var subtle = this.subtle;

      if (this.key !== key) {
        this.key = key;
        this.fastAesKey = new fast_aes_key(subtle, key);
      }

      this.fastAesKey.expandKey().then(function (aesKey) {
        // decrypt using web crypto
        var crypto = new AESCrypto(subtle, iv);
        crypto.decrypt(data, aesKey).catch(function (err) {
          _this.onWebCryptoError(err, data, key, iv, callback);
        }).then(function (result) {
          callback(result);
        });
      }).catch(function (err) {
        _this.onWebCryptoError(err, data, key, iv, callback);
      });
    }
  };

  _proto.onWebCryptoError = function onWebCryptoError(err, data, key, iv, callback) {
    if (this.config.enableSoftwareAES) {
      logger["logger"].log('WebCrypto Error, disable WebCrypto API');
      this.disableWebCrypto = true;
      this.logEnabled = true;
      this.decrypt(data, key, iv, callback);
    } else {
      logger["logger"].error("decrypting error : " + err.message);
      this.observer.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].MEDIA_ERROR,
        details: errors["ErrorDetails"].FRAG_DECRYPT_ERROR,
        fatal: true,
        reason: err.message
      });
    }
  };

  _proto.destroy = function destroy() {
    var decryptor = this.decryptor;

    if (decryptor) {
      decryptor.destroy();
      this.decryptor = undefined;
    }
  };

  return Decrypter;
}();

/* harmony default export */ var decrypter = __webpack_exports__["default"] = (decrypter_Decrypter);

/***/ }),

/***/ "./src/demux/demuxer-inline.js":
/*!**************************************************!*\
  !*** ./src/demux/demuxer-inline.js + 11 modules ***!
  \**************************************************/
/*! exports provided: default */
/*! ModuleConcatenation bailout: Cannot concat with ./src/crypt/decrypter.js because of ./src/hls.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/demux/id3.js because of ./src/hls.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/demux/mp4demuxer.js because of ./src/hls.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/errors.js because of ./src/hls.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/events.js because of ./src/hls.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/polyfills/number-isFinite.js because of ./src/hls.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/get-self-scope.js because of ./src/hls.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/logger.js because of ./src/hls.js */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./src/events.js
var events = __webpack_require__("./src/events.js");

// EXTERNAL MODULE: ./src/errors.js
var errors = __webpack_require__("./src/errors.js");

// EXTERNAL MODULE: ./src/crypt/decrypter.js + 3 modules
var crypt_decrypter = __webpack_require__("./src/crypt/decrypter.js");

// EXTERNAL MODULE: ./src/polyfills/number-isFinite.js
var number_isFinite = __webpack_require__("./src/polyfills/number-isFinite.js");

// EXTERNAL MODULE: ./src/utils/logger.js
var logger = __webpack_require__("./src/utils/logger.js");

// EXTERNAL MODULE: ./src/utils/get-self-scope.js
var get_self_scope = __webpack_require__("./src/utils/get-self-scope.js");

// CONCATENATED MODULE: ./src/demux/adts.js
/**
 * ADTS parser helper
 * @link https://wiki.multimedia.cx/index.php?title=ADTS
 */




function getAudioConfig(observer, data, offset, audioCodec) {
  var adtsObjectType,
      // :int
  adtsSampleingIndex,
      // :int
  adtsExtensionSampleingIndex,
      // :int
  adtsChanelConfig,
      // :int
  config,
      userAgent = navigator.userAgent.toLowerCase(),
      manifestCodec = audioCodec,
      adtsSampleingRates = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350]; // byte 2

  adtsObjectType = ((data[offset + 2] & 0xC0) >>> 6) + 1;
  adtsSampleingIndex = (data[offset + 2] & 0x3C) >>> 2;

  if (adtsSampleingIndex > adtsSampleingRates.length - 1) {
    observer.trigger(events["default"].ERROR, {
      type: errors["ErrorTypes"].MEDIA_ERROR,
      details: errors["ErrorDetails"].FRAG_PARSING_ERROR,
      fatal: true,
      reason: "invalid ADTS sampling index:" + adtsSampleingIndex
    });
    return;
  }

  adtsChanelConfig = (data[offset + 2] & 0x01) << 2; // byte 3

  adtsChanelConfig |= (data[offset + 3] & 0xC0) >>> 6;
  logger["logger"].log("manifest codec:" + audioCodec + ",ADTS data:type:" + adtsObjectType + ",sampleingIndex:" + adtsSampleingIndex + "[" + adtsSampleingRates[adtsSampleingIndex] + "Hz],channelConfig:" + adtsChanelConfig); // firefox: freq less than 24kHz = AAC SBR (HE-AAC)

  if (/firefox/i.test(userAgent)) {
    if (adtsSampleingIndex >= 6) {
      adtsObjectType = 5;
      config = new Array(4); // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies
      // there is a factor 2 between frame sample rate and output sample rate
      // multiply frequency by 2 (see table below, equivalent to substract 3)

      adtsExtensionSampleingIndex = adtsSampleingIndex - 3;
    } else {
      adtsObjectType = 2;
      config = new Array(2);
      adtsExtensionSampleingIndex = adtsSampleingIndex;
    } // Android : always use AAC

  } else if (userAgent.indexOf('android') !== -1) {
    adtsObjectType = 2;
    config = new Array(2);
    adtsExtensionSampleingIndex = adtsSampleingIndex;
  } else {
    /*  for other browsers (Chrome/Vivaldi/Opera ...)
        always force audio type to be HE-AAC SBR, as some browsers do not support audio codec switch properly (like Chrome ...)
    */
    adtsObjectType = 5;
    config = new Array(4); // if (manifest codec is HE-AAC or HE-AACv2) OR (manifest codec not specified AND frequency less than 24kHz)

    if (audioCodec && (audioCodec.indexOf('mp4a.40.29') !== -1 || audioCodec.indexOf('mp4a.40.5') !== -1) || !audioCodec && adtsSampleingIndex >= 6) {
      // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies
      // there is a factor 2 between frame sample rate and output sample rate
      // multiply frequency by 2 (see table below, equivalent to substract 3)
      adtsExtensionSampleingIndex = adtsSampleingIndex - 3;
    } else {
      // if (manifest codec is AAC) AND (frequency less than 24kHz AND nb channel is 1) OR (manifest codec not specified and mono audio)
      // Chrome fails to play back with low frequency AAC LC mono when initialized with HE-AAC.  This is not a problem with stereo.
      if (audioCodec && audioCodec.indexOf('mp4a.40.2') !== -1 && (adtsSampleingIndex >= 6 && adtsChanelConfig === 1 || /vivaldi/i.test(userAgent)) || !audioCodec && adtsChanelConfig === 1) {
        adtsObjectType = 2;
        config = new Array(2);
      }

      adtsExtensionSampleingIndex = adtsSampleingIndex;
    }
  }
  /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config
      ISO 14496-3 (AAC).pdf - Table 1.13 — Syntax of AudioSpecificConfig()
    Audio Profile / Audio Object Type
    0: Null
    1: AAC Main
    2: AAC LC (Low Complexity)
    3: AAC SSR (Scalable Sample Rate)
    4: AAC LTP (Long Term Prediction)
    5: SBR (Spectral Band Replication)
    6: AAC Scalable
   sampling freq
    0: 96000 Hz
    1: 88200 Hz
    2: 64000 Hz
    3: 48000 Hz
    4: 44100 Hz
    5: 32000 Hz
    6: 24000 Hz
    7: 22050 Hz
    8: 16000 Hz
    9: 12000 Hz
    10: 11025 Hz
    11: 8000 Hz
    12: 7350 Hz
    13: Reserved
    14: Reserved
    15: frequency is written explictly
    Channel Configurations
    These are the channel configurations:
    0: Defined in AOT Specifc Config
    1: 1 channel: front-center
    2: 2 channels: front-left, front-right
  */
  // audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1


  config[0] = adtsObjectType << 3; // samplingFrequencyIndex

  config[0] |= (adtsSampleingIndex & 0x0E) >> 1;
  config[1] |= (adtsSampleingIndex & 0x01) << 7; // channelConfiguration

  config[1] |= adtsChanelConfig << 3;

  if (adtsObjectType === 5) {
    // adtsExtensionSampleingIndex
    config[1] |= (adtsExtensionSampleingIndex & 0x0E) >> 1;
    config[2] = (adtsExtensionSampleingIndex & 0x01) << 7; // adtsObjectType (force to 2, chrome is checking that object type is less than 5 ???
    //    https://chromium.googlesource.com/chromium/src.git/+/master/media/formats/mp4/aac.cc

    config[2] |= 2 << 2;
    config[3] = 0;
  }

  return {
    config: config,
    samplerate: adtsSampleingRates[adtsSampleingIndex],
    channelCount: adtsChanelConfig,
    codec: 'mp4a.40.' + adtsObjectType,
    manifestCodec: manifestCodec
  };
}
function isHeaderPattern(data, offset) {
  return data[offset] === 0xff && (data[offset + 1] & 0xf6) === 0xf0;
}
function getHeaderLength(data, offset) {
  return data[offset + 1] & 0x01 ? 7 : 9;
}
function getFullFrameLength(data, offset) {
  return (data[offset + 3] & 0x03) << 11 | data[offset + 4] << 3 | (data[offset + 5] & 0xE0) >>> 5;
}
function isHeader(data, offset) {
  // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1
  // Layer bits (position 14 and 15) in header should be always 0 for ADTS
  // More info https://wiki.multimedia.cx/index.php?title=ADTS
  if (offset + 1 < data.length && isHeaderPattern(data, offset)) {
    return true;
  }

  return false;
}
function adts_probe(data, offset) {
  // same as isHeader but we also check that ADTS frame follows last ADTS frame
  // or end of data is reached
  if (isHeader(data, offset)) {
    // ADTS header Length
    var headerLength = getHeaderLength(data, offset); // ADTS frame Length

    var frameLength = headerLength;

    if (offset + 5 < data.length) {
      frameLength = getFullFrameLength(data, offset);
    }

    var newOffset = offset + frameLength;

    if (newOffset === data.length || newOffset + 1 < data.length && isHeaderPattern(data, newOffset)) {
      return true;
    }
  }

  return false;
}
function initTrackConfig(track, observer, data, offset, audioCodec) {
  if (!track.samplerate) {
    var config = getAudioConfig(observer, data, offset, audioCodec);
    track.config = config.config;
    track.samplerate = config.samplerate;
    track.channelCount = config.channelCount;
    track.codec = config.codec;
    track.manifestCodec = config.manifestCodec;
    logger["logger"].log("parsed codec:" + track.codec + ",rate:" + config.samplerate + ",nb channel:" + config.channelCount);
  }
}
function getFrameDuration(samplerate) {
  return 1024 * 90000 / samplerate;
}
function parseFrameHeader(data, offset, pts, frameIndex, frameDuration) {
  var headerLength, frameLength, stamp;
  var length = data.length; // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header

  headerLength = getHeaderLength(data, offset); // retrieve frame size

  frameLength = getFullFrameLength(data, offset);
  frameLength -= headerLength;

  if (frameLength > 0 && offset + headerLength + frameLength <= length) {
    stamp = pts + frameIndex * frameDuration; // logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);

    return {
      headerLength: headerLength,
      frameLength: frameLength,
      stamp: stamp
    };
  }

  return undefined;
}
function appendFrame(track, data, offset, pts, frameIndex) {
  var frameDuration = getFrameDuration(track.samplerate);
  var header = parseFrameHeader(data, offset, pts, frameIndex, frameDuration);

  if (header) {
    var stamp = header.stamp;
    var headerLength = header.headerLength;
    var frameLength = header.frameLength; // logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);

    var aacSample = {
      unit: data.subarray(offset + headerLength, offset + headerLength + frameLength),
      pts: stamp,
      dts: stamp
    };
    track.samples.push(aacSample);
    return {
      sample: aacSample,
      length: frameLength + headerLength
    };
  }

  return undefined;
}
// EXTERNAL MODULE: ./src/demux/id3.js
var id3 = __webpack_require__("./src/demux/id3.js");

// CONCATENATED MODULE: ./src/demux/aacdemuxer.js


/**
 * AAC demuxer
 */




var aacdemuxer_AACDemuxer =
/*#__PURE__*/
function () {
  function AACDemuxer(observer, remuxer, config) {
    this.observer = observer;
    this.config = config;
    this.remuxer = remuxer;
  }

  var _proto = AACDemuxer.prototype;

  _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, duration) {
    this._audioTrack = {
      container: 'audio/adts',
      type: 'audio',
      id: 0,
      sequenceNumber: 0,
      isAAC: true,
      samples: [],
      len: 0,
      manifestCodec: audioCodec,
      duration: duration,
      inputTimeScale: 90000
    };
  };

  _proto.resetTimeStamp = function resetTimeStamp() {};

  AACDemuxer.probe = function probe(data) {
    if (!data) {
      return false;
    } // Check for the ADTS sync word
    // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1
    // Layer bits (position 14 and 15) in header should be always 0 for ADTS
    // More info https://wiki.multimedia.cx/index.php?title=ADTS


    var id3Data = id3["default"].getID3Data(data, 0) || [];
    var offset = id3Data.length;

    for (var length = data.length; offset < length; offset++) {
      if (adts_probe(data, offset)) {
        logger["logger"].log('ADTS sync word found !');
        return true;
      }
    }

    return false;
  }; // feed incoming data to the front of the parsing pipeline


  _proto.append = function append(data, timeOffset, contiguous, accurateTimeOffset) {
    var track = this._audioTrack;
    var id3Data = id3["default"].getID3Data(data, 0) || [];
    var timestamp = id3["default"].getTimeStamp(id3Data);
    var pts = Object(number_isFinite["isFiniteNumber"])(timestamp) ? timestamp * 90 : timeOffset * 90000;
    var frameIndex = 0;
    var stamp = pts;
    var length = data.length;
    var offset = id3Data.length;
    var id3Samples = [{
      pts: stamp,
      dts: stamp,
      data: id3Data
    }];

    while (offset < length - 1) {
      if (isHeader(data, offset) && offset + 5 < length) {
        initTrackConfig(track, this.observer, data, offset, track.manifestCodec);
        var frame = appendFrame(track, data, offset, pts, frameIndex);

        if (frame) {
          offset += frame.length;
          stamp = frame.sample.pts;
          frameIndex++;
        } else {
          logger["logger"].log('Unable to parse AAC frame');
          break;
        }
      } else if (id3["default"].isHeader(data, offset)) {
        id3Data = id3["default"].getID3Data(data, offset);
        id3Samples.push({
          pts: stamp,
          dts: stamp,
          data: id3Data
        });
        offset += id3Data.length;
      } else {
        // nothing found, keep looking
        offset++;
      }
    }

    this.remuxer.remux(track, {
      samples: []
    }, {
      samples: id3Samples,
      inputTimeScale: 90000
    }, {
      samples: []
    }, timeOffset, contiguous, accurateTimeOffset);
  };

  _proto.destroy = function destroy() {};

  return AACDemuxer;
}();

/* harmony default export */ var aacdemuxer = (aacdemuxer_AACDemuxer);
// EXTERNAL MODULE: ./src/demux/mp4demuxer.js
var mp4demuxer = __webpack_require__("./src/demux/mp4demuxer.js");

// CONCATENATED MODULE: ./src/demux/mpegaudio.js
/**
 *  MPEG parser helper
 */
var MpegAudio = {
  BitratesMap: [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160],
  SamplingRateMap: [44100, 48000, 32000, 22050, 24000, 16000, 11025, 12000, 8000],
  SamplesCoefficients: [// MPEG 2.5
  [0, // Reserved
  72, // Layer3
  144, // Layer2
  12 // Layer1
  ], // Reserved
  [0, // Reserved
  0, // Layer3
  0, // Layer2
  0 // Layer1
  ], // MPEG 2
  [0, // Reserved
  72, // Layer3
  144, // Layer2
  12 // Layer1
  ], // MPEG 1
  [0, // Reserved
  144, // Layer3
  144, // Layer2
  12 // Layer1
  ]],
  BytesInSlot: [0, // Reserved
  1, // Layer3
  1, // Layer2
  4 // Layer1
  ],
  appendFrame: function appendFrame(track, data, offset, pts, frameIndex) {
    // Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference
    if (offset + 24 > data.length) {
      return undefined;
    }

    var header = this.parseHeader(data, offset);

    if (header && offset + header.frameLength <= data.length) {
      var frameDuration = header.samplesPerFrame * 90000 / header.sampleRate;
      var stamp = pts + frameIndex * frameDuration;
      var sample = {
        unit: data.subarray(offset, offset + header.frameLength),
        pts: stamp,
        dts: stamp
      };
      track.config = [];
      track.channelCount = header.channelCount;
      track.samplerate = header.sampleRate;
      track.samples.push(sample);
      return {
        sample: sample,
        length: header.frameLength
      };
    }

    return undefined;
  },
  parseHeader: function parseHeader(data, offset) {
    var headerB = data[offset + 1] >> 3 & 3;
    var headerC = data[offset + 1] >> 1 & 3;
    var headerE = data[offset + 2] >> 4 & 15;
    var headerF = data[offset + 2] >> 2 & 3;
    var headerG = data[offset + 2] >> 1 & 1;

    if (headerB !== 1 && headerE !== 0 && headerE !== 15 && headerF !== 3) {
      var columnInBitrates = headerB === 3 ? 3 - headerC : headerC === 3 ? 3 : 4;
      var bitRate = MpegAudio.BitratesMap[columnInBitrates * 14 + headerE - 1] * 1000;
      var columnInSampleRates = headerB === 3 ? 0 : headerB === 2 ? 1 : 2;
      var sampleRate = MpegAudio.SamplingRateMap[columnInSampleRates * 3 + headerF];
      var channelCount = data[offset + 3] >> 6 === 3 ? 1 : 2; // If bits of channel mode are `11` then it is a single channel (Mono)

      var sampleCoefficient = MpegAudio.SamplesCoefficients[headerB][headerC];
      var bytesInSlot = MpegAudio.BytesInSlot[headerC];
      var samplesPerFrame = sampleCoefficient * 8 * bytesInSlot;
      var frameLength = parseInt(sampleCoefficient * bitRate / sampleRate + headerG, 10) * bytesInSlot;
      return {
        sampleRate: sampleRate,
        channelCount: channelCount,
        frameLength: frameLength,
        samplesPerFrame: samplesPerFrame
      };
    }

    return undefined;
  },
  isHeaderPattern: function isHeaderPattern(data, offset) {
    return data[offset] === 0xff && (data[offset + 1] & 0xe0) === 0xe0 && (data[offset + 1] & 0x06) !== 0x00;
  },
  isHeader: function isHeader(data, offset) {
    // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1
    // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)
    // More info http://www.mp3-tech.org/programmer/frame_header.html
    if (offset + 1 < data.length && this.isHeaderPattern(data, offset)) {
      return true;
    }

    return false;
  },
  probe: function probe(data, offset) {
    // same as isHeader but we also check that MPEG frame follows last MPEG frame
    // or end of data is reached
    if (offset + 1 < data.length && this.isHeaderPattern(data, offset)) {
      // MPEG header Length
      var headerLength = 4; // MPEG frame Length

      var header = this.parseHeader(data, offset);
      var frameLength = headerLength;

      if (header && header.frameLength) {
        frameLength = header.frameLength;
      }

      var newOffset = offset + frameLength;

      if (newOffset === data.length || newOffset + 1 < data.length && this.isHeaderPattern(data, newOffset)) {
        return true;
      }
    }

    return false;
  }
};
/* harmony default export */ var mpegaudio = (MpegAudio);
// CONCATENATED MODULE: ./src/demux/exp-golomb.js
/**
 * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.
*/


var exp_golomb_ExpGolomb =
/*#__PURE__*/
function () {
  function ExpGolomb(data) {
    this.data = data; // the number of bytes left to examine in this.data

    this.bytesAvailable = data.byteLength; // the current word being examined

    this.word = 0; // :uint
    // the number of bits left to examine in the current word

    this.bitsAvailable = 0; // :uint
  } // ():void


  var _proto = ExpGolomb.prototype;

  _proto.loadWord = function loadWord() {
    var data = this.data,
        bytesAvailable = this.bytesAvailable,
        position = data.byteLength - bytesAvailable,
        workingBytes = new Uint8Array(4),
        availableBytes = Math.min(4, bytesAvailable);

    if (availableBytes === 0) {
      throw new Error('no bytes available');
    }

    workingBytes.set(data.subarray(position, position + availableBytes));
    this.word = new DataView(workingBytes.buffer).getUint32(0); // track the amount of this.data that has been processed

    this.bitsAvailable = availableBytes * 8;
    this.bytesAvailable -= availableBytes;
  }; // (count:int):void


  _proto.skipBits = function skipBits(count) {
    var skipBytes; // :int

    if (this.bitsAvailable > count) {
      this.word <<= count;
      this.bitsAvailable -= count;
    } else {
      count -= this.bitsAvailable;
      skipBytes = count >> 3;
      count -= skipBytes >> 3;
      this.bytesAvailable -= skipBytes;
      this.loadWord();
      this.word <<= count;
      this.bitsAvailable -= count;
    }
  }; // (size:int):uint


  _proto.readBits = function readBits(size) {
    var bits = Math.min(this.bitsAvailable, size),
        // :uint
    valu = this.word >>> 32 - bits; // :uint

    if (size > 32) {
      logger["logger"].error('Cannot read more than 32 bits at a time');
    }

    this.bitsAvailable -= bits;

    if (this.bitsAvailable > 0) {
      this.word <<= bits;
    } else if (this.bytesAvailable > 0) {
      this.loadWord();
    }

    bits = size - bits;

    if (bits > 0 && this.bitsAvailable) {
      return valu << bits | this.readBits(bits);
    } else {
      return valu;
    }
  }; // ():uint


  _proto.skipLZ = function skipLZ() {
    var leadingZeroCount; // :uint

    for (leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount) {
      if ((this.word & 0x80000000 >>> leadingZeroCount) !== 0) {
        // the first bit of working word is 1
        this.word <<= leadingZeroCount;
        this.bitsAvailable -= leadingZeroCount;
        return leadingZeroCount;
      }
    } // we exhausted word and still have not found a 1


    this.loadWord();
    return leadingZeroCount + this.skipLZ();
  }; // ():void


  _proto.skipUEG = function skipUEG() {
    this.skipBits(1 + this.skipLZ());
  }; // ():void


  _proto.skipEG = function skipEG() {
    this.skipBits(1 + this.skipLZ());
  }; // ():uint


  _proto.readUEG = function readUEG() {
    var clz = this.skipLZ(); // :uint

    return this.readBits(clz + 1) - 1;
  }; // ():int


  _proto.readEG = function readEG() {
    var valu = this.readUEG(); // :int

    if (0x01 & valu) {
      // the number is odd if the low order bit is set
      return 1 + valu >>> 1; // add 1 to make it even, and divide by 2
    } else {
      return -1 * (valu >>> 1); // divide by two then make it negative
    }
  }; // Some convenience functions
  // :Boolean


  _proto.readBoolean = function readBoolean() {
    return this.readBits(1) === 1;
  }; // ():int


  _proto.readUByte = function readUByte() {
    return this.readBits(8);
  }; // ():int


  _proto.readUShort = function readUShort() {
    return this.readBits(16);
  }; // ():int


  _proto.readUInt = function readUInt() {
    return this.readBits(32);
  };
  /**
   * Advance the ExpGolomb decoder past a scaling list. The scaling
   * list is optionally transmitted as part of a sequence parameter
   * set and is not relevant to transmuxing.
   * @param count {number} the number of entries in this scaling list
   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1
   */


  _proto.skipScalingList = function skipScalingList(count) {
    var lastScale = 8,
        nextScale = 8,
        j,
        deltaScale;

    for (j = 0; j < count; j++) {
      if (nextScale !== 0) {
        deltaScale = this.readEG();
        nextScale = (lastScale + deltaScale + 256) % 256;
      }

      lastScale = nextScale === 0 ? lastScale : nextScale;
    }
  };
  /**
   * Read a sequence parameter set and return some interesting video
   * properties. A sequence parameter set is the H264 metadata that
   * describes the properties of upcoming video frames.
   * @param data {Uint8Array} the bytes of a sequence parameter set
   * @return {object} an object with configuration parsed from the
   * sequence parameter set, including the dimensions of the
   * associated video frames.
   */


  _proto.readSPS = function readSPS() {
    var frameCropLeftOffset = 0,
        frameCropRightOffset = 0,
        frameCropTopOffset = 0,
        frameCropBottomOffset = 0,
        profileIdc,
        profileCompat,
        levelIdc,
        numRefFramesInPicOrderCntCycle,
        picWidthInMbsMinus1,
        picHeightInMapUnitsMinus1,
        frameMbsOnlyFlag,
        scalingListCount,
        i,
        readUByte = this.readUByte.bind(this),
        readBits = this.readBits.bind(this),
        readUEG = this.readUEG.bind(this),
        readBoolean = this.readBoolean.bind(this),
        skipBits = this.skipBits.bind(this),
        skipEG = this.skipEG.bind(this),
        skipUEG = this.skipUEG.bind(this),
        skipScalingList = this.skipScalingList.bind(this);
    readUByte();
    profileIdc = readUByte(); // profile_idc

    profileCompat = readBits(5); // constraint_set[0-4]_flag, u(5)

    skipBits(3); // reserved_zero_3bits u(3),

    levelIdc = readUByte(); // level_idc u(8)

    skipUEG(); // seq_parameter_set_id
    // some profiles have more optional data we don't need

    if (profileIdc === 100 || profileIdc === 110 || profileIdc === 122 || profileIdc === 244 || profileIdc === 44 || profileIdc === 83 || profileIdc === 86 || profileIdc === 118 || profileIdc === 128) {
      var chromaFormatIdc = readUEG();

      if (chromaFormatIdc === 3) {
        skipBits(1);
      } // separate_colour_plane_flag


      skipUEG(); // bit_depth_luma_minus8

      skipUEG(); // bit_depth_chroma_minus8

      skipBits(1); // qpprime_y_zero_transform_bypass_flag

      if (readBoolean()) {
        // seq_scaling_matrix_present_flag
        scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;

        for (i = 0; i < scalingListCount; i++) {
          if (readBoolean()) {
            // seq_scaling_list_present_flag[ i ]
            if (i < 6) {
              skipScalingList(16);
            } else {
              skipScalingList(64);
            }
          }
        }
      }
    }

    skipUEG(); // log2_max_frame_num_minus4

    var picOrderCntType = readUEG();

    if (picOrderCntType === 0) {
      readUEG(); // log2_max_pic_order_cnt_lsb_minus4
    } else if (picOrderCntType === 1) {
      skipBits(1); // delta_pic_order_always_zero_flag

      skipEG(); // offset_for_non_ref_pic

      skipEG(); // offset_for_top_to_bottom_field

      numRefFramesInPicOrderCntCycle = readUEG();

      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {
        skipEG();
      } // offset_for_ref_frame[ i ]

    }

    skipUEG(); // max_num_ref_frames

    skipBits(1); // gaps_in_frame_num_value_allowed_flag

    picWidthInMbsMinus1 = readUEG();
    picHeightInMapUnitsMinus1 = readUEG();
    frameMbsOnlyFlag = readBits(1);

    if (frameMbsOnlyFlag === 0) {
      skipBits(1);
    } // mb_adaptive_frame_field_flag


    skipBits(1); // direct_8x8_inference_flag

    if (readBoolean()) {
      // frame_cropping_flag
      frameCropLeftOffset = readUEG();
      frameCropRightOffset = readUEG();
      frameCropTopOffset = readUEG();
      frameCropBottomOffset = readUEG();
    }

    var pixelRatio = [1, 1];

    if (readBoolean()) {
      // vui_parameters_present_flag
      if (readBoolean()) {
        // aspect_ratio_info_present_flag
        var aspectRatioIdc = readUByte();

        switch (aspectRatioIdc) {
          case 1:
            pixelRatio = [1, 1];
            break;

          case 2:
            pixelRatio = [12, 11];
            break;

          case 3:
            pixelRatio = [10, 11];
            break;

          case 4:
            pixelRatio = [16, 11];
            break;

          case 5:
            pixelRatio = [40, 33];
            break;

          case 6:
            pixelRatio = [24, 11];
            break;

          case 7:
            pixelRatio = [20, 11];
            break;

          case 8:
            pixelRatio = [32, 11];
            break;

          case 9:
            pixelRatio = [80, 33];
            break;

          case 10:
            pixelRatio = [18, 11];
            break;

          case 11:
            pixelRatio = [15, 11];
            break;

          case 12:
            pixelRatio = [64, 33];
            break;

          case 13:
            pixelRatio = [160, 99];
            break;

          case 14:
            pixelRatio = [4, 3];
            break;

          case 15:
            pixelRatio = [3, 2];
            break;

          case 16:
            pixelRatio = [2, 1];
            break;

          case 255:
            {
              pixelRatio = [readUByte() << 8 | readUByte(), readUByte() << 8 | readUByte()];
              break;
            }
        }
      }
    }

    return {
      width: Math.ceil((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2),
      height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - (frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset),
      pixelRatio: pixelRatio
    };
  };

  _proto.readSliceType = function readSliceType() {
    // skip NALu type
    this.readUByte(); // discard first_mb_in_slice

    this.readUEG(); // return slice_type

    return this.readUEG();
  };

  return ExpGolomb;
}();

/* harmony default export */ var exp_golomb = (exp_golomb_ExpGolomb);
// CONCATENATED MODULE: ./src/demux/sample-aes.js
/**
 * SAMPLE-AES decrypter
*/


var sample_aes_SampleAesDecrypter =
/*#__PURE__*/
function () {
  function SampleAesDecrypter(observer, config, decryptdata, discardEPB) {
    this.decryptdata = decryptdata;
    this.discardEPB = discardEPB;
    this.decrypter = new crypt_decrypter["default"](observer, config, {
      removePKCS7Padding: false
    });
  }

  var _proto = SampleAesDecrypter.prototype;

  _proto.decryptBuffer = function decryptBuffer(encryptedData, callback) {
    this.decrypter.decrypt(encryptedData, this.decryptdata.key.buffer, this.decryptdata.iv.buffer, callback);
  }; // AAC - encrypt all full 16 bytes blocks starting from offset 16


  _proto.decryptAacSample = function decryptAacSample(samples, sampleIndex, callback, sync) {
    var curUnit = samples[sampleIndex].unit;
    var encryptedData = curUnit.subarray(16, curUnit.length - curUnit.length % 16);
    var encryptedBuffer = encryptedData.buffer.slice(encryptedData.byteOffset, encryptedData.byteOffset + encryptedData.length);
    var localthis = this;
    this.decryptBuffer(encryptedBuffer, function (decryptedData) {
      decryptedData = new Uint8Array(decryptedData);
      curUnit.set(decryptedData, 16);

      if (!sync) {
        localthis.decryptAacSamples(samples, sampleIndex + 1, callback);
      }
    });
  };

  _proto.decryptAacSamples = function decryptAacSamples(samples, sampleIndex, callback) {
    for (;; sampleIndex++) {
      if (sampleIndex >= samples.length) {
        callback();
        return;
      }

      if (samples[sampleIndex].unit.length < 32) {
        continue;
      }

      var sync = this.decrypter.isSync();
      this.decryptAacSample(samples, sampleIndex, callback, sync);

      if (!sync) {
        return;
      }
    }
  }; // AVC - encrypt one 16 bytes block out of ten, starting from offset 32


  _proto.getAvcEncryptedData = function getAvcEncryptedData(decodedData) {
    var encryptedDataLen = Math.floor((decodedData.length - 48) / 160) * 16 + 16;
    var encryptedData = new Int8Array(encryptedDataLen);
    var outputPos = 0;

    for (var inputPos = 32; inputPos <= decodedData.length - 16; inputPos += 160, outputPos += 16) {
      encryptedData.set(decodedData.subarray(inputPos, inputPos + 16), outputPos);
    }

    return encryptedData;
  };

  _proto.getAvcDecryptedUnit = function getAvcDecryptedUnit(decodedData, decryptedData) {
    decryptedData = new Uint8Array(decryptedData);
    var inputPos = 0;

    for (var outputPos = 32; outputPos <= decodedData.length - 16; outputPos += 160, inputPos += 16) {
      decodedData.set(decryptedData.subarray(inputPos, inputPos + 16), outputPos);
    }

    return decodedData;
  };

  _proto.decryptAvcSample = function decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync) {
    var decodedData = this.discardEPB(curUnit.data);
    var encryptedData = this.getAvcEncryptedData(decodedData);
    var localthis = this;
    this.decryptBuffer(encryptedData.buffer, function (decryptedData) {
      curUnit.data = localthis.getAvcDecryptedUnit(decodedData, decryptedData);

      if (!sync) {
        localthis.decryptAvcSamples(samples, sampleIndex, unitIndex + 1, callback);
      }
    });
  };

  _proto.decryptAvcSamples = function decryptAvcSamples(samples, sampleIndex, unitIndex, callback) {
    for (;; sampleIndex++, unitIndex = 0) {
      if (sampleIndex >= samples.length) {
        callback();
        return;
      }

      var curUnits = samples[sampleIndex].units;

      for (;; unitIndex++) {
        if (unitIndex >= curUnits.length) {
          break;
        }

        var curUnit = curUnits[unitIndex];

        if (curUnit.length <= 48 || curUnit.type !== 1 && curUnit.type !== 5) {
          continue;
        }

        var sync = this.decrypter.isSync();
        this.decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync);

        if (!sync) {
          return;
        }
      }
    }
  };

  return SampleAesDecrypter;
}();

/* harmony default export */ var sample_aes = (sample_aes_SampleAesDecrypter);
// CONCATENATED MODULE: ./src/demux/tsdemuxer.js
/**
 * highly optimized TS demuxer:
 * parse PAT, PMT
 * extract PES packet from audio and video PIDs
 * extract AVC/H264 NAL units and AAC/ADTS samples from PES packet
 * trigger the remuxer upon parsing completion
 * it also tries to workaround as best as it can audio codec switch (HE-AAC to AAC and vice versa), without having to restart the MediaSource.
 * it also controls the remuxing process :
 * upon discontinuity or level switch detection, it will also notifies the remuxer so that it can reset its state.
*/




 // import Hex from '../utils/hex';


 // We are using fixed track IDs for driving the MP4 remuxer
// instead of following the TS PIDs.
// There is no reason not to do this and some browsers/SourceBuffer-demuxers
// may not like if there are TrackID "switches"
// See https://github.com/video-dev/hls.js/issues/1331
// Here we are mapping our internal track types to constant MP4 track IDs
// With MSE currently one can only have one track of each, and we are muxing
// whatever video/audio rendition in them.

var RemuxerTrackIdConfig = {
  video: 1,
  audio: 2,
  id3: 3,
  text: 4
};

var tsdemuxer_TSDemuxer =
/*#__PURE__*/
function () {
  function TSDemuxer(observer, remuxer, config, typeSupported) {
    this.observer = observer;
    this.config = config;
    this.typeSupported = typeSupported;
    this.remuxer = remuxer;
    this.sampleAes = null;
  }

  var _proto = TSDemuxer.prototype;

  _proto.setDecryptData = function setDecryptData(decryptdata) {
    if (decryptdata != null && decryptdata.key != null && decryptdata.method === 'SAMPLE-AES') {
      this.sampleAes = new sample_aes(this.observer, this.config, decryptdata, this.discardEPB);
    } else {
      this.sampleAes = null;
    }
  };

  TSDemuxer.probe = function probe(data) {
    var syncOffset = TSDemuxer._syncOffset(data);

    if (syncOffset < 0) {
      return false;
    } else {
      if (syncOffset) {
        logger["logger"].warn("MPEG2-TS detected but first sync word found @ offset " + syncOffset + ", junk ahead ?");
      }

      return true;
    }
  };

  TSDemuxer._syncOffset = function _syncOffset(data) {
    // scan 1000 first bytes
    var scanwindow = Math.min(1000, data.length - 3 * 188);
    var i = 0;

    while (i < scanwindow) {
      // a TS fragment should contain at least 3 TS packets, a PAT, a PMT, and one PID, each starting with 0x47
      if (data[i] === 0x47 && data[i + 188] === 0x47 && data[i + 2 * 188] === 0x47) {
        return i;
      } else {
        i++;
      }
    }

    return -1;
  };
  /**
   * Creates a track model internal to demuxer used to drive remuxing input
   *
   * @param {string} type 'audio' | 'video' | 'id3' | 'text'
   * @param {number} duration
   * @return {object} TSDemuxer's internal track model
   */


  TSDemuxer.createTrack = function createTrack(type, duration) {
    return {
      container: type === 'video' || type === 'audio' ? 'video/mp2t' : undefined,
      type: type,
      id: RemuxerTrackIdConfig[type],
      pid: -1,
      inputTimeScale: 90000,
      sequenceNumber: 0,
      samples: [],
      dropped: type === 'video' ? 0 : undefined,
      isAAC: type === 'audio' ? true : undefined,
      duration: type === 'audio' ? duration : undefined
    };
  };
  /**
   * Initializes a new init segment on the demuxer/remuxer interface. Needed for discontinuities/track-switches (or at stream start)
   * Resets all internal track instances of the demuxer.
   *
   * @override Implements generic demuxing/remuxing interface (see DemuxerInline)
   * @param {object} initSegment
   * @param {string} audioCodec
   * @param {string} videoCodec
   * @param {number} duration (in TS timescale = 90kHz)
   */


  _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, duration) {
    this.pmtParsed = false;
    this._pmtId = -1;
    this._avcTrack = TSDemuxer.createTrack('video', duration);
    this._audioTrack = TSDemuxer.createTrack('audio', duration);
    this._id3Track = TSDemuxer.createTrack('id3', duration);
    this._txtTrack = TSDemuxer.createTrack('text', duration); // flush any partial content

    this.aacOverFlow = null;
    this.aacLastPTS = null;
    this.avcSample = null;
    this.audioCodec = audioCodec;
    this.videoCodec = videoCodec;
    this._duration = duration;
  };
  /**
   *
   * @override
   */


  _proto.resetTimeStamp = function resetTimeStamp() {}; // feed incoming data to the front of the parsing pipeline


  _proto.append = function append(data, timeOffset, contiguous, accurateTimeOffset) {
    var start,
        len = data.length,
        stt,
        pid,
        atf,
        offset,
        pes,
        unknownPIDs = false;
    this.contiguous = contiguous;

    var pmtParsed = this.pmtParsed,
        avcTrack = this._avcTrack,
        audioTrack = this._audioTrack,
        id3Track = this._id3Track,
        avcId = avcTrack.pid,
        audioId = audioTrack.pid,
        id3Id = id3Track.pid,
        pmtId = this._pmtId,
        avcData = avcTrack.pesData,
        audioData = audioTrack.pesData,
        id3Data = id3Track.pesData,
        parsePAT = this._parsePAT,
        parsePMT = this._parsePMT,
        parsePES = this._parsePES,
        parseAVCPES = this._parseAVCPES.bind(this),
        parseAACPES = this._parseAACPES.bind(this),
        parseMPEGPES = this._parseMPEGPES.bind(this),
        parseID3PES = this._parseID3PES.bind(this);

    var syncOffset = TSDemuxer._syncOffset(data); // don't parse last TS packet if incomplete


    len -= (len + syncOffset) % 188; // loop through TS packets

    for (start = syncOffset; start < len; start += 188) {
      if (data[start] === 0x47) {
        stt = !!(data[start + 1] & 0x40); // pid is a 13-bit field starting at the last bit of TS[1]

        pid = ((data[start + 1] & 0x1f) << 8) + data[start + 2];
        atf = (data[start + 3] & 0x30) >> 4; // if an adaption field is present, its length is specified by the fifth byte of the TS packet header.

        if (atf > 1) {
          offset = start + 5 + data[start + 4]; // continue if there is only adaptation field

          if (offset === start + 188) {
            continue;
          }
        } else {
          offset = start + 4;
        }

        switch (pid) {
          case avcId:
            if (stt) {
              if (avcData && (pes = parsePES(avcData)) && pes.pts !== undefined) {
                parseAVCPES(pes, false);
              }

              avcData = {
                data: [],
                size: 0
              };
            }

            if (avcData) {
              avcData.data.push(data.subarray(offset, start + 188));
              avcData.size += start + 188 - offset;
            }

            break;

          case audioId:
            if (stt) {
              if (audioData && (pes = parsePES(audioData)) && pes.pts !== undefined) {
                if (audioTrack.isAAC) {
                  parseAACPES(pes);
                } else {
                  parseMPEGPES(pes);
                }
              }

              audioData = {
                data: [],
                size: 0
              };
            }

            if (audioData) {
              audioData.data.push(data.subarray(offset, start + 188));
              audioData.size += start + 188 - offset;
            }

            break;

          case id3Id:
            if (stt) {
              if (id3Data && (pes = parsePES(id3Data)) && pes.pts !== undefined) {
                parseID3PES(pes);
              }

              id3Data = {
                data: [],
                size: 0
              };
            }

            if (id3Data) {
              id3Data.data.push(data.subarray(offset, start + 188));
              id3Data.size += start + 188 - offset;
            }

            break;

          case 0:
            if (stt) {
              offset += data[offset] + 1;
            }

            pmtId = this._pmtId = parsePAT(data, offset);
            break;

          case pmtId:
            if (stt) {
              offset += data[offset] + 1;
            }

            var parsedPIDs = parsePMT(data, offset, this.typeSupported.mpeg === true || this.typeSupported.mp3 === true, this.sampleAes != null); // only update track id if track PID found while parsing PMT
            // this is to avoid resetting the PID to -1 in case
            // track PID transiently disappears from the stream
            // this could happen in case of transient missing audio samples for example
            // NOTE this is only the PID of the track as found in TS,
            // but we are not using this for MP4 track IDs.

            avcId = parsedPIDs.avc;

            if (avcId > 0) {
              avcTrack.pid = avcId;
            }

            audioId = parsedPIDs.audio;

            if (audioId > 0) {
              audioTrack.pid = audioId;
              audioTrack.isAAC = parsedPIDs.isAAC;
            }

            id3Id = parsedPIDs.id3;

            if (id3Id > 0) {
              id3Track.pid = id3Id;
            }

            if (unknownPIDs && !pmtParsed) {
              logger["logger"].log('reparse from beginning');
              unknownPIDs = false; // we set it to -188, the += 188 in the for loop will reset start to 0

              start = syncOffset - 188;
            }

            pmtParsed = this.pmtParsed = true;
            break;

          case 17:
          case 0x1fff:
            break;

          default:
            unknownPIDs = true;
            break;
        }
      } else {
        this.observer.trigger(events["default"].ERROR, {
          type: errors["ErrorTypes"].MEDIA_ERROR,
          details: errors["ErrorDetails"].FRAG_PARSING_ERROR,
          fatal: false,
          reason: 'TS packet did not start with 0x47'
        });
      }
    } // try to parse last PES packets


    if (avcData && (pes = parsePES(avcData)) && pes.pts !== undefined) {
      parseAVCPES(pes, true);
      avcTrack.pesData = null;
    } else {
      // either avcData null or PES truncated, keep it for next frag parsing
      avcTrack.pesData = avcData;
    }

    if (audioData && (pes = parsePES(audioData)) && pes.pts !== undefined) {
      if (audioTrack.isAAC) {
        parseAACPES(pes);
      } else {
        parseMPEGPES(pes);
      }

      audioTrack.pesData = null;
    } else {
      if (audioData && audioData.size) {
        logger["logger"].log('last AAC PES packet truncated,might overlap between fragments');
      } // either audioData null or PES truncated, keep it for next frag parsing


      audioTrack.pesData = audioData;
    }

    if (id3Data && (pes = parsePES(id3Data)) && pes.pts !== undefined) {
      parseID3PES(pes);
      id3Track.pesData = null;
    } else {
      // either id3Data null or PES truncated, keep it for next frag parsing
      id3Track.pesData = id3Data;
    }

    if (this.sampleAes == null) {
      this.remuxer.remux(audioTrack, avcTrack, id3Track, this._txtTrack, timeOffset, contiguous, accurateTimeOffset);
    } else {
      this.decryptAndRemux(audioTrack, avcTrack, id3Track, this._txtTrack, timeOffset, contiguous, accurateTimeOffset);
    }
  };

  _proto.decryptAndRemux = function decryptAndRemux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {
    if (audioTrack.samples && audioTrack.isAAC) {
      var localthis = this;
      this.sampleAes.decryptAacSamples(audioTrack.samples, 0, function () {
        localthis.decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);
      });
    } else {
      this.decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);
    }
  };

  _proto.decryptAndRemuxAvc = function decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {
    if (videoTrack.samples) {
      var localthis = this;
      this.sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, function () {
        localthis.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);
      });
    } else {
      this.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);
    }
  };

  _proto.destroy = function destroy() {
    this._initPTS = this._initDTS = undefined;
    this._duration = 0;
  };

  _proto._parsePAT = function _parsePAT(data, offset) {
    // skip the PSI header and parse the first PMT entry
    return (data[offset + 10] & 0x1F) << 8 | data[offset + 11]; // logger.log('PMT PID:'  + this._pmtId);
  };

  _proto._parsePMT = function _parsePMT(data, offset, mpegSupported, isSampleAes) {
    var sectionLength,
        tableEnd,
        programInfoLength,
        pid,
        result = {
      audio: -1,
      avc: -1,
      id3: -1,
      isAAC: true
    };
    sectionLength = (data[offset + 1] & 0x0f) << 8 | data[offset + 2];
    tableEnd = offset + 3 + sectionLength - 4; // to determine where the table is, we have to figure out how
    // long the program info descriptors are

    programInfoLength = (data[offset + 10] & 0x0f) << 8 | data[offset + 11]; // advance the offset to the first entry in the mapping table

    offset += 12 + programInfoLength;

    while (offset < tableEnd) {
      pid = (data[offset + 1] & 0x1F) << 8 | data[offset + 2];

      switch (data[offset]) {
        case 0xcf:
          // SAMPLE-AES AAC
          if (!isSampleAes) {
            logger["logger"].log('unkown stream type:' + data[offset]);
            break;
          }

        /* falls through */
        // ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)

        case 0x0f:
          // logger.log('AAC PID:'  + pid);
          if (result.audio === -1) {
            result.audio = pid;
          }

          break;
        // Packetized metadata (ID3)

        case 0x15:
          // logger.log('ID3 PID:'  + pid);
          if (result.id3 === -1) {
            result.id3 = pid;
          }

          break;

        case 0xdb:
          // SAMPLE-AES AVC
          if (!isSampleAes) {
            logger["logger"].log('unkown stream type:' + data[offset]);
            break;
          }

        /* falls through */
        // ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)

        case 0x1b:
          // logger.log('AVC PID:'  + pid);
          if (result.avc === -1) {
            result.avc = pid;
          }

          break;
        // ISO/IEC 11172-3 (MPEG-1 audio)
        // or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)

        case 0x03:
        case 0x04:
          // logger.log('MPEG PID:'  + pid);
          if (!mpegSupported) {
            logger["logger"].log('MPEG audio found, not supported in this browser for now');
          } else if (result.audio === -1) {
            result.audio = pid;
            result.isAAC = false;
          }

          break;

        case 0x24:
          logger["logger"].warn('HEVC stream type found, not supported for now');
          break;

        default:
          logger["logger"].log('unkown stream type:' + data[offset]);
          break;
      } // move to the next table entry
      // skip past the elementary stream descriptors, if present


      offset += ((data[offset + 3] & 0x0F) << 8 | data[offset + 4]) + 5;
    }

    return result;
  };

  _proto._parsePES = function _parsePES(stream) {
    var i = 0,
        frag,
        pesFlags,
        pesPrefix,
        pesLen,
        pesHdrLen,
        pesData,
        pesPts,
        pesDts,
        payloadStartOffset,
        data = stream.data; // safety check

    if (!stream || stream.size === 0) {
      return null;
    } // we might need up to 19 bytes to read PES header
    // if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes
    // usually only one merge is needed (and this is rare ...)


    while (data[0].length < 19 && data.length > 1) {
      var newData = new Uint8Array(data[0].length + data[1].length);
      newData.set(data[0]);
      newData.set(data[1], data[0].length);
      data[0] = newData;
      data.splice(1, 1);
    } // retrieve PTS/DTS from first fragment


    frag = data[0];
    pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];

    if (pesPrefix === 1) {
      pesLen = (frag[4] << 8) + frag[5]; // if PES parsed length is not zero and greater than total received length, stop parsing. PES might be truncated
      // minus 6 : PES header size

      if (pesLen && pesLen > stream.size - 6) {
        return null;
      }

      pesFlags = frag[7];

      if (pesFlags & 0xC0) {
        /* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
            as PTS / DTS is 33 bit we cannot use bitwise operator in JS,
            as Bitwise operators treat their operands as a sequence of 32 bits */
        pesPts = (frag[9] & 0x0E) * 536870912 + // 1 << 29
        (frag[10] & 0xFF) * 4194304 + // 1 << 22
        (frag[11] & 0xFE) * 16384 + // 1 << 14
        (frag[12] & 0xFF) * 128 + // 1 << 7
        (frag[13] & 0xFE) / 2; // check if greater than 2^32 -1

        if (pesPts > 4294967295) {
          // decrement 2^33
          pesPts -= 8589934592;
        }

        if (pesFlags & 0x40) {
          pesDts = (frag[14] & 0x0E) * 536870912 + // 1 << 29
          (frag[15] & 0xFF) * 4194304 + // 1 << 22
          (frag[16] & 0xFE) * 16384 + // 1 << 14
          (frag[17] & 0xFF) * 128 + // 1 << 7
          (frag[18] & 0xFE) / 2; // check if greater than 2^32 -1

          if (pesDts > 4294967295) {
            // decrement 2^33
            pesDts -= 8589934592;
          }

          if (pesPts - pesDts > 60 * 90000) {
            logger["logger"].warn(Math.round((pesPts - pesDts) / 90000) + "s delta between PTS and DTS, align them");
            pesPts = pesDts;
          }
        } else {
          pesDts = pesPts;
        }
      }

      pesHdrLen = frag[8]; // 9 bytes : 6 bytes for PES header + 3 bytes for PES extension

      payloadStartOffset = pesHdrLen + 9;
      stream.size -= payloadStartOffset; // reassemble PES packet

      pesData = new Uint8Array(stream.size);

      for (var j = 0, dataLen = data.length; j < dataLen; j++) {
        frag = data[j];
        var len = frag.byteLength;

        if (payloadStartOffset) {
          if (payloadStartOffset > len) {
            // trim full frag if PES header bigger than frag
            payloadStartOffset -= len;
            continue;
          } else {
            // trim partial frag if PES header smaller than frag
            frag = frag.subarray(payloadStartOffset);
            len -= payloadStartOffset;
            payloadStartOffset = 0;
          }
        }

        pesData.set(frag, i);
        i += len;
      }

      if (pesLen) {
        // payload size : remove PES header + PES extension
        pesLen -= pesHdrLen + 3;
      }

      return {
        data: pesData,
        pts: pesPts,
        dts: pesDts,
        len: pesLen
      };
    } else {
      return null;
    }
  };

  _proto.pushAccesUnit = function pushAccesUnit(avcSample, avcTrack) {
    if (avcSample.units.length && avcSample.frame) {
      var samples = avcTrack.samples;
      var nbSamples = samples.length; // only push AVC sample if starting with a keyframe is not mandatory OR
      //    if keyframe already found in this fragment OR
      //       keyframe found in last fragment (track.sps) AND
      //          samples already appended (we already found a keyframe in this fragment) OR fragment is contiguous

      if (!this.config.forceKeyFrameOnDiscontinuity || avcSample.key === true || avcTrack.sps && (nbSamples || this.contiguous)) {
        avcSample.id = nbSamples;
        samples.push(avcSample);
      } else {
        // dropped samples, track it
        avcTrack.dropped++;
      }
    }

    if (avcSample.debug.length) {
      logger["logger"].log(avcSample.pts + '/' + avcSample.dts + ':' + avcSample.debug);
    }
  };

  _proto._parseAVCPES = function _parseAVCPES(pes, last) {
    var _this = this;

    // logger.log('parse new PES');
    var track = this._avcTrack,
        units = this._parseAVCNALu(pes.data),
        debug = false,
        expGolombDecoder,
        avcSample = this.avcSample,
        push,
        spsfound = false,
        i,
        pushAccesUnit = this.pushAccesUnit.bind(this),
        createAVCSample = function createAVCSample(key, pts, dts, debug) {
      return {
        key: key,
        pts: pts,
        dts: dts,
        units: [],
        debug: debug
      };
    }; // free pes.data to save up some memory


    pes.data = null; // if new NAL units found and last sample still there, let's push ...
    // this helps parsing streams with missing AUD (only do this if AUD never found)

    if (avcSample && units.length && !track.audFound) {
      pushAccesUnit(avcSample, track);
      avcSample = this.avcSample = createAVCSample(false, pes.pts, pes.dts, '');
    }

    units.forEach(function (unit) {
      switch (unit.type) {
        // NDR
        case 1:
          push = true;

          if (!avcSample) {
            avcSample = _this.avcSample = createAVCSample(true, pes.pts, pes.dts, '');
          }

          if (debug) {
            avcSample.debug += 'NDR ';
          }

          avcSample.frame = true;
          var data = unit.data; // only check slice type to detect KF in case SPS found in same packet (any keyframe is preceded by SPS ...)

          if (spsfound && data.length > 4) {
            // retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR
            var sliceType = new exp_golomb(data).readSliceType(); // 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice
            // SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.
            // An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.
            // I slice: A slice that is not an SI slice that is decoded using intra prediction only.
            // if (sliceType === 2 || sliceType === 7) {

            if (sliceType === 2 || sliceType === 4 || sliceType === 7 || sliceType === 9) {
              avcSample.key = true;
            }
          }

          break;
        // IDR

        case 5:
          push = true; // handle PES not starting with AUD

          if (!avcSample) {
            avcSample = _this.avcSample = createAVCSample(true, pes.pts, pes.dts, '');
          }

          if (debug) {
            avcSample.debug += 'IDR ';
          }

          avcSample.key = true;
          avcSample.frame = true;
          break;
        // SEI

        case 6:
          push = true;

          if (debug && avcSample) {
            avcSample.debug += 'SEI ';
          }

          expGolombDecoder = new exp_golomb(_this.discardEPB(unit.data)); // skip frameType

          expGolombDecoder.readUByte();
          var payloadType = 0;
          var payloadSize = 0;
          var endOfCaptions = false;
          var b = 0;

          while (!endOfCaptions && expGolombDecoder.bytesAvailable > 1) {
            payloadType = 0;

            do {
              b = expGolombDecoder.readUByte();
              payloadType += b;
            } while (b === 0xFF); // Parse payload size.


            payloadSize = 0;

            do {
              b = expGolombDecoder.readUByte();
              payloadSize += b;
            } while (b === 0xFF); // TODO: there can be more than one payload in an SEI packet...
            // TODO: need to read type and size in a while loop to get them all


            if (payloadType === 4 && expGolombDecoder.bytesAvailable !== 0) {
              endOfCaptions = true;
              var countryCode = expGolombDecoder.readUByte();

              if (countryCode === 181) {
                var providerCode = expGolombDecoder.readUShort();

                if (providerCode === 49) {
                  var userStructure = expGolombDecoder.readUInt();

                  if (userStructure === 0x47413934) {
                    var userDataType = expGolombDecoder.readUByte(); // Raw CEA-608 bytes wrapped in CEA-708 packet

                    if (userDataType === 3) {
                      var firstByte = expGolombDecoder.readUByte();
                      var secondByte = expGolombDecoder.readUByte();
                      var totalCCs = 31 & firstByte;
                      var byteArray = [firstByte, secondByte];

                      for (i = 0; i < totalCCs; i++) {
                        // 3 bytes per CC
                        byteArray.push(expGolombDecoder.readUByte());
                        byteArray.push(expGolombDecoder.readUByte());
                        byteArray.push(expGolombDecoder.readUByte());
                      }

                      _this._insertSampleInOrder(_this._txtTrack.samples, {
                        type: 3,
                        pts: pes.pts,
                        bytes: byteArray
                      });
                    }
                  }
                }
              }
            } else if (payloadSize < expGolombDecoder.bytesAvailable) {
              for (i = 0; i < payloadSize; i++) {
                expGolombDecoder.readUByte();
              }
            }
          }

          break;
        // SPS

        case 7:
          push = true;
          spsfound = true;

          if (debug && avcSample) {
            avcSample.debug += 'SPS ';
          }

          if (!track.sps) {
            expGolombDecoder = new exp_golomb(unit.data);
            var config = expGolombDecoder.readSPS();
            track.width = config.width;
            track.height = config.height;
            track.pixelRatio = config.pixelRatio;
            track.sps = [unit.data];
            track.duration = _this._duration;
            var codecarray = unit.data.subarray(1, 4);
            var codecstring = 'avc1.';

            for (i = 0; i < 3; i++) {
              var h = codecarray[i].toString(16);

              if (h.length < 2) {
                h = '0' + h;
              }

              codecstring += h;
            }

            track.codec = codecstring;
          }

          break;
        // PPS

        case 8:
          push = true;

          if (debug && avcSample) {
            avcSample.debug += 'PPS ';
          }

          if (!track.pps) {
            track.pps = [unit.data];
          }

          break;
        // AUD

        case 9:
          push = false;
          track.audFound = true;

          if (avcSample) {
            pushAccesUnit(avcSample, track);
          }

          avcSample = _this.avcSample = createAVCSample(false, pes.pts, pes.dts, debug ? 'AUD ' : '');
          break;
        // Filler Data

        case 12:
          push = false;
          break;

        default:
          push = false;

          if (avcSample) {
            avcSample.debug += 'unknown NAL ' + unit.type + ' ';
          }

          break;
      }

      if (avcSample && push) {
        var _units = avcSample.units;

        _units.push(unit);
      }
    }); // if last PES packet, push samples

    if (last && avcSample) {
      pushAccesUnit(avcSample, track);
      this.avcSample = null;
    }
  };

  _proto._insertSampleInOrder = function _insertSampleInOrder(arr, data) {
    var len = arr.length;

    if (len > 0) {
      if (data.pts >= arr[len - 1].pts) {
        arr.push(data);
      } else {
        for (var pos = len - 1; pos >= 0; pos--) {
          if (data.pts < arr[pos].pts) {
            arr.splice(pos, 0, data);
            break;
          }
        }
      }
    } else {
      arr.push(data);
    }
  };

  _proto._getLastNalUnit = function _getLastNalUnit() {
    var avcSample = this.avcSample,
        lastUnit; // try to fallback to previous sample if current one is empty

    if (!avcSample || avcSample.units.length === 0) {
      var track = this._avcTrack,
          samples = track.samples;
      avcSample = samples[samples.length - 1];
    }

    if (avcSample) {
      var units = avcSample.units;
      lastUnit = units[units.length - 1];
    }

    return lastUnit;
  };

  _proto._parseAVCNALu = function _parseAVCNALu(array) {
    var i = 0,
        len = array.byteLength,
        value,
        overflow,
        track = this._avcTrack,
        state = track.naluState || 0,
        lastState = state;
    var units = [],
        unit,
        unitType,
        lastUnitStart = -1,
        lastUnitType; // logger.log('PES:' + Hex.hexDump(array));

    if (state === -1) {
      // special use case where we found 3 or 4-byte start codes exactly at the end of previous PES packet
      lastUnitStart = 0; // NALu type is value read from offset 0

      lastUnitType = array[0] & 0x1f;
      state = 0;
      i = 1;
    }

    while (i < len) {
      value = array[i++]; // optimization. state 0 and 1 are the predominant case. let's handle them outside of the switch/case

      if (!state) {
        state = value ? 0 : 1;
        continue;
      }

      if (state === 1) {
        state = value ? 0 : 2;
        continue;
      } // here we have state either equal to 2 or 3


      if (!value) {
        state = 3;
      } else if (value === 1) {
        if (lastUnitStart >= 0) {
          unit = {
            data: array.subarray(lastUnitStart, i - state - 1),
            type: lastUnitType
          }; // logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);

          units.push(unit);
        } else {
          // lastUnitStart is undefined => this is the first start code found in this PES packet
          // first check if start code delimiter is overlapping between 2 PES packets,
          // ie it started in last packet (lastState not zero)
          // and ended at the beginning of this PES packet (i <= 4 - lastState)
          var lastUnit = this._getLastNalUnit();

          if (lastUnit) {
            if (lastState && i <= 4 - lastState) {
              // start delimiter overlapping between PES packets
              // strip start delimiter bytes from the end of last NAL unit
              // check if lastUnit had a state different from zero
              if (lastUnit.state) {
                // strip last bytes
                lastUnit.data = lastUnit.data.subarray(0, lastUnit.data.byteLength - lastState);
              }
            } // If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.


            overflow = i - state - 1;

            if (overflow > 0) {
              // logger.log('first NALU found with overflow:' + overflow);
              var tmp = new Uint8Array(lastUnit.data.byteLength + overflow);
              tmp.set(lastUnit.data, 0);
              tmp.set(array.subarray(0, overflow), lastUnit.data.byteLength);
              lastUnit.data = tmp;
            }
          }
        } // check if we can read unit type


        if (i < len) {
          unitType = array[i] & 0x1f; // logger.log('find NALU @ offset:' + i + ',type:' + unitType);

          lastUnitStart = i;
          lastUnitType = unitType;
          state = 0;
        } else {
          // not enough byte to read unit type. let's read it on next PES parsing
          state = -1;
        }
      } else {
        state = 0;
      }
    }

    if (lastUnitStart >= 0 && state >= 0) {
      unit = {
        data: array.subarray(lastUnitStart, len),
        type: lastUnitType,
        state: state
      };
      units.push(unit); // logger.log('pushing NALU, type/size/state:' + unit.type + '/' + unit.data.byteLength + '/' + state);
    } // no NALu found


    if (units.length === 0) {
      // append pes.data to previous NAL unit
      var _lastUnit = this._getLastNalUnit();

      if (_lastUnit) {
        var _tmp = new Uint8Array(_lastUnit.data.byteLength + array.byteLength);

        _tmp.set(_lastUnit.data, 0);

        _tmp.set(array, _lastUnit.data.byteLength);

        _lastUnit.data = _tmp;
      }
    }

    track.naluState = state;
    return units;
  };
  /**
   * remove Emulation Prevention bytes from a RBSP
   */


  _proto.discardEPB = function discardEPB(data) {
    var length = data.byteLength,
        EPBPositions = [],
        i = 1,
        newLength,
        newData; // Find all `Emulation Prevention Bytes`

    while (i < length - 2) {
      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {
        EPBPositions.push(i + 2);
        i += 2;
      } else {
        i++;
      }
    } // If no Emulation Prevention Bytes were found just return the original
    // array


    if (EPBPositions.length === 0) {
      return data;
    } // Create a new array to hold the NAL unit data


    newLength = length - EPBPositions.length;
    newData = new Uint8Array(newLength);
    var sourceIndex = 0;

    for (i = 0; i < newLength; sourceIndex++, i++) {
      if (sourceIndex === EPBPositions[0]) {
        // Skip this byte
        sourceIndex++; // Remove this position index

        EPBPositions.shift();
      }

      newData[i] = data[sourceIndex];
    }

    return newData;
  };

  _proto._parseAACPES = function _parseAACPES(pes) {
    var track = this._audioTrack,
        data = pes.data,
        pts = pes.pts,
        startOffset = 0,
        aacOverFlow = this.aacOverFlow,
        aacLastPTS = this.aacLastPTS,
        frameDuration,
        frameIndex,
        offset,
        stamp,
        len;

    if (aacOverFlow) {
      var tmp = new Uint8Array(aacOverFlow.byteLength + data.byteLength);
      tmp.set(aacOverFlow, 0);
      tmp.set(data, aacOverFlow.byteLength); // logger.log(`AAC: append overflowing ${aacOverFlow.byteLength} bytes to beginning of new PES`);

      data = tmp;
    } // look for ADTS header (0xFFFx)


    for (offset = startOffset, len = data.length; offset < len - 1; offset++) {
      if (isHeader(data, offset)) {
        break;
      }
    } // if ADTS header does not start straight from the beginning of the PES payload, raise an error


    if (offset) {
      var reason, fatal;

      if (offset < len - 1) {
        reason = "AAC PES did not start with ADTS header,offset:" + offset;
        fatal = false;
      } else {
        reason = 'no ADTS header found in AAC PES';
        fatal = true;
      }

      logger["logger"].warn("parsing error:" + reason);
      this.observer.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].MEDIA_ERROR,
        details: errors["ErrorDetails"].FRAG_PARSING_ERROR,
        fatal: fatal,
        reason: reason
      });

      if (fatal) {
        return;
      }
    }

    initTrackConfig(track, this.observer, data, offset, this.audioCodec);
    frameIndex = 0;
    frameDuration = getFrameDuration(track.samplerate); // if last AAC frame is overflowing, we should ensure timestamps are contiguous:
    // first sample PTS should be equal to last sample PTS + frameDuration

    if (aacOverFlow && aacLastPTS) {
      var newPTS = aacLastPTS + frameDuration;

      if (Math.abs(newPTS - pts) > 1) {
        logger["logger"].log("AAC: align PTS for overlapping frames by " + Math.round((newPTS - pts) / 90));
        pts = newPTS;
      }
    } // scan for aac samples


    while (offset < len) {
      if (isHeader(data, offset) && offset + 5 < len) {
        var frame = appendFrame(track, data, offset, pts, frameIndex);

        if (frame) {
          // logger.log(`${Math.round(frame.sample.pts)} : AAC`);
          offset += frame.length;
          stamp = frame.sample.pts;
          frameIndex++;
        } else {
          // logger.log('Unable to parse AAC frame');
          break;
        }
      } else {
        // nothing found, keep looking
        offset++;
      }
    }

    if (offset < len) {
      aacOverFlow = data.subarray(offset, len); // logger.log(`AAC: overflow detected:${len-offset}`);
    } else {
      aacOverFlow = null;
    }

    this.aacOverFlow = aacOverFlow;
    this.aacLastPTS = stamp;
  };

  _proto._parseMPEGPES = function _parseMPEGPES(pes) {
    var data = pes.data;
    var length = data.length;
    var frameIndex = 0;
    var offset = 0;
    var pts = pes.pts;

    while (offset < length) {
      if (mpegaudio.isHeader(data, offset)) {
        var frame = mpegaudio.appendFrame(this._audioTrack, data, offset, pts, frameIndex);

        if (frame) {
          offset += frame.length;
          frameIndex++;
        } else {
          // logger.log('Unable to parse Mpeg audio frame');
          break;
        }
      } else {
        // nothing found, keep looking
        offset++;
      }
    }
  };

  _proto._parseID3PES = function _parseID3PES(pes) {
    this._id3Track.samples.push(pes);
  };

  return TSDemuxer;
}();

/* harmony default export */ var tsdemuxer = (tsdemuxer_TSDemuxer);
// CONCATENATED MODULE: ./src/demux/mp3demuxer.js
/**
 * MP3 demuxer
 */




var mp3demuxer_MP3Demuxer =
/*#__PURE__*/
function () {
  function MP3Demuxer(observer, remuxer, config) {
    this.observer = observer;
    this.config = config;
    this.remuxer = remuxer;
  }

  var _proto = MP3Demuxer.prototype;

  _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, duration) {
    this._audioTrack = {
      container: 'audio/mpeg',
      type: 'audio',
      id: -1,
      sequenceNumber: 0,
      isAAC: false,
      samples: [],
      len: 0,
      manifestCodec: audioCodec,
      duration: duration,
      inputTimeScale: 90000
    };
  };

  _proto.resetTimeStamp = function resetTimeStamp() {};

  MP3Demuxer.probe = function probe(data) {
    // check if data contains ID3 timestamp and MPEG sync word
    var offset, length;
    var id3Data = id3["default"].getID3Data(data, 0);

    if (id3Data && id3["default"].getTimeStamp(id3Data) !== undefined) {
      // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1
      // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)
      // More info http://www.mp3-tech.org/programmer/frame_header.html
      for (offset = id3Data.length, length = Math.min(data.length - 1, offset + 100); offset < length; offset++) {
        if (mpegaudio.probe(data, offset)) {
          logger["logger"].log('MPEG Audio sync word found !');
          return true;
        }
      }
    }

    return false;
  }; // feed incoming data to the front of the parsing pipeline


  _proto.append = function append(data, timeOffset, contiguous, accurateTimeOffset) {
    var id3Data = id3["default"].getID3Data(data, 0);
    var timestamp = id3["default"].getTimeStamp(id3Data);
    var pts = timestamp ? 90 * timestamp : timeOffset * 90000;
    var offset = id3Data.length;
    var length = data.length;
    var frameIndex = 0,
        stamp = 0;
    var track = this._audioTrack;
    var id3Samples = [{
      pts: pts,
      dts: pts,
      data: id3Data
    }];

    while (offset < length) {
      if (mpegaudio.isHeader(data, offset)) {
        var frame = mpegaudio.appendFrame(track, data, offset, pts, frameIndex);

        if (frame) {
          offset += frame.length;
          stamp = frame.sample.pts;
          frameIndex++;
        } else {
          // logger.log('Unable to parse Mpeg audio frame');
          break;
        }
      } else if (id3["default"].isHeader(data, offset)) {
        id3Data = id3["default"].getID3Data(data, offset);
        id3Samples.push({
          pts: stamp,
          dts: stamp,
          data: id3Data
        });
        offset += id3Data.length;
      } else {
        // nothing found, keep looking
        offset++;
      }
    }

    this.remuxer.remux(track, {
      samples: []
    }, {
      samples: id3Samples,
      inputTimeScale: 90000
    }, {
      samples: []
    }, timeOffset, contiguous, accurateTimeOffset);
  };

  _proto.destroy = function destroy() {};

  return MP3Demuxer;
}();

/* harmony default export */ var mp3demuxer = (mp3demuxer_MP3Demuxer);
// CONCATENATED MODULE: ./src/remux/aac-helper.js
/**
 *  AAC helper
 */
var AAC =
/*#__PURE__*/
function () {
  function AAC() {}

  AAC.getSilentFrame = function getSilentFrame(codec, channelCount) {
    switch (codec) {
      case 'mp4a.40.2':
        if (channelCount === 1) {
          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);
        } else if (channelCount === 2) {
          return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);
        } else if (channelCount === 3) {
          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);
        } else if (channelCount === 4) {
          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);
        } else if (channelCount === 5) {
          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);
        } else if (channelCount === 6) {
          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);
        }

        break;
      // handle HE-AAC below (mp4a.40.5 / mp4a.40.29)

      default:
        if (channelCount === 1) {
          // ffmpeg -y -f lavfi -i "aevalsrc=0:d=0.05" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
          return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x4e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x1c, 0x6, 0xf1, 0xc1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
        } else if (channelCount === 2) {
          // ffmpeg -y -f lavfi -i "aevalsrc=0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
          return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
        } else if (channelCount === 3) {
          // ffmpeg -y -f lavfi -i "aevalsrc=0|0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
          return new Uint8Array([0x1, 0x40, 0x22, 0x80, 0xa3, 0x5e, 0xe6, 0x80, 0xba, 0x8, 0x0, 0x0, 0x0, 0x0, 0x95, 0x0, 0x6, 0xf1, 0xa1, 0xa, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5e]);
        }

        break;
    }

    return null;
  };

  return AAC;
}();

/* harmony default export */ var aac_helper = (AAC);
// CONCATENATED MODULE: ./src/remux/mp4-generator.js
/**
 * Generate MP4 Box
*/
var UINT32_MAX = Math.pow(2, 32) - 1;

var MP4 =
/*#__PURE__*/
function () {
  function MP4() {}

  MP4.init = function init() {
    MP4.types = {
      avc1: [],
      // codingname
      avcC: [],
      btrt: [],
      dinf: [],
      dref: [],
      esds: [],
      ftyp: [],
      hdlr: [],
      mdat: [],
      mdhd: [],
      mdia: [],
      mfhd: [],
      minf: [],
      moof: [],
      moov: [],
      mp4a: [],
      '.mp3': [],
      mvex: [],
      mvhd: [],
      pasp: [],
      sdtp: [],
      stbl: [],
      stco: [],
      stsc: [],
      stsd: [],
      stsz: [],
      stts: [],
      tfdt: [],
      tfhd: [],
      traf: [],
      trak: [],
      trun: [],
      trex: [],
      tkhd: [],
      vmhd: [],
      smhd: []
    };
    var i;

    for (i in MP4.types) {
      if (MP4.types.hasOwnProperty(i)) {
        MP4.types[i] = [i.charCodeAt(0), i.charCodeAt(1), i.charCodeAt(2), i.charCodeAt(3)];
      }
    }

    var videoHdlr = new Uint8Array([0x00, // version 0
    0x00, 0x00, 0x00, // flags
    0x00, 0x00, 0x00, 0x00, // pre_defined
    0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'
    0x00, 0x00, 0x00, 0x00, // reserved
    0x00, 0x00, 0x00, 0x00, // reserved
    0x00, 0x00, 0x00, 0x00, // reserved
    0x56, 0x69, 0x64, 0x65, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'
    ]);
    var audioHdlr = new Uint8Array([0x00, // version 0
    0x00, 0x00, 0x00, // flags
    0x00, 0x00, 0x00, 0x00, // pre_defined
    0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'
    0x00, 0x00, 0x00, 0x00, // reserved
    0x00, 0x00, 0x00, 0x00, // reserved
    0x00, 0x00, 0x00, 0x00, // reserved
    0x53, 0x6f, 0x75, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'
    ]);
    MP4.HDLR_TYPES = {
      'video': videoHdlr,
      'audio': audioHdlr
    };
    var dref = new Uint8Array([0x00, // version 0
    0x00, 0x00, 0x00, // flags
    0x00, 0x00, 0x00, 0x01, // entry_count
    0x00, 0x00, 0x00, 0x0c, // entry_size
    0x75, 0x72, 0x6c, 0x20, // 'url' type
    0x00, // version 0
    0x00, 0x00, 0x01 // entry_flags
    ]);
    var stco = new Uint8Array([0x00, // version
    0x00, 0x00, 0x00, // flags
    0x00, 0x00, 0x00, 0x00 // entry_count
    ]);
    MP4.STTS = MP4.STSC = MP4.STCO = stco;
    MP4.STSZ = new Uint8Array([0x00, // version
    0x00, 0x00, 0x00, // flags
    0x00, 0x00, 0x00, 0x00, // sample_size
    0x00, 0x00, 0x00, 0x00 // sample_count
    ]);
    MP4.VMHD = new Uint8Array([0x00, // version
    0x00, 0x00, 0x01, // flags
    0x00, 0x00, // graphicsmode
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // opcolor
    ]);
    MP4.SMHD = new Uint8Array([0x00, // version
    0x00, 0x00, 0x00, // flags
    0x00, 0x00, // balance
    0x00, 0x00 // reserved
    ]);
    MP4.STSD = new Uint8Array([0x00, // version 0
    0x00, 0x00, 0x00, // flags
    0x00, 0x00, 0x00, 0x01]); // entry_count

    var majorBrand = new Uint8Array([105, 115, 111, 109]); // isom

    var avc1Brand = new Uint8Array([97, 118, 99, 49]); // avc1

    var minorVersion = new Uint8Array([0, 0, 0, 1]);
    MP4.FTYP = MP4.box(MP4.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);
    MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));
  };

  MP4.box = function box(type) {
    var payload = Array.prototype.slice.call(arguments, 1),
        size = 8,
        i = payload.length,
        len = i,
        result; // calculate the total size we need to allocate

    while (i--) {
      size += payload[i].byteLength;
    }

    result = new Uint8Array(size);
    result[0] = size >> 24 & 0xff;
    result[1] = size >> 16 & 0xff;
    result[2] = size >> 8 & 0xff;
    result[3] = size & 0xff;
    result.set(type, 4); // copy the payload into the result

    for (i = 0, size = 8; i < len; i++) {
      // copy payload[i] array @ offset size
      result.set(payload[i], size);
      size += payload[i].byteLength;
    }

    return result;
  };

  MP4.hdlr = function hdlr(type) {
    return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);
  };

  MP4.mdat = function mdat(data) {
    return MP4.box(MP4.types.mdat, data);
  };

  MP4.mdhd = function mdhd(timescale, duration) {
    duration *= timescale;
    var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));
    var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
    return MP4.box(MP4.types.mdhd, new Uint8Array([0x01, // version 1
    0x00, 0x00, 0x00, // flags
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time
    timescale >> 24 & 0xFF, timescale >> 16 & 0xFF, timescale >> 8 & 0xFF, timescale & 0xFF, // timescale
    upperWordDuration >> 24, upperWordDuration >> 16 & 0xFF, upperWordDuration >> 8 & 0xFF, upperWordDuration & 0xFF, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xFF, lowerWordDuration >> 8 & 0xFF, lowerWordDuration & 0xFF, 0x55, 0xc4, // 'und' language (undetermined)
    0x00, 0x00]));
  };

  MP4.mdia = function mdia(track) {
    return MP4.box(MP4.types.mdia, MP4.mdhd(track.timescale, track.duration), MP4.hdlr(track.type), MP4.minf(track));
  };

  MP4.mfhd = function mfhd(sequenceNumber) {
    return MP4.box(MP4.types.mfhd, new Uint8Array([0x00, 0x00, 0x00, 0x00, // flags
    sequenceNumber >> 24, sequenceNumber >> 16 & 0xFF, sequenceNumber >> 8 & 0xFF, sequenceNumber & 0xFF // sequence_number
    ]));
  };

  MP4.minf = function minf(track) {
    if (track.type === 'audio') {
      return MP4.box(MP4.types.minf, MP4.box(MP4.types.smhd, MP4.SMHD), MP4.DINF, MP4.stbl(track));
    } else {
      return MP4.box(MP4.types.minf, MP4.box(MP4.types.vmhd, MP4.VMHD), MP4.DINF, MP4.stbl(track));
    }
  };

  MP4.moof = function moof(sn, baseMediaDecodeTime, track) {
    return MP4.box(MP4.types.moof, MP4.mfhd(sn), MP4.traf(track, baseMediaDecodeTime));
  };
  /**
  * @param tracks... (optional) {array} the tracks associated with this movie
  */


  MP4.moov = function moov(tracks) {
    var i = tracks.length,
        boxes = [];

    while (i--) {
      boxes[i] = MP4.trak(tracks[i]);
    }

    return MP4.box.apply(null, [MP4.types.moov, MP4.mvhd(tracks[0].timescale, tracks[0].duration)].concat(boxes).concat(MP4.mvex(tracks)));
  };

  MP4.mvex = function mvex(tracks) {
    var i = tracks.length,
        boxes = [];

    while (i--) {
      boxes[i] = MP4.trex(tracks[i]);
    }

    return MP4.box.apply(null, [MP4.types.mvex].concat(boxes));
  };

  MP4.mvhd = function mvhd(timescale, duration) {
    duration *= timescale;
    var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));
    var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
    var bytes = new Uint8Array([0x01, // version 1
    0x00, 0x00, 0x00, // flags
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time
    timescale >> 24 & 0xFF, timescale >> 16 & 0xFF, timescale >> 8 & 0xFF, timescale & 0xFF, // timescale
    upperWordDuration >> 24, upperWordDuration >> 16 & 0xFF, upperWordDuration >> 8 & 0xFF, upperWordDuration & 0xFF, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xFF, lowerWordDuration >> 8 & 0xFF, lowerWordDuration & 0xFF, 0x00, 0x01, 0x00, 0x00, // 1.0 rate
    0x01, 0x00, // 1.0 volume
    0x00, 0x00, // reserved
    0x00, 0x00, 0x00, 0x00, // reserved
    0x00, 0x00, 0x00, 0x00, // reserved
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined
    0xff, 0xff, 0xff, 0xff // next_track_ID
    ]);
    return MP4.box(MP4.types.mvhd, bytes);
  };

  MP4.sdtp = function sdtp(track) {
    var samples = track.samples || [],
        bytes = new Uint8Array(4 + samples.length),
        flags,
        i; // leave the full box header (4 bytes) all zero
    // write the sample table

    for (i = 0; i < samples.length; i++) {
      flags = samples[i].flags;
      bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;
    }

    return MP4.box(MP4.types.sdtp, bytes);
  };

  MP4.stbl = function stbl(track) {
    return MP4.box(MP4.types.stbl, MP4.stsd(track), MP4.box(MP4.types.stts, MP4.STTS), MP4.box(MP4.types.stsc, MP4.STSC), MP4.box(MP4.types.stsz, MP4.STSZ), MP4.box(MP4.types.stco, MP4.STCO));
  };

  MP4.avc1 = function avc1(track) {
    var sps = [],
        pps = [],
        i,
        data,
        len; // assemble the SPSs

    for (i = 0; i < track.sps.length; i++) {
      data = track.sps[i];
      len = data.byteLength;
      sps.push(len >>> 8 & 0xFF);
      sps.push(len & 0xFF); // SPS

      sps = sps.concat(Array.prototype.slice.call(data));
    } // assemble the PPSs


    for (i = 0; i < track.pps.length; i++) {
      data = track.pps[i];
      len = data.byteLength;
      pps.push(len >>> 8 & 0xFF);
      pps.push(len & 0xFF);
      pps = pps.concat(Array.prototype.slice.call(data));
    }

    var avcc = MP4.box(MP4.types.avcC, new Uint8Array([0x01, // version
    sps[3], // profile
    sps[4], // profile compat
    sps[5], // level
    0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes
    0xE0 | track.sps.length // 3bit reserved (111) + numOfSequenceParameterSets
    ].concat(sps).concat([track.pps.length // numOfPictureParameterSets
    ]).concat(pps))),
        // "PPS"
    width = track.width,
        height = track.height,
        hSpacing = track.pixelRatio[0],
        vSpacing = track.pixelRatio[1];
    return MP4.box(MP4.types.avc1, new Uint8Array([0x00, 0x00, 0x00, // reserved
    0x00, 0x00, 0x00, // reserved
    0x00, 0x01, // data_reference_index
    0x00, 0x00, // pre_defined
    0x00, 0x00, // reserved
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // pre_defined
    width >> 8 & 0xFF, width & 0xff, // width
    height >> 8 & 0xFF, height & 0xff, // height
    0x00, 0x48, 0x00, 0x00, // horizresolution
    0x00, 0x48, 0x00, 0x00, // vertresolution
    0x00, 0x00, 0x00, 0x00, // reserved
    0x00, 0x01, // frame_count
    0x12, 0x64, 0x61, 0x69, 0x6C, // dailymotion/hls.js
    0x79, 0x6D, 0x6F, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x68, 0x6C, 0x73, 0x2E, 0x6A, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // compressorname
    0x00, 0x18, // depth = 24
    0x11, 0x11]), // pre_defined = -1
    avcc, MP4.box(MP4.types.btrt, new Uint8Array([0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB
    0x00, 0x2d, 0xc6, 0xc0, // maxBitrate
    0x00, 0x2d, 0xc6, 0xc0])), // avgBitrate
    MP4.box(MP4.types.pasp, new Uint8Array([hSpacing >> 24, // hSpacing
    hSpacing >> 16 & 0xFF, hSpacing >> 8 & 0xFF, hSpacing & 0xFF, vSpacing >> 24, // vSpacing
    vSpacing >> 16 & 0xFF, vSpacing >> 8 & 0xFF, vSpacing & 0xFF])));
  };

  MP4.esds = function esds(track) {
    var configlen = track.config.length;
    return new Uint8Array([0x00, // version 0
    0x00, 0x00, 0x00, // flags
    0x03, // descriptor_type
    0x17 + configlen, // length
    0x00, 0x01, // es_id
    0x00, // stream_priority
    0x04, // descriptor_type
    0x0f + configlen, // length
    0x40, // codec : mpeg4_audio
    0x15, // stream_type
    0x00, 0x00, 0x00, // buffer_size
    0x00, 0x00, 0x00, 0x00, // maxBitrate
    0x00, 0x00, 0x00, 0x00, // avgBitrate
    0x05 // descriptor_type
    ].concat([configlen]).concat(track.config).concat([0x06, 0x01, 0x02])); // GASpecificConfig)); // length + audio config descriptor
  };

  MP4.mp4a = function mp4a(track) {
    var samplerate = track.samplerate;
    return MP4.box(MP4.types.mp4a, new Uint8Array([0x00, 0x00, 0x00, // reserved
    0x00, 0x00, 0x00, // reserved
    0x00, 0x01, // data_reference_index
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
    0x00, track.channelCount, // channelcount
    0x00, 0x10, // sampleSize:16bits
    0x00, 0x00, 0x00, 0x00, // reserved2
    samplerate >> 8 & 0xFF, samplerate & 0xff, //
    0x00, 0x00]), MP4.box(MP4.types.esds, MP4.esds(track)));
  };

  MP4.mp3 = function mp3(track) {
    var samplerate = track.samplerate;
    return MP4.box(MP4.types['.mp3'], new Uint8Array([0x00, 0x00, 0x00, // reserved
    0x00, 0x00, 0x00, // reserved
    0x00, 0x01, // data_reference_index
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
    0x00, track.channelCount, // channelcount
    0x00, 0x10, // sampleSize:16bits
    0x00, 0x00, 0x00, 0x00, // reserved2
    samplerate >> 8 & 0xFF, samplerate & 0xff, //
    0x00, 0x00]));
  };

  MP4.stsd = function stsd(track) {
    if (track.type === 'audio') {
      if (!track.isAAC && track.codec === 'mp3') {
        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp3(track));
      }

      return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));
    } else {
      return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));
    }
  };

  MP4.tkhd = function tkhd(track) {
    var id = track.id,
        duration = track.duration * track.timescale,
        width = track.width,
        height = track.height,
        upperWordDuration = Math.floor(duration / (UINT32_MAX + 1)),
        lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
    return MP4.box(MP4.types.tkhd, new Uint8Array([0x01, // version 1
    0x00, 0x00, 0x07, // flags
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time
    id >> 24 & 0xFF, id >> 16 & 0xFF, id >> 8 & 0xFF, id & 0xFF, // track_ID
    0x00, 0x00, 0x00, 0x00, // reserved
    upperWordDuration >> 24, upperWordDuration >> 16 & 0xFF, upperWordDuration >> 8 & 0xFF, upperWordDuration & 0xFF, lowerWordDuration >> 24, lowerWordDuration >> 16 & 0xFF, lowerWordDuration >> 8 & 0xFF, lowerWordDuration & 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved
    0x00, 0x00, // layer
    0x00, 0x00, // alternate_group
    0x00, 0x00, // non-audio track volume
    0x00, 0x00, // reserved
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, // transformation: unity matrix
    width >> 8 & 0xFF, width & 0xFF, 0x00, 0x00, // width
    height >> 8 & 0xFF, height & 0xFF, 0x00, 0x00 // height
    ]));
  };

  MP4.traf = function traf(track, baseMediaDecodeTime) {
    var sampleDependencyTable = MP4.sdtp(track),
        id = track.id,
        upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1)),
        lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));
    return MP4.box(MP4.types.traf, MP4.box(MP4.types.tfhd, new Uint8Array([0x00, // version 0
    0x00, 0x00, 0x00, // flags
    id >> 24, id >> 16 & 0XFF, id >> 8 & 0XFF, id & 0xFF])), MP4.box(MP4.types.tfdt, new Uint8Array([0x01, // version 1
    0x00, 0x00, 0x00, // flags
    upperWordBaseMediaDecodeTime >> 24, upperWordBaseMediaDecodeTime >> 16 & 0XFF, upperWordBaseMediaDecodeTime >> 8 & 0XFF, upperWordBaseMediaDecodeTime & 0xFF, lowerWordBaseMediaDecodeTime >> 24, lowerWordBaseMediaDecodeTime >> 16 & 0XFF, lowerWordBaseMediaDecodeTime >> 8 & 0XFF, lowerWordBaseMediaDecodeTime & 0xFF])), MP4.trun(track, sampleDependencyTable.length + 16 + // tfhd
    20 + // tfdt
    8 + // traf header
    16 + // mfhd
    8 + // moof header
    8), // mdat header
    sampleDependencyTable);
  };
  /**
   * Generate a track box.
   * @param track {object} a track definition
   * @return {Uint8Array} the track box
   */


  MP4.trak = function trak(track) {
    track.duration = track.duration || 0xffffffff;
    return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));
  };

  MP4.trex = function trex(track) {
    var id = track.id;
    return MP4.box(MP4.types.trex, new Uint8Array([0x00, // version 0
    0x00, 0x00, 0x00, // flags
    id >> 24, id >> 16 & 0XFF, id >> 8 & 0XFF, id & 0xFF, // track_ID
    0x00, 0x00, 0x00, 0x01, // default_sample_description_index
    0x00, 0x00, 0x00, 0x00, // default_sample_duration
    0x00, 0x00, 0x00, 0x00, // default_sample_size
    0x00, 0x01, 0x00, 0x01 // default_sample_flags
    ]));
  };

  MP4.trun = function trun(track, offset) {
    var samples = track.samples || [],
        len = samples.length,
        arraylen = 12 + 16 * len,
        array = new Uint8Array(arraylen),
        i,
        sample,
        duration,
        size,
        flags,
        cts;
    offset += 8 + arraylen;
    array.set([0x00, // version 0
    0x00, 0x0f, 0x01, // flags
    len >>> 24 & 0xFF, len >>> 16 & 0xFF, len >>> 8 & 0xFF, len & 0xFF, // sample_count
    offset >>> 24 & 0xFF, offset >>> 16 & 0xFF, offset >>> 8 & 0xFF, offset & 0xFF // data_offset
    ], 0);

    for (i = 0; i < len; i++) {
      sample = samples[i];
      duration = sample.duration;
      size = sample.size;
      flags = sample.flags;
      cts = sample.cts;
      array.set([duration >>> 24 & 0xFF, duration >>> 16 & 0xFF, duration >>> 8 & 0xFF, duration & 0xFF, // sample_duration
      size >>> 24 & 0xFF, size >>> 16 & 0xFF, size >>> 8 & 0xFF, size & 0xFF, // sample_size
      flags.isLeading << 2 | flags.dependsOn, flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.paddingValue << 1 | flags.isNonSync, flags.degradPrio & 0xF0 << 8, flags.degradPrio & 0x0F, // sample_flags
      cts >>> 24 & 0xFF, cts >>> 16 & 0xFF, cts >>> 8 & 0xFF, cts & 0xFF // sample_composition_time_offset
      ], 12 + 16 * i);
    }

    return MP4.box(MP4.types.trun, array);
  };

  MP4.initSegment = function initSegment(tracks) {
    if (!MP4.types) {
      MP4.init();
    }

    var movie = MP4.moov(tracks),
        result;
    result = new Uint8Array(MP4.FTYP.byteLength + movie.byteLength);
    result.set(MP4.FTYP);
    result.set(movie, MP4.FTYP.byteLength);
    return result;
  };

  return MP4;
}();

/* harmony default export */ var mp4_generator = (MP4);
// CONCATENATED MODULE: ./src/remux/mp4-remuxer.js
/**
 * fMP4 remuxer
*/




 // 10 seconds

var MAX_SILENT_FRAME_DURATION = 10 * 1000;

var mp4_remuxer_MP4Remuxer =
/*#__PURE__*/
function () {
  function MP4Remuxer(observer, config, typeSupported, vendor) {
    this.observer = observer;
    this.config = config;
    this.typeSupported = typeSupported;
    var userAgent = navigator.userAgent;
    this.isSafari = vendor && vendor.indexOf('Apple') > -1 && userAgent && !userAgent.match('CriOS');
    this.ISGenerated = false;
  }

  var _proto = MP4Remuxer.prototype;

  _proto.destroy = function destroy() {};

  _proto.resetTimeStamp = function resetTimeStamp(defaultTimeStamp) {
    this._initPTS = this._initDTS = defaultTimeStamp;
  };

  _proto.resetInitSegment = function resetInitSegment() {
    this.ISGenerated = false;
  };

  _proto.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {
    // generate Init Segment if needed
    if (!this.ISGenerated) {
      this.generateIS(audioTrack, videoTrack, timeOffset);
    }

    if (this.ISGenerated) {
      var nbAudioSamples = audioTrack.samples.length;
      var nbVideoSamples = videoTrack.samples.length;
      var audioTimeOffset = timeOffset;
      var videoTimeOffset = timeOffset;

      if (nbAudioSamples && nbVideoSamples) {
        // timeOffset is expected to be the offset of the first timestamp of this fragment (first DTS)
        // if first audio DTS is not aligned with first video DTS then we need to take that into account
        // when providing timeOffset to remuxAudio / remuxVideo. if we don't do that, there might be a permanent / small
        // drift between audio and video streams
        var audiovideoDeltaDts = (audioTrack.samples[0].pts - videoTrack.samples[0].pts) / videoTrack.inputTimeScale;
        audioTimeOffset += Math.max(0, audiovideoDeltaDts);
        videoTimeOffset += Math.max(0, -audiovideoDeltaDts);
      } // Purposefully remuxing audio before video, so that remuxVideo can use nextAudioPts, which is
      // calculated in remuxAudio.
      // logger.log('nb AAC samples:' + audioTrack.samples.length);


      if (nbAudioSamples) {
        // if initSegment was generated without video samples, regenerate it again
        if (!audioTrack.timescale) {
          logger["logger"].warn('regenerate InitSegment as audio detected');
          this.generateIS(audioTrack, videoTrack, timeOffset);
        }

        var audioData = this.remuxAudio(audioTrack, audioTimeOffset, contiguous, accurateTimeOffset); // logger.log('nb AVC samples:' + videoTrack.samples.length);

        if (nbVideoSamples) {
          var audioTrackLength;

          if (audioData) {
            audioTrackLength = audioData.endPTS - audioData.startPTS;
          } // if initSegment was generated without video samples, regenerate it again


          if (!videoTrack.timescale) {
            logger["logger"].warn('regenerate InitSegment as video detected');
            this.generateIS(audioTrack, videoTrack, timeOffset);
          }

          this.remuxVideo(videoTrack, videoTimeOffset, contiguous, audioTrackLength, accurateTimeOffset);
        }
      } else {
        // logger.log('nb AVC samples:' + videoTrack.samples.length);
        if (nbVideoSamples) {
          var videoData = this.remuxVideo(videoTrack, videoTimeOffset, contiguous, 0, accurateTimeOffset);

          if (videoData && audioTrack.codec) {
            this.remuxEmptyAudio(audioTrack, audioTimeOffset, contiguous, videoData);
          }
        }
      }
    } // logger.log('nb ID3 samples:' + audioTrack.samples.length);


    if (id3Track.samples.length) {
      this.remuxID3(id3Track, timeOffset);
    } // logger.log('nb ID3 samples:' + audioTrack.samples.length);


    if (textTrack.samples.length) {
      this.remuxText(textTrack, timeOffset);
    } // notify end of parsing


    this.observer.trigger(events["default"].FRAG_PARSED);
  };

  _proto.generateIS = function generateIS(audioTrack, videoTrack, timeOffset) {
    var observer = this.observer,
        audioSamples = audioTrack.samples,
        videoSamples = videoTrack.samples,
        typeSupported = this.typeSupported,
        container = 'audio/mp4',
        tracks = {},
        data = {
      tracks: tracks
    },
        computePTSDTS = this._initPTS === undefined,
        initPTS,
        initDTS;

    if (computePTSDTS) {
      initPTS = initDTS = Infinity;
    }

    if (audioTrack.config && audioSamples.length) {
      // let's use audio sampling rate as MP4 time scale.
      // rationale is that there is a integer nb of audio frames per audio sample (1024 for AAC)
      // using audio sampling rate here helps having an integer MP4 frame duration
      // this avoids potential rounding issue and AV sync issue
      audioTrack.timescale = audioTrack.samplerate;
      logger["logger"].log("audio sampling rate : " + audioTrack.samplerate);

      if (!audioTrack.isAAC) {
        if (typeSupported.mpeg) {
          // Chrome and Safari
          container = 'audio/mpeg';
          audioTrack.codec = '';
        } else if (typeSupported.mp3) {
          // Firefox
          audioTrack.codec = 'mp3';
        }
      }

      tracks.audio = {
        container: container,
        codec: audioTrack.codec,
        initSegment: !audioTrack.isAAC && typeSupported.mpeg ? new Uint8Array() : mp4_generator.initSegment([audioTrack]),
        metadata: {
          channelCount: audioTrack.channelCount
        }
      };

      if (computePTSDTS) {
        // remember first PTS of this demuxing context. for audio, PTS = DTS
        initPTS = initDTS = audioSamples[0].pts - audioTrack.inputTimeScale * timeOffset;
      }
    }

    if (videoTrack.sps && videoTrack.pps && videoSamples.length) {
      // let's use input time scale as MP4 video timescale
      // we use input time scale straight away to avoid rounding issues on frame duration / cts computation
      var inputTimeScale = videoTrack.inputTimeScale;
      videoTrack.timescale = inputTimeScale;
      tracks.video = {
        container: 'video/mp4',
        codec: videoTrack.codec,
        initSegment: mp4_generator.initSegment([videoTrack]),
        metadata: {
          width: videoTrack.width,
          height: videoTrack.height
        }
      };

      if (computePTSDTS) {
        initPTS = Math.min(initPTS, videoSamples[0].pts - inputTimeScale * timeOffset);
        initDTS = Math.min(initDTS, videoSamples[0].dts - inputTimeScale * timeOffset);
        this.observer.trigger(events["default"].INIT_PTS_FOUND, {
          initPTS: initPTS
        });
      }
    }

    if (Object.keys(tracks).length) {
      observer.trigger(events["default"].FRAG_PARSING_INIT_SEGMENT, data);
      this.ISGenerated = true;

      if (computePTSDTS) {
        this._initPTS = initPTS;
        this._initDTS = initDTS;
      }
    } else {
      observer.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].MEDIA_ERROR,
        details: errors["ErrorDetails"].FRAG_PARSING_ERROR,
        fatal: false,
        reason: 'no audio/video samples found'
      });
    }
  };

  _proto.remuxVideo = function remuxVideo(track, timeOffset, contiguous, audioTrackLength, accurateTimeOffset) {
    var offset = 8;
    var mp4SampleDuration;
    var mdat;
    var moof;
    var firstPTS;
    var firstDTS;
    var lastPTS;
    var lastDTS;
    var timeScale = track.timescale;
    var inputSamples = track.samples;
    var outputSamples = [];
    var nbSamples = inputSamples.length;
    var ptsNormalize = this._PTSNormalize;
    var initPTS = this._initPTS; // if parsed fragment is contiguous with last one, let's use last DTS value as reference

    var nextAvcDts = this.nextAvcDts;
    var isSafari = this.isSafari;

    if (nbSamples === 0) {
      return;
    } // Safari does not like overlapping DTS on consecutive fragments. let's use nextAvcDts to overcome this if fragments are consecutive


    if (isSafari) {
      // also consider consecutive fragments as being contiguous (even if a level switch occurs),
      // for sake of clarity:
      // consecutive fragments are frags with
      //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR
      //  - less than 200 ms PTS gaps (timeScale/5)
      contiguous |= inputSamples.length && nextAvcDts && (accurateTimeOffset && Math.abs(timeOffset - nextAvcDts / timeScale) < 0.1 || Math.abs(inputSamples[0].pts - nextAvcDts - initPTS) < timeScale / 5);
    }

    if (!contiguous) {
      // if not contiguous, let's use target timeOffset
      nextAvcDts = timeOffset * timeScale;
    } // PTS is coded on 33bits, and can loop from -2^32 to 2^32
    // ptsNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value


    inputSamples.forEach(function (sample) {
      sample.pts = ptsNormalize(sample.pts - initPTS, nextAvcDts);
      sample.dts = ptsNormalize(sample.dts - initPTS, nextAvcDts);
    }); // sort video samples by DTS then PTS then demux id order

    inputSamples.sort(function (a, b) {
      var deltadts = a.dts - b.dts;
      var deltapts = a.pts - b.pts;
      return deltadts || deltapts || a.id - b.id;
    }); // handle broken streams with PTS < DTS, tolerance up 200ms (18000 in 90kHz timescale)

    var PTSDTSshift = inputSamples.reduce(function (prev, curr) {
      return Math.max(Math.min(prev, curr.pts - curr.dts), -18000);
    }, 0);

    if (PTSDTSshift < 0) {
      logger["logger"].warn("PTS < DTS detected in video samples, shifting DTS by " + Math.round(PTSDTSshift / 90) + " ms to overcome this issue");

      for (var i = 0; i < inputSamples.length; i++) {
        inputSamples[i].dts += PTSDTSshift;
      }
    } // compute first DTS and last DTS, normalize them against reference value


    var sample = inputSamples[0];
    firstDTS = Math.max(sample.dts, 0);
    firstPTS = Math.max(sample.pts, 0); // check timestamp continuity accross consecutive fragments (this is to remove inter-fragment gap/hole)

    var delta = Math.round((firstDTS - nextAvcDts) / 90); // if fragment are contiguous, detect hole/overlapping between fragments

    if (contiguous) {
      if (delta) {
        if (delta > 1) {
          logger["logger"].log("AVC:" + delta + " ms hole between fragments detected,filling it");
        } else if (delta < -1) {
          logger["logger"].log("AVC:" + -delta + " ms overlapping between fragments detected");
        } // remove hole/gap : set DTS to next expected DTS


        firstDTS = nextAvcDts;
        inputSamples[0].dts = firstDTS; // offset PTS as well, ensure that PTS is smaller or equal than new DTS

        firstPTS = Math.max(firstPTS - delta, nextAvcDts);
        inputSamples[0].pts = firstPTS;
        logger["logger"].log("Video/PTS/DTS adjusted: " + Math.round(firstPTS / 90) + "/" + Math.round(firstDTS / 90) + ",delta:" + delta + " ms");
      }
    } // compute lastPTS/lastDTS


    sample = inputSamples[inputSamples.length - 1];
    lastDTS = Math.max(sample.dts, 0);
    lastPTS = Math.max(sample.pts, 0, lastDTS); // on Safari let's signal the same sample duration for all samples
    // sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS
    // set this constant duration as being the avg delta between consecutive DTS.

    if (isSafari) {
      mp4SampleDuration = Math.round((lastDTS - firstDTS) / (inputSamples.length - 1));
    }

    var nbNalu = 0,
        naluLen = 0;

    for (var _i = 0; _i < nbSamples; _i++) {
      // compute total/avc sample length and nb of NAL units
      var _sample = inputSamples[_i],
          units = _sample.units,
          nbUnits = units.length,
          sampleLen = 0;

      for (var j = 0; j < nbUnits; j++) {
        sampleLen += units[j].data.length;
      }

      naluLen += sampleLen;
      nbNalu += nbUnits;
      _sample.length = sampleLen; // normalize PTS/DTS

      if (isSafari) {
        // sample DTS is computed using a constant decoding offset (mp4SampleDuration) between samples
        _sample.dts = firstDTS + _i * mp4SampleDuration;
      } else {
        // ensure sample monotonic DTS
        _sample.dts = Math.max(_sample.dts, firstDTS);
      } // ensure that computed value is greater or equal than sample DTS


      _sample.pts = Math.max(_sample.pts, _sample.dts);
    }
    /* concatenate the video data and construct the mdat in place
      (need 8 more bytes to fill length and mpdat type) */


    var mdatSize = naluLen + 4 * nbNalu + 8;

    try {
      mdat = new Uint8Array(mdatSize);
    } catch (err) {
      this.observer.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].MUX_ERROR,
        details: errors["ErrorDetails"].REMUX_ALLOC_ERROR,
        fatal: false,
        bytes: mdatSize,
        reason: "fail allocating video mdat " + mdatSize
      });
      return;
    }

    var view = new DataView(mdat.buffer);
    view.setUint32(0, mdatSize);
    mdat.set(mp4_generator.types.mdat, 4);

    for (var _i2 = 0; _i2 < nbSamples; _i2++) {
      var avcSample = inputSamples[_i2],
          avcSampleUnits = avcSample.units,
          mp4SampleLength = 0,
          compositionTimeOffset = void 0; // convert NALU bitstream to MP4 format (prepend NALU with size field)

      for (var _j = 0, _nbUnits = avcSampleUnits.length; _j < _nbUnits; _j++) {
        var unit = avcSampleUnits[_j],
            unitData = unit.data,
            unitDataLen = unit.data.byteLength;
        view.setUint32(offset, unitDataLen);
        offset += 4;
        mdat.set(unitData, offset);
        offset += unitDataLen;
        mp4SampleLength += 4 + unitDataLen;
      }

      if (!isSafari) {
        // expected sample duration is the Decoding Timestamp diff of consecutive samples
        if (_i2 < nbSamples - 1) {
          mp4SampleDuration = inputSamples[_i2 + 1].dts - avcSample.dts;
        } else {
          var config = this.config,
              lastFrameDuration = avcSample.dts - inputSamples[_i2 > 0 ? _i2 - 1 : _i2].dts;

          if (config.stretchShortVideoTrack) {
            // In some cases, a segment's audio track duration may exceed the video track duration.
            // Since we've already remuxed audio, and we know how long the audio track is, we look to
            // see if the delta to the next segment is longer than maxBufferHole.
            // If so, playback would potentially get stuck, so we artificially inflate
            // the duration of the last frame to minimize any potential gap between segments.
            var maxBufferHole = config.maxBufferHole,
                gapTolerance = Math.floor(maxBufferHole * timeScale),
                deltaToFrameEnd = (audioTrackLength ? firstPTS + audioTrackLength * timeScale : this.nextAudioPts) - avcSample.pts;

            if (deltaToFrameEnd > gapTolerance) {
              // We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video
              // frame overlap. maxBufferHole should be >> lastFrameDuration anyway.
              mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;

              if (mp4SampleDuration < 0) {
                mp4SampleDuration = lastFrameDuration;
              }

              logger["logger"].log("It is approximately " + deltaToFrameEnd / 90 + " ms to the next segment; using duration " + mp4SampleDuration / 90 + " ms for the last video frame.");
            } else {
              mp4SampleDuration = lastFrameDuration;
            }
          } else {
            mp4SampleDuration = lastFrameDuration;
          }
        }

        compositionTimeOffset = Math.round(avcSample.pts - avcSample.dts);
      } else {
        compositionTimeOffset = Math.max(0, mp4SampleDuration * Math.round((avcSample.pts - avcSample.dts) / mp4SampleDuration));
      } // console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${avcSample.pts}/${avcSample.dts}/${initDTS}/${ptsnorm}/${dtsnorm}/${(avcSample.pts/4294967296).toFixed(3)}');


      outputSamples.push({
        size: mp4SampleLength,
        // constant duration
        duration: mp4SampleDuration,
        cts: compositionTimeOffset,
        flags: {
          isLeading: 0,
          isDependedOn: 0,
          hasRedundancy: 0,
          degradPrio: 0,
          dependsOn: avcSample.key ? 2 : 1,
          isNonSync: avcSample.key ? 0 : 1
        }
      });
    } // next AVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)


    this.nextAvcDts = lastDTS + mp4SampleDuration;
    var dropped = track.dropped;
    track.nbNalu = 0;
    track.dropped = 0;

    if (outputSamples.length && navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {
      var flags = outputSamples[0].flags; // chrome workaround, mark first sample as being a Random Access Point to avoid sourcebuffer append issue
      // https://code.google.com/p/chromium/issues/detail?id=229412

      flags.dependsOn = 2;
      flags.isNonSync = 0;
    }

    track.samples = outputSamples;
    moof = mp4_generator.moof(track.sequenceNumber++, firstDTS, track);
    track.samples = [];
    var data = {
      data1: moof,
      data2: mdat,
      startPTS: firstPTS / timeScale,
      endPTS: (lastPTS + mp4SampleDuration) / timeScale,
      startDTS: firstDTS / timeScale,
      endDTS: this.nextAvcDts / timeScale,
      type: 'video',
      hasAudio: false,
      hasVideo: true,
      nb: outputSamples.length,
      dropped: dropped
    };
    this.observer.trigger(events["default"].FRAG_PARSING_DATA, data);
    return data;
  };

  _proto.remuxAudio = function remuxAudio(track, timeOffset, contiguous, accurateTimeOffset) {
    var inputTimeScale = track.inputTimeScale;
    var mp4timeScale = track.timescale;
    var scaleFactor = inputTimeScale / mp4timeScale;
    var mp4SampleDuration = track.isAAC ? 1024 : 1152;
    var inputSampleDuration = mp4SampleDuration * scaleFactor;
    var ptsNormalize = this._PTSNormalize;
    var initPTS = this._initPTS;
    var rawMPEG = !track.isAAC && this.typeSupported.mpeg;
    var mp4Sample,
        fillFrame,
        mdat,
        moof,
        firstPTS,
        lastPTS,
        offset = rawMPEG ? 0 : 8,
        inputSamples = track.samples,
        outputSamples = [],
        nextAudioPts = this.nextAudioPts; // for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),
    // for sake of clarity:
    // consecutive fragments are frags with
    //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR
    //  - less than 20 audio frames distance
    // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)
    // this helps ensuring audio continuity
    // and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame

    contiguous |= inputSamples.length && nextAudioPts && (accurateTimeOffset && Math.abs(timeOffset - nextAudioPts / inputTimeScale) < 0.1 || Math.abs(inputSamples[0].pts - nextAudioPts - initPTS) < 20 * inputSampleDuration); // compute normalized PTS

    inputSamples.forEach(function (sample) {
      sample.pts = sample.dts = ptsNormalize(sample.pts - initPTS, timeOffset * inputTimeScale);
    }); // filter out sample with negative PTS that are not playable anyway
    // if we don't remove these negative samples, they will shift all audio samples forward.
    // leading to audio overlap between current / next fragment

    inputSamples = inputSamples.filter(function (sample) {
      return sample.pts >= 0;
    }); // in case all samples have negative PTS, and have been filtered out, return now

    if (inputSamples.length === 0) {
      return;
    }

    if (!contiguous) {
      if (!accurateTimeOffset) {
        // if frag are mot contiguous and if we cant trust time offset, let's use first sample PTS as next audio PTS
        nextAudioPts = inputSamples[0].pts;
      } else {
        // if timeOffset is accurate, let's use it as predicted next audio PTS
        nextAudioPts = timeOffset * inputTimeScale;
      }
    } // If the audio track is missing samples, the frames seem to get "left-shifted" within the
    // resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.
    // In an effort to prevent this from happening, we inject frames here where there are gaps.
    // When possible, we inject a silent frame; when that's not possible, we duplicate the last
    // frame.


    if (track.isAAC) {
      var maxAudioFramesDrift = this.config.maxAudioFramesDrift;

      for (var i = 0, nextPts = nextAudioPts; i < inputSamples.length;) {
        // First, let's see how far off this frame is from where we expect it to be
        var sample = inputSamples[i],
            delta;
        var pts = sample.pts;
        delta = pts - nextPts;
        var duration = Math.abs(1000 * delta / inputTimeScale); // If we're overlapping by more than a duration, drop this sample

        if (delta <= -maxAudioFramesDrift * inputSampleDuration) {
          logger["logger"].warn("Dropping 1 audio frame @ " + (nextPts / inputTimeScale).toFixed(3) + "s due to " + Math.round(duration) + " ms overlap.");
          inputSamples.splice(i, 1); // Don't touch nextPtsNorm or i
        } // eslint-disable-line brace-style
        // Insert missing frames if:
        // 1: We're more than maxAudioFramesDrift frame away
        // 2: Not more than MAX_SILENT_FRAME_DURATION away
        // 3: currentTime (aka nextPtsNorm) is not 0
        else if (delta >= maxAudioFramesDrift * inputSampleDuration && duration < MAX_SILENT_FRAME_DURATION && nextPts) {
            var missing = Math.round(delta / inputSampleDuration);
            logger["logger"].warn("Injecting " + missing + " audio frame @ " + (nextPts / inputTimeScale).toFixed(3) + "s due to " + Math.round(1000 * delta / inputTimeScale) + " ms gap.");

            for (var j = 0; j < missing; j++) {
              var newStamp = Math.max(nextPts, 0);
              fillFrame = aac_helper.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);

              if (!fillFrame) {
                logger["logger"].log('Unable to get silent frame for given audio codec; duplicating last frame instead.');
                fillFrame = sample.unit.subarray();
              }

              inputSamples.splice(i, 0, {
                unit: fillFrame,
                pts: newStamp,
                dts: newStamp
              });
              nextPts += inputSampleDuration;
              i++;
            } // Adjust sample to next expected pts


            sample.pts = sample.dts = nextPts;
            nextPts += inputSampleDuration;
            i++;
          } else {
            // Otherwise, just adjust pts
            if (Math.abs(delta) > 0.1 * inputSampleDuration) {// logger.log(`Invalid frame delta ${Math.round(delta + inputSampleDuration)} at PTS ${Math.round(pts / 90)} (should be ${Math.round(inputSampleDuration)}).`);
            }

            sample.pts = sample.dts = nextPts;
            nextPts += inputSampleDuration;
            i++;
          }
      }
    } // compute mdat size, as we eventually filtered/added some samples


    var nbSamples = inputSamples.length;
    var mdatSize = 0;

    while (nbSamples--) {
      mdatSize += inputSamples[nbSamples].unit.byteLength;
    }

    for (var _j2 = 0, _nbSamples = inputSamples.length; _j2 < _nbSamples; _j2++) {
      var audioSample = inputSamples[_j2];
      var unit = audioSample.unit;
      var _pts = audioSample.pts; // logger.log(`Audio/PTS:${Math.round(pts/90)}`);
      // if not first sample

      if (lastPTS !== undefined) {
        mp4Sample.duration = Math.round((_pts - lastPTS) / scaleFactor);
      } else {
        var _delta = Math.round(1000 * (_pts - nextAudioPts) / inputTimeScale),
            numMissingFrames = 0; // if fragment are contiguous, detect hole/overlapping between fragments
        // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)


        if (contiguous && track.isAAC) {
          // log delta
          if (_delta) {
            if (_delta > 0 && _delta < MAX_SILENT_FRAME_DURATION) {
              numMissingFrames = Math.round((_pts - nextAudioPts) / inputSampleDuration);
              logger["logger"].log(_delta + " ms hole between AAC samples detected,filling it");

              if (numMissingFrames > 0) {
                fillFrame = aac_helper.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);

                if (!fillFrame) {
                  fillFrame = unit.subarray();
                }

                mdatSize += numMissingFrames * fillFrame.length;
              } // if we have frame overlap, overlapping for more than half a frame duraion

            } else if (_delta < -12) {
              // drop overlapping audio frames... browser will deal with it
              logger["logger"].log("drop overlapping AAC sample, expected/parsed/delta:" + (nextAudioPts / inputTimeScale).toFixed(3) + "s/" + (_pts / inputTimeScale).toFixed(3) + "s/" + -_delta + "ms");
              mdatSize -= unit.byteLength;
              continue;
            } // set PTS/DTS to expected PTS/DTS


            _pts = nextAudioPts;
          }
        } // remember first PTS of our audioSamples


        firstPTS = _pts;

        if (mdatSize > 0) {
          mdatSize += offset;

          try {
            mdat = new Uint8Array(mdatSize);
          } catch (err) {
            this.observer.trigger(events["default"].ERROR, {
              type: errors["ErrorTypes"].MUX_ERROR,
              details: errors["ErrorDetails"].REMUX_ALLOC_ERROR,
              fatal: false,
              bytes: mdatSize,
              reason: "fail allocating audio mdat " + mdatSize
            });
            return;
          }

          if (!rawMPEG) {
            var view = new DataView(mdat.buffer);
            view.setUint32(0, mdatSize);
            mdat.set(mp4_generator.types.mdat, 4);
          }
        } else {
          // no audio samples
          return;
        }

        for (var _i3 = 0; _i3 < numMissingFrames; _i3++) {
          fillFrame = aac_helper.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);

          if (!fillFrame) {
            logger["logger"].log('Unable to get silent frame for given audio codec; duplicating this frame instead.');
            fillFrame = unit.subarray();
          }

          mdat.set(fillFrame, offset);
          offset += fillFrame.byteLength;
          mp4Sample = {
            size: fillFrame.byteLength,
            cts: 0,
            duration: 1024,
            flags: {
              isLeading: 0,
              isDependedOn: 0,
              hasRedundancy: 0,
              degradPrio: 0,
              dependsOn: 1
            }
          };
          outputSamples.push(mp4Sample);
        }
      }

      mdat.set(unit, offset);
      var unitLen = unit.byteLength;
      offset += unitLen; // console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${audioSample.pts}/${audioSample.dts}/${initDTS}/${ptsnorm}/${dtsnorm}/${(audioSample.pts/4294967296).toFixed(3)}');

      mp4Sample = {
        size: unitLen,
        cts: 0,
        duration: 0,
        flags: {
          isLeading: 0,
          isDependedOn: 0,
          hasRedundancy: 0,
          degradPrio: 0,
          dependsOn: 1
        }
      };
      outputSamples.push(mp4Sample);
      lastPTS = _pts;
    }

    var lastSampleDuration = 0;
    nbSamples = outputSamples.length; // set last sample duration as being identical to previous sample

    if (nbSamples >= 2) {
      lastSampleDuration = outputSamples[nbSamples - 2].duration;
      mp4Sample.duration = lastSampleDuration;
    }

    if (nbSamples) {
      // next audio sample PTS should be equal to last sample PTS + duration
      this.nextAudioPts = nextAudioPts = lastPTS + scaleFactor * lastSampleDuration; // logger.log('Audio/PTS/PTSend:' + audioSample.pts.toFixed(0) + '/' + this.nextAacDts.toFixed(0));

      track.samples = outputSamples;

      if (rawMPEG) {
        moof = new Uint8Array();
      } else {
        moof = mp4_generator.moof(track.sequenceNumber++, firstPTS / scaleFactor, track);
      }

      track.samples = [];
      var start = firstPTS / inputTimeScale;
      var end = nextAudioPts / inputTimeScale;
      var audioData = {
        data1: moof,
        data2: mdat,
        startPTS: start,
        endPTS: end,
        startDTS: start,
        endDTS: end,
        type: 'audio',
        hasAudio: true,
        hasVideo: false,
        nb: nbSamples
      };
      this.observer.trigger(events["default"].FRAG_PARSING_DATA, audioData);
      return audioData;
    }

    return null;
  };

  _proto.remuxEmptyAudio = function remuxEmptyAudio(track, timeOffset, contiguous, videoData) {
    var inputTimeScale = track.inputTimeScale,
        mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale,
        scaleFactor = inputTimeScale / mp4timeScale,
        nextAudioPts = this.nextAudioPts,
        // sync with video's timestamp
    startDTS = (nextAudioPts !== undefined ? nextAudioPts : videoData.startDTS * inputTimeScale) + this._initDTS,
        endDTS = videoData.endDTS * inputTimeScale + this._initDTS,
        // one sample's duration value
    sampleDuration = 1024,
        frameDuration = scaleFactor * sampleDuration,
        // samples count of this segment's duration
    nbSamples = Math.ceil((endDTS - startDTS) / frameDuration),
        // silent frame
    silentFrame = aac_helper.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
    logger["logger"].warn('remux empty Audio'); // Can't remux if we can't generate a silent frame...

    if (!silentFrame) {
      logger["logger"].trace('Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!');
      return;
    }

    var samples = [];

    for (var i = 0; i < nbSamples; i++) {
      var stamp = startDTS + i * frameDuration;
      samples.push({
        unit: silentFrame,
        pts: stamp,
        dts: stamp
      });
    }

    track.samples = samples;
    this.remuxAudio(track, timeOffset, contiguous);
  };

  _proto.remuxID3 = function remuxID3(track) {
    var length = track.samples.length,
        sample;
    var inputTimeScale = track.inputTimeScale;
    var initPTS = this._initPTS;
    var initDTS = this._initDTS; // consume samples

    if (length) {
      for (var index = 0; index < length; index++) {
        sample = track.samples[index]; // setting id3 pts, dts to relative time
        // using this._initPTS and this._initDTS to calculate relative time

        sample.pts = (sample.pts - initPTS) / inputTimeScale;
        sample.dts = (sample.dts - initDTS) / inputTimeScale;
      }

      this.observer.trigger(events["default"].FRAG_PARSING_METADATA, {
        samples: track.samples
      });
    }

    track.samples = [];
  };

  _proto.remuxText = function remuxText(track) {
    track.samples.sort(function (a, b) {
      return a.pts - b.pts;
    });
    var length = track.samples.length,
        sample;
    var inputTimeScale = track.inputTimeScale;
    var initPTS = this._initPTS; // consume samples

    if (length) {
      for (var index = 0; index < length; index++) {
        sample = track.samples[index]; // setting text pts, dts to relative time
        // using this._initPTS and this._initDTS to calculate relative time

        sample.pts = (sample.pts - initPTS) / inputTimeScale;
      }

      this.observer.trigger(events["default"].FRAG_PARSING_USERDATA, {
        samples: track.samples
      });
    }

    track.samples = [];
  };

  _proto._PTSNormalize = function _PTSNormalize(value, reference) {
    var offset;

    if (reference === undefined) {
      return value;
    }

    if (reference < value) {
      // - 2^33
      offset = -8589934592;
    } else {
      // + 2^33
      offset = 8589934592;
    }
    /* PTS is 33bit (from 0 to 2^33 -1)
      if diff between value and reference is bigger than half of the amplitude (2^32) then it means that
      PTS looping occured. fill the gap */


    while (Math.abs(value - reference) > 4294967296) {
      value += offset;
    }

    return value;
  };

  return MP4Remuxer;
}();

/* harmony default export */ var mp4_remuxer = (mp4_remuxer_MP4Remuxer);
// CONCATENATED MODULE: ./src/remux/passthrough-remuxer.js
/**
 * passthrough remuxer
*/


var passthrough_remuxer_PassThroughRemuxer =
/*#__PURE__*/
function () {
  function PassThroughRemuxer(observer) {
    this.observer = observer;
  }

  var _proto = PassThroughRemuxer.prototype;

  _proto.destroy = function destroy() {};

  _proto.resetTimeStamp = function resetTimeStamp() {};

  _proto.resetInitSegment = function resetInitSegment() {};

  _proto.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset, rawData) {
    var observer = this.observer;
    var streamType = '';

    if (audioTrack) {
      streamType += 'audio';
    }

    if (videoTrack) {
      streamType += 'video';
    }

    observer.trigger(events["default"].FRAG_PARSING_DATA, {
      data1: rawData,
      startPTS: timeOffset,
      startDTS: timeOffset,
      type: streamType,
      hasAudio: !!audioTrack,
      hasVideo: !!videoTrack,
      nb: 1,
      dropped: 0
    }); // notify end of parsing

    observer.trigger(events["default"].FRAG_PARSED);
  };

  return PassThroughRemuxer;
}();

/* harmony default export */ var passthrough_remuxer = (passthrough_remuxer_PassThroughRemuxer);
// CONCATENATED MODULE: ./src/demux/demuxer-inline.js
/**
 *
 * inline demuxer: probe fragments and instantiate
 * appropriate demuxer depending on content type (TSDemuxer, AACDemuxer, ...)
 *
 */










 // see https://stackoverflow.com/a/11237259/589493

var global = Object(get_self_scope["getSelfScope"])(); // safeguard for code that might run both on worker and main thread

var now; // performance.now() not available on WebWorker, at least on Safari Desktop

try {
  now = global.performance.now.bind(global.performance);
} catch (err) {
  logger["logger"].debug('Unable to use Performance API on this environment');
  now = global.Date.now;
}

var demuxer_inline_DemuxerInline =
/*#__PURE__*/
function () {
  function DemuxerInline(observer, typeSupported, config, vendor) {
    this.observer = observer;
    this.typeSupported = typeSupported;
    this.config = config;
    this.vendor = vendor;
  }

  var _proto = DemuxerInline.prototype;

  _proto.destroy = function destroy() {
    var demuxer = this.demuxer;

    if (demuxer) {
      demuxer.destroy();
    }
  };

  _proto.push = function push(data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS) {
    var _this = this;

    if (data.byteLength > 0 && decryptdata != null && decryptdata.key != null && decryptdata.method === 'AES-128') {
      var decrypter = this.decrypter;

      if (decrypter == null) {
        decrypter = this.decrypter = new crypt_decrypter["default"](this.observer, this.config);
      }

      var startTime = now();
      decrypter.decrypt(data, decryptdata.key.buffer, decryptdata.iv.buffer, function (decryptedData) {
        var endTime = now();

        _this.observer.trigger(events["default"].FRAG_DECRYPTED, {
          stats: {
            tstart: startTime,
            tdecrypt: endTime
          }
        });

        _this.pushDecrypted(new Uint8Array(decryptedData), decryptdata, new Uint8Array(initSegment), audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);
      });
    } else {
      this.pushDecrypted(new Uint8Array(data), decryptdata, new Uint8Array(initSegment), audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);
    }
  };

  _proto.pushDecrypted = function pushDecrypted(data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS) {
    var demuxer = this.demuxer;

    if (!demuxer || // in case of continuity change, or track switch
    // we might switch from content type (AAC container to TS container, or TS to fmp4 for example)
    // so let's check that current demuxer is still valid
    (discontinuity || trackSwitch) && !this.probe(data)) {
      var observer = this.observer;
      var typeSupported = this.typeSupported;
      var config = this.config; // probing order is TS/MP4/AAC/MP3

      var muxConfig = [{
        demux: tsdemuxer,
        remux: mp4_remuxer
      }, {
        demux: mp4demuxer["default"],
        remux: passthrough_remuxer
      }, {
        demux: aacdemuxer,
        remux: mp4_remuxer
      }, {
        demux: mp3demuxer,
        remux: mp4_remuxer
      }]; // probe for content type

      for (var i = 0, len = muxConfig.length; i < len; i++) {
        var mux = muxConfig[i];
        var probe = mux.demux.probe;

        if (probe(data)) {
          var _remuxer = this.remuxer = new mux.remux(observer, config, typeSupported, this.vendor);

          demuxer = new mux.demux(observer, _remuxer, config, typeSupported);
          this.probe = probe;
          break;
        }
      }

      if (!demuxer) {
        observer.trigger(events["default"].ERROR, {
          type: errors["ErrorTypes"].MEDIA_ERROR,
          details: errors["ErrorDetails"].FRAG_PARSING_ERROR,
          fatal: true,
          reason: 'no demux matching with content found'
        });
        return;
      }

      this.demuxer = demuxer;
    }

    var remuxer = this.remuxer;

    if (discontinuity || trackSwitch) {
      demuxer.resetInitSegment(initSegment, audioCodec, videoCodec, duration);
      remuxer.resetInitSegment();
    }

    if (discontinuity) {
      demuxer.resetTimeStamp(defaultInitPTS);
      remuxer.resetTimeStamp(defaultInitPTS);
    }

    if (typeof demuxer.setDecryptData === 'function') {
      demuxer.setDecryptData(decryptdata);
    }

    demuxer.append(data, timeOffset, contiguous, accurateTimeOffset);
  };

  return DemuxerInline;
}();

/* harmony default export */ var demuxer_inline = __webpack_exports__["default"] = (demuxer_inline_DemuxerInline);

/***/ }),

/***/ "./src/demux/demuxer-worker.js":
/*!*************************************!*\
  !*** ./src/demux/demuxer-worker.js ***!
  \*************************************/
/*! exports provided: default */
/*! ModuleConcatenation bailout: Module is referenced from these modules with unsupported syntax: ./src/demux/demuxer.js (referenced with require.resolve) */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _demux_demuxer_inline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../demux/demuxer-inline */ "./src/demux/demuxer-inline.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./src/events.js");
/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.js");
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! eventemitter3 */ "./node_modules/eventemitter3/index.js");
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_3__);
/* demuxer web worker.
 *  - listen to worker message, and trigger DemuxerInline upon reception of Fragments.
 *  - provides MP4 Boxes back to main thread using [transferable objects](https://developers.google.com/web/updates/2011/12/Transferable-Objects-Lightning-Fast) in order to minimize message passing overhead.
 */





var DemuxerWorker = function DemuxerWorker(self) {
  // observer setup
  var observer = new eventemitter3__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();

  observer.trigger = function trigger(event) {
    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      data[_key - 1] = arguments[_key];
    }

    observer.emit.apply(observer, [event, event].concat(data));
  };

  observer.off = function off(event) {
    for (var _len2 = arguments.length, data = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      data[_key2 - 1] = arguments[_key2];
    }

    observer.removeListener.apply(observer, [event].concat(data));
  };

  var forwardMessage = function forwardMessage(ev, data) {
    self.postMessage({
      event: ev,
      data: data
    });
  };

  self.addEventListener('message', function (ev) {
    var data = ev.data; // console.log('demuxer cmd:' + data.cmd);

    switch (data.cmd) {
      case 'init':
        var config = JSON.parse(data.config);
        self.demuxer = new _demux_demuxer_inline__WEBPACK_IMPORTED_MODULE_0__["default"](observer, data.typeSupported, config, data.vendor);
        Object(_utils_logger__WEBPACK_IMPORTED_MODULE_2__["enableLogs"])(config.debug); // signal end of worker init

        forwardMessage('init', null);
        break;

      case 'demux':
        self.demuxer.push(data.data, data.decryptdata, data.initSegment, data.audioCodec, data.videoCodec, data.timeOffset, data.discontinuity, data.trackSwitch, data.contiguous, data.duration, data.accurateTimeOffset, data.defaultInitPTS);
        break;

      default:
        break;
    }
  }); // forward events to main thread

  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["default"].FRAG_DECRYPTED, forwardMessage);
  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["default"].FRAG_PARSING_INIT_SEGMENT, forwardMessage);
  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["default"].FRAG_PARSED, forwardMessage);
  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["default"].ERROR, forwardMessage);
  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["default"].FRAG_PARSING_METADATA, forwardMessage);
  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["default"].FRAG_PARSING_USERDATA, forwardMessage);
  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["default"].INIT_PTS_FOUND, forwardMessage); // special case for FRAG_PARSING_DATA: pass data1/data2 as transferable object (no copy)

  observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["default"].FRAG_PARSING_DATA, function (ev, data) {
    var transferable = [];
    var message = {
      event: ev,
      data: data
    };

    if (data.data1) {
      message.data1 = data.data1.buffer;
      transferable.push(data.data1.buffer);
      delete data.data1;
    }

    if (data.data2) {
      message.data2 = data.data2.buffer;
      transferable.push(data.data2.buffer);
      delete data.data2;
    }

    self.postMessage(message, transferable);
  });
};

/* harmony default export */ __webpack_exports__["default"] = (DemuxerWorker);

/***/ }),

/***/ "./src/demux/id3.js":
/*!**************************!*\
  !*** ./src/demux/id3.js ***!
  \**************************/
/*! exports provided: default, utf8ArrayToStr */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "utf8ArrayToStr", function() { return utf8ArrayToStr; });
/* harmony import */ var _utils_get_self_scope__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/get-self-scope */ "./src/utils/get-self-scope.js");

/**
 * ID3 parser
 */

var ID3 =
/*#__PURE__*/
function () {
  function ID3() {}

  /**
   * Returns true if an ID3 header can be found at offset in data
   * @param {Uint8Array} data - The data to search in
   * @param {number} offset - The offset at which to start searching
   * @return {boolean} - True if an ID3 header is found
   */
  ID3.isHeader = function isHeader(data, offset) {
    /*
    * http://id3.org/id3v2.3.0
    * [0]     = 'I'
    * [1]     = 'D'
    * [2]     = '3'
    * [3,4]   = {Version}
    * [5]     = {Flags}
    * [6-9]   = {ID3 Size}
    *
    * An ID3v2 tag can be detected with the following pattern:
    *  $49 44 33 yy yy xx zz zz zz zz
    * Where yy is less than $FF, xx is the 'flags' byte and zz is less than $80
    */
    if (offset + 10 <= data.length) {
      // look for 'ID3' identifier
      if (data[offset] === 0x49 && data[offset + 1] === 0x44 && data[offset + 2] === 0x33) {
        // check version is within range
        if (data[offset + 3] < 0xFF && data[offset + 4] < 0xFF) {
          // check size is within range
          if (data[offset + 6] < 0x80 && data[offset + 7] < 0x80 && data[offset + 8] < 0x80 && data[offset + 9] < 0x80) {
            return true;
          }
        }
      }
    }

    return false;
  };
  /**
   * Returns true if an ID3 footer can be found at offset in data
   * @param {Uint8Array} data - The data to search in
   * @param {number} offset - The offset at which to start searching
   * @return {boolean} - True if an ID3 footer is found
   */


  ID3.isFooter = function isFooter(data, offset) {
    /*
    * The footer is a copy of the header, but with a different identifier
    */
    if (offset + 10 <= data.length) {
      // look for '3DI' identifier
      if (data[offset] === 0x33 && data[offset + 1] === 0x44 && data[offset + 2] === 0x49) {
        // check version is within range
        if (data[offset + 3] < 0xFF && data[offset + 4] < 0xFF) {
          // check size is within range
          if (data[offset + 6] < 0x80 && data[offset + 7] < 0x80 && data[offset + 8] < 0x80 && data[offset + 9] < 0x80) {
            return true;
          }
        }
      }
    }

    return false;
  };
  /**
   * Returns any adjacent ID3 tags found in data starting at offset, as one block of data
   * @param {Uint8Array} data - The data to search in
   * @param {number} offset - The offset at which to start searching
   * @return {Uint8Array} - The block of data containing any ID3 tags found
   */


  ID3.getID3Data = function getID3Data(data, offset) {
    var front = offset;
    var length = 0;

    while (ID3.isHeader(data, offset)) {
      // ID3 header is 10 bytes
      length += 10;

      var size = ID3._readSize(data, offset + 6);

      length += size;

      if (ID3.isFooter(data, offset + 10)) {
        // ID3 footer is 10 bytes
        length += 10;
      }

      offset += length;
    }

    if (length > 0) {
      return data.subarray(front, front + length);
    }

    return undefined;
  };

  ID3._readSize = function _readSize(data, offset) {
    var size = 0;
    size = (data[offset] & 0x7f) << 21;
    size |= (data[offset + 1] & 0x7f) << 14;
    size |= (data[offset + 2] & 0x7f) << 7;
    size |= data[offset + 3] & 0x7f;
    return size;
  };
  /**
   * Searches for the Elementary Stream timestamp found in the ID3 data chunk
   * @param {Uint8Array} data - Block of data containing one or more ID3 tags
   * @return {number} - The timestamp
   */


  ID3.getTimeStamp = function getTimeStamp(data) {
    var frames = ID3.getID3Frames(data);

    for (var i = 0; i < frames.length; i++) {
      var frame = frames[i];

      if (ID3.isTimeStampFrame(frame)) {
        return ID3._readTimeStamp(frame);
      }
    }

    return undefined;
  };
  /**
   * Returns true if the ID3 frame is an Elementary Stream timestamp frame
   * @param {ID3 frame} frame
   */


  ID3.isTimeStampFrame = function isTimeStampFrame(frame) {
    return frame && frame.key === 'PRIV' && frame.info === 'com.apple.streaming.transportStreamTimestamp';
  };

  ID3._getFrameData = function _getFrameData(data) {
    /*
    Frame ID       $xx xx xx xx (four characters)
    Size           $xx xx xx xx
    Flags          $xx xx
    */
    var type = String.fromCharCode(data[0], data[1], data[2], data[3]);

    var size = ID3._readSize(data, 4); // skip frame id, size, and flags


    var offset = 10;
    return {
      type: type,
      size: size,
      data: data.subarray(offset, offset + size)
    };
  };
  /**
   * Returns an array of ID3 frames found in all the ID3 tags in the id3Data
   * @param {Uint8Array} id3Data - The ID3 data containing one or more ID3 tags
   * @return {ID3 frame[]} - Array of ID3 frame objects
   */


  ID3.getID3Frames = function getID3Frames(id3Data) {
    var offset = 0;
    var frames = [];

    while (ID3.isHeader(id3Data, offset)) {
      var size = ID3._readSize(id3Data, offset + 6); // skip past ID3 header


      offset += 10;
      var end = offset + size; // loop through frames in the ID3 tag

      while (offset + 8 < end) {
        var frameData = ID3._getFrameData(id3Data.subarray(offset));

        var frame = ID3._decodeFrame(frameData);

        if (frame) {
          frames.push(frame);
        } // skip frame header and frame data


        offset += frameData.size + 10;
      }

      if (ID3.isFooter(id3Data, offset)) {
        offset += 10;
      }
    }

    return frames;
  };

  ID3._decodeFrame = function _decodeFrame(frame) {
    if (frame.type === 'PRIV') {
      return ID3._decodePrivFrame(frame);
    } else if (frame.type[0] === 'T') {
      return ID3._decodeTextFrame(frame);
    } else if (frame.type[0] === 'W') {
      return ID3._decodeURLFrame(frame);
    }

    return undefined;
  };

  ID3._readTimeStamp = function _readTimeStamp(timeStampFrame) {
    if (timeStampFrame.data.byteLength === 8) {
      var data = new Uint8Array(timeStampFrame.data); // timestamp is 33 bit expressed as a big-endian eight-octet number,
      // with the upper 31 bits set to zero.

      var pts33Bit = data[3] & 0x1;
      var timestamp = (data[4] << 23) + (data[5] << 15) + (data[6] << 7) + data[7];
      timestamp /= 45;

      if (pts33Bit) {
        timestamp += 47721858.84;
      } // 2^32 / 90


      return Math.round(timestamp);
    }

    return undefined;
  };

  ID3._decodePrivFrame = function _decodePrivFrame(frame) {
    /*
    Format: <text string>\0<binary data>
    */
    if (frame.size < 2) {
      return undefined;
    }

    var owner = ID3._utf8ArrayToStr(frame.data, true);

    var privateData = new Uint8Array(frame.data.subarray(owner.length + 1));
    return {
      key: frame.type,
      info: owner,
      data: privateData.buffer
    };
  };

  ID3._decodeTextFrame = function _decodeTextFrame(frame) {
    if (frame.size < 2) {
      return undefined;
    }

    if (frame.type === 'TXXX') {
      /*
      Format:
      [0]   = {Text Encoding}
      [1-?] = {Description}\0{Value}
      */
      var index = 1;

      var description = ID3._utf8ArrayToStr(frame.data.subarray(index), true);

      index += description.length + 1;

      var value = ID3._utf8ArrayToStr(frame.data.subarray(index));

      return {
        key: frame.type,
        info: description,
        data: value
      };
    } else {
      /*
      Format:
      [0]   = {Text Encoding}
      [1-?] = {Value}
      */
      var text = ID3._utf8ArrayToStr(frame.data.subarray(1));

      return {
        key: frame.type,
        data: text
      };
    }
  };

  ID3._decodeURLFrame = function _decodeURLFrame(frame) {
    if (frame.type === 'WXXX') {
      /*
      Format:
      [0]   = {Text Encoding}
      [1-?] = {Description}\0{URL}
      */
      if (frame.size < 2) {
        return undefined;
      }

      var index = 1;

      var description = ID3._utf8ArrayToStr(frame.data.subarray(index));

      index += description.length + 1;

      var value = ID3._utf8ArrayToStr(frame.data.subarray(index));

      return {
        key: frame.type,
        info: description,
        data: value
      };
    } else {
      /*
      Format:
      [0-?] = {URL}
      */
      var url = ID3._utf8ArrayToStr(frame.data);

      return {
        key: frame.type,
        data: url
      };
    }
  }; // http://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript/22373197
  // http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt

  /* utf.js - UTF-8 <=> UTF-16 convertion
   *
   * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
   * Version: 1.0
   * LastModified: Dec 25 1999
   * This library is free.  You can redistribute it and/or modify it.
   */


  ID3._utf8ArrayToStr = function _utf8ArrayToStr(array, exitOnNull) {
    if (exitOnNull === void 0) {
      exitOnNull = false;
    }

    var decoder = getTextDecoder();

    if (decoder) {
      var decoded = decoder.decode(array);

      if (exitOnNull) {
        // grab up to the first null
        var idx = decoded.indexOf('\0');
        return idx !== -1 ? decoded.substring(0, idx) : decoded;
      } // remove any null characters


      return decoded.replace(/\0/g, '');
    }

    var len = array.length;
    var c;
    var char2;
    var char3;
    var out = '';
    var i = 0;

    while (i < len) {
      c = array[i++];

      if (c === 0x00 && exitOnNull) {
        return out;
      } else if (c === 0x00 || c === 0x03) {
        // If the character is 3 (END_OF_TEXT) or 0 (NULL) then skip it
        continue;
      }

      switch (c >> 4) {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          // 0xxxxxxx
          out += String.fromCharCode(c);
          break;

        case 12:
        case 13:
          // 110x xxxx   10xx xxxx
          char2 = array[i++];
          out += String.fromCharCode((c & 0x1F) << 6 | char2 & 0x3F);
          break;

        case 14:
          // 1110 xxxx  10xx xxxx  10xx xxxx
          char2 = array[i++];
          char3 = array[i++];
          out += String.fromCharCode((c & 0x0F) << 12 | (char2 & 0x3F) << 6 | (char3 & 0x3F) << 0);
          break;

        default:
      }
    }

    return out;
  };

  return ID3;
}();

var decoder;

function getTextDecoder() {
  var global = Object(_utils_get_self_scope__WEBPACK_IMPORTED_MODULE_0__["getSelfScope"])(); // safeguard for code that might run both on worker and main thread

  if (!decoder && typeof global.TextDecoder !== 'undefined') {
    decoder = new global.TextDecoder('utf-8');
  }

  return decoder;
}

var utf8ArrayToStr = ID3._utf8ArrayToStr;
/* harmony default export */ __webpack_exports__["default"] = (ID3);


/***/ }),

/***/ "./src/demux/mp4demuxer.js":
/*!*********************************!*\
  !*** ./src/demux/mp4demuxer.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.js");
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./src/events.js");
/**
 * MP4 demuxer
 */


var UINT32_MAX = Math.pow(2, 32) - 1;

var MP4Demuxer =
/*#__PURE__*/
function () {
  function MP4Demuxer(observer, remuxer) {
    this.observer = observer;
    this.remuxer = remuxer;
  }

  var _proto = MP4Demuxer.prototype;

  _proto.resetTimeStamp = function resetTimeStamp(initPTS) {
    this.initPTS = initPTS;
  };

  _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, duration) {
    // jshint unused:false
    if (initSegment && initSegment.byteLength) {
      var initData = this.initData = MP4Demuxer.parseInitSegment(initSegment); // default audio codec if nothing specified
      // TODO : extract that from initsegment

      if (audioCodec == null) {
        audioCodec = 'mp4a.40.5';
      }

      if (videoCodec == null) {
        videoCodec = 'avc1.42e01e';
      }

      var tracks = {};

      if (initData.audio && initData.video) {
        tracks.audiovideo = {
          container: 'video/mp4',
          codec: audioCodec + ',' + videoCodec,
          initSegment: duration ? initSegment : null
        };
      } else {
        if (initData.audio) {
          tracks.audio = {
            container: 'audio/mp4',
            codec: audioCodec,
            initSegment: duration ? initSegment : null
          };
        }

        if (initData.video) {
          tracks.video = {
            container: 'video/mp4',
            codec: videoCodec,
            initSegment: duration ? initSegment : null
          };
        }
      }

      this.observer.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["default"].FRAG_PARSING_INIT_SEGMENT, {
        tracks: tracks
      });
    } else {
      if (audioCodec) {
        this.audioCodec = audioCodec;
      }

      if (videoCodec) {
        this.videoCodec = videoCodec;
      }
    }
  };

  MP4Demuxer.probe = function probe(data) {
    // ensure we find a moof box in the first 16 kB
    return MP4Demuxer.findBox({
      data: data,
      start: 0,
      end: Math.min(data.length, 16384)
    }, ['moof']).length > 0;
  };

  MP4Demuxer.bin2str = function bin2str(buffer) {
    return String.fromCharCode.apply(null, buffer);
  };

  MP4Demuxer.readUint16 = function readUint16(buffer, offset) {
    if (buffer.data) {
      offset += buffer.start;
      buffer = buffer.data;
    }

    var val = buffer[offset] << 8 | buffer[offset + 1];
    return val < 0 ? 65536 + val : val;
  };

  MP4Demuxer.readUint32 = function readUint32(buffer, offset) {
    if (buffer.data) {
      offset += buffer.start;
      buffer = buffer.data;
    }

    var val = buffer[offset] << 24 | buffer[offset + 1] << 16 | buffer[offset + 2] << 8 | buffer[offset + 3];
    return val < 0 ? 4294967296 + val : val;
  };

  MP4Demuxer.writeUint32 = function writeUint32(buffer, offset, value) {
    if (buffer.data) {
      offset += buffer.start;
      buffer = buffer.data;
    }

    buffer[offset] = value >> 24;
    buffer[offset + 1] = value >> 16 & 0xff;
    buffer[offset + 2] = value >> 8 & 0xff;
    buffer[offset + 3] = value & 0xff;
  }; // Find the data for a box specified by its path


  MP4Demuxer.findBox = function findBox(data, path) {
    var results = [],
        i,
        size,
        type,
        end,
        subresults,
        start,
        endbox;

    if (data.data) {
      start = data.start;
      end = data.end;
      data = data.data;
    } else {
      start = 0;
      end = data.byteLength;
    }

    if (!path.length) {
      // short-circuit the search for empty paths
      return null;
    }

    for (i = start; i < end;) {
      size = MP4Demuxer.readUint32(data, i);
      type = MP4Demuxer.bin2str(data.subarray(i + 4, i + 8));
      endbox = size > 1 ? i + size : end;

      if (type === path[0]) {
        if (path.length === 1) {
          // this is the end of the path and we've found the box we were
          // looking for
          results.push({
            data: data,
            start: i + 8,
            end: endbox
          });
        } else {
          // recursively search for the next box along the path
          subresults = MP4Demuxer.findBox({
            data: data,
            start: i + 8,
            end: endbox
          }, path.slice(1));

          if (subresults.length) {
            results = results.concat(subresults);
          }
        }
      }

      i = endbox;
    } // we've finished searching all of data


    return results;
  };

  MP4Demuxer.parseSegmentIndex = function parseSegmentIndex(initSegment) {
    var moov = MP4Demuxer.findBox(initSegment, ['moov'])[0];
    var moovEndOffset = moov ? moov.end : null; // we need this in case we need to chop of garbage of the end of current data

    var index = 0;
    var sidx = MP4Demuxer.findBox(initSegment, ['sidx']);
    var references;

    if (!sidx || !sidx[0]) {
      return null;
    }

    references = [];
    sidx = sidx[0];
    var version = sidx.data[0]; // set initial offset, we skip the reference ID (not needed)

    index = version === 0 ? 8 : 16;
    var timescale = MP4Demuxer.readUint32(sidx, index);
    index += 4; // TODO: parse earliestPresentationTime and firstOffset
    // usually zero in our case

    var earliestPresentationTime = 0;
    var firstOffset = 0;

    if (version === 0) {
      index += 8;
    } else {
      index += 16;
    } // skip reserved


    index += 2;
    var startByte = sidx.end + firstOffset;
    var referencesCount = MP4Demuxer.readUint16(sidx, index);
    index += 2;

    for (var i = 0; i < referencesCount; i++) {
      var referenceIndex = index;
      var referenceInfo = MP4Demuxer.readUint32(sidx, referenceIndex);
      referenceIndex += 4;
      var referenceSize = referenceInfo & 0x7FFFFFFF;
      var referenceType = (referenceInfo & 0x80000000) >>> 31;

      if (referenceType === 1) {
        console.warn('SIDX has hierarchical references (not supported)');
        return;
      }

      var subsegmentDuration = MP4Demuxer.readUint32(sidx, referenceIndex);
      referenceIndex += 4;
      references.push({
        referenceSize: referenceSize,
        subsegmentDuration: subsegmentDuration,
        // unscaled
        info: {
          duration: subsegmentDuration / timescale,
          start: startByte,
          end: startByte + referenceSize - 1
        }
      });
      startByte += referenceSize; // Skipping 1 bit for |startsWithSap|, 3 bits for |sapType|, and 28 bits
      // for |sapDelta|.

      referenceIndex += 4; // skip to next ref

      index = referenceIndex;
    }

    return {
      earliestPresentationTime: earliestPresentationTime,
      timescale: timescale,
      version: version,
      referencesCount: referencesCount,
      references: references,
      moovEndOffset: moovEndOffset
    };
  };
  /**
   * Parses an MP4 initialization segment and extracts stream type and
   * timescale values for any declared tracks. Timescale values indicate the
   * number of clock ticks per second to assume for time-based values
   * elsewhere in the MP4.
   *
   * To determine the start time of an MP4, you need two pieces of
   * information: the timescale unit and the earliest base media decode
   * time. Multiple timescales can be specified within an MP4 but the
   * base media decode time is always expressed in the timescale from
   * the media header box for the track:
   * ```
   * moov > trak > mdia > mdhd.timescale
   * moov > trak > mdia > hdlr
   * ```
   * @param init {Uint8Array} the bytes of the init segment
   * @return {object} a hash of track type to timescale values or null if
   * the init segment is malformed.
   */


  MP4Demuxer.parseInitSegment = function parseInitSegment(initSegment) {
    var result = [];
    var traks = MP4Demuxer.findBox(initSegment, ['moov', 'trak']);
    traks.forEach(function (trak) {
      var tkhd = MP4Demuxer.findBox(trak, ['tkhd'])[0];

      if (tkhd) {
        var version = tkhd.data[tkhd.start];
        var index = version === 0 ? 12 : 20;
        var trackId = MP4Demuxer.readUint32(tkhd, index);
        var mdhd = MP4Demuxer.findBox(trak, ['mdia', 'mdhd'])[0];

        if (mdhd) {
          version = mdhd.data[mdhd.start];
          index = version === 0 ? 12 : 20;
          var timescale = MP4Demuxer.readUint32(mdhd, index);
          var hdlr = MP4Demuxer.findBox(trak, ['mdia', 'hdlr'])[0];

          if (hdlr) {
            var hdlrType = MP4Demuxer.bin2str(hdlr.data.subarray(hdlr.start + 8, hdlr.start + 12));
            var type = {
              'soun': 'audio',
              'vide': 'video'
            }[hdlrType];

            if (type) {
              // extract codec info. TODO : parse codec details to be able to build MIME type
              var codecBox = MP4Demuxer.findBox(trak, ['mdia', 'minf', 'stbl', 'stsd']);

              if (codecBox.length) {
                codecBox = codecBox[0];
                var codecType = MP4Demuxer.bin2str(codecBox.data.subarray(codecBox.start + 12, codecBox.start + 16));
                _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].log("MP4Demuxer:" + type + ":" + codecType + " found");
              }

              result[trackId] = {
                timescale: timescale,
                type: type
              };
              result[type] = {
                timescale: timescale,
                id: trackId
              };
            }
          }
        }
      }
    });
    return result;
  };
  /**
  * Determine the base media decode start time, in seconds, for an MP4
  * fragment. If multiple fragments are specified, the earliest time is
  * returned.
  *
  * The base media decode time can be parsed from track fragment
  * metadata:
  * ```
  * moof > traf > tfdt.baseMediaDecodeTime
  * ```
  * It requires the timescale value from the mdhd to interpret.
  *
  * @param timescale {object} a hash of track ids to timescale values.
  * @return {number} the earliest base media decode start time for the
  * fragment, in seconds
  */


  MP4Demuxer.getStartDTS = function getStartDTS(initData, fragment) {
    var trafs, baseTimes, result; // we need info from two childrend of each track fragment box

    trafs = MP4Demuxer.findBox(fragment, ['moof', 'traf']); // determine the start times for each track

    baseTimes = [].concat.apply([], trafs.map(function (traf) {
      return MP4Demuxer.findBox(traf, ['tfhd']).map(function (tfhd) {
        var id, scale, baseTime; // get the track id from the tfhd

        id = MP4Demuxer.readUint32(tfhd, 4); // assume a 90kHz clock if no timescale was specified

        scale = initData[id].timescale || 90e3; // get the base media decode time from the tfdt

        baseTime = MP4Demuxer.findBox(traf, ['tfdt']).map(function (tfdt) {
          var version, result;
          version = tfdt.data[tfdt.start];
          result = MP4Demuxer.readUint32(tfdt, 4);

          if (version === 1) {
            result *= Math.pow(2, 32);
            result += MP4Demuxer.readUint32(tfdt, 8);
          }

          return result;
        })[0]; // convert base time to seconds

        return baseTime / scale;
      });
    })); // return the minimum

    result = Math.min.apply(null, baseTimes);
    return isFinite(result) ? result : 0;
  };

  MP4Demuxer.offsetStartDTS = function offsetStartDTS(initData, fragment, timeOffset) {
    MP4Demuxer.findBox(fragment, ['moof', 'traf']).map(function (traf) {
      return MP4Demuxer.findBox(traf, ['tfhd']).map(function (tfhd) {
        // get the track id from the tfhd
        var id = MP4Demuxer.readUint32(tfhd, 4); // assume a 90kHz clock if no timescale was specified

        var timescale = initData[id].timescale || 90e3; // get the base media decode time from the tfdt

        MP4Demuxer.findBox(traf, ['tfdt']).map(function (tfdt) {
          var version = tfdt.data[tfdt.start];
          var baseMediaDecodeTime = MP4Demuxer.readUint32(tfdt, 4);

          if (version === 0) {
            MP4Demuxer.writeUint32(tfdt, 4, baseMediaDecodeTime - timeOffset * timescale);
          } else {
            baseMediaDecodeTime *= Math.pow(2, 32);
            baseMediaDecodeTime += MP4Demuxer.readUint32(tfdt, 8);
            baseMediaDecodeTime -= timeOffset * timescale;
            baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);
            var upper = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));
            var lower = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));
            MP4Demuxer.writeUint32(tfdt, 4, upper);
            MP4Demuxer.writeUint32(tfdt, 8, lower);
          }
        });
      });
    });
  }; // feed incoming data to the front of the parsing pipeline


  _proto.append = function append(data, timeOffset, contiguous, accurateTimeOffset) {
    var initData = this.initData;

    if (!initData) {
      this.resetInitSegment(data, this.audioCodec, this.videoCodec, false);
      initData = this.initData;
    }

    var startDTS,
        initPTS = this.initPTS;

    if (initPTS === undefined) {
      var _startDTS = MP4Demuxer.getStartDTS(initData, data);

      this.initPTS = initPTS = _startDTS - timeOffset;
      this.observer.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["default"].INIT_PTS_FOUND, {
        initPTS: initPTS
      });
    }

    MP4Demuxer.offsetStartDTS(initData, data, initPTS);
    startDTS = MP4Demuxer.getStartDTS(initData, data);
    this.remuxer.remux(initData.audio, initData.video, null, null, startDTS, contiguous, accurateTimeOffset, data);
  };

  _proto.destroy = function destroy() {};

  return MP4Demuxer;
}();

/* harmony default export */ __webpack_exports__["default"] = (MP4Demuxer);

/***/ }),

/***/ "./src/errors.js":
/*!***********************!*\
  !*** ./src/errors.js ***!
  \***********************/
/*! exports provided: ErrorTypes, ErrorDetails */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorTypes", function() { return ErrorTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorDetails", function() { return ErrorDetails; });
var ErrorTypes = {
  // Identifier for a network error (loading error / timeout ...)
  NETWORK_ERROR: 'networkError',
  // Identifier for a media Error (video/parsing/mediasource error)
  MEDIA_ERROR: 'mediaError',
  // EME (encrypted media extensions) errors
  KEY_SYSTEM_ERROR: 'keySystemError',
  // Identifier for a mux Error (demuxing/remuxing)
  MUX_ERROR: 'muxError',
  // Identifier for all other errors
  OTHER_ERROR: 'otherError'
};
/**
 * @enum {ErrorDetails}
 * @typedef {string} ErrorDetail
 */

var ErrorDetails = {
  KEY_SYSTEM_NO_KEYS: 'keySystemNoKeys',
  KEY_SYSTEM_NO_ACCESS: 'keySystemNoAccess',
  KEY_SYSTEM_NO_SESSION: 'keySystemNoSession',
  KEY_SYSTEM_LICENSE_REQUEST_FAILED: 'keySystemLicenseRequestFailed',
  // Identifier for a manifest load error - data: { url : faulty URL, response : { code: error code, text: error text }}
  MANIFEST_LOAD_ERROR: 'manifestLoadError',
  // Identifier for a manifest load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}
  MANIFEST_LOAD_TIMEOUT: 'manifestLoadTimeOut',
  // Identifier for a manifest parsing error - data: { url : faulty URL, reason : error reason}
  MANIFEST_PARSING_ERROR: 'manifestParsingError',
  // Identifier for a manifest with only incompatible codecs error - data: { url : faulty URL, reason : error reason}
  MANIFEST_INCOMPATIBLE_CODECS_ERROR: 'manifestIncompatibleCodecsError',
  // Identifier for a level load error - data: { url : faulty URL, response : { code: error code, text: error text }}
  LEVEL_LOAD_ERROR: 'levelLoadError',
  // Identifier for a level load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}
  LEVEL_LOAD_TIMEOUT: 'levelLoadTimeOut',
  // Identifier for a level switch error - data: { level : faulty level Id, event : error description}
  LEVEL_SWITCH_ERROR: 'levelSwitchError',
  // Identifier for an audio track load error - data: { url : faulty URL, response : { code: error code, text: error text }}
  AUDIO_TRACK_LOAD_ERROR: 'audioTrackLoadError',
  // Identifier for an audio track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}
  AUDIO_TRACK_LOAD_TIMEOUT: 'audioTrackLoadTimeOut',
  // Identifier for fragment load error - data: { frag : fragment object, response : { code: error code, text: error text }}
  FRAG_LOAD_ERROR: 'fragLoadError',
  // Identifier for fragment load timeout error - data: { frag : fragment object}
  FRAG_LOAD_TIMEOUT: 'fragLoadTimeOut',
  // Identifier for a fragment decryption error event - data: {id : demuxer Id,frag: fragment object, reason : parsing error description }
  FRAG_DECRYPT_ERROR: 'fragDecryptError',
  // Identifier for a fragment parsing error event - data: { id : demuxer Id, reason : parsing error description }
  // will be renamed DEMUX_PARSING_ERROR and switched to MUX_ERROR in the next major release
  FRAG_PARSING_ERROR: 'fragParsingError',
  // Identifier for a remux alloc error event - data: { id : demuxer Id, frag : fragment object, bytes : nb of bytes on which allocation failed , reason : error text }
  REMUX_ALLOC_ERROR: 'remuxAllocError',
  // Identifier for decrypt key load error - data: { frag : fragment object, response : { code: error code, text: error text }}
  KEY_LOAD_ERROR: 'keyLoadError',
  // Identifier for decrypt key load timeout error - data: { frag : fragment object}
  KEY_LOAD_TIMEOUT: 'keyLoadTimeOut',
  // Triggered when an exception occurs while adding a sourceBuffer to MediaSource - data : {  err : exception , mimeType : mimeType }
  BUFFER_ADD_CODEC_ERROR: 'bufferAddCodecError',
  // Identifier for a buffer append error - data: append error description
  BUFFER_APPEND_ERROR: 'bufferAppendError',
  // Identifier for a buffer appending error event - data: appending error description
  BUFFER_APPENDING_ERROR: 'bufferAppendingError',
  // Identifier for a buffer stalled error event
  BUFFER_STALLED_ERROR: 'bufferStalledError',
  // Identifier for a buffer full event
  BUFFER_FULL_ERROR: 'bufferFullError',
  // Identifier for a buffer seek over hole event
  BUFFER_SEEK_OVER_HOLE: 'bufferSeekOverHole',
  // Identifier for a buffer nudge on stall (playback is stuck although currentTime is in a buffered area)
  BUFFER_NUDGE_ON_STALL: 'bufferNudgeOnStall',
  // Identifier for an internal exception happening inside hls.js while handling an event
  INTERNAL_EXCEPTION: 'internalException'
};

/***/ }),

/***/ "./src/events.js":
/*!***********************!*\
  !*** ./src/events.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * @readonly
 * @enum {string}
 */
var HlsEvents = {
  // fired before MediaSource is attaching to media element - data: { media }
  MEDIA_ATTACHING: 'hlsMediaAttaching',
  // fired when MediaSource has been succesfully attached to media element - data: { }
  MEDIA_ATTACHED: 'hlsMediaAttached',
  // fired before detaching MediaSource from media element - data: { }
  MEDIA_DETACHING: 'hlsMediaDetaching',
  // fired when MediaSource has been detached from media element - data: { }
  MEDIA_DETACHED: 'hlsMediaDetached',
  // fired when we buffer is going to be reset - data: { }
  BUFFER_RESET: 'hlsBufferReset',
  // fired when we know about the codecs that we need buffers for to push into - data: {tracks : { container, codec, levelCodec, initSegment, metadata }}
  BUFFER_CODECS: 'hlsBufferCodecs',
  // fired when sourcebuffers have been created - data: { tracks : tracks }
  BUFFER_CREATED: 'hlsBufferCreated',
  // fired when we append a segment to the buffer - data: { segment: segment object }
  BUFFER_APPENDING: 'hlsBufferAppending',
  // fired when we are done with appending a media segment to the buffer - data : { parent : segment parent that triggered BUFFER_APPENDING, pending : nb of segments waiting for appending for this segment parent}
  BUFFER_APPENDED: 'hlsBufferAppended',
  // fired when the stream is finished and we want to notify the media buffer that there will be no more data - data: { }
  BUFFER_EOS: 'hlsBufferEos',
  // fired when the media buffer should be flushed - data { startOffset, endOffset }
  BUFFER_FLUSHING: 'hlsBufferFlushing',
  // fired when the media buffer has been flushed - data: { }
  BUFFER_FLUSHED: 'hlsBufferFlushed',
  // fired to signal that a manifest loading starts - data: { url : manifestURL}
  MANIFEST_LOADING: 'hlsManifestLoading',
  // fired after manifest has been loaded - data: { levels : [available quality levels], audioTracks : [ available audio tracks], url : manifestURL, stats : { trequest, tfirst, tload, mtime}}
  MANIFEST_LOADED: 'hlsManifestLoaded',
  // fired after manifest has been parsed - data: { levels : [available quality levels], firstLevel : index of first quality level appearing in Manifest}
  MANIFEST_PARSED: 'hlsManifestParsed',
  // fired when a level switch is requested - data: { level : id of new level }
  LEVEL_SWITCHING: 'hlsLevelSwitching',
  // fired when a level switch is effective - data: { level : id of new level }
  LEVEL_SWITCHED: 'hlsLevelSwitched',
  // fired when a level playlist loading starts - data: { url : level URL, level : id of level being loaded}
  LEVEL_LOADING: 'hlsLevelLoading',
  // fired when a level playlist loading finishes - data: { details : levelDetails object, level : id of loaded level, stats : { trequest, tfirst, tload, mtime} }
  LEVEL_LOADED: 'hlsLevelLoaded',
  // fired when a level's details have been updated based on previous details, after it has been loaded - data: { details : levelDetails object, level : id of updated level }
  LEVEL_UPDATED: 'hlsLevelUpdated',
  // fired when a level's PTS information has been updated after parsing a fragment - data: { details : levelDetails object, level : id of updated level, drift: PTS drift observed when parsing last fragment }
  LEVEL_PTS_UPDATED: 'hlsLevelPtsUpdated',
  // fired to notify that audio track lists has been updated - data: { audioTracks : audioTracks }
  AUDIO_TRACKS_UPDATED: 'hlsAudioTracksUpdated',
  // fired when an audio track switching is requested - data: { id : audio track id }
  AUDIO_TRACK_SWITCHING: 'hlsAudioTrackSwitching',
  // fired when an audio track switch actually occurs - data: { id : audio track id }
  AUDIO_TRACK_SWITCHED: 'hlsAudioTrackSwitched',
  // fired when an audio track loading starts - data: { url : audio track URL, id : audio track id }
  AUDIO_TRACK_LOADING: 'hlsAudioTrackLoading',
  // fired when an audio track loading finishes - data: { details : levelDetails object, id : audio track id, stats : { trequest, tfirst, tload, mtime } }
  AUDIO_TRACK_LOADED: 'hlsAudioTrackLoaded',
  // fired to notify that subtitle track lists has been updated - data: { subtitleTracks : subtitleTracks }
  SUBTITLE_TRACKS_UPDATED: 'hlsSubtitleTracksUpdated',
  // fired when an subtitle track switch occurs - data: { id : subtitle track id }
  SUBTITLE_TRACK_SWITCH: 'hlsSubtitleTrackSwitch',
  // fired when a subtitle track loading starts - data: { url : subtitle track URL, id : subtitle track id }
  SUBTITLE_TRACK_LOADING: 'hlsSubtitleTrackLoading',
  // fired when a subtitle track loading finishes - data: { details : levelDetails object, id : subtitle track id, stats : { trequest, tfirst, tload, mtime } }
  SUBTITLE_TRACK_LOADED: 'hlsSubtitleTrackLoaded',
  // fired when a subtitle fragment has been processed - data: { success : boolean, frag : the processed frag }
  SUBTITLE_FRAG_PROCESSED: 'hlsSubtitleFragProcessed',
  // fired when the first timestamp is found - data: { id : demuxer id, initPTS: initPTS, frag : fragment object }
  INIT_PTS_FOUND: 'hlsInitPtsFound',
  // fired when a fragment loading starts - data: { frag : fragment object }
  FRAG_LOADING: 'hlsFragLoading',
  // fired when a fragment loading is progressing - data: { frag : fragment object, { trequest, tfirst, loaded } }
  FRAG_LOAD_PROGRESS: 'hlsFragLoadProgress',
  // Identifier for fragment load aborting for emergency switch down - data: { frag : fragment object }
  FRAG_LOAD_EMERGENCY_ABORTED: 'hlsFragLoadEmergencyAborted',
  // fired when a fragment loading is completed - data: { frag : fragment object, payload : fragment payload, stats : { trequest, tfirst, tload, length } }
  FRAG_LOADED: 'hlsFragLoaded',
  // fired when a fragment has finished decrypting - data: { id : demuxer id, frag: fragment object, payload : fragment payload, stats : { tstart, tdecrypt } }
  FRAG_DECRYPTED: 'hlsFragDecrypted',
  // fired when Init Segment has been extracted from fragment - data: { id : demuxer id, frag: fragment object, moov : moov MP4 box, codecs : codecs found while parsing fragment }
  FRAG_PARSING_INIT_SEGMENT: 'hlsFragParsingInitSegment',
  // fired when parsing sei text is completed - data: { id : demuxer id, frag: fragment object, samples : [ sei samples pes ] }
  FRAG_PARSING_USERDATA: 'hlsFragParsingUserdata',
  // fired when parsing id3 is completed - data: { id : demuxer id, frag: fragment object, samples : [ id3 samples pes ] }
  FRAG_PARSING_METADATA: 'hlsFragParsingMetadata',
  // fired when data have been extracted from fragment - data: { id : demuxer id, frag: fragment object, data1 : moof MP4 box or TS fragments, data2 : mdat MP4 box or null}
  FRAG_PARSING_DATA: 'hlsFragParsingData',
  // fired when fragment parsing is completed - data: { id : demuxer id, frag: fragment object }
  FRAG_PARSED: 'hlsFragParsed',
  // fired when fragment remuxed MP4 boxes have all been appended into SourceBuffer - data: { id : demuxer id, frag : fragment object, stats : { trequest, tfirst, tload, tparsed, tbuffered, length, bwEstimate } }
  FRAG_BUFFERED: 'hlsFragBuffered',
  // fired when fragment matching with current media position is changing - data : { id : demuxer id, frag : fragment object }
  FRAG_CHANGED: 'hlsFragChanged',
  // Identifier for a FPS drop event - data: { curentDropped, currentDecoded, totalDroppedFrames }
  FPS_DROP: 'hlsFpsDrop',
  // triggered when FPS drop triggers auto level capping - data: { level, droppedlevel }
  FPS_DROP_LEVEL_CAPPING: 'hlsFpsDropLevelCapping',
  // Identifier for an error event - data: { type : error type, details : error details, fatal : if true, hls.js cannot/will not try to recover, if false, hls.js will try to recover,other error specific data }
  ERROR: 'hlsError',
  // fired when hls.js instance starts destroying. Different from MEDIA_DETACHED as one could want to detach and reattach a media to the instance of hls.js to handle mid-rolls for example - data: { }
  DESTROYING: 'hlsDestroying',
  // fired when a decrypt key loading starts - data: { frag : fragment object }
  KEY_LOADING: 'hlsKeyLoading',
  // fired when a decrypt key loading is completed - data: { frag : fragment object, payload : key payload, stats : { trequest, tfirst, tload, length } }
  KEY_LOADED: 'hlsKeyLoaded',
  // fired upon stream controller state transitions - data: { previousState, nextState }
  STREAM_STATE_TRANSITION: 'hlsStreamStateTransition'
};
/* harmony default export */ __webpack_exports__["default"] = (HlsEvents);

/***/ }),

/***/ "./src/hls.js":
/*!*********************************!*\
  !*** ./src/hls.js + 50 modules ***!
  \*********************************/
/*! exports provided: default */
/*! ModuleConcatenation bailout: Cannot concat with ./src/crypt/decrypter.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/demux/demuxer-inline.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/demux/id3.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/demux/mp4demuxer.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/errors.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/events.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/polyfills/number-isFinite.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/get-self-scope.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./src/utils/logger.js because of ./src/demux/demuxer-worker.js */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/eventemitter3/index.js (<- Module is not an ECMAScript module) */
/*! ModuleConcatenation bailout: Cannot concat with ./node_modules/url-toolkit/src/url-toolkit.js (<- Module is not an ECMAScript module) */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var cues_namespaceObject = {};
__webpack_require__.r(cues_namespaceObject);
__webpack_require__.d(cues_namespaceObject, "newCue", function() { return newCue; });

// EXTERNAL MODULE: ./node_modules/url-toolkit/src/url-toolkit.js
var url_toolkit = __webpack_require__("./node_modules/url-toolkit/src/url-toolkit.js");

// EXTERNAL MODULE: ./src/errors.js
var errors = __webpack_require__("./src/errors.js");

// EXTERNAL MODULE: ./src/polyfills/number-isFinite.js
var number_isFinite = __webpack_require__("./src/polyfills/number-isFinite.js");

// EXTERNAL MODULE: ./src/events.js
var events = __webpack_require__("./src/events.js");

// EXTERNAL MODULE: ./src/utils/logger.js
var logger = __webpack_require__("./src/utils/logger.js");

// CONCATENATED MODULE: ./src/event-handler.ts
/*
*
* All objects in the event handling chain should inherit from this class
*
*/



var FORBIDDEN_EVENT_NAMES = {
  'hlsEventGeneric': true,
  'hlsHandlerDestroying': true,
  'hlsHandlerDestroyed': true
};

var event_handler_EventHandler =
/*#__PURE__*/
function () {
  function EventHandler(hls) {
    this.hls = void 0;
    this.handledEvents = void 0;
    this.useGenericHandler = void 0;
    this.hls = hls;
    this.onEvent = this.onEvent.bind(this);

    for (var _len = arguments.length, events = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      events[_key - 1] = arguments[_key];
    }

    this.handledEvents = events;
    this.useGenericHandler = true;
    this.registerListeners();
  }

  var _proto = EventHandler.prototype;

  _proto.destroy = function destroy() {
    this.onHandlerDestroying();
    this.unregisterListeners();
    this.onHandlerDestroyed();
  };

  _proto.onHandlerDestroying = function onHandlerDestroying() {};

  _proto.onHandlerDestroyed = function onHandlerDestroyed() {};

  _proto.isEventHandler = function isEventHandler() {
    return typeof this.handledEvents === 'object' && this.handledEvents.length && typeof this.onEvent === 'function';
  };

  _proto.registerListeners = function registerListeners() {
    if (this.isEventHandler()) {
      this.handledEvents.forEach(function (event) {
        if (FORBIDDEN_EVENT_NAMES[event]) {
          throw new Error('Forbidden event-name: ' + event);
        }

        this.hls.on(event, this.onEvent);
      }, this);
    }
  };

  _proto.unregisterListeners = function unregisterListeners() {
    if (this.isEventHandler()) {
      this.handledEvents.forEach(function (event) {
        this.hls.off(event, this.onEvent);
      }, this);
    }
  };
  /**
   * arguments: event (string), data (any)
   */


  _proto.onEvent = function onEvent(event, data) {
    this.onEventGeneric(event, data);
  };

  _proto.onEventGeneric = function onEventGeneric(event, data) {
    var eventToFunction = function eventToFunction(event, data) {
      var funcName = 'on' + event.replace('hls', '');

      if (typeof this[funcName] !== 'function') {
        throw new Error("Event " + event + " has no generic handler in this " + this.constructor.name + " class (tried " + funcName + ")");
      }

      return this[funcName].bind(this, data);
    };

    try {
      eventToFunction.call(this, event, data).call();
    } catch (err) {
      logger["logger"].error("An internal error happened while handling event " + event + ". Error message: \"" + err.message + "\". Here is a stacktrace:", err);
      this.hls.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].OTHER_ERROR,
        details: errors["ErrorDetails"].INTERNAL_EXCEPTION,
        fatal: false,
        event: event,
        err: err
      });
    }
  };

  return EventHandler;
}();

/* harmony default export */ var event_handler = (event_handler_EventHandler);
// CONCATENATED MODULE: ./src/types/loader.ts
/**
 * `type` property values for this loaders' context object
 * @enum
 *
 */
var PlaylistContextType;
/**
 * @enum {string}
 */

(function (PlaylistContextType) {
  PlaylistContextType["MANIFEST"] = "manifest";
  PlaylistContextType["LEVEL"] = "level";
  PlaylistContextType["AUDIO_TRACK"] = "audioTrack";
  PlaylistContextType["SUBTITLE_TRACK"] = "subtitleTrack";
})(PlaylistContextType || (PlaylistContextType = {}));

var PlaylistLevelType;

(function (PlaylistLevelType) {
  PlaylistLevelType["MAIN"] = "main";
  PlaylistLevelType["AUDIO"] = "audio";
  PlaylistLevelType["SUBTITLE"] = "subtitle";
})(PlaylistLevelType || (PlaylistLevelType = {}));
// EXTERNAL MODULE: ./src/demux/mp4demuxer.js
var mp4demuxer = __webpack_require__("./src/demux/mp4demuxer.js");

// CONCATENATED MODULE: ./src/loader/level-key.ts
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var level_key_LevelKey =
/*#__PURE__*/
function () {
  function LevelKey(baseURI, relativeURI) {
    this._uri = null;
    this.baseuri = void 0;
    this.reluri = void 0;
    this.method = null;
    this.key = null;
    this.iv = null;
    this.baseuri = baseURI;
    this.reluri = relativeURI;
  }

  _createClass(LevelKey, [{
    key: "uri",
    get: function get() {
      if (!this._uri && this.reluri) {
        this._uri = Object(url_toolkit["buildAbsoluteURL"])(this.baseuri, this.reluri, {
          alwaysNormalize: true
        });
      }

      return this._uri;
    }
  }]);

  return LevelKey;
}();


// CONCATENATED MODULE: ./src/loader/fragment.ts



function fragment_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function fragment_createClass(Constructor, protoProps, staticProps) { if (protoProps) fragment_defineProperties(Constructor.prototype, protoProps); if (staticProps) fragment_defineProperties(Constructor, staticProps); return Constructor; }




var ElementaryStreamTypes;

(function (ElementaryStreamTypes) {
  ElementaryStreamTypes["AUDIO"] = "audio";
  ElementaryStreamTypes["VIDEO"] = "video";
})(ElementaryStreamTypes || (ElementaryStreamTypes = {}));

var fragment_Fragment =
/*#__PURE__*/
function () {
  function Fragment() {
    var _this$_elementaryStre;

    this._url = null;
    this._byteRange = null;
    this._decryptdata = null;
    this._elementaryStreams = (_this$_elementaryStre = {}, _this$_elementaryStre[ElementaryStreamTypes.AUDIO] = false, _this$_elementaryStre[ElementaryStreamTypes.VIDEO] = false, _this$_elementaryStre);
    this.rawProgramDateTime = null;
    this.programDateTime = null;
    this.tagList = [];
    this.relurl = void 0;
    this.baseurl = void 0;
    this.duration = void 0;
    this.sn = 0;
    this.levelkey = void 0;
  }

  var _proto = Fragment.prototype;

  // setByteRange converts a EXT-X-BYTERANGE attribute into a two element array
  _proto.setByteRange = function setByteRange(value, previousFrag) {
    var params = value.split('@', 2);
    var byteRange = [];

    if (params.length === 1) {
      byteRange[0] = previousFrag ? previousFrag.byteRangeEndOffset : 0;
    } else {
      byteRange[0] = parseInt(params[1]);
    }

    byteRange[1] = parseInt(params[0]) + byteRange[0];
    this._byteRange = byteRange;
  };

  /**
   * @param {ElementaryStreamTypes} type
   */
  _proto.addElementaryStream = function addElementaryStream(type) {
    this._elementaryStreams[type] = true;
  };
  /**
   * @param {ElementaryStreamTypes} type
   */


  _proto.hasElementaryStream = function hasElementaryStream(type) {
    return this._elementaryStreams[type] === true;
  };
  /**
   * Utility method for parseLevelPlaylist to create an initialization vector for a given segment
   * @param {number} segmentNumber - segment number to generate IV with
   * @returns {Uint8Array}
   */


  _proto.createInitializationVector = function createInitializationVector(segmentNumber) {
    var uint8View = new Uint8Array(16);

    for (var i = 12; i < 16; i++) {
      uint8View[i] = segmentNumber >> 8 * (15 - i) & 0xff;
    }

    return uint8View;
  };
  /**
   * Utility method for parseLevelPlaylist to get a fragment's decryption data from the currently parsed encryption key data
   * @param levelkey - a playlist's encryption info
   * @param segmentNumber - the fragment's segment number
   * @returns {LevelKey} - an object to be applied as a fragment's decryptdata
   */


  _proto.setDecryptDataFromLevelKey = function setDecryptDataFromLevelKey(levelkey, segmentNumber) {
    var decryptdata = levelkey;

    if (levelkey && levelkey.method && levelkey.uri && !levelkey.iv) {
      decryptdata = new level_key_LevelKey(levelkey.baseuri, levelkey.reluri);
      decryptdata.method = levelkey.method;
      decryptdata.iv = this.createInitializationVector(segmentNumber);
    }

    return decryptdata;
  };

  fragment_createClass(Fragment, [{
    key: "url",
    get: function get() {
      if (!this._url && this.relurl) {
        this._url = Object(url_toolkit["buildAbsoluteURL"])(this.baseurl, this.relurl, {
          alwaysNormalize: true
        });
      }

      return this._url;
    },
    set: function set(value) {
      this._url = value;
    }
  }, {
    key: "byteRange",
    get: function get() {
      if (!this._byteRange) {
        return [];
      }

      return this._byteRange;
    }
    /**
     * @type {number}
     */

  }, {
    key: "byteRangeStartOffset",
    get: function get() {
      return this.byteRange[0];
    }
  }, {
    key: "byteRangeEndOffset",
    get: function get() {
      return this.byteRange[1];
    }
  }, {
    key: "decryptdata",
    get: function get() {
      if (!this.levelkey && !this._decryptdata) {
        return null;
      }

      if (!this._decryptdata && this.levelkey) {
        var sn = this.sn;

        if (typeof sn !== 'number') {
          // We are fetching decryption data for a initialization segment
          // If the segment was encrypted with AES-128
          // It must have an IV defined. We cannot substitute the Segment Number in.
          if (this.levelkey && this.levelkey.method === 'AES-128' && !this.levelkey.iv) {
            logger["logger"].warn("missing IV for initialization segment with method=\"" + this.levelkey.method + "\" - compliance issue");
          }
          /*
          Be converted to a Number.
          'initSegment' will become NaN.
          NaN, which when converted through ToInt32() -> +0.
          ---
          Explicitly set sn to resulting value from implicit conversions 'initSegment' values for IV generation.
          */


          sn = 0;
        }

        this._decryptdata = this.setDecryptDataFromLevelKey(this.levelkey, sn);
      }

      return this._decryptdata;
    }
  }, {
    key: "endProgramDateTime",
    get: function get() {
      if (this.programDateTime === null) {
        return null;
      }

      if (!Object(number_isFinite["isFiniteNumber"])(this.programDateTime)) {
        return null;
      }

      var duration = !Object(number_isFinite["isFiniteNumber"])(this.duration) ? 0 : this.duration;
      return this.programDateTime + duration * 1000;
    }
  }, {
    key: "encrypted",
    get: function get() {
      return !!(this.decryptdata && this.decryptdata.uri !== null && this.decryptdata.key === null);
    }
  }]);

  return Fragment;
}();


// CONCATENATED MODULE: ./src/loader/level.js


function level_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function level_createClass(Constructor, protoProps, staticProps) { if (protoProps) level_defineProperties(Constructor.prototype, protoProps); if (staticProps) level_defineProperties(Constructor, staticProps); return Constructor; }

var level_Level =
/*#__PURE__*/
function () {
  function Level(baseUrl) {
    // Please keep properties in alphabetical order
    this.endCC = 0;
    this.endSN = 0;
    this.fragments = [];
    this.initSegment = null;
    this.live = true;
    this.needSidxRanges = false;
    this.startCC = 0;
    this.startSN = 0;
    this.startTimeOffset = null;
    this.targetduration = 0;
    this.totalduration = 0;
    this.type = null;
    this.url = baseUrl;
    this.version = null;
  }

  level_createClass(Level, [{
    key: "hasProgramDateTime",
    get: function get() {
      return !!(this.fragments[0] && Object(number_isFinite["isFiniteNumber"])(this.fragments[0].programDateTime));
    }
  }]);

  return Level;
}();


// CONCATENATED MODULE: ./src/utils/attr-list.js
var DECIMAL_RESOLUTION_REGEX = /^(\d+)x(\d+)$/; // eslint-disable-line no-useless-escape

var ATTR_LIST_REGEX = /\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g; // eslint-disable-line no-useless-escape
// adapted from https://github.com/kanongil/node-m3u8parse/blob/master/attrlist.js

var AttrList =
/*#__PURE__*/
function () {
  function AttrList(attrs) {
    if (typeof attrs === 'string') {
      attrs = AttrList.parseAttrList(attrs);
    }

    for (var attr in attrs) {
      if (attrs.hasOwnProperty(attr)) {
        this[attr] = attrs[attr];
      }
    }
  }

  var _proto = AttrList.prototype;

  _proto.decimalInteger = function decimalInteger(attrName) {
    var intValue = parseInt(this[attrName], 10);

    if (intValue > Number.MAX_SAFE_INTEGER) {
      return Infinity;
    }

    return intValue;
  };

  _proto.hexadecimalInteger = function hexadecimalInteger(attrName) {
    if (this[attrName]) {
      var stringValue = (this[attrName] || '0x').slice(2);
      stringValue = (stringValue.length & 1 ? '0' : '') + stringValue;
      var value = new Uint8Array(stringValue.length / 2);

      for (var i = 0; i < stringValue.length / 2; i++) {
        value[i] = parseInt(stringValue.slice(i * 2, i * 2 + 2), 16);
      }

      return value;
    } else {
      return null;
    }
  };

  _proto.hexadecimalIntegerAsNumber = function hexadecimalIntegerAsNumber(attrName) {
    var intValue = parseInt(this[attrName], 16);

    if (intValue > Number.MAX_SAFE_INTEGER) {
      return Infinity;
    }

    return intValue;
  };

  _proto.decimalFloatingPoint = function decimalFloatingPoint(attrName) {
    return parseFloat(this[attrName]);
  };

  _proto.enumeratedString = function enumeratedString(attrName) {
    return this[attrName];
  };

  _proto.decimalResolution = function decimalResolution(attrName) {
    var res = DECIMAL_RESOLUTION_REGEX.exec(this[attrName]);

    if (res === null) {
      return undefined;
    }

    return {
      width: parseInt(res[1], 10),
      height: parseInt(res[2], 10)
    };
  };

  AttrList.parseAttrList = function parseAttrList(input) {
    var match,
        attrs = {};
    ATTR_LIST_REGEX.lastIndex = 0;

    while ((match = ATTR_LIST_REGEX.exec(input)) !== null) {
      var value = match[2],
          quote = '"';

      if (value.indexOf(quote) === 0 && value.lastIndexOf(quote) === value.length - 1) {
        value = value.slice(1, -1);
      }

      attrs[match[1]] = value;
    }

    return attrs;
  };

  return AttrList;
}();

/* harmony default export */ var attr_list = (AttrList);
// CONCATENATED MODULE: ./src/utils/codecs.js
// from http://mp4ra.org/codecs.html
var sampleEntryCodesISO = {
  audio: {
    'a3ds': true,
    'ac-3': true,
    'ac-4': true,
    'alac': true,
    'alaw': true,
    'dra1': true,
    'dts+': true,
    'dts-': true,
    'dtsc': true,
    'dtse': true,
    'dtsh': true,
    'ec-3': true,
    'enca': true,
    'g719': true,
    'g726': true,
    'm4ae': true,
    'mha1': true,
    'mha2': true,
    'mhm1': true,
    'mhm2': true,
    'mlpa': true,
    'mp4a': true,
    'raw ': true,
    'Opus': true,
    'samr': true,
    'sawb': true,
    'sawp': true,
    'sevc': true,
    'sqcp': true,
    'ssmv': true,
    'twos': true,
    'ulaw': true
  },
  video: {
    'avc1': true,
    'avc2': true,
    'avc3': true,
    'avc4': true,
    'avcp': true,
    'drac': true,
    'dvav': true,
    'dvhe': true,
    'encv': true,
    'hev1': true,
    'hvc1': true,
    'mjp2': true,
    'mp4v': true,
    'mvc1': true,
    'mvc2': true,
    'mvc3': true,
    'mvc4': true,
    'resv': true,
    'rv60': true,
    's263': true,
    'svc1': true,
    'svc2': true,
    'vc-1': true,
    'vp08': true,
    'vp09': true
  }
};

function isCodecType(codec, type) {
  var typeCodes = sampleEntryCodesISO[type];
  return !!typeCodes && typeCodes[codec.slice(0, 4)] === true;
}

function isCodecSupportedInMp4(codec, type) {
  return window.MediaSource.isTypeSupported((type || 'video') + "/mp4;codecs=\"" + codec + "\"");
}


// CONCATENATED MODULE: ./src/loader/m3u8-parser.js










/**
 * M3U8 parser
 * @module
 */
// https://regex101.com is your friend

var MASTER_PLAYLIST_REGEX = /#EXT-X-STREAM-INF:([^\n\r]*)[\r\n]+([^\r\n]+)/g;
var MASTER_PLAYLIST_MEDIA_REGEX = /#EXT-X-MEDIA:(.*)/g;
var LEVEL_PLAYLIST_REGEX_FAST = new RegExp([/#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source, // duration (#EXTINF:<duration>,<title>), group 1 => duration, group 2 => title
/|(?!#)([\S+ ?]+)/.source, // segment URI, group 3 => the URI (note newline is not eaten)
/|#EXT-X-BYTERANGE:*(.+)/.source, // next segment's byterange, group 4 => range spec (x@y)
/|#EXT-X-PROGRAM-DATE-TIME:(.+)/.source, // next segment's program date/time group 5 => the datetime spec
/|#.*/.source // All other non-segment oriented tags will match with all groups empty
].join(''), 'g');
var LEVEL_PLAYLIST_REGEX_SLOW = /(?:(?:#(EXTM3U))|(?:#EXT-X-(PLAYLIST-TYPE):(.+))|(?:#EXT-X-(MEDIA-SEQUENCE): *(\d+))|(?:#EXT-X-(TARGETDURATION): *(\d+))|(?:#EXT-X-(KEY):(.+))|(?:#EXT-X-(START):(.+))|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DISCONTINUITY-SEQ)UENCE:(\d+))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(VERSION):(\d+))|(?:#EXT-X-(MAP):(.+))|(?:(#)([^:]*):(.*))|(?:(#)(.*))(?:.*)\r?\n?/;
var MP4_REGEX_SUFFIX = /\.(mp4|m4s|m4v|m4a)$/i;

var m3u8_parser_M3U8Parser =
/*#__PURE__*/
function () {
  function M3U8Parser() {}

  M3U8Parser.findGroup = function findGroup(groups, mediaGroupId) {
    if (!groups) {
      return null;
    }

    var matchingGroup = null;

    for (var i = 0; i < groups.length; i++) {
      var group = groups[i];

      if (group.id === mediaGroupId) {
        matchingGroup = group;
      }
    }

    return matchingGroup;
  };

  M3U8Parser.convertAVC1ToAVCOTI = function convertAVC1ToAVCOTI(codec) {
    var avcdata = codec.split('.');
    var result;

    if (avcdata.length > 2) {
      result = avcdata.shift() + '.';
      result += parseInt(avcdata.shift()).toString(16);
      result += ('000' + parseInt(avcdata.shift()).toString(16)).substr(-4);
    } else {
      result = codec;
    }

    return result;
  };

  M3U8Parser.resolve = function resolve(url, baseUrl) {
    return url_toolkit["buildAbsoluteURL"](baseUrl, url, {
      alwaysNormalize: true
    });
  };

  M3U8Parser.parseMasterPlaylist = function parseMasterPlaylist(string, baseurl) {
    var levels = [];
    MASTER_PLAYLIST_REGEX.lastIndex = 0;

    function setCodecs(codecs, level) {
      ['video', 'audio'].forEach(function (type) {
        var filtered = codecs.filter(function (codec) {
          return isCodecType(codec, type);
        });

        if (filtered.length) {
          var preferred = filtered.filter(function (codec) {
            return codec.lastIndexOf('avc1', 0) === 0 || codec.lastIndexOf('mp4a', 0) === 0;
          });
          level[type + "Codec"] = preferred.length > 0 ? preferred[0] : filtered[0]; // remove from list

          codecs = codecs.filter(function (codec) {
            return filtered.indexOf(codec) === -1;
          });
        }
      });
      level.unknownCodecs = codecs;
    }

    var result;

    while ((result = MASTER_PLAYLIST_REGEX.exec(string)) != null) {
      var level = {};
      var attrs = level.attrs = new attr_list(result[1]);
      level.url = M3U8Parser.resolve(result[2], baseurl);
      var resolution = attrs.decimalResolution('RESOLUTION');

      if (resolution) {
        level.width = resolution.width;
        level.height = resolution.height;
      }

      level.bitrate = attrs.decimalInteger('AVERAGE-BANDWIDTH') || attrs.decimalInteger('BANDWIDTH');
      level.name = attrs.NAME;
      setCodecs([].concat((attrs.CODECS || '').split(/[ ,]+/)), level);

      if (level.videoCodec && level.videoCodec.indexOf('avc1') !== -1) {
        level.videoCodec = M3U8Parser.convertAVC1ToAVCOTI(level.videoCodec);
      }

      levels.push(level);
    }

    return levels;
  };

  M3U8Parser.parseMasterPlaylistMedia = function parseMasterPlaylistMedia(string, baseurl, type, audioGroups) {
    if (audioGroups === void 0) {
      audioGroups = [];
    }

    var result;
    var medias = [];
    var id = 0;
    MASTER_PLAYLIST_MEDIA_REGEX.lastIndex = 0;

    while ((result = MASTER_PLAYLIST_MEDIA_REGEX.exec(string)) !== null) {
      var media = {};
      var attrs = new attr_list(result[1]);

      if (attrs.TYPE === type) {
        media.groupId = attrs['GROUP-ID'];
        media.name = attrs.NAME;
        media.type = type;
        media.default = attrs.DEFAULT === 'YES';
        media.autoselect = attrs.AUTOSELECT === 'YES';
        media.forced = attrs.FORCED === 'YES';

        if (attrs.URI) {
          media.url = M3U8Parser.resolve(attrs.URI, baseurl);
        }

        media.lang = attrs.LANGUAGE;

        if (!media.name) {
          media.name = media.lang;
        }

        if (audioGroups.length) {
          var groupCodec = M3U8Parser.findGroup(audioGroups, media.groupId);
          media.audioCodec = groupCodec ? groupCodec.codec : audioGroups[0].codec;
        }

        media.id = id++;
        medias.push(media);
      }
    }

    return medias;
  };

  M3U8Parser.parseLevelPlaylist = function parseLevelPlaylist(string, baseurl, id, type, levelUrlId) {
    var currentSN = 0;
    var totalduration = 0;
    var level = new level_Level(baseurl);
    var levelkey = new level_key_LevelKey();
    var cc = 0;
    var prevFrag = null;
    var frag = new fragment_Fragment();
    var result;
    var i;
    var firstPdtIndex = null;
    LEVEL_PLAYLIST_REGEX_FAST.lastIndex = 0;

    while ((result = LEVEL_PLAYLIST_REGEX_FAST.exec(string)) !== null) {
      var duration = result[1];

      if (duration) {
        // INF
        frag.duration = parseFloat(duration); // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939

        var title = (' ' + result[2]).slice(1);
        frag.title = title || null;
        frag.tagList.push(title ? ['INF', duration, title] : ['INF', duration]);
      } else if (result[3]) {
        // url
        if (Object(number_isFinite["isFiniteNumber"])(frag.duration)) {
          var sn = currentSN++;
          frag.type = type;
          frag.start = totalduration;
          frag.levelkey = levelkey;
          frag.sn = sn;
          frag.level = id;
          frag.cc = cc;
          frag.urlId = levelUrlId;
          frag.baseurl = baseurl; // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939

          frag.relurl = (' ' + result[3]).slice(1);
          assignProgramDateTime(frag, prevFrag);
          level.fragments.push(frag);
          prevFrag = frag;
          totalduration += frag.duration;
          frag = new fragment_Fragment();
        }
      } else if (result[4]) {
        // X-BYTERANGE
        var data = (' ' + result[4]).slice(1);

        if (prevFrag) {
          frag.setByteRange(data, prevFrag);
        } else {
          frag.setByteRange(data);
        }
      } else if (result[5]) {
        // PROGRAM-DATE-TIME
        // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
        frag.rawProgramDateTime = (' ' + result[5]).slice(1);
        frag.tagList.push(['PROGRAM-DATE-TIME', frag.rawProgramDateTime]);

        if (firstPdtIndex === null) {
          firstPdtIndex = level.fragments.length;
        }
      } else {
        result = result[0].match(LEVEL_PLAYLIST_REGEX_SLOW);

        for (i = 1; i < result.length; i++) {
          if (typeof result[i] !== 'undefined') {
            break;
          }
        } // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939


        var value1 = (' ' + result[i + 1]).slice(1);
        var value2 = (' ' + result[i + 2]).slice(1);

        switch (result[i]) {
          case '#':
            frag.tagList.push(value2 ? [value1, value2] : [value1]);
            break;

          case 'PLAYLIST-TYPE':
            level.type = value1.toUpperCase();
            break;

          case 'MEDIA-SEQUENCE':
            currentSN = level.startSN = parseInt(value1);
            break;

          case 'TARGETDURATION':
            level.targetduration = parseFloat(value1);
            break;

          case 'VERSION':
            level.version = parseInt(value1);
            break;

          case 'EXTM3U':
            break;

          case 'ENDLIST':
            level.live = false;
            break;

          case 'DIS':
            cc++;
            frag.tagList.push(['DIS']);
            break;

          case 'DISCONTINUITY-SEQ':
            cc = parseInt(value1);
            break;

          case 'KEY':
            {
              // https://tools.ietf.org/html/draft-pantos-http-live-streaming-08#section-3.4.4
              var decryptparams = value1;
              var keyAttrs = new attr_list(decryptparams);
              var decryptmethod = keyAttrs.enumeratedString('METHOD');
              var decrypturi = keyAttrs.URI;
              var decryptiv = keyAttrs.hexadecimalInteger('IV');

              if (decryptmethod) {
                levelkey = new level_key_LevelKey();

                if (decrypturi && ['AES-128', 'SAMPLE-AES', 'SAMPLE-AES-CENC'].indexOf(decryptmethod) >= 0) {
                  levelkey.method = decryptmethod; // URI to get the key

                  levelkey.baseuri = baseurl;
                  levelkey.reluri = decrypturi;
                  levelkey.key = null; // Initialization Vector (IV)

                  levelkey.iv = decryptiv;
                }
              }

              break;
            }

          case 'START':
            {
              var startAttrs = new attr_list(value1);
              var startTimeOffset = startAttrs.decimalFloatingPoint('TIME-OFFSET'); // TIME-OFFSET can be 0

              if (Object(number_isFinite["isFiniteNumber"])(startTimeOffset)) {
                level.startTimeOffset = startTimeOffset;
              }

              break;
            }

          case 'MAP':
            {
              var mapAttrs = new attr_list(value1);
              frag.relurl = mapAttrs.URI;

              if (mapAttrs.BYTERANGE) {
                frag.setByteRange(mapAttrs.BYTERANGE);
              }

              frag.baseurl = baseurl;
              frag.level = id;
              frag.type = type;
              frag.sn = 'initSegment';
              level.initSegment = frag;
              frag = new fragment_Fragment();
              frag.rawProgramDateTime = level.initSegment.rawProgramDateTime;
              break;
            }

          default:
            logger["logger"].warn("line parsed but not handled: " + result);
            break;
        }
      }
    }

    frag = prevFrag; // logger.log('found ' + level.fragments.length + ' fragments');

    if (frag && !frag.relurl) {
      level.fragments.pop();
      totalduration -= frag.duration;
    }

    level.totalduration = totalduration;
    level.averagetargetduration = totalduration / level.fragments.length;
    level.endSN = currentSN - 1;
    level.startCC = level.fragments[0] ? level.fragments[0].cc : 0;
    level.endCC = cc;

    if (!level.initSegment && level.fragments.length) {
      // this is a bit lurky but HLS really has no other way to tell us
      // if the fragments are TS or MP4, except if we download them :/
      // but this is to be able to handle SIDX.
      if (level.fragments.every(function (frag) {
        return MP4_REGEX_SUFFIX.test(frag.relurl);
      })) {
        logger["logger"].warn('MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX');
        frag = new fragment_Fragment();
        frag.relurl = level.fragments[0].relurl;
        frag.baseurl = baseurl;
        frag.level = id;
        frag.type = type;
        frag.sn = 'initSegment';
        level.initSegment = frag;
        level.needSidxRanges = true;
      }
    }
    /**
     * Backfill any missing PDT values
       "If the first EXT-X-PROGRAM-DATE-TIME tag in a Playlist appears after
       one or more Media Segment URIs, the client SHOULD extrapolate
       backward from that tag (using EXTINF durations and/or media
       timestamps) to associate dates with those segments."
     * We have already extrapolated forward, but all fragments up to the first instance of PDT do not have their PDTs
     * computed.
     */


    if (firstPdtIndex) {
      backfillProgramDateTimes(level.fragments, firstPdtIndex);
    }

    return level;
  };

  return M3U8Parser;
}();



function backfillProgramDateTimes(fragments, startIndex) {
  var fragPrev = fragments[startIndex];

  for (var i = startIndex - 1; i >= 0; i--) {
    var frag = fragments[i];
    frag.programDateTime = fragPrev.programDateTime - frag.duration * 1000;
    fragPrev = frag;
  }
}

function assignProgramDateTime(frag, prevFrag) {
  if (frag.rawProgramDateTime) {
    frag.programDateTime = Date.parse(frag.rawProgramDateTime);
  } else if (prevFrag && prevFrag.programDateTime) {
    frag.programDateTime = prevFrag.endProgramDateTime;
  }

  if (!Object(number_isFinite["isFiniteNumber"])(frag.programDateTime)) {
    frag.programDateTime = null;
    frag.rawProgramDateTime = null;
  }
}
// CONCATENATED MODULE: ./src/loader/playlist-loader.ts



function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/**
 * PlaylistLoader - delegate for media manifest/playlist loading tasks. Takes care of parsing media to internal data-models.
 *
 * Once loaded, dispatches events with parsed data-models of manifest/levels/audio/subtitle tracks.
 *
 * Uses loader(s) set in config to do actual internal loading of resource tasks.
 *
 * @module
 *
 */







var _window = window,
    performance = _window.performance;
/**
 * @constructor
 */

var playlist_loader_PlaylistLoader =
/*#__PURE__*/
function (_EventHandler) {
  _inheritsLoose(PlaylistLoader, _EventHandler);

  /**
   * @constructs
   * @param {Hls} hls
   */
  function PlaylistLoader(hls) {
    var _this;

    _this = _EventHandler.call(this, hls, events["default"].MANIFEST_LOADING, events["default"].LEVEL_LOADING, events["default"].AUDIO_TRACK_LOADING, events["default"].SUBTITLE_TRACK_LOADING) || this;
    _this.loaders = {};
    return _this;
  }
  /**
   * @param {PlaylistContextType} type
   * @returns {boolean}
   */


  PlaylistLoader.canHaveQualityLevels = function canHaveQualityLevels(type) {
    return type !== PlaylistContextType.AUDIO_TRACK && type !== PlaylistContextType.SUBTITLE_TRACK;
  };
  /**
   * Map context.type to LevelType
   * @param {PlaylistLoaderContext} context
   * @returns {LevelType}
   */


  PlaylistLoader.mapContextToLevelType = function mapContextToLevelType(context) {
    var type = context.type;

    switch (type) {
      case PlaylistContextType.AUDIO_TRACK:
        return PlaylistLevelType.AUDIO;

      case PlaylistContextType.SUBTITLE_TRACK:
        return PlaylistLevelType.SUBTITLE;

      default:
        return PlaylistLevelType.MAIN;
    }
  };

  PlaylistLoader.getResponseUrl = function getResponseUrl(response, context) {
    var url = response.url; // responseURL not supported on some browsers (it is used to detect URL redirection)
    // data-uri mode also not supported (but no need to detect redirection)

    if (url === undefined || url.indexOf('data:') === 0) {
      // fallback to initial URL
      url = context.url;
    }

    return url;
  };
  /**
   * Returns defaults or configured loader-type overloads (pLoader and loader config params)
   * Default loader is XHRLoader (see utils)
   * @param {PlaylistLoaderContext} context
   * @returns {Loader} or other compatible configured overload
   */


  var _proto = PlaylistLoader.prototype;

  _proto.createInternalLoader = function createInternalLoader(context) {
    var config = this.hls.config;
    var PLoader = config.pLoader;
    var Loader = config.loader; // TODO(typescript-config): Verify once config is typed that InternalLoader always returns a Loader

    var InternalLoader = PLoader || Loader;
    var loader = new InternalLoader(config); // TODO - Do we really need to assign the instance or if the dep has been lost

    context.loader = loader;
    this.loaders[context.type] = loader;
    return loader;
  };

  _proto.getInternalLoader = function getInternalLoader(context) {
    return this.loaders[context.type];
  };

  _proto.resetInternalLoader = function resetInternalLoader(contextType) {
    if (this.loaders[contextType]) {
      delete this.loaders[contextType];
    }
  };
  /**
   * Call `destroy` on all internal loader instances mapped (one per context type)
   */


  _proto.destroyInternalLoaders = function destroyInternalLoaders() {
    for (var contextType in this.loaders) {
      var loader = this.loaders[contextType];

      if (loader) {
        loader.destroy();
      }

      this.resetInternalLoader(contextType);
    }
  };

  _proto.destroy = function destroy() {
    this.destroyInternalLoaders();

    _EventHandler.prototype.destroy.call(this);
  };

  _proto.onManifestLoading = function onManifestLoading(data) {
    this.load({
      url: data.url,
      type: PlaylistContextType.MANIFEST,
      level: 0,
      id: null,
      responseType: 'text'
    });
  };

  _proto.onLevelLoading = function onLevelLoading(data) {
    this.load({
      url: data.url,
      type: PlaylistContextType.LEVEL,
      level: data.level,
      id: data.id,
      responseType: 'text'
    });
  };

  _proto.onAudioTrackLoading = function onAudioTrackLoading(data) {
    this.load({
      url: data.url,
      type: PlaylistContextType.AUDIO_TRACK,
      level: null,
      id: data.id,
      responseType: 'text'
    });
  };

  _proto.onSubtitleTrackLoading = function onSubtitleTrackLoading(data) {
    this.load({
      url: data.url,
      type: PlaylistContextType.SUBTITLE_TRACK,
      level: null,
      id: data.id,
      responseType: 'text'
    });
  };

  _proto.load = function load(context) {
    var config = this.hls.config;
    logger["logger"].debug("Loading playlist of type " + context.type + ", level: " + context.level + ", id: " + context.id); // Check if a loader for this context already exists

    var loader = this.getInternalLoader(context);

    if (loader) {
      var loaderContext = loader.context;

      if (loaderContext && loaderContext.url === context.url) {
        // same URL can't overlap
        logger["logger"].trace('playlist request ongoing');
        return false;
      } else {
        logger["logger"].warn("aborting previous loader for type: " + context.type);
        loader.abort();
      }
    }

    var maxRetry;
    var timeout;
    var retryDelay;
    var maxRetryDelay; // apply different configs for retries depending on
    // context (manifest, level, audio/subs playlist)

    switch (context.type) {
      case PlaylistContextType.MANIFEST:
        maxRetry = config.manifestLoadingMaxRetry;
        timeout = config.manifestLoadingTimeOut;
        retryDelay = config.manifestLoadingRetryDelay;
        maxRetryDelay = config.manifestLoadingMaxRetryTimeout;
        break;

      case PlaylistContextType.LEVEL:
        // Disable internal loader retry logic, since we are managing retries in Level Controller
        maxRetry = 0;
        maxRetryDelay = 0;
        retryDelay = 0;
        timeout = config.levelLoadingTimeOut; // TODO Introduce retry settings for audio-track and subtitle-track, it should not use level retry config

        break;

      default:
        maxRetry = config.levelLoadingMaxRetry;
        timeout = config.levelLoadingTimeOut;
        retryDelay = config.levelLoadingRetryDelay;
        maxRetryDelay = config.levelLoadingMaxRetryTimeout;
        break;
    }

    loader = this.createInternalLoader(context);
    var loaderConfig = {
      timeout: timeout,
      maxRetry: maxRetry,
      retryDelay: retryDelay,
      maxRetryDelay: maxRetryDelay
    };
    var loaderCallbacks = {
      onSuccess: this.loadsuccess.bind(this),
      onError: this.loaderror.bind(this),
      onTimeout: this.loadtimeout.bind(this)
    };
    logger["logger"].debug("Calling internal loader delegate for URL: " + context.url);
    loader.load(context, loaderConfig, loaderCallbacks);
    return true;
  };

  _proto.loadsuccess = function loadsuccess(response, stats, context, networkDetails) {
    if (networkDetails === void 0) {
      networkDetails = null;
    }

    if (context.isSidxRequest) {
      this._handleSidxRequest(response, context);

      this._handlePlaylistLoaded(response, stats, context, networkDetails);

      return;
    }

    this.resetInternalLoader(context.type);

    if (typeof response.data !== 'string') {
      throw new Error('expected responseType of "text" for PlaylistLoader');
    }

    var string = response.data;
    stats.tload = performance.now(); // stats.mtime = new Date(target.getResponseHeader('Last-Modified'));
    // Validate if it is an M3U8 at all

    if (string.indexOf('#EXTM3U') !== 0) {
      this._handleManifestParsingError(response, context, 'no EXTM3U delimiter', networkDetails);

      return;
    } // Check if chunk-list or master. handle empty chunk list case (first EXTINF not signaled, but TARGETDURATION present)


    if (string.indexOf('#EXTINF:') > 0 || string.indexOf('#EXT-X-TARGETDURATION:') > 0) {
      this._handleTrackOrLevelPlaylist(response, stats, context, networkDetails);
    } else {
      this._handleMasterPlaylist(response, stats, context, networkDetails);
    }
  };

  _proto.loaderror = function loaderror(response, context, networkDetails) {
    if (networkDetails === void 0) {
      networkDetails = null;
    }

    this._handleNetworkError(context, networkDetails, false, response);
  };

  _proto.loadtimeout = function loadtimeout(stats, context, networkDetails) {
    if (networkDetails === void 0) {
      networkDetails = null;
    }

    this._handleNetworkError(context, networkDetails, true);
  }; // TODO(typescript-config): networkDetails can currently be a XHR or Fetch impl,
  // but with custom loaders it could be generic investigate this further when config is typed


  _proto._handleMasterPlaylist = function _handleMasterPlaylist(response, stats, context, networkDetails) {
    var hls = this.hls;
    var string = response.data;
    var url = PlaylistLoader.getResponseUrl(response, context);
    var levels = m3u8_parser_M3U8Parser.parseMasterPlaylist(string, url);

    if (!levels.length) {
      this._handleManifestParsingError(response, context, 'no level found in manifest', networkDetails);

      return;
    } // multi level playlist, parse level info


    var audioGroups = levels.map(function (level) {
      return {
        id: level.attrs.AUDIO,
        codec: level.audioCodec
      };
    });
    var audioTracks = m3u8_parser_M3U8Parser.parseMasterPlaylistMedia(string, url, 'AUDIO', audioGroups);
    var subtitles = m3u8_parser_M3U8Parser.parseMasterPlaylistMedia(string, url, 'SUBTITLES');

    if (audioTracks.length) {
      // check if we have found an audio track embedded in main playlist (audio track without URI attribute)
      var embeddedAudioFound = false;
      audioTracks.forEach(function (audioTrack) {
        if (!audioTrack.url) {
          embeddedAudioFound = true;
        }
      }); // if no embedded audio track defined, but audio codec signaled in quality level,
      // we need to signal this main audio track this could happen with playlists with
      // alt audio rendition in which quality levels (main)
      // contains both audio+video. but with mixed audio track not signaled

      if (embeddedAudioFound === false && levels[0].audioCodec && !levels[0].attrs.AUDIO) {
        logger["logger"].log('audio codec signaled in quality level, but no embedded audio track signaled, create one');
        audioTracks.unshift({
          type: 'main',
          name: 'main'
        });
      }
    }

    hls.trigger(events["default"].MANIFEST_LOADED, {
      levels: levels,
      audioTracks: audioTracks,
      subtitles: subtitles,
      url: url,
      stats: stats,
      networkDetails: networkDetails
    });
  };

  _proto._handleTrackOrLevelPlaylist = function _handleTrackOrLevelPlaylist(response, stats, context, networkDetails) {
    var hls = this.hls;
    var id = context.id,
        level = context.level,
        type = context.type;
    var url = PlaylistLoader.getResponseUrl(response, context); // if the values are null, they will result in the else conditional

    var levelUrlId = Object(number_isFinite["isFiniteNumber"])(id) ? id : 0;
    var levelId = Object(number_isFinite["isFiniteNumber"])(level) ? level : levelUrlId;
    var levelType = PlaylistLoader.mapContextToLevelType(context);
    var levelDetails = m3u8_parser_M3U8Parser.parseLevelPlaylist(response.data, url, levelId, levelType, levelUrlId); // set stats on level structure
    // TODO(jstackhouse): why? mixing concerns, is it just treated as value bag?

    levelDetails.tload = stats.tload; // We have done our first request (Manifest-type) and receive
    // not a master playlist but a chunk-list (track/level)
    // We fire the manifest-loaded event anyway with the parsed level-details
    // by creating a single-level structure for it.

    if (type === PlaylistContextType.MANIFEST) {
      var singleLevel = {
        url: url,
        details: levelDetails
      };
      hls.trigger(events["default"].MANIFEST_LOADED, {
        levels: [singleLevel],
        audioTracks: [],
        url: url,
        stats: stats,
        networkDetails: networkDetails
      });
    } // save parsing time


    stats.tparsed = performance.now(); // in case we need SIDX ranges
    // return early after calling load for
    // the SIDX box.

    if (levelDetails.needSidxRanges) {
      var sidxUrl = levelDetails.initSegment.url;
      this.load({
        url: sidxUrl,
        isSidxRequest: true,
        type: type,
        level: level,
        levelDetails: levelDetails,
        id: id,
        rangeStart: 0,
        rangeEnd: 2048,
        responseType: 'arraybuffer'
      });
      return;
    } // extend the context with the new levelDetails property


    context.levelDetails = levelDetails;

    this._handlePlaylistLoaded(response, stats, context, networkDetails);
  };

  _proto._handleSidxRequest = function _handleSidxRequest(response, context) {
    if (typeof response.data === 'string') {
      throw new Error('sidx request must be made with responseType of array buffer');
    }

    var sidxInfo = mp4demuxer["default"].parseSegmentIndex(new Uint8Array(response.data)); // if provided fragment does not contain sidx, early return

    if (!sidxInfo) {
      return;
    }

    var sidxReferences = sidxInfo.references;
    var levelDetails = context.levelDetails;
    sidxReferences.forEach(function (segmentRef, index) {
      var segRefInfo = segmentRef.info;

      if (!levelDetails) {
        return;
      }

      var frag = levelDetails.fragments[index];

      if (frag.byteRange.length === 0) {
        frag.setByteRange(String(1 + segRefInfo.end - segRefInfo.start) + '@' + String(segRefInfo.start));
      }
    });

    if (levelDetails) {
      levelDetails.initSegment.setByteRange(String(sidxInfo.moovEndOffset) + '@0');
    }
  };

  _proto._handleManifestParsingError = function _handleManifestParsingError(response, context, reason, networkDetails) {
    this.hls.trigger(events["default"].ERROR, {
      type: errors["ErrorTypes"].NETWORK_ERROR,
      details: errors["ErrorDetails"].MANIFEST_PARSING_ERROR,
      fatal: true,
      url: response.url,
      reason: reason,
      networkDetails: networkDetails
    });
  };

  _proto._handleNetworkError = function _handleNetworkError(context, networkDetails, timeout, response) {
    if (timeout === void 0) {
      timeout = false;
    }

    if (response === void 0) {
      response = null;
    }

    logger["logger"].info("A network error occured while loading a " + context.type + "-type playlist");
    var details;
    var fatal;
    var loader = this.getInternalLoader(context);

    switch (context.type) {
      case PlaylistContextType.MANIFEST:
        details = timeout ? errors["ErrorDetails"].MANIFEST_LOAD_TIMEOUT : errors["ErrorDetails"].MANIFEST_LOAD_ERROR;
        fatal = true;
        break;

      case PlaylistContextType.LEVEL:
        details = timeout ? errors["ErrorDetails"].LEVEL_LOAD_TIMEOUT : errors["ErrorDetails"].LEVEL_LOAD_ERROR;
        fatal = false;
        break;

      case PlaylistContextType.AUDIO_TRACK:
        details = timeout ? errors["ErrorDetails"].AUDIO_TRACK_LOAD_TIMEOUT : errors["ErrorDetails"].AUDIO_TRACK_LOAD_ERROR;
        fatal = false;
        break;

      default:
        // details = ...?
        fatal = false;
    }

    if (loader) {
      loader.abort();
      this.resetInternalLoader(context.type);
    } // TODO(typescript-events): when error events are handled, type this


    var errorData = {
      type: errors["ErrorTypes"].NETWORK_ERROR,
      details: details,
      fatal: fatal,
      url: context.url,
      loader: loader,
      context: context,
      networkDetails: networkDetails
    };

    if (response) {
      errorData.response = response;
    }

    this.hls.trigger(events["default"].ERROR, errorData);
  };

  _proto._handlePlaylistLoaded = function _handlePlaylistLoaded(response, stats, context, networkDetails) {
    var type = context.type,
        level = context.level,
        id = context.id,
        levelDetails = context.levelDetails;

    if (!levelDetails || !levelDetails.targetduration) {
      this._handleManifestParsingError(response, context, 'invalid target duration', networkDetails);

      return;
    }

    var canHaveLevels = PlaylistLoader.canHaveQualityLevels(context.type);

    if (canHaveLevels) {
      this.hls.trigger(events["default"].LEVEL_LOADED, {
        details: levelDetails,
        level: level || 0,
        id: id || 0,
        stats: stats,
        networkDetails: networkDetails
      });
    } else {
      switch (type) {
        case PlaylistContextType.AUDIO_TRACK:
          this.hls.trigger(events["default"].AUDIO_TRACK_LOADED, {
            details: levelDetails,
            id: id,
            stats: stats,
            networkDetails: networkDetails
          });
          break;

        case PlaylistContextType.SUBTITLE_TRACK:
          this.hls.trigger(events["default"].SUBTITLE_TRACK_LOADED, {
            details: levelDetails,
            id: id,
            stats: stats,
            networkDetails: networkDetails
          });
          break;
      }
    }
  };

  return PlaylistLoader;
}(event_handler);

/* harmony default export */ var playlist_loader = (playlist_loader_PlaylistLoader);
// CONCATENATED MODULE: ./src/loader/fragment-loader.js



function fragment_loader_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/*
 * Fragment Loader
*/





var fragment_loader_FragmentLoader =
/*#__PURE__*/
function (_EventHandler) {
  fragment_loader_inheritsLoose(FragmentLoader, _EventHandler);

  function FragmentLoader(hls) {
    var _this;

    _this = _EventHandler.call(this, hls, events["default"].FRAG_LOADING) || this;
    _this.loaders = {};
    return _this;
  }

  var _proto = FragmentLoader.prototype;

  _proto.destroy = function destroy() {
    var loaders = this.loaders;

    for (var loaderName in loaders) {
      var loader = loaders[loaderName];

      if (loader) {
        loader.destroy();
      }
    }

    this.loaders = {};

    _EventHandler.prototype.destroy.call(this);
  };

  _proto.onFragLoading = function onFragLoading(data) {
    var frag = data.frag,
        type = frag.type,
        loaders = this.loaders,
        config = this.hls.config,
        FragmentILoader = config.fLoader,
        DefaultILoader = config.loader; // reset fragment state

    frag.loaded = 0;
    var loader = loaders[type];

    if (loader) {
      logger["logger"].warn("abort previous fragment loader for type: " + type);
      loader.abort();
    }

    loader = loaders[type] = frag.loader = config.fLoader ? new FragmentILoader(config) : new DefaultILoader(config);
    var loaderContext, loaderConfig, loaderCallbacks;
    loaderContext = {
      url: frag.url,
      frag: frag,
      responseType: 'arraybuffer',
      progressData: false
    };
    var start = frag.byteRangeStartOffset,
        end = frag.byteRangeEndOffset;

    if (Object(number_isFinite["isFiniteNumber"])(start) && Object(number_isFinite["isFiniteNumber"])(end)) {
      loaderContext.rangeStart = start;
      loaderContext.rangeEnd = end;
    }

    loaderConfig = {
      timeout: config.fragLoadingTimeOut,
      maxRetry: 0,
      retryDelay: 0,
      maxRetryDelay: config.fragLoadingMaxRetryTimeout
    };
    loaderCallbacks = {
      onSuccess: this.loadsuccess.bind(this),
      onError: this.loaderror.bind(this),
      onTimeout: this.loadtimeout.bind(this),
      onProgress: this.loadprogress.bind(this)
    };
    loader.load(loaderContext, loaderConfig, loaderCallbacks);
  };

  _proto.loadsuccess = function loadsuccess(response, stats, context, networkDetails) {
    if (networkDetails === void 0) {
      networkDetails = null;
    }

    var payload = response.data,
        frag = context.frag; // detach fragment loader on load success

    frag.loader = undefined;
    this.loaders[frag.type] = undefined;
    this.hls.trigger(events["default"].FRAG_LOADED, {
      payload: payload,
      frag: frag,
      stats: stats,
      networkDetails: networkDetails
    });
  };

  _proto.loaderror = function loaderror(response, context, networkDetails) {
    if (networkDetails === void 0) {
      networkDetails = null;
    }

    var frag = context.frag;
    var loader = frag.loader;

    if (loader) {
      loader.abort();
    }

    this.loaders[frag.type] = undefined;
    this.hls.trigger(events["default"].ERROR, {
      type: errors["ErrorTypes"].NETWORK_ERROR,
      details: errors["ErrorDetails"].FRAG_LOAD_ERROR,
      fatal: false,
      frag: context.frag,
      response: response,
      networkDetails: networkDetails
    });
  };

  _proto.loadtimeout = function loadtimeout(stats, context, networkDetails) {
    if (networkDetails === void 0) {
      networkDetails = null;
    }

    var frag = context.frag;
    var loader = frag.loader;

    if (loader) {
      loader.abort();
    }

    this.loaders[frag.type] = undefined;
    this.hls.trigger(events["default"].ERROR, {
      type: errors["ErrorTypes"].NETWORK_ERROR,
      details: errors["ErrorDetails"].FRAG_LOAD_TIMEOUT,
      fatal: false,
      frag: context.frag,
      networkDetails: networkDetails
    });
  }; // data will be used for progressive parsing


  _proto.loadprogress = function loadprogress(stats, context, data, networkDetails) {
    if (networkDetails === void 0) {
      networkDetails = null;
    }

    // jshint ignore:line
    var frag = context.frag;
    frag.loaded = stats.loaded;
    this.hls.trigger(events["default"].FRAG_LOAD_PROGRESS, {
      frag: frag,
      stats: stats,
      networkDetails: networkDetails
    });
  };

  return FragmentLoader;
}(event_handler);

/* harmony default export */ var fragment_loader = (fragment_loader_FragmentLoader);
// CONCATENATED MODULE: ./src/loader/key-loader.js
function key_loader_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/*
 * Decrypt key Loader
*/





var key_loader_KeyLoader =
/*#__PURE__*/
function (_EventHandler) {
  key_loader_inheritsLoose(KeyLoader, _EventHandler);

  function KeyLoader(hls) {
    var _this;

    _this = _EventHandler.call(this, hls, events["default"].KEY_LOADING) || this;
    _this.loaders = {};
    _this.decryptkey = null;
    _this.decrypturl = null;
    return _this;
  }

  var _proto = KeyLoader.prototype;

  _proto.destroy = function destroy() {
    for (var loaderName in this.loaders) {
      var loader = this.loaders[loaderName];

      if (loader) {
        loader.destroy();
      }
    }

    this.loaders = {};
    event_handler.prototype.destroy.call(this);
  };

  _proto.onKeyLoading = function onKeyLoading(data) {
    var frag = data.frag,
        type = frag.type,
        loader = this.loaders[type],
        decryptdata = frag.decryptdata,
        uri = decryptdata.uri; // if uri is different from previous one or if decrypt key not retrieved yet

    if (uri !== this.decrypturl || this.decryptkey === null) {
      var config = this.hls.config;

      if (loader) {
        logger["logger"].warn("abort previous key loader for type:" + type);
        loader.abort();
      }

      frag.loader = this.loaders[type] = new config.loader(config);
      this.decrypturl = uri;
      this.decryptkey = null;
      var loaderContext, loaderConfig, loaderCallbacks;
      loaderContext = {
        url: uri,
        frag: frag,
        responseType: 'arraybuffer'
      }; // maxRetry is 0 so that instead of retrying the same key on the same variant multiple times,
      // key-loader will trigger an error and rely on stream-controller to handle retry logic.
      // this will also align retry logic with fragment-loader

      loaderConfig = {
        timeout: config.fragLoadingTimeOut,
        maxRetry: 0,
        retryDelay: config.fragLoadingRetryDelay,
        maxRetryDelay: config.fragLoadingMaxRetryTimeout
      };
      loaderCallbacks = {
        onSuccess: this.loadsuccess.bind(this),
        onError: this.loaderror.bind(this),
        onTimeout: this.loadtimeout.bind(this)
      };
      frag.loader.load(loaderContext, loaderConfig, loaderCallbacks);
    } else if (this.decryptkey) {
      // we already loaded this key, return it
      decryptdata.key = this.decryptkey;
      this.hls.trigger(events["default"].KEY_LOADED, {
        frag: frag
      });
    }
  };

  _proto.loadsuccess = function loadsuccess(response, stats, context) {
    var frag = context.frag;
    this.decryptkey = frag.decryptdata.key = new Uint8Array(response.data); // detach fragment loader on load success

    frag.loader = undefined;
    this.loaders[frag.type] = undefined;
    this.hls.trigger(events["default"].KEY_LOADED, {
      frag: frag
    });
  };

  _proto.loaderror = function loaderror(response, context) {
    var frag = context.frag,
        loader = frag.loader;

    if (loader) {
      loader.abort();
    }

    this.loaders[context.type] = undefined;
    this.hls.trigger(events["default"].ERROR, {
      type: errors["ErrorTypes"].NETWORK_ERROR,
      details: errors["ErrorDetails"].KEY_LOAD_ERROR,
      fatal: false,
      frag: frag,
      response: response
    });
  };

  _proto.loadtimeout = function loadtimeout(stats, context) {
    var frag = context.frag,
        loader = frag.loader;

    if (loader) {
      loader.abort();
    }

    this.loaders[context.type] = undefined;
    this.hls.trigger(events["default"].ERROR, {
      type: errors["ErrorTypes"].NETWORK_ERROR,
      details: errors["ErrorDetails"].KEY_LOAD_TIMEOUT,
      fatal: false,
      frag: frag
    });
  };

  return KeyLoader;
}(event_handler);

/* harmony default export */ var key_loader = (key_loader_KeyLoader);
// CONCATENATED MODULE: ./src/controller/fragment-tracker.js


function fragment_tracker_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }



var FragmentState = {
  NOT_LOADED: 'NOT_LOADED',
  APPENDING: 'APPENDING',
  PARTIAL: 'PARTIAL',
  OK: 'OK'
};
var fragment_tracker_FragmentTracker =
/*#__PURE__*/
function (_EventHandler) {
  fragment_tracker_inheritsLoose(FragmentTracker, _EventHandler);

  function FragmentTracker(hls) {
    var _this;

    _this = _EventHandler.call(this, hls, events["default"].BUFFER_APPENDED, events["default"].FRAG_BUFFERED, events["default"].FRAG_LOADED) || this;
    _this.bufferPadding = 0.2;
    _this.fragments = Object.create(null);
    _this.timeRanges = Object.create(null);
    _this.config = hls.config;
    return _this;
  }

  var _proto = FragmentTracker.prototype;

  _proto.destroy = function destroy() {
    this.fragments = Object.create(null);
    this.timeRanges = Object.create(null);
    this.config = null;
    event_handler.prototype.destroy.call(this);

    _EventHandler.prototype.destroy.call(this);
  };
  /**
   * Return a Fragment that match the position and levelType.
   * If not found any Fragment, return null
   * @param {number} position
   * @param {LevelType} levelType
   * @returns {Fragment|null}
   */


  _proto.getBufferedFrag = function getBufferedFrag(position, levelType) {
    var fragments = this.fragments;
    var bufferedFrags = Object.keys(fragments).filter(function (key) {
      var fragmentEntity = fragments[key];

      if (fragmentEntity.body.type !== levelType) {
        return false;
      }

      if (!fragmentEntity.buffered) {
        return false;
      }

      var frag = fragmentEntity.body;
      return frag.startPTS <= position && position <= frag.endPTS;
    });

    if (bufferedFrags.length === 0) {
      return null;
    } else {
      // https://github.com/video-dev/hls.js/pull/1545#discussion_r166229566
      var bufferedFragKey = bufferedFrags.pop();
      return fragments[bufferedFragKey].body;
    }
  };
  /**
   * Partial fragments effected by coded frame eviction will be removed
   * The browser will unload parts of the buffer to free up memory for new buffer data
   * Fragments will need to be reloaded when the buffer is freed up, removing partial fragments will allow them to reload(since there might be parts that are still playable)
   * @param {String} elementaryStream The elementaryStream of media this is (eg. video/audio)
   * @param {TimeRanges} timeRange TimeRange object from a sourceBuffer
   */


  _proto.detectEvictedFragments = function detectEvictedFragments(elementaryStream, timeRange) {
    var _this2 = this;

    var fragmentTimes, time; // Check if any flagged fragments have been unloaded

    Object.keys(this.fragments).forEach(function (key) {
      var fragmentEntity = _this2.fragments[key];

      if (fragmentEntity.buffered === true) {
        var esData = fragmentEntity.range[elementaryStream];

        if (esData) {
          fragmentTimes = esData.time;

          for (var i = 0; i < fragmentTimes.length; i++) {
            time = fragmentTimes[i];

            if (_this2.isTimeBuffered(time.startPTS, time.endPTS, timeRange) === false) {
              // Unregister partial fragment as it needs to load again to be reused
              _this2.removeFragment(fragmentEntity.body);

              break;
            }
          }
        }
      }
    });
  };
  /**
   * Checks if the fragment passed in is loaded in the buffer properly
   * Partially loaded fragments will be registered as a partial fragment
   * @param {Object} fragment Check the fragment against all sourceBuffers loaded
   */


  _proto.detectPartialFragments = function detectPartialFragments(fragment) {
    var _this3 = this;

    var fragKey = this.getFragmentKey(fragment);
    var fragmentEntity = this.fragments[fragKey];

    if (fragmentEntity) {
      fragmentEntity.buffered = true;
      Object.keys(this.timeRanges).forEach(function (elementaryStream) {
        if (fragment.hasElementaryStream(elementaryStream)) {
          var timeRange = _this3.timeRanges[elementaryStream]; // Check for malformed fragments
          // Gaps need to be calculated for each elementaryStream

          fragmentEntity.range[elementaryStream] = _this3.getBufferedTimes(fragment.startPTS, fragment.endPTS, timeRange);
        }
      });
    }
  };

  _proto.getBufferedTimes = function getBufferedTimes(startPTS, endPTS, timeRange) {
    var fragmentTimes = [];
    var startTime, endTime;
    var fragmentPartial = false;

    for (var i = 0; i < timeRange.length; i++) {
      startTime = timeRange.start(i) - this.bufferPadding;
      endTime = timeRange.end(i) + this.bufferPadding;

      if (startPTS >= startTime && endPTS <= endTime) {
        // Fragment is entirely contained in buffer
        // No need to check the other timeRange times since it's completely playable
        fragmentTimes.push({
          startPTS: Math.max(startPTS, timeRange.start(i)),
          endPTS: Math.min(endPTS, timeRange.end(i))
        });
        break;
      } else if (startPTS < endTime && endPTS > startTime) {
        // Check for intersection with buffer
        // Get playable sections of the fragment
        fragmentTimes.push({
          startPTS: Math.max(startPTS, timeRange.start(i)),
          endPTS: Math.min(endPTS, timeRange.end(i))
        });
        fragmentPartial = true;
      } else if (endPTS <= startTime) {
        // No need to check the rest of the timeRange as it is in order
        break;
      }
    }

    return {
      time: fragmentTimes,
      partial: fragmentPartial
    };
  };

  _proto.getFragmentKey = function getFragmentKey(fragment) {
    return fragment.type + "_" + fragment.level + "_" + fragment.urlId + "_" + fragment.sn;
  };
  /**
   * Gets the partial fragment for a certain time
   * @param {Number} time
   * @returns {Object} fragment Returns a partial fragment at a time or null if there is no partial fragment
   */


  _proto.getPartialFragment = function getPartialFragment(time) {
    var _this4 = this;

    var timePadding, startTime, endTime;
    var bestFragment = null;
    var bestOverlap = 0;
    Object.keys(this.fragments).forEach(function (key) {
      var fragmentEntity = _this4.fragments[key];

      if (_this4.isPartial(fragmentEntity)) {
        startTime = fragmentEntity.body.startPTS - _this4.bufferPadding;
        endTime = fragmentEntity.body.endPTS + _this4.bufferPadding;

        if (time >= startTime && time <= endTime) {
          // Use the fragment that has the most padding from start and end time
          timePadding = Math.min(time - startTime, endTime - time);

          if (bestOverlap <= timePadding) {
            bestFragment = fragmentEntity.body;
            bestOverlap = timePadding;
          }
        }
      }
    });
    return bestFragment;
  };
  /**
   * @param {Object} fragment The fragment to check
   * @returns {String} Returns the fragment state when a fragment never loaded or if it partially loaded
   */


  _proto.getState = function getState(fragment) {
    var fragKey = this.getFragmentKey(fragment);
    var fragmentEntity = this.fragments[fragKey];
    var state = FragmentState.NOT_LOADED;

    if (fragmentEntity !== undefined) {
      if (!fragmentEntity.buffered) {
        state = FragmentState.APPENDING;
      } else if (this.isPartial(fragmentEntity) === true) {
        state = FragmentState.PARTIAL;
      } else {
        state = FragmentState.OK;
      }
    }

    return state;
  };

  _proto.isPartial = function isPartial(fragmentEntity) {
    return fragmentEntity.buffered === true && (fragmentEntity.range.video !== undefined && fragmentEntity.range.video.partial === true || fragmentEntity.range.audio !== undefined && fragmentEntity.range.audio.partial === true);
  };

  _proto.isTimeBuffered = function isTimeBuffered(startPTS, endPTS, timeRange) {
    var startTime, endTime;

    for (var i = 0; i < timeRange.length; i++) {
      startTime = timeRange.start(i) - this.bufferPadding;
      endTime = timeRange.end(i) + this.bufferPadding;

      if (startPTS >= startTime && endPTS <= endTime) {
        return true;
      }

      if (endPTS <= startTime) {
        // No need to check the rest of the timeRange as it is in order
        return false;
      }
    }

    return false;
  };
  /**
   * Fires when a fragment loading is completed
   */


  _proto.onFragLoaded = function onFragLoaded(e) {
    var fragment = e.frag; // don't track initsegment (for which sn is not a number)
    // don't track frags used for bitrateTest, they're irrelevant.

    if (!Object(number_isFinite["isFiniteNumber"])(fragment.sn) || fragment.bitrateTest) {
      return;
    }

    this.fragments[this.getFragmentKey(fragment)] = {
      body: fragment,
      range: Object.create(null),
      buffered: false
    };
  };
  /**
   * Fires when the buffer is updated
   */


  _proto.onBufferAppended = function onBufferAppended(e) {
    var _this5 = this;

    // Store the latest timeRanges loaded in the buffer
    this.timeRanges = e.timeRanges;
    Object.keys(this.timeRanges).forEach(function (elementaryStream) {
      var timeRange = _this5.timeRanges[elementaryStream];

      _this5.detectEvictedFragments(elementaryStream, timeRange);
    });
  };
  /**
   * Fires after a fragment has been loaded into the source buffer
   */


  _proto.onFragBuffered = function onFragBuffered(e) {
    this.detectPartialFragments(e.frag);
  };
  /**
   * Return true if fragment tracker has the fragment.
   * @param {Object} fragment
   * @returns {boolean}
   */


  _proto.hasFragment = function hasFragment(fragment) {
    var fragKey = this.getFragmentKey(fragment);
    return this.fragments[fragKey] !== undefined;
  };
  /**
   * Remove a fragment from fragment tracker until it is loaded again
   * @param {Object} fragment The fragment to remove
   */


  _proto.removeFragment = function removeFragment(fragment) {
    var fragKey = this.getFragmentKey(fragment);
    delete this.fragments[fragKey];
  };
  /**
   * Remove all fragments from fragment tracker.
   */


  _proto.removeAllFragments = function removeAllFragments() {
    this.fragments = Object.create(null);
  };

  return FragmentTracker;
}(event_handler);
// CONCATENATED MODULE: ./src/utils/binary-search.ts
var BinarySearch = {
  /**
   * Searches for an item in an array which matches a certain condition.
   * This requires the condition to only match one item in the array,
   * and for the array to be ordered.
   *
   * @param {Array<T>} list The array to search.
   * @param {BinarySearchComparison<T>} comparisonFn
   *      Called and provided a candidate item as the first argument.
   *      Should return:
   *          > -1 if the item should be located at a lower index than the provided item.
   *          > 1 if the item should be located at a higher index than the provided item.
   *          > 0 if the item is the item you're looking for.
   *
   * @return {T | null} The object if it is found or null otherwise.
   */
  search: function search(list, comparisonFn) {
    var minIndex = 0;
    var maxIndex = list.length - 1;
    var currentIndex = null;
    var currentElement = null;

    while (minIndex <= maxIndex) {
      currentIndex = (minIndex + maxIndex) / 2 | 0;
      currentElement = list[currentIndex];
      var comparisonResult = comparisonFn(currentElement);

      if (comparisonResult > 0) {
        minIndex = currentIndex + 1;
      } else if (comparisonResult < 0) {
        maxIndex = currentIndex - 1;
      } else {
        return currentElement;
      }
    }

    return null;
  }
};
/* harmony default export */ var binary_search = (BinarySearch);
// CONCATENATED MODULE: ./src/utils/buffer-helper.ts
/**
 * @module BufferHelper
 *
 * Providing methods dealing with buffer length retrieval for example.
 *
 * In general, a helper around HTML5 MediaElement TimeRanges gathered from `buffered` property.
 *
 * Also @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered
*/
var BufferHelper =
/*#__PURE__*/
function () {
  function BufferHelper() {}

  /**
   * Return true if `media`'s buffered include `position`
   * @param {Bufferable} media
   * @param {number} position
   * @returns {boolean}
   */
  BufferHelper.isBuffered = function isBuffered(media, position) {
    try {
      if (media) {
        var _buffered = media.buffered;

        for (var i = 0; i < _buffered.length; i++) {
          if (position >= _buffered.start(i) && position <= _buffered.end(i)) {
            return true;
          }
        }
      }
    } catch (error) {// this is to catch
      // InvalidStateError: Failed to read the 'buffered' property from 'SourceBuffer':
      // This SourceBuffer has been removed from the parent media source
    }

    return false;
  };

  BufferHelper.bufferInfo = function bufferInfo(media, pos, maxHoleDuration) {
    try {
      if (media) {
        var vbuffered = media.buffered;
        var _buffered2 = [];
        var i;

        for (i = 0; i < vbuffered.length; i++) {
          _buffered2.push({
            start: vbuffered.start(i),
            end: vbuffered.end(i)
          });
        }

        return this.bufferedInfo(_buffered2, pos, maxHoleDuration);
      }
    } catch (error) {// this is to catch
      // InvalidStateError: Failed to read the 'buffered' property from 'SourceBuffer':
      // This SourceBuffer has been removed from the parent media source
    }

    return {
      len: 0,
      start: pos,
      end: pos,
      nextStart: undefined
    };
  };

  BufferHelper.bufferedInfo = function bufferedInfo(buffered, pos, maxHoleDuration) {
    // sort on buffer.start/smaller end (IE does not always return sorted buffered range)
    buffered.sort(function (a, b) {
      var diff = a.start - b.start;

      if (diff) {
        return diff;
      } else {
        return b.end - a.end;
      }
    });
    var buffered2 = []; // there might be some small holes between buffer time range
    // consider that holes smaller than maxHoleDuration are irrelevant and build another
    // buffer time range representations that discards those holes

    for (var i = 0; i < buffered.length; i++) {
      var buf2len = buffered2.length;

      if (buf2len) {
        var buf2end = buffered2[buf2len - 1].end; // if small hole (value between 0 or maxHoleDuration ) or overlapping (negative)

        if (buffered[i].start - buf2end < maxHoleDuration) {
          // merge overlapping time ranges
          // update lastRange.end only if smaller than item.end
          // e.g.  [ 1, 15] with  [ 2,8] => [ 1,15] (no need to modify lastRange.end)
          // whereas [ 1, 8] with  [ 2,15] => [ 1,15] ( lastRange should switch from [1,8] to [1,15])
          if (buffered[i].end > buf2end) {
            buffered2[buf2len - 1].end = buffered[i].end;
          }
        } else {
          // big hole
          buffered2.push(buffered[i]);
        }
      } else {
        // first value
        buffered2.push(buffered[i]);
      }
    }

    var bufferLen = 0; // bufferStartNext can possibly be undefined based on the conditional logic below

    var bufferStartNext; // bufferStart and bufferEnd are buffer boundaries around current video position

    var bufferStart = pos;
    var bufferEnd = pos;

    for (var _i = 0; _i < buffered2.length; _i++) {
      var _start = buffered2[_i].start,
          _end = buffered2[_i].end; // logger.log('buf start/end:' + buffered.start(i) + '/' + buffered.end(i));

      if (pos + maxHoleDuration >= _start && pos < _end) {
        // play position is inside this buffer TimeRange, retrieve end of buffer position and buffer length
        bufferStart = _start;
        bufferEnd = _end;
        bufferLen = bufferEnd - pos;
      } else if (pos + maxHoleDuration < _start) {
        bufferStartNext = _start;
        break;
      }
    }

    return {
      len: bufferLen,
      start: bufferStart,
      end: bufferEnd,
      nextStart: bufferStartNext
    };
  };

  return BufferHelper;
}();
// EXTERNAL MODULE: ./node_modules/eventemitter3/index.js
var eventemitter3 = __webpack_require__("./node_modules/eventemitter3/index.js");

// EXTERNAL MODULE: ./node_modules/webworkify-webpack/index.js
var webworkify_webpack = __webpack_require__("./node_modules/webworkify-webpack/index.js");

// EXTERNAL MODULE: ./src/demux/demuxer-inline.js + 11 modules
var demuxer_inline = __webpack_require__("./src/demux/demuxer-inline.js");

// CONCATENATED MODULE: ./src/utils/mediasource-helper.ts
/**
 * MediaSource helper
 */
function getMediaSource() {
  return MediaSource || window.WebKitMediaSource;
}
// EXTERNAL MODULE: ./src/utils/get-self-scope.js
var get_self_scope = __webpack_require__("./src/utils/get-self-scope.js");

// CONCATENATED MODULE: ./src/observer.ts
function observer_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }


/**
 * Simple adapter sub-class of Nodejs-like EventEmitter.
 */

var Observer =
/*#__PURE__*/
function (_EventEmitter) {
  observer_inheritsLoose(Observer, _EventEmitter);

  function Observer() {
    return _EventEmitter.apply(this, arguments) || this;
  }

  var _proto = Observer.prototype;

  /**
   * We simply want to pass along the event-name itself
   * in every call to a handler, which is the purpose of our `trigger` method
   * extending the standard API.
   */
  _proto.trigger = function trigger(event) {
    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      data[_key - 1] = arguments[_key];
    }

    this.emit.apply(this, [event, event].concat(data));
  };

  return Observer;
}(eventemitter3["EventEmitter"]);
// CONCATENATED MODULE: ./src/demux/demuxer.js









 // see https://stackoverflow.com/a/11237259/589493

var global = Object(get_self_scope["getSelfScope"])(); // safeguard for code that might run both on worker and main thread

var demuxer_MediaSource = getMediaSource();

var demuxer_Demuxer =
/*#__PURE__*/
function () {
  function Demuxer(hls, id) {
    var _this = this;

    this.hls = hls;
    this.id = id;
    var observer = this.observer = new Observer();
    var config = hls.config;

    var forwardMessage = function forwardMessage(ev, data) {
      data = data || {};
      data.frag = _this.frag;
      data.id = _this.id;
      hls.trigger(ev, data);
    }; // forward events to main thread


    observer.on(events["default"].FRAG_DECRYPTED, forwardMessage);
    observer.on(events["default"].FRAG_PARSING_INIT_SEGMENT, forwardMessage);
    observer.on(events["default"].FRAG_PARSING_DATA, forwardMessage);
    observer.on(events["default"].FRAG_PARSED, forwardMessage);
    observer.on(events["default"].ERROR, forwardMessage);
    observer.on(events["default"].FRAG_PARSING_METADATA, forwardMessage);
    observer.on(events["default"].FRAG_PARSING_USERDATA, forwardMessage);
    observer.on(events["default"].INIT_PTS_FOUND, forwardMessage);
    var typeSupported = {
      mp4: demuxer_MediaSource.isTypeSupported('video/mp4'),
      mpeg: demuxer_MediaSource.isTypeSupported('audio/mpeg'),
      mp3: demuxer_MediaSource.isTypeSupported('audio/mp4; codecs="mp3"')
    }; // navigator.vendor is not always available in Web Worker
    // refer to https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator

    var vendor = navigator.vendor;

    if (config.enableWorker && typeof Worker !== 'undefined') {
      logger["logger"].log('demuxing in webworker');
      var w;

      try {
        w = this.w = webworkify_webpack(/*require.resolve*/(/*! ../demux/demuxer-worker.js */ "./src/demux/demuxer-worker.js"));
        this.onwmsg = this.onWorkerMessage.bind(this);
        w.addEventListener('message', this.onwmsg);

        w.onerror = function (event) {
          hls.trigger(events["default"].ERROR, {
            type: errors["ErrorTypes"].OTHER_ERROR,
            details: errors["ErrorDetails"].INTERNAL_EXCEPTION,
            fatal: true,
            event: 'demuxerWorker',
            err: {
              message: event.message + ' (' + event.filename + ':' + event.lineno + ')'
            }
          });
        };

        w.postMessage({
          cmd: 'init',
          typeSupported: typeSupported,
          vendor: vendor,
          id: id,
          config: JSON.stringify(config)
        });
      } catch (err) {
        logger["logger"].warn('Error in worker:', err);
        logger["logger"].error('Error while initializing DemuxerWorker, fallback on DemuxerInline');

        if (w) {
          // revoke the Object URL that was used to create demuxer worker, so as not to leak it
          global.URL.revokeObjectURL(w.objectURL);
        }

        this.demuxer = new demuxer_inline["default"](observer, typeSupported, config, vendor);
        this.w = undefined;
      }
    } else {
      this.demuxer = new demuxer_inline["default"](observer, typeSupported, config, vendor);
    }
  }

  var _proto = Demuxer.prototype;

  _proto.destroy = function destroy() {
    var w = this.w;

    if (w) {
      w.removeEventListener('message', this.onwmsg);
      w.terminate();
      this.w = null;
    } else {
      var demuxer = this.demuxer;

      if (demuxer) {
        demuxer.destroy();
        this.demuxer = null;
      }
    }

    var observer = this.observer;

    if (observer) {
      observer.removeAllListeners();
      this.observer = null;
    }
  };

  _proto.push = function push(data, initSegment, audioCodec, videoCodec, frag, duration, accurateTimeOffset, defaultInitPTS) {
    var w = this.w;
    var timeOffset = Object(number_isFinite["isFiniteNumber"])(frag.startPTS) ? frag.startPTS : frag.start;
    var decryptdata = frag.decryptdata;
    var lastFrag = this.frag;
    var discontinuity = !(lastFrag && frag.cc === lastFrag.cc);
    var trackSwitch = !(lastFrag && frag.level === lastFrag.level);
    var nextSN = lastFrag && frag.sn === lastFrag.sn + 1;
    var contiguous = !trackSwitch && nextSN;

    if (discontinuity) {
      logger["logger"].log(this.id + ":discontinuity detected");
    }

    if (trackSwitch) {
      logger["logger"].log(this.id + ":switch detected");
    }

    this.frag = frag;

    if (w) {
      // post fragment payload as transferable objects for ArrayBuffer (no copy)
      w.postMessage({
        cmd: 'demux',
        data: data,
        decryptdata: decryptdata,
        initSegment: initSegment,
        audioCodec: audioCodec,
        videoCodec: videoCodec,
        timeOffset: timeOffset,
        discontinuity: discontinuity,
        trackSwitch: trackSwitch,
        contiguous: contiguous,
        duration: duration,
        accurateTimeOffset: accurateTimeOffset,
        defaultInitPTS: defaultInitPTS
      }, data instanceof ArrayBuffer ? [data] : []);
    } else {
      var demuxer = this.demuxer;

      if (demuxer) {
        demuxer.push(data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);
      }
    }
  };

  _proto.onWorkerMessage = function onWorkerMessage(ev) {
    var data = ev.data,
        hls = this.hls;

    switch (data.event) {
      case 'init':
        // revoke the Object URL that was used to create demuxer worker, so as not to leak it
        global.URL.revokeObjectURL(this.w.objectURL);
        break;
      // special case for FRAG_PARSING_DATA: data1 and data2 are transferable objects

      case events["default"].FRAG_PARSING_DATA:
        data.data.data1 = new Uint8Array(data.data1);

        if (data.data2) {
          data.data.data2 = new Uint8Array(data.data2);
        }

      /* falls through */

      default:
        data.data = data.data || {};
        data.data.frag = this.frag;
        data.data.id = this.id;
        hls.trigger(data.event, data.data);
        break;
    }
  };

  return Demuxer;
}();

/* harmony default export */ var demux_demuxer = (demuxer_Demuxer);
// CONCATENATED MODULE: ./src/controller/level-helper.js





/**
 * @module LevelHelper
 *
 * Providing methods dealing with playlist sliding and drift
 *
 * TODO: Create an actual `Level` class/model that deals with all this logic in an object-oriented-manner.
 *
 * */

function addGroupId(level, type, id) {
  switch (type) {
    case 'audio':
      if (!level.audioGroupIds) {
        level.audioGroupIds = [];
      }

      level.audioGroupIds.push(id);
      break;

    case 'text':
      if (!level.textGroupIds) {
        level.textGroupIds = [];
      }

      level.textGroupIds.push(id);
      break;
  }
}
function updatePTS(fragments, fromIdx, toIdx) {
  var fragFrom = fragments[fromIdx],
      fragTo = fragments[toIdx],
      fragToPTS = fragTo.startPTS; // if we know startPTS[toIdx]

  if (Object(number_isFinite["isFiniteNumber"])(fragToPTS)) {
    // update fragment duration.
    // it helps to fix drifts between playlist reported duration and fragment real duration
    if (toIdx > fromIdx) {
      fragFrom.duration = fragToPTS - fragFrom.start;

      if (fragFrom.duration < 0) {
        logger["logger"].warn("negative duration computed for frag " + fragFrom.sn + ",level " + fragFrom.level + ", there should be some duration drift between playlist and fragment!");
      }
    } else {
      fragTo.duration = fragFrom.start - fragToPTS;

      if (fragTo.duration < 0) {
        logger["logger"].warn("negative duration computed for frag " + fragTo.sn + ",level " + fragTo.level + ", there should be some duration drift between playlist and fragment!");
      }
    }
  } else {
    // we dont know startPTS[toIdx]
    if (toIdx > fromIdx) {
      fragTo.start = fragFrom.start + fragFrom.duration;
    } else {
      fragTo.start = Math.max(fragFrom.start - fragTo.duration, 0);
    }
  }
}
function updateFragPTSDTS(details, frag, startPTS, endPTS, startDTS, endDTS) {
  // update frag PTS/DTS
  var maxStartPTS = startPTS;

  if (Object(number_isFinite["isFiniteNumber"])(frag.startPTS)) {
    // delta PTS between audio and video
    var deltaPTS = Math.abs(frag.startPTS - startPTS);

    if (!Object(number_isFinite["isFiniteNumber"])(frag.deltaPTS)) {
      frag.deltaPTS = deltaPTS;
    } else {
      frag.deltaPTS = Math.max(deltaPTS, frag.deltaPTS);
    }

    maxStartPTS = Math.max(startPTS, frag.startPTS);
    startPTS = Math.min(startPTS, frag.startPTS);
    endPTS = Math.max(endPTS, frag.endPTS);
    startDTS = Math.min(startDTS, frag.startDTS);
    endDTS = Math.max(endDTS, frag.endDTS);
  }

  var drift = startPTS - frag.start;
  frag.start = frag.startPTS = startPTS;
  frag.maxStartPTS = maxStartPTS;
  frag.endPTS = endPTS;
  frag.startDTS = startDTS;
  frag.endDTS = endDTS;
  frag.duration = endPTS - startPTS;
  var sn = frag.sn; // exit if sn out of range

  if (!details || sn < details.startSN || sn > details.endSN) {
    return 0;
  }

  var fragIdx, fragments, i;
  fragIdx = sn - details.startSN;
  fragments = details.fragments; // update frag reference in fragments array
  // rationale is that fragments array might not contain this frag object.
  // this will happen if playlist has been refreshed between frag loading and call to updateFragPTSDTS()
  // if we don't update frag, we won't be able to propagate PTS info on the playlist
  // resulting in invalid sliding computation

  fragments[fragIdx] = frag; // adjust fragment PTS/duration from seqnum-1 to frag 0

  for (i = fragIdx; i > 0; i--) {
    updatePTS(fragments, i, i - 1);
  } // adjust fragment PTS/duration from seqnum to last frag


  for (i = fragIdx; i < fragments.length - 1; i++) {
    updatePTS(fragments, i, i + 1);
  }

  details.PTSKnown = true;
  return drift;
}
function mergeDetails(oldDetails, newDetails) {
  // potentially retrieve cached initsegment
  if (newDetails.initSegment && oldDetails.initSegment) {
    newDetails.initSegment = oldDetails.initSegment;
  } // check if old/new playlists have fragments in common
  // loop through overlapping SN and update startPTS , cc, and duration if any found


  var ccOffset = 0;
  var PTSFrag;
  mapFragmentIntersection(oldDetails, newDetails, function (oldFrag, newFrag) {
    ccOffset = oldFrag.cc - newFrag.cc;

    if (Object(number_isFinite["isFiniteNumber"])(oldFrag.startPTS)) {
      newFrag.start = newFrag.startPTS = oldFrag.startPTS;
      newFrag.endPTS = oldFrag.endPTS;
      newFrag.duration = oldFrag.duration;
      newFrag.backtracked = oldFrag.backtracked;
      newFrag.dropped = oldFrag.dropped;
      PTSFrag = newFrag;
    } // PTS is known when there are overlapping segments


    newDetails.PTSKnown = true;
  });

  if (!newDetails.PTSKnown) {
    return;
  }

  if (ccOffset) {
    logger["logger"].log('discontinuity sliding from playlist, take drift into account');
    var newFragments = newDetails.fragments;

    for (var i = 0; i < newFragments.length; i++) {
      newFragments[i].cc += ccOffset;
    }
  } // if at least one fragment contains PTS info, recompute PTS information for all fragments


  if (PTSFrag) {
    updateFragPTSDTS(newDetails, PTSFrag, PTSFrag.startPTS, PTSFrag.endPTS, PTSFrag.startDTS, PTSFrag.endDTS);
  } else {
    // ensure that delta is within oldFragments range
    // also adjust sliding in case delta is 0 (we could have old=[50-60] and new=old=[50-61])
    // in that case we also need to adjust start offset of all fragments
    adjustSliding(oldDetails, newDetails);
  } // if we are here, it means we have fragments overlapping between
  // old and new level. reliable PTS info is thus relying on old level


  newDetails.PTSKnown = oldDetails.PTSKnown;
}
function mergeSubtitlePlaylists(oldPlaylist, newPlaylist, referenceStart) {
  if (referenceStart === void 0) {
    referenceStart = 0;
  }

  var lastIndex = -1;
  mapFragmentIntersection(oldPlaylist, newPlaylist, function (oldFrag, newFrag, index) {
    newFrag.start = oldFrag.start;
    lastIndex = index;
  });
  var frags = newPlaylist.fragments;

  if (lastIndex < 0) {
    frags.forEach(function (frag) {
      frag.start += referenceStart;
    });
    return;
  }

  for (var i = lastIndex + 1; i < frags.length; i++) {
    frags[i].start = frags[i - 1].start + frags[i - 1].duration;
  }
}
function mapFragmentIntersection(oldPlaylist, newPlaylist, intersectionFn) {
  if (!oldPlaylist || !newPlaylist) {
    return;
  }

  var start = Math.max(oldPlaylist.startSN, newPlaylist.startSN) - newPlaylist.startSN;
  var end = Math.min(oldPlaylist.endSN, newPlaylist.endSN) - newPlaylist.startSN;
  var delta = newPlaylist.startSN - oldPlaylist.startSN;

  for (var i = start; i <= end; i++) {
    var oldFrag = oldPlaylist.fragments[delta + i];
    var newFrag = newPlaylist.fragments[i];

    if (!oldFrag || !newFrag) {
      break;
    }

    intersectionFn(oldFrag, newFrag, i);
  }
}
function adjustSliding(oldPlaylist, newPlaylist) {
  var delta = newPlaylist.startSN - oldPlaylist.startSN;
  var oldFragments = oldPlaylist.fragments;
  var newFragments = newPlaylist.fragments;

  if (delta < 0 || delta > oldFragments.length) {
    return;
  }

  for (var i = 0; i < newFragments.length; i++) {
    newFragments[i].start += oldFragments[delta].start;
  }
}
function computeReloadInterval(currentPlaylist, newPlaylist, lastRequestTime) {
  var reloadInterval = 1000 * (newPlaylist.averagetargetduration ? newPlaylist.averagetargetduration : newPlaylist.targetduration);
  var minReloadInterval = reloadInterval / 2;

  if (currentPlaylist && newPlaylist.endSN === currentPlaylist.endSN) {
    // follow HLS Spec, If the client reloads a Playlist file and finds that it has not
    // changed then it MUST wait for a period of one-half the target
    // duration before retrying.
    reloadInterval = minReloadInterval;
  }

  if (lastRequestTime) {
    reloadInterval = Math.max(minReloadInterval, reloadInterval - (window.performance.now() - lastRequestTime));
  } // in any case, don't reload more than half of target duration


  return Math.round(reloadInterval);
}
// CONCATENATED MODULE: ./src/utils/time-ranges.js
/**
 *  TimeRanges to string helper
 */
var TimeRanges = {
  toString: function toString(r) {
    var log = '',
        len = r.length;

    for (var i = 0; i < len; i++) {
      log += '[' + r.start(i).toFixed(3) + ',' + r.end(i).toFixed(3) + ']';
    }

    return log;
  }
};
/* harmony default export */ var time_ranges = (TimeRanges);
// CONCATENATED MODULE: ./src/utils/discontinuities.js



function findFirstFragWithCC(fragments, cc) {
  var firstFrag = null;

  for (var i = 0; i < fragments.length; i += 1) {
    var currentFrag = fragments[i];

    if (currentFrag && currentFrag.cc === cc) {
      firstFrag = currentFrag;
      break;
    }
  }

  return firstFrag;
}
function findFragWithCC(fragments, CC) {
  return binary_search.search(fragments, function (candidate) {
    if (candidate.cc < CC) {
      return 1;
    } else if (candidate.cc > CC) {
      return -1;
    } else {
      return 0;
    }
  });
}
function shouldAlignOnDiscontinuities(lastFrag, lastLevel, details) {
  var shouldAlign = false;

  if (lastLevel && lastLevel.details && details) {
    if (details.endCC > details.startCC || lastFrag && lastFrag.cc < details.startCC) {
      shouldAlign = true;
    }
  }

  return shouldAlign;
} // Find the first frag in the previous level which matches the CC of the first frag of the new level

function findDiscontinuousReferenceFrag(prevDetails, curDetails) {
  var prevFrags = prevDetails.fragments;
  var curFrags = curDetails.fragments;

  if (!curFrags.length || !prevFrags.length) {
    logger["logger"].log('No fragments to align');
    return;
  }

  var prevStartFrag = findFirstFragWithCC(prevFrags, curFrags[0].cc);

  if (!prevStartFrag || prevStartFrag && !prevStartFrag.startPTS) {
    logger["logger"].log('No frag in previous level to align on');
    return;
  }

  return prevStartFrag;
}
function adjustPts(sliding, details) {
  details.fragments.forEach(function (frag) {
    if (frag) {
      var start = frag.start + sliding;
      frag.start = frag.startPTS = start;
      frag.endPTS = start + frag.duration;
    }
  });
  details.PTSKnown = true;
}
/**
 * Using the parameters of the last level, this function computes PTS' of the new fragments so that they form a
 * contiguous stream with the last fragments.
 * The PTS of a fragment lets Hls.js know where it fits into a stream - by knowing every PTS, we know which fragment to
 * download at any given time. PTS is normally computed when the fragment is demuxed, so taking this step saves us time
 * and an extra download.
 * @param lastFrag
 * @param lastLevel
 * @param details
 */

function alignStream(lastFrag, lastLevel, details) {
  alignDiscontinuities(lastFrag, details, lastLevel);

  if (!details.PTSKnown && lastLevel) {
    // If the PTS wasn't figured out via discontinuity sequence that means there was no CC increase within the level.
    // Aligning via Program Date Time should therefore be reliable, since PDT should be the same within the same
    // discontinuity sequence.
    alignPDT(details, lastLevel.details);
  }
}
/**
 * Computes the PTS if a new level's fragments using the PTS of a fragment in the last level which shares the same
 * discontinuity sequence.
 * @param lastLevel - The details of the last loaded level
 * @param details - The details of the new level
 */

function alignDiscontinuities(lastFrag, details, lastLevel) {
  if (shouldAlignOnDiscontinuities(lastFrag, lastLevel, details)) {
    var referenceFrag = findDiscontinuousReferenceFrag(lastLevel.details, details);

    if (referenceFrag) {
      logger["logger"].log('Adjusting PTS using last level due to CC increase within current level');
      adjustPts(referenceFrag.start, details);
    }
  }
}
/**
 * Computes the PTS of a new level's fragments using the difference in Program Date Time from the last level.
 * @param details - The details of the new level
 * @param lastDetails - The details of the last loaded level
 */

function alignPDT(details, lastDetails) {
  if (lastDetails && lastDetails.fragments.length) {
    if (!details.hasProgramDateTime || !lastDetails.hasProgramDateTime) {
      return;
    } // if last level sliding is 1000 and its first frag PROGRAM-DATE-TIME is 2017-08-20 1:10:00 AM
    // and if new details first frag PROGRAM DATE-TIME is 2017-08-20 1:10:08 AM
    // then we can deduce that playlist B sliding is 1000+8 = 1008s


    var lastPDT = lastDetails.fragments[0].programDateTime;
    var newPDT = details.fragments[0].programDateTime; // date diff is in ms. frag.start is in seconds

    var sliding = (newPDT - lastPDT) / 1000 + lastDetails.fragments[0].start;

    if (Object(number_isFinite["isFiniteNumber"])(sliding)) {
      logger["logger"].log("adjusting PTS using programDateTime delta, sliding:" + sliding.toFixed(3));
      adjustPts(sliding, details);
    }
  }
}
// CONCATENATED MODULE: ./src/controller/fragment-finders.js


/**
 * Returns first fragment whose endPdt value exceeds the given PDT.
 * @param {Array<Fragment>} fragments - The array of candidate fragments
 * @param {number|null} [PDTValue = null] - The PDT value which must be exceeded
 * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start/end can be within in order to be considered contiguous
 * @returns {*|null} fragment - The best matching fragment
 */

function findFragmentByPDT(fragments, PDTValue, maxFragLookUpTolerance) {
  if (!Array.isArray(fragments) || !fragments.length || !Object(number_isFinite["isFiniteNumber"])(PDTValue)) {
    return null;
  } // if less than start


  if (PDTValue < fragments[0].programDateTime) {
    return null;
  }

  if (PDTValue >= fragments[fragments.length - 1].endProgramDateTime) {
    return null;
  }

  maxFragLookUpTolerance = maxFragLookUpTolerance || 0;

  for (var seg = 0; seg < fragments.length; ++seg) {
    var frag = fragments[seg];

    if (pdtWithinToleranceTest(PDTValue, maxFragLookUpTolerance, frag)) {
      return frag;
    }
  }

  return null;
}
/**
 * Finds a fragment based on the SN of the previous fragment; or based on the needs of the current buffer.
 * This method compensates for small buffer gaps by applying a tolerance to the start of any candidate fragment, thus
 * breaking any traps which would cause the same fragment to be continuously selected within a small range.
 * @param {*} fragPrevious - The last frag successfully appended
 * @param {Array<Fragment>} fragments - The array of candidate fragments
 * @param {number} [bufferEnd = 0] - The end of the contiguous buffered range the playhead is currently within
 * @param {number} maxFragLookUpTolerance - The amount of time that a fragment's start/end can be within in order to be considered contiguous
 * @returns {*} foundFrag - The best matching fragment
 */

function findFragmentByPTS(fragPrevious, fragments, bufferEnd, maxFragLookUpTolerance) {
  if (bufferEnd === void 0) {
    bufferEnd = 0;
  }

  if (maxFragLookUpTolerance === void 0) {
    maxFragLookUpTolerance = 0;
  }

  var fragNext = fragPrevious ? fragments[fragPrevious.sn - fragments[0].sn + 1] : null; // Prefer the next fragment if it's within tolerance

  if (fragNext && !fragment_finders_fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, fragNext)) {
    return fragNext;
  }

  return binary_search.search(fragments, fragment_finders_fragmentWithinToleranceTest.bind(null, bufferEnd, maxFragLookUpTolerance));
}
/**
 * The test function used by the findFragmentBySn's BinarySearch to look for the best match to the current buffer conditions.
 * @param {*} candidate - The fragment to test
 * @param {number} [bufferEnd = 0] - The end of the current buffered range the playhead is currently within
 * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start can be within in order to be considered contiguous
 * @returns {number} - 0 if it matches, 1 if too low, -1 if too high
 */

function fragment_finders_fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, candidate) {
  if (bufferEnd === void 0) {
    bufferEnd = 0;
  }

  if (maxFragLookUpTolerance === void 0) {
    maxFragLookUpTolerance = 0;
  }

  // offset should be within fragment boundary - config.maxFragLookUpTolerance
  // this is to cope with situations like
  // bufferEnd = 9.991
  // frag[Ø] : [0,10]
  // frag[1] : [10,20]
  // bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here
  //              frag start               frag start+duration
  //                  |-----------------------------|
  //              <--->                         <--->
  //  ...--------><-----------------------------><---------....
  // previous frag         matching fragment         next frag
  //  return -1             return 0                 return 1
  // logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);
  // Set the lookup tolerance to be small enough to detect the current segment - ensures we don't skip over very small segments
  var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0));

  if (candidate.start + candidate.duration - candidateLookupTolerance <= bufferEnd) {
    return 1;
  } else if (candidate.start - candidateLookupTolerance > bufferEnd && candidate.start) {
    // if maxFragLookUpTolerance will have negative value then don't return -1 for first element
    return -1;
  }

  return 0;
}
/**
 * The test function used by the findFragmentByPdt's BinarySearch to look for the best match to the current buffer conditions.
 * This function tests the candidate's program date time values, as represented in Unix time
 * @param {*} candidate - The fragment to test
 * @param {number} [pdtBufferEnd = 0] - The Unix time representing the end of the current buffered range
 * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start can be within in order to be considered contiguous
 * @returns {boolean} True if contiguous, false otherwise
 */

function pdtWithinToleranceTest(pdtBufferEnd, maxFragLookUpTolerance, candidate) {
  var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0)) * 1000;
  return candidate.endProgramDateTime - candidateLookupTolerance > pdtBufferEnd;
}
// CONCATENATED MODULE: ./src/controller/gap-controller.js




var stallDebounceInterval = 1000;
var jumpThreshold = 0.5; // tolerance needed as some browsers stalls playback before reaching buffered range end

var gap_controller_GapController =
/*#__PURE__*/
function () {
  function GapController(config, media, fragmentTracker, hls) {
    this.config = config;
    this.media = media;
    this.fragmentTracker = fragmentTracker;
    this.hls = hls;
    this.stallReported = false;
  }
  /**
   * Checks if the playhead is stuck within a gap, and if so, attempts to free it.
   * A gap is an unbuffered range between two buffered ranges (or the start and the first buffered range).
   * @param lastCurrentTime
   * @param buffered
   */


  var _proto = GapController.prototype;

  _proto.poll = function poll(lastCurrentTime, buffered) {
    var config = this.config,
        media = this.media;
    var currentTime = media.currentTime;
    var tnow = window.performance.now();

    if (currentTime !== lastCurrentTime) {
      // The playhead is now moving, but was previously stalled
      if (this.stallReported) {
        logger["logger"].warn("playback not stuck anymore @" + currentTime + ", after " + Math.round(tnow - this.stalled) + "ms");
        this.stallReported = false;
      }

      this.stalled = null;
      this.nudgeRetry = 0;
      return;
    }

    if (media.ended || !media.buffered.length || media.readyState > 2) {
      return;
    }

    if (media.seeking && BufferHelper.isBuffered(media, currentTime)) {
      return;
    } // The playhead isn't moving but it should be
    // Allow some slack time to for small stalls to resolve themselves


    var stalledDuration = tnow - this.stalled;
    var bufferInfo = BufferHelper.bufferInfo(media, currentTime, config.maxBufferHole);

    if (!this.stalled) {
      this.stalled = tnow;
      return;
    } else if (stalledDuration >= stallDebounceInterval) {
      // Report stalling after trying to fix
      this._reportStall(bufferInfo.len);
    }

    this._tryFixBufferStall(bufferInfo, stalledDuration);
  };
  /**
   * Detects and attempts to fix known buffer stalling issues.
   * @param bufferInfo - The properties of the current buffer.
   * @param stalledDuration - The amount of time Hls.js has been stalling for.
   * @private
   */


  _proto._tryFixBufferStall = function _tryFixBufferStall(bufferInfo, stalledDuration) {
    var config = this.config,
        fragmentTracker = this.fragmentTracker,
        media = this.media;
    var currentTime = media.currentTime;
    var partial = fragmentTracker.getPartialFragment(currentTime);

    if (partial) {
      // Try to skip over the buffer hole caused by a partial fragment
      // This method isn't limited by the size of the gap between buffered ranges
      this._trySkipBufferHole(partial);
    }

    if (bufferInfo.len > jumpThreshold && stalledDuration > config.highBufferWatchdogPeriod * 1000) {
      // Try to nudge currentTime over a buffer hole if we've been stalling for the configured amount of seconds
      // We only try to jump the hole if it's under the configured size
      // Reset stalled so to rearm watchdog timer
      this.stalled = null;

      this._tryNudgeBuffer();
    }
  };
  /**
   * Triggers a BUFFER_STALLED_ERROR event, but only once per stall period.
   * @param bufferLen - The playhead distance from the end of the current buffer segment.
   * @private
   */


  _proto._reportStall = function _reportStall(bufferLen) {
    var hls = this.hls,
        media = this.media,
        stallReported = this.stallReported;

    if (!stallReported) {
      // Report stalled error once
      this.stallReported = true;
      logger["logger"].warn("Playback stalling at @" + media.currentTime + " due to low buffer");
      hls.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].MEDIA_ERROR,
        details: errors["ErrorDetails"].BUFFER_STALLED_ERROR,
        fatal: false,
        buffer: bufferLen
      });
    }
  };
  /**
   * Attempts to fix buffer stalls by jumping over known gaps caused by partial fragments
   * @param partial - The partial fragment found at the current time (where playback is stalling).
   * @private
   */


  _proto._trySkipBufferHole = function _trySkipBufferHole(partial) {
    var hls = this.hls,
        media = this.media;
    var currentTime = media.currentTime;
    var lastEndTime = 0; // Check if currentTime is between unbuffered regions of partial fragments

    for (var i = 0; i < media.buffered.length; i++) {
      var startTime = media.buffered.start(i);

      if (currentTime >= lastEndTime && currentTime < startTime) {
        media.currentTime = Math.max(startTime, media.currentTime + 0.1);
        logger["logger"].warn("skipping hole, adjusting currentTime from " + currentTime + " to " + media.currentTime);
        this.stalled = null;
        hls.trigger(events["default"].ERROR, {
          type: errors["ErrorTypes"].MEDIA_ERROR,
          details: errors["ErrorDetails"].BUFFER_SEEK_OVER_HOLE,
          fatal: false,
          reason: "fragment loaded with buffer holes, seeking from " + currentTime + " to " + media.currentTime,
          frag: partial
        });
        return;
      }

      lastEndTime = media.buffered.end(i);
    }
  };
  /**
   * Attempts to fix buffer stalls by advancing the mediaElement's current time by a small amount.
   * @private
   */


  _proto._tryNudgeBuffer = function _tryNudgeBuffer() {
    var config = this.config,
        hls = this.hls,
        media = this.media;
    var currentTime = media.currentTime;
    var nudgeRetry = (this.nudgeRetry || 0) + 1;
    this.nudgeRetry = nudgeRetry;

    if (nudgeRetry < config.nudgeMaxRetry) {
      var targetTime = currentTime + nudgeRetry * config.nudgeOffset;
      logger["logger"].log("adjust currentTime from " + currentTime + " to " + targetTime); // playback stalled in buffered area ... let's nudge currentTime to try to overcome this

      media.currentTime = targetTime;
      hls.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].MEDIA_ERROR,
        details: errors["ErrorDetails"].BUFFER_NUDGE_ON_STALL,
        fatal: false
      });
    } else {
      logger["logger"].error("still stuck in high buffer @" + currentTime + " after " + config.nudgeMaxRetry + ", raise fatal error");
      hls.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].MEDIA_ERROR,
        details: errors["ErrorDetails"].BUFFER_STALLED_ERROR,
        fatal: true
      });
    }
  };

  return GapController;
}();


// CONCATENATED MODULE: ./src/task-loop.js
function task_loop_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }


/**
 * Sub-class specialization of EventHandler base class.
 *
 * TaskLoop allows to schedule a task function being called (optionnaly repeatedly) on the main loop,
 * scheduled asynchroneously, avoiding recursive calls in the same tick.
 *
 * The task itself is implemented in `doTick`. It can be requested and called for single execution
 * using the `tick` method.
 *
 * It will be assured that the task execution method (`tick`) only gets called once per main loop "tick",
 * no matter how often it gets requested for execution. Execution in further ticks will be scheduled accordingly.
 *
 * If further execution requests have already been scheduled on the next tick, it can be checked with `hasNextTick`,
 * and cancelled with `clearNextTick`.
 *
 * The task can be scheduled as an interval repeatedly with a period as parameter (see `setInterval`, `clearInterval`).
 *
 * Sub-classes need to implement the `doTick` method which will effectively have the task execution routine.
 *
 * Further explanations:
 *
 * The baseclass has a `tick` method that will schedule the doTick call. It may be called synchroneously
 * only for a stack-depth of one. On re-entrant calls, sub-sequent calls are scheduled for next main loop ticks.
 *
 * When the task execution (`tick` method) is called in re-entrant way this is detected and
 * we are limiting the task execution per call stack to exactly one, but scheduling/post-poning further
 * task processing on the next main loop iteration (also known as "next tick" in the Node/JS runtime lingo).
 */

var TaskLoop =
/*#__PURE__*/
function (_EventHandler) {
  task_loop_inheritsLoose(TaskLoop, _EventHandler);

  function TaskLoop(hls) {
    var _this;

    for (var _len = arguments.length, events = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      events[_key - 1] = arguments[_key];
    }

    _this = _EventHandler.call.apply(_EventHandler, [this, hls].concat(events)) || this;
    _this._tickInterval = null;
    _this._tickTimer = null;
    _this._tickCallCount = 0;
    _this._boundTick = _this.tick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * @override
   */


  var _proto = TaskLoop.prototype;

  _proto.onHandlerDestroying = function onHandlerDestroying() {
    // clear all timers before unregistering from event bus
    this.clearNextTick();
    this.clearInterval();
  };
  /**
   * @returns {boolean}
   */


  _proto.hasInterval = function hasInterval() {
    return !!this._tickInterval;
  };
  /**
   * @returns {boolean}
   */


  _proto.hasNextTick = function hasNextTick() {
    return !!this._tickTimer;
  };
  /**
   * @param {number} millis Interval time (ms)
   * @returns {boolean} True when interval has been scheduled, false when already scheduled (no effect)
   */


  _proto.setInterval = function (_setInterval) {
    function setInterval(_x) {
      return _setInterval.apply(this, arguments);
    }

    setInterval.toString = function () {
      return _setInterval.toString();
    };

    return setInterval;
  }(function (millis) {
    if (!this._tickInterval) {
      this._tickInterval = setInterval(this._boundTick, millis);
      return true;
    }

    return false;
  });
  /**
   * @returns {boolean} True when interval was cleared, false when none was set (no effect)
   */


  _proto.clearInterval = function (_clearInterval) {
    function clearInterval() {
      return _clearInterval.apply(this, arguments);
    }

    clearInterval.toString = function () {
      return _clearInterval.toString();
    };

    return clearInterval;
  }(function () {
    if (this._tickInterval) {
      clearInterval(this._tickInterval);
      this._tickInterval = null;
      return true;
    }

    return false;
  });
  /**
   * @returns {boolean} True when timeout was cleared, false when none was set (no effect)
   */


  _proto.clearNextTick = function clearNextTick() {
    if (this._tickTimer) {
      clearTimeout(this._tickTimer);
      this._tickTimer = null;
      return true;
    }

    return false;
  };
  /**
   * Will call the subclass doTick implementation in this main loop tick
   * or in the next one (via setTimeout(,0)) in case it has already been called
   * in this tick (in case this is a re-entrant call).
   */


  _proto.tick = function tick() {
    this._tickCallCount++;

    if (this._tickCallCount === 1) {
      this.doTick(); // re-entrant call to tick from previous doTick call stack
      // -> schedule a call on the next main loop iteration to process this task processing request

      if (this._tickCallCount > 1) {
        // make sure only one timer exists at any time at max
        this.clearNextTick();
        this._tickTimer = setTimeout(this._boundTick, 0);
      }

      this._tickCallCount = 0;
    }
  };
  /**
   * For subclass to implement task logic
   * @abstract
   */


  _proto.doTick = function doTick() {};

  return TaskLoop;
}(event_handler);


// CONCATENATED MODULE: ./src/controller/base-stream-controller.js


function base_stream_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }





var State = {
  STOPPED: 'STOPPED',
  STARTING: 'STARTING',
  IDLE: 'IDLE',
  PAUSED: 'PAUSED',
  KEY_LOADING: 'KEY_LOADING',
  FRAG_LOADING: 'FRAG_LOADING',
  FRAG_LOADING_WAITING_RETRY: 'FRAG_LOADING_WAITING_RETRY',
  WAITING_TRACK: 'WAITING_TRACK',
  PARSING: 'PARSING',
  PARSED: 'PARSED',
  BUFFER_FLUSHING: 'BUFFER_FLUSHING',
  ENDED: 'ENDED',
  ERROR: 'ERROR',
  WAITING_INIT_PTS: 'WAITING_INIT_PTS',
  WAITING_LEVEL: 'WAITING_LEVEL'
};

var base_stream_controller_BaseStreamController =
/*#__PURE__*/
function (_TaskLoop) {
  base_stream_controller_inheritsLoose(BaseStreamController, _TaskLoop);

  function BaseStreamController() {
    return _TaskLoop.apply(this, arguments) || this;
  }

  var _proto = BaseStreamController.prototype;

  _proto.doTick = function doTick() {};

  _proto.startLoad = function startLoad() {};

  _proto.stopLoad = function stopLoad() {
    var frag = this.fragCurrent;

    if (frag) {
      if (frag.loader) {
        frag.loader.abort();
      }

      this.fragmentTracker.removeFragment(frag);
    }

    if (this.demuxer) {
      this.demuxer.destroy();
      this.demuxer = null;
    }

    this.fragCurrent = null;
    this.fragPrevious = null;
    this.clearInterval();
    this.clearNextTick();
    this.state = State.STOPPED;
  };

  _proto._streamEnded = function _streamEnded(bufferInfo, levelDetails) {
    var fragCurrent = this.fragCurrent,
        fragmentTracker = this.fragmentTracker; // we just got done loading the final fragment and there is no other buffered range after ...
    // rationale is that in case there are any buffered ranges after, it means that there are unbuffered portion in between
    // so we should not switch to ENDED in that case, to be able to buffer them
    // dont switch to ENDED if we need to backtrack last fragment

    if (!levelDetails.live && fragCurrent && !fragCurrent.backtracked && fragCurrent.sn === levelDetails.endSN && !bufferInfo.nextStart) {
      var fragState = fragmentTracker.getState(fragCurrent);
      return fragState === FragmentState.PARTIAL || fragState === FragmentState.OK;
    }

    return false;
  };

  _proto.onMediaSeeking = function onMediaSeeking() {
    var config = this.config,
        media = this.media,
        mediaBuffer = this.mediaBuffer,
        state = this.state;
    var currentTime = media ? media.currentTime : null;
    var bufferInfo = BufferHelper.bufferInfo(mediaBuffer || media, currentTime, this.config.maxBufferHole);

    if (Object(number_isFinite["isFiniteNumber"])(currentTime)) {
      logger["logger"].log("media seeking to " + currentTime.toFixed(3));
    }

    if (state === State.FRAG_LOADING) {
      var fragCurrent = this.fragCurrent; // check if we are seeking to a unbuffered area AND if frag loading is in progress

      if (bufferInfo.len === 0 && fragCurrent) {
        var tolerance = config.maxFragLookUpTolerance;
        var fragStartOffset = fragCurrent.start - tolerance;
        var fragEndOffset = fragCurrent.start + fragCurrent.duration + tolerance; // check if we seek position will be out of currently loaded frag range : if out cancel frag load, if in, don't do anything

        if (currentTime < fragStartOffset || currentTime > fragEndOffset) {
          if (fragCurrent.loader) {
            logger["logger"].log('seeking outside of buffer while fragment load in progress, cancel fragment load');
            fragCurrent.loader.abort();
          }

          this.fragCurrent = null;
          this.fragPrevious = null; // switch to IDLE state to load new fragment

          this.state = State.IDLE;
        } else {
          logger["logger"].log('seeking outside of buffer but within currently loaded fragment range');
        }
      }
    } else if (state === State.ENDED) {
      // if seeking to unbuffered area, clean up fragPrevious
      if (bufferInfo.len === 0) {
        this.fragPrevious = null;
        this.fragCurrent = null;
      } // switch to IDLE state to check for potential new fragment


      this.state = State.IDLE;
    }

    if (media) {
      this.lastCurrentTime = currentTime;
    } // in case seeking occurs although no media buffered, adjust startPosition and nextLoadPosition to seek target


    if (!this.loadedmetadata) {
      this.nextLoadPosition = this.startPosition = currentTime;
    } // tick to speed up processing


    this.tick();
  };

  _proto.onMediaEnded = function onMediaEnded() {
    // reset startPosition and lastCurrentTime to restart playback @ stream beginning
    this.startPosition = this.lastCurrentTime = 0;
  };

  _proto.onHandlerDestroying = function onHandlerDestroying() {
    this.stopLoad();

    _TaskLoop.prototype.onHandlerDestroying.call(this);
  };

  _proto.onHandlerDestroyed = function onHandlerDestroyed() {
    this.state = State.STOPPED;
    this.fragmentTracker = null;
  };

  return BaseStreamController;
}(TaskLoop);


// CONCATENATED MODULE: ./src/controller/stream-controller.js






function stream_controller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function stream_controller_createClass(Constructor, protoProps, staticProps) { if (protoProps) stream_controller_defineProperties(Constructor.prototype, protoProps); if (staticProps) stream_controller_defineProperties(Constructor, staticProps); return Constructor; }

function stream_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/*
 * Stream Controller
*/















var TICK_INTERVAL = 100; // how often to tick in ms

var stream_controller_StreamController =
/*#__PURE__*/
function (_BaseStreamController) {
  stream_controller_inheritsLoose(StreamController, _BaseStreamController);

  function StreamController(hls, fragmentTracker) {
    var _this;

    _this = _BaseStreamController.call(this, hls, events["default"].MEDIA_ATTACHED, events["default"].MEDIA_DETACHING, events["default"].MANIFEST_LOADING, events["default"].MANIFEST_PARSED, events["default"].LEVEL_LOADED, events["default"].KEY_LOADED, events["default"].FRAG_LOADED, events["default"].FRAG_LOAD_EMERGENCY_ABORTED, events["default"].FRAG_PARSING_INIT_SEGMENT, events["default"].FRAG_PARSING_DATA, events["default"].FRAG_PARSED, events["default"].ERROR, events["default"].AUDIO_TRACK_SWITCHING, events["default"].AUDIO_TRACK_SWITCHED, events["default"].BUFFER_CREATED, events["default"].BUFFER_APPENDED, events["default"].BUFFER_FLUSHED) || this;
    _this.fragmentTracker = fragmentTracker;
    _this.config = hls.config;
    _this.audioCodecSwap = false;
    _this._state = State.STOPPED;
    _this.stallReported = false;
    _this.gapController = null;
    return _this;
  }

  var _proto = StreamController.prototype;

  _proto.startLoad = function startLoad(startPosition) {
    if (this.levels) {
      var lastCurrentTime = this.lastCurrentTime,
          hls = this.hls;
      this.stopLoad();
      this.setInterval(TICK_INTERVAL);
      this.level = -1;
      this.fragLoadError = 0;

      if (!this.startFragRequested) {
        // determine load level
        var startLevel = hls.startLevel;

        if (startLevel === -1) {
          // -1 : guess start Level by doing a bitrate test by loading first fragment of lowest quality level
          startLevel = 0;
          this.bitrateTest = true;
        } // set new level to playlist loader : this will trigger start level load
        // hls.nextLoadLevel remains until it is set to a new value or until a new frag is successfully loaded


        this.level = hls.nextLoadLevel = startLevel;
        this.loadedmetadata = false;
      } // if startPosition undefined but lastCurrentTime set, set startPosition to last currentTime


      if (lastCurrentTime > 0 && startPosition === -1) {
        logger["logger"].log("override startPosition with lastCurrentTime @" + lastCurrentTime.toFixed(3));
        startPosition = lastCurrentTime;
      }

      this.state = State.IDLE;
      this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;
      this.tick();
    } else {
      this.forceStartLoad = true;
      this.state = State.STOPPED;
    }
  };

  _proto.stopLoad = function stopLoad() {
    this.forceStartLoad = false;

    _BaseStreamController.prototype.stopLoad.call(this);
  };

  _proto.doTick = function doTick() {
    switch (this.state) {
      case State.BUFFER_FLUSHING:
        // in buffer flushing state, reset fragLoadError counter
        this.fragLoadError = 0;
        break;

      case State.IDLE:
        this._doTickIdle();

        break;

      case State.WAITING_LEVEL:
        var level = this.levels[this.level]; // check if playlist is already loaded

        if (level && level.details) {
          this.state = State.IDLE;
        }

        break;

      case State.FRAG_LOADING_WAITING_RETRY:
        var now = window.performance.now();
        var retryDate = this.retryDate; // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading

        if (!retryDate || now >= retryDate || this.media && this.media.seeking) {
          logger["logger"].log('mediaController: retryDate reached, switch back to IDLE state');
          this.state = State.IDLE;
        }

        break;

      case State.ERROR:
      case State.STOPPED:
      case State.FRAG_LOADING:
      case State.PARSING:
      case State.PARSED:
      case State.ENDED:
        break;

      default:
        break;
    } // check buffer


    this._checkBuffer(); // check/update current fragment


    this._checkFragmentChanged();
  }; // Ironically the "idle" state is the on we do the most logic in it seems ....
  // NOTE: Maybe we could rather schedule a check for buffer length after half of the currently
  //       played segment, or on pause/play/seek instead of naively checking every 100ms?


  _proto._doTickIdle = function _doTickIdle() {
    var hls = this.hls,
        config = hls.config,
        media = this.media; // if start level not parsed yet OR
    // if video not attached AND start fragment already requested OR start frag prefetch disable
    // exit loop, as we either need more info (level not parsed) or we need media to be attached to load new fragment

    if (this.levelLastLoaded === undefined || !media && (this.startFragRequested || !config.startFragPrefetch)) {
      return;
    } // if we have not yet loaded any fragment, start loading from start position


    var pos;

    if (this.loadedmetadata) {
      pos = media.currentTime;
    } else {
      pos = this.nextLoadPosition;
    } // determine next load level


    var level = hls.nextLoadLevel,
        levelInfo = this.levels[level];

    if (!levelInfo) {
      return;
    }

    var levelBitrate = levelInfo.bitrate,
        maxBufLen; // compute max Buffer Length that we could get from this load level, based on level bitrate.

    if (levelBitrate) {
      maxBufLen = Math.max(8 * config.maxBufferSize / levelBitrate, config.maxBufferLength);
    } else {
      maxBufLen = config.maxBufferLength;
    }

    maxBufLen = Math.min(maxBufLen, config.maxMaxBufferLength); // determine next candidate fragment to be loaded, based on current position and end of buffer position
    // ensure up to `config.maxMaxBufferLength` of buffer upfront

    var bufferInfo = BufferHelper.bufferInfo(this.mediaBuffer ? this.mediaBuffer : media, pos, config.maxBufferHole),
        bufferLen = bufferInfo.len; // Stay idle if we are still with buffer margins

    if (bufferLen >= maxBufLen) {
      return;
    } // if buffer length is less than maxBufLen try to load a new fragment ...


    logger["logger"].trace("buffer length of " + bufferLen.toFixed(3) + " is below max of " + maxBufLen.toFixed(3) + ". checking for more payload ..."); // set next load level : this will trigger a playlist load if needed

    this.level = hls.nextLoadLevel = level;
    var levelDetails = levelInfo.details; // if level info not retrieved yet, switch state and wait for level retrieval
    // if live playlist, ensure that new playlist has been refreshed to avoid loading/try to load
    // a useless and outdated fragment (that might even introduce load error if it is already out of the live playlist)

    if (!levelDetails || levelDetails.live && this.levelLastLoaded !== level) {
      this.state = State.WAITING_LEVEL;
      return;
    }

    if (this._streamEnded(bufferInfo, levelDetails)) {
      var data = {};

      if (this.altAudio) {
        data.type = 'video';
      }

      this.hls.trigger(events["default"].BUFFER_EOS, data);
      this.state = State.ENDED;
      return;
    } // if we have the levelDetails for the selected variant, lets continue enrichen our stream (load keys/fragments or trigger EOS, etc..)


    this._fetchPayloadOrEos(pos, bufferInfo, levelDetails);
  };

  _proto._fetchPayloadOrEos = function _fetchPayloadOrEos(pos, bufferInfo, levelDetails) {
    var fragPrevious = this.fragPrevious,
        level = this.level,
        fragments = levelDetails.fragments,
        fragLen = fragments.length; // empty playlist

    if (fragLen === 0) {
      return;
    } // find fragment index, contiguous with end of buffer position


    var start = fragments[0].start,
        end = fragments[fragLen - 1].start + fragments[fragLen - 1].duration,
        bufferEnd = bufferInfo.end,
        frag;

    if (levelDetails.initSegment && !levelDetails.initSegment.data) {
      frag = levelDetails.initSegment;
    } else {
      // in case of live playlist we need to ensure that requested position is not located before playlist start
      if (levelDetails.live) {
        var initialLiveManifestSize = this.config.initialLiveManifestSize;

        if (fragLen < initialLiveManifestSize) {
          logger["logger"].warn("Can not start playback of a level, reason: not enough fragments " + fragLen + " < " + initialLiveManifestSize);
          return;
        }

        frag = this._ensureFragmentAtLivePoint(levelDetails, bufferEnd, start, end, fragPrevious, fragments, fragLen); // if it explicitely returns null don't load any fragment and exit function now

        if (frag === null) {
          return;
        }
      } else {
        // VoD playlist: if bufferEnd before start of playlist, load first fragment
        if (bufferEnd < start) {
          frag = fragments[0];
        }
      }
    }

    if (!frag) {
      frag = this._findFragment(start, fragPrevious, fragLen, fragments, bufferEnd, end, levelDetails);
    }

    if (frag) {
      if (frag.encrypted) {
        logger["logger"].log("Loading key for " + frag.sn + " of [" + levelDetails.startSN + " ," + levelDetails.endSN + "],level " + level);

        this._loadKey(frag);
      } else {
        logger["logger"].log("Loading " + frag.sn + " of [" + levelDetails.startSN + " ," + levelDetails.endSN + "],level " + level + ", currentTime:" + pos.toFixed(3) + ",bufferEnd:" + bufferEnd.toFixed(3));

        this._loadFragment(frag);
      }
    }
  };

  _proto._ensureFragmentAtLivePoint = function _ensureFragmentAtLivePoint(levelDetails, bufferEnd, start, end, fragPrevious, fragments, fragLen) {
    var config = this.hls.config,
        media = this.media;
    var frag; // check if requested position is within seekable boundaries :
    // logger.log(`start/pos/bufEnd/seeking:${start.toFixed(3)}/${pos.toFixed(3)}/${bufferEnd.toFixed(3)}/${this.media.seeking}`);

    var maxLatency = config.liveMaxLatencyDuration !== undefined ? config.liveMaxLatencyDuration : config.liveMaxLatencyDurationCount * levelDetails.targetduration;

    if (bufferEnd < Math.max(start - config.maxFragLookUpTolerance, end - maxLatency)) {
      var liveSyncPosition = this.liveSyncPosition = this.computeLivePosition(start, levelDetails);
      logger["logger"].log("buffer end: " + bufferEnd.toFixed(3) + " is located too far from the end of live sliding playlist, reset currentTime to : " + liveSyncPosition.toFixed(3));
      bufferEnd = liveSyncPosition;

      if (media && media.readyState && media.duration > liveSyncPosition) {
        media.currentTime = liveSyncPosition;
      }

      this.nextLoadPosition = liveSyncPosition;
    } // if end of buffer greater than live edge, don't load any fragment
    // this could happen if live playlist intermittently slides in the past.
    // level 1 loaded [182580161,182580167]
    // level 1 loaded [182580162,182580169]
    // Loading 182580168 of [182580162 ,182580169],level 1 ..
    // Loading 182580169 of [182580162 ,182580169],level 1 ..
    // level 1 loaded [182580162,182580168] <============= here we should have bufferEnd > end. in that case break to avoid reloading 182580168
    // level 1 loaded [182580164,182580171]
    //
    // don't return null in case media not loaded yet (readystate === 0)


    if (levelDetails.PTSKnown && bufferEnd > end && media && media.readyState) {
      return null;
    }

    if (this.startFragRequested && !levelDetails.PTSKnown) {
      /* we are switching level on live playlist, but we don't have any PTS info for that quality level ...
         try to load frag matching with next SN.
         even if SN are not synchronized between playlists, loading this frag will help us
         compute playlist sliding and find the right one after in case it was not the right consecutive one */
      if (fragPrevious) {
        if (levelDetails.hasProgramDateTime) {
          // Relies on PDT in order to switch bitrates (Support EXT-X-DISCONTINUITY without EXT-X-DISCONTINUITY-SEQUENCE)
          logger["logger"].log("live playlist, switching playlist, load frag with same PDT: " + fragPrevious.programDateTime);
          frag = findFragmentByPDT(fragments, fragPrevious.endProgramDateTime, config.maxFragLookUpTolerance);
        } else {
          // Uses buffer and sequence number to calculate switch segment (required if using EXT-X-DISCONTINUITY-SEQUENCE)
          var targetSN = fragPrevious.sn + 1;

          if (targetSN >= levelDetails.startSN && targetSN <= levelDetails.endSN) {
            var fragNext = fragments[targetSN - levelDetails.startSN];

            if (fragPrevious.cc === fragNext.cc) {
              frag = fragNext;
              logger["logger"].log("live playlist, switching playlist, load frag with next SN: " + frag.sn);
            }
          } // next frag SN not available (or not with same continuity counter)
          // look for a frag sharing the same CC


          if (!frag) {
            frag = binary_search.search(fragments, function (frag) {
              return fragPrevious.cc - frag.cc;
            });

            if (frag) {
              logger["logger"].log("live playlist, switching playlist, load frag with same CC: " + frag.sn);
            }
          }
        }
      }

      if (!frag) {
        /* we have no idea about which fragment should be loaded.
           so let's load mid fragment. it will help computing playlist sliding and find the right one
        */
        frag = fragments[Math.min(fragLen - 1, Math.round(fragLen / 2))];
        logger["logger"].log("live playlist, switching playlist, unknown, load middle frag : " + frag.sn);
      }
    }

    return frag;
  };

  _proto._findFragment = function _findFragment(start, fragPrevious, fragLen, fragments, bufferEnd, end, levelDetails) {
    var config = this.hls.config;
    var frag;

    if (bufferEnd < end) {
      var lookupTolerance = bufferEnd > end - config.maxFragLookUpTolerance ? 0 : config.maxFragLookUpTolerance; // Remove the tolerance if it would put the bufferEnd past the actual end of stream
      // Uses buffer and sequence number to calculate switch segment (required if using EXT-X-DISCONTINUITY-SEQUENCE)

      frag = findFragmentByPTS(fragPrevious, fragments, bufferEnd, lookupTolerance);
    } else {
      // reach end of playlist
      frag = fragments[fragLen - 1];
    }

    if (frag) {
      var curSNIdx = frag.sn - levelDetails.startSN;
      var sameLevel = fragPrevious && frag.level === fragPrevious.level;
      var prevFrag = fragments[curSNIdx - 1];
      var nextFrag = fragments[curSNIdx + 1]; // logger.log('find SN matching with pos:' +  bufferEnd + ':' + frag.sn);

      if (fragPrevious && frag.sn === fragPrevious.sn) {
        if (sameLevel && !frag.backtracked) {
          if (frag.sn < levelDetails.endSN) {
            var deltaPTS = fragPrevious.deltaPTS; // if there is a significant delta between audio and video, larger than max allowed hole,
            // and if previous remuxed fragment did not start with a keyframe. (fragPrevious.dropped)
            // let's try to load previous fragment again to get last keyframe
            // then we will reload again current fragment (that way we should be able to fill the buffer hole ...)

            if (deltaPTS && deltaPTS > config.maxBufferHole && fragPrevious.dropped && curSNIdx) {
              frag = prevFrag;
              logger["logger"].warn('SN just loaded, with large PTS gap between audio and video, maybe frag is not starting with a keyframe ? load previous one to try to overcome this');
            } else {
              frag = nextFrag;
              logger["logger"].log("SN just loaded, load next one: " + frag.sn, frag);
            }
          } else {
            frag = null;
          }
        } else if (frag.backtracked) {
          // Only backtrack a max of 1 consecutive fragment to prevent sliding back too far when little or no frags start with keyframes
          if (nextFrag && nextFrag.backtracked) {
            logger["logger"].warn("Already backtracked from fragment " + nextFrag.sn + ", will not backtrack to fragment " + frag.sn + ". Loading fragment " + nextFrag.sn);
            frag = nextFrag;
          } else {
            // If a fragment has dropped frames and it's in a same level/sequence, load the previous fragment to try and find the keyframe
            // Reset the dropped count now since it won't be reset until we parse the fragment again, which prevents infinite backtracking on the same segment
            logger["logger"].warn('Loaded fragment with dropped frames, backtracking 1 segment to find a keyframe');
            frag.dropped = 0;

            if (prevFrag) {
              frag = prevFrag;
              frag.backtracked = true;
            } else if (curSNIdx) {
              // can't backtrack on very first fragment
              frag = null;
            }
          }
        }
      }
    }

    return frag;
  };

  _proto._loadKey = function _loadKey(frag) {
    this.state = State.KEY_LOADING;
    this.hls.trigger(events["default"].KEY_LOADING, {
      frag: frag
    });
  };

  _proto._loadFragment = function _loadFragment(frag) {
    // Check if fragment is not loaded
    var fragState = this.fragmentTracker.getState(frag);
    this.fragCurrent = frag;

    if (frag.sn !== 'initSegment') {
      this.startFragRequested = true;
    } // Don't update nextLoadPosition for fragments which are not buffered


    if (Object(number_isFinite["isFiniteNumber"])(frag.sn) && !frag.bitrateTest) {
      this.nextLoadPosition = frag.start + frag.duration;
    } // Allow backtracked fragments to load


    if (frag.backtracked || fragState === FragmentState.NOT_LOADED || fragState === FragmentState.PARTIAL) {
      frag.autoLevel = this.hls.autoLevelEnabled;
      frag.bitrateTest = this.bitrateTest;
      this.hls.trigger(events["default"].FRAG_LOADING, {
        frag: frag
      }); // lazy demuxer init, as this could take some time ... do it during frag loading

      if (!this.demuxer) {
        this.demuxer = new demux_demuxer(this.hls, 'main');
      }

      this.state = State.FRAG_LOADING;
    } else if (fragState === FragmentState.APPENDING) {
      // Lower the buffer size and try again
      if (this._reduceMaxBufferLength(frag.duration)) {
        this.fragmentTracker.removeFragment(frag);
      }
    }
  };

  _proto.getBufferedFrag = function getBufferedFrag(position) {
    return this.fragmentTracker.getBufferedFrag(position, PlaylistLevelType.MAIN);
  };

  _proto.followingBufferedFrag = function followingBufferedFrag(frag) {
    if (frag) {
      // try to get range of next fragment (500ms after this range)
      return this.getBufferedFrag(frag.endPTS + 0.5);
    }

    return null;
  };

  _proto._checkFragmentChanged = function _checkFragmentChanged() {
    var fragPlayingCurrent,
        currentTime,
        video = this.media;

    if (video && video.readyState && video.seeking === false) {
      currentTime = video.currentTime;
      /* if video element is in seeked state, currentTime can only increase.
        (assuming that playback rate is positive ...)
        As sometimes currentTime jumps back to zero after a
        media decode error, check this, to avoid seeking back to
        wrong position after a media decode error
      */

      if (currentTime > this.lastCurrentTime) {
        this.lastCurrentTime = currentTime;
      }

      if (BufferHelper.isBuffered(video, currentTime)) {
        fragPlayingCurrent = this.getBufferedFrag(currentTime);
      } else if (BufferHelper.isBuffered(video, currentTime + 0.1)) {
        /* ensure that FRAG_CHANGED event is triggered at startup,
          when first video frame is displayed and playback is paused.
          add a tolerance of 100ms, in case current position is not buffered,
          check if current pos+100ms is buffered and use that buffer range
          for FRAG_CHANGED event reporting */
        fragPlayingCurrent = this.getBufferedFrag(currentTime + 0.1);
      }

      if (fragPlayingCurrent) {
        var fragPlaying = fragPlayingCurrent;

        if (fragPlaying !== this.fragPlaying) {
          this.hls.trigger(events["default"].FRAG_CHANGED, {
            frag: fragPlaying
          });
          var fragPlayingLevel = fragPlaying.level;

          if (!this.fragPlaying || this.fragPlaying.level !== fragPlayingLevel) {
            this.hls.trigger(events["default"].LEVEL_SWITCHED, {
              level: fragPlayingLevel
            });
          }

          this.fragPlaying = fragPlaying;
        }
      }
    }
  };
  /*
    on immediate level switch :
     - pause playback if playing
     - cancel any pending load request
     - and trigger a buffer flush
  */


  _proto.immediateLevelSwitch = function immediateLevelSwitch() {
    logger["logger"].log('immediateLevelSwitch');

    if (!this.immediateSwitch) {
      this.immediateSwitch = true;
      var media = this.media,
          previouslyPaused;

      if (media) {
        previouslyPaused = media.paused;
        media.pause();
      } else {
        // don't restart playback after instant level switch in case media not attached
        previouslyPaused = true;
      }

      this.previouslyPaused = previouslyPaused;
    }

    var fragCurrent = this.fragCurrent;

    if (fragCurrent && fragCurrent.loader) {
      fragCurrent.loader.abort();
    }

    this.fragCurrent = null; // flush everything

    this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
  };
  /**
   * on immediate level switch end, after new fragment has been buffered:
   * - nudge video decoder by slightly adjusting video currentTime (if currentTime buffered)
   * - resume the playback if needed
   */


  _proto.immediateLevelSwitchEnd = function immediateLevelSwitchEnd() {
    var media = this.media;

    if (media && media.buffered.length) {
      this.immediateSwitch = false;

      if (BufferHelper.isBuffered(media, media.currentTime)) {
        // only nudge if currentTime is buffered
        media.currentTime -= 0.0001;
      }

      if (!this.previouslyPaused) {
        media.play();
      }
    }
  };
  /**
   * try to switch ASAP without breaking video playback:
   * in order to ensure smooth but quick level switching,
   * we need to find the next flushable buffer range
   * we should take into account new segment fetch time
   */


  _proto.nextLevelSwitch = function nextLevelSwitch() {
    var media = this.media; // ensure that media is defined and that metadata are available (to retrieve currentTime)

    if (media && media.readyState) {
      var fetchdelay, fragPlayingCurrent, nextBufferedFrag;
      fragPlayingCurrent = this.getBufferedFrag(media.currentTime);

      if (fragPlayingCurrent && fragPlayingCurrent.startPTS > 1) {
        // flush buffer preceding current fragment (flush until current fragment start offset)
        // minus 1s to avoid video freezing, that could happen if we flush keyframe of current video ...
        this.flushMainBuffer(0, fragPlayingCurrent.startPTS - 1);
      }

      if (!media.paused) {
        // add a safety delay of 1s
        var nextLevelId = this.hls.nextLoadLevel,
            nextLevel = this.levels[nextLevelId],
            fragLastKbps = this.fragLastKbps;

        if (fragLastKbps && this.fragCurrent) {
          fetchdelay = this.fragCurrent.duration * nextLevel.bitrate / (1000 * fragLastKbps) + 1;
        } else {
          fetchdelay = 0;
        }
      } else {
        fetchdelay = 0;
      } // logger.log('fetchdelay:'+fetchdelay);
      // find buffer range that will be reached once new fragment will be fetched


      nextBufferedFrag = this.getBufferedFrag(media.currentTime + fetchdelay);

      if (nextBufferedFrag) {
        // we can flush buffer range following this one without stalling playback
        nextBufferedFrag = this.followingBufferedFrag(nextBufferedFrag);

        if (nextBufferedFrag) {
          // if we are here, we can also cancel any loading/demuxing in progress, as they are useless
          var fragCurrent = this.fragCurrent;

          if (fragCurrent && fragCurrent.loader) {
            fragCurrent.loader.abort();
          }

          this.fragCurrent = null; // start flush position is the start PTS of next buffered frag.
          // we use frag.naxStartPTS which is max(audio startPTS, video startPTS).
          // in case there is a small PTS Delta between audio and video, using maxStartPTS avoids flushing last samples from current fragment

          this.flushMainBuffer(nextBufferedFrag.maxStartPTS, Number.POSITIVE_INFINITY);
        }
      }
    }
  };

  _proto.flushMainBuffer = function flushMainBuffer(startOffset, endOffset) {
    this.state = State.BUFFER_FLUSHING;
    var flushScope = {
      startOffset: startOffset,
      endOffset: endOffset
    }; // if alternate audio tracks are used, only flush video, otherwise flush everything

    if (this.altAudio) {
      flushScope.type = 'video';
    }

    this.hls.trigger(events["default"].BUFFER_FLUSHING, flushScope);
  };

  _proto.onMediaAttached = function onMediaAttached(data) {
    var media = this.media = this.mediaBuffer = data.media;
    this.onvseeking = this.onMediaSeeking.bind(this);
    this.onvseeked = this.onMediaSeeked.bind(this);
    this.onvended = this.onMediaEnded.bind(this);
    media.addEventListener('seeking', this.onvseeking);
    media.addEventListener('seeked', this.onvseeked);
    media.addEventListener('ended', this.onvended);
    var config = this.config;

    if (this.levels && config.autoStartLoad) {
      this.hls.startLoad(config.startPosition);
    }

    this.gapController = new gap_controller_GapController(config, media, this.fragmentTracker, this.hls);
  };

  _proto.onMediaDetaching = function onMediaDetaching() {
    var media = this.media;

    if (media && media.ended) {
      logger["logger"].log('MSE detaching and video ended, reset startPosition');
      this.startPosition = this.lastCurrentTime = 0;
    } // reset fragment backtracked flag


    var levels = this.levels;

    if (levels) {
      levels.forEach(function (level) {
        if (level.details) {
          level.details.fragments.forEach(function (fragment) {
            fragment.backtracked = undefined;
          });
        }
      });
    } // remove video listeners


    if (media) {
      media.removeEventListener('seeking', this.onvseeking);
      media.removeEventListener('seeked', this.onvseeked);
      media.removeEventListener('ended', this.onvended);
      this.onvseeking = this.onvseeked = this.onvended = null;
    }

    this.media = this.mediaBuffer = null;
    this.loadedmetadata = false;
    this.stopLoad();
  };

  _proto.onMediaSeeked = function onMediaSeeked() {
    var media = this.media,
        currentTime = media ? media.currentTime : undefined;

    if (Object(number_isFinite["isFiniteNumber"])(currentTime)) {
      logger["logger"].log("media seeked to " + currentTime.toFixed(3));
    } // tick to speed up FRAGMENT_PLAYING triggering


    this.tick();
  };

  _proto.onManifestLoading = function onManifestLoading() {
    // reset buffer on manifest loading
    logger["logger"].log('trigger BUFFER_RESET');
    this.hls.trigger(events["default"].BUFFER_RESET);
    this.fragmentTracker.removeAllFragments();
    this.stalled = false;
    this.startPosition = this.lastCurrentTime = 0;
  };

  _proto.onManifestParsed = function onManifestParsed(data) {
    var aac = false,
        heaac = false,
        codec;
    data.levels.forEach(function (level) {
      // detect if we have different kind of audio codecs used amongst playlists
      codec = level.audioCodec;

      if (codec) {
        if (codec.indexOf('mp4a.40.2') !== -1) {
          aac = true;
        }

        if (codec.indexOf('mp4a.40.5') !== -1) {
          heaac = true;
        }
      }
    });
    this.audioCodecSwitch = aac && heaac;

    if (this.audioCodecSwitch) {
      logger["logger"].log('both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC');
    }

    this.levels = data.levels;
    this.startFragRequested = false;
    var config = this.config;

    if (config.autoStartLoad || this.forceStartLoad) {
      this.hls.startLoad(config.startPosition);
    }
  };

  _proto.onLevelLoaded = function onLevelLoaded(data) {
    var newDetails = data.details;
    var newLevelId = data.level;
    var lastLevel = this.levels[this.levelLastLoaded];
    var curLevel = this.levels[newLevelId];
    var duration = newDetails.totalduration;
    var sliding = 0;
    logger["logger"].log("level " + newLevelId + " loaded [" + newDetails.startSN + "," + newDetails.endSN + "],duration:" + duration);

    if (newDetails.live) {
      var curDetails = curLevel.details;

      if (curDetails && newDetails.fragments.length > 0) {
        // we already have details for that level, merge them
        mergeDetails(curDetails, newDetails);
        sliding = newDetails.fragments[0].start;
        this.liveSyncPosition = this.computeLivePosition(sliding, curDetails);

        if (newDetails.PTSKnown && Object(number_isFinite["isFiniteNumber"])(sliding)) {
          logger["logger"].log("live playlist sliding:" + sliding.toFixed(3));
        } else {
          logger["logger"].log('live playlist - outdated PTS, unknown sliding');
          alignStream(this.fragPrevious, lastLevel, newDetails);
        }
      } else {
        logger["logger"].log('live playlist - first load, unknown sliding');
        newDetails.PTSKnown = false;
        alignStream(this.fragPrevious, lastLevel, newDetails);
      }
    } else {
      newDetails.PTSKnown = false;
    } // override level info


    curLevel.details = newDetails;
    this.levelLastLoaded = newLevelId;
    this.hls.trigger(events["default"].LEVEL_UPDATED, {
      details: newDetails,
      level: newLevelId
    });

    if (this.startFragRequested === false) {
      // compute start position if set to -1. use it straight away if value is defined
      if (this.startPosition === -1 || this.lastCurrentTime === -1) {
        // first, check if start time offset has been set in playlist, if yes, use this value
        var startTimeOffset = newDetails.startTimeOffset;

        if (Object(number_isFinite["isFiniteNumber"])(startTimeOffset)) {
          if (startTimeOffset < 0) {
            logger["logger"].log("negative start time offset " + startTimeOffset + ", count from end of last fragment");
            startTimeOffset = sliding + duration + startTimeOffset;
          }

          logger["logger"].log("start time offset found in playlist, adjust startPosition to " + startTimeOffset);
          this.startPosition = startTimeOffset;
        } else {
          // if live playlist, set start position to be fragment N-this.config.liveSyncDurationCount (usually 3)
          if (newDetails.live) {
            this.startPosition = this.computeLivePosition(sliding, newDetails);
            logger["logger"].log("configure startPosition to " + this.startPosition);
          } else {
            this.startPosition = 0;
          }
        }

        this.lastCurrentTime = this.startPosition;
      }

      this.nextLoadPosition = this.startPosition;
    } // only switch batck to IDLE state if we were waiting for level to start downloading a new fragment


    if (this.state === State.WAITING_LEVEL) {
      this.state = State.IDLE;
    } // trigger handler right now


    this.tick();
  };

  _proto.onKeyLoaded = function onKeyLoaded() {
    if (this.state === State.KEY_LOADING) {
      this.state = State.IDLE;
      this.tick();
    }
  };

  _proto.onFragLoaded = function onFragLoaded(data) {
    var fragCurrent = this.fragCurrent,
        hls = this.hls,
        levels = this.levels,
        media = this.media;
    var fragLoaded = data.frag;

    if (this.state === State.FRAG_LOADING && fragCurrent && fragLoaded.type === 'main' && fragLoaded.level === fragCurrent.level && fragLoaded.sn === fragCurrent.sn) {
      var stats = data.stats;
      var currentLevel = levels[fragCurrent.level];
      var details = currentLevel.details; // reset frag bitrate test in any case after frag loaded event
      // if this frag was loaded to perform a bitrate test AND if hls.nextLoadLevel is greater than 0
      // then this means that we should be able to load a fragment at a higher quality level

      this.bitrateTest = false;
      this.stats = stats;
      logger["logger"].log("Loaded " + fragCurrent.sn + " of [" + details.startSN + " ," + details.endSN + "],level " + fragCurrent.level);

      if (fragLoaded.bitrateTest && hls.nextLoadLevel) {
        // switch back to IDLE state ... we just loaded a fragment to determine adequate start bitrate and initialize autoswitch algo
        this.state = State.IDLE;
        this.startFragRequested = false;
        stats.tparsed = stats.tbuffered = window.performance.now();
        hls.trigger(events["default"].FRAG_BUFFERED, {
          stats: stats,
          frag: fragCurrent,
          id: 'main'
        });
        this.tick();
      } else if (fragLoaded.sn === 'initSegment') {
        this.state = State.IDLE;
        stats.tparsed = stats.tbuffered = window.performance.now();
        details.initSegment.data = data.payload;
        hls.trigger(events["default"].FRAG_BUFFERED, {
          stats: stats,
          frag: fragCurrent,
          id: 'main'
        });
        this.tick();
      } else {
        logger["logger"].log("Parsing " + fragCurrent.sn + " of [" + details.startSN + " ," + details.endSN + "],level " + fragCurrent.level + ", cc " + fragCurrent.cc);
        this.state = State.PARSING;
        this.pendingBuffering = true;
        this.appended = false; // Bitrate test frags are not usually buffered so the fragment tracker ignores them. If Hls.js decides to buffer
        // it (and therefore ends up at this line), then the fragment tracker needs to be manually informed.

        if (fragLoaded.bitrateTest) {
          fragLoaded.bitrateTest = false;
          this.fragmentTracker.onFragLoaded({
            frag: fragLoaded
          });
        } // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live) and if media is not seeking (this is to overcome potential timestamp drifts between playlists and fragments)


        var accurateTimeOffset = !(media && media.seeking) && (details.PTSKnown || !details.live);
        var initSegmentData = details.initSegment ? details.initSegment.data : [];

        var audioCodec = this._getAudioCodec(currentLevel); // transmux the MPEG-TS data to ISO-BMFF segments


        var demuxer = this.demuxer = this.demuxer || new demux_demuxer(this.hls, 'main');
        demuxer.push(data.payload, initSegmentData, audioCodec, currentLevel.videoCodec, fragCurrent, details.totalduration, accurateTimeOffset);
      }
    }

    this.fragLoadError = 0;
  };

  _proto.onFragParsingInitSegment = function onFragParsingInitSegment(data) {
    var fragCurrent = this.fragCurrent;
    var fragNew = data.frag;

    if (fragCurrent && data.id === 'main' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {
      var tracks = data.tracks,
          trackName,
          track; // if audio track is expected to come from audio stream controller, discard any coming from main

      if (tracks.audio && this.altAudio) {
        delete tracks.audio;
      } // include levelCodec in audio and video tracks


      track = tracks.audio;

      if (track) {
        var audioCodec = this.levels[this.level].audioCodec,
            ua = navigator.userAgent.toLowerCase();

        if (audioCodec && this.audioCodecSwap) {
          logger["logger"].log('swapping playlist audio codec');

          if (audioCodec.indexOf('mp4a.40.5') !== -1) {
            audioCodec = 'mp4a.40.2';
          } else {
            audioCodec = 'mp4a.40.5';
          }
        } // in case AAC and HE-AAC audio codecs are signalled in manifest
        // force HE-AAC , as it seems that most browsers prefers that way,
        // except for mono streams OR on FF
        // these conditions might need to be reviewed ...


        if (this.audioCodecSwitch) {
          // don't force HE-AAC if mono stream
          if (track.metadata.channelCount !== 1 && // don't force HE-AAC if firefox
          ua.indexOf('firefox') === -1) {
            audioCodec = 'mp4a.40.5';
          }
        } // HE-AAC is broken on Android, always signal audio codec as AAC even if variant manifest states otherwise


        if (ua.indexOf('android') !== -1 && track.container !== 'audio/mpeg') {
          // Exclude mpeg audio
          audioCodec = 'mp4a.40.2';
          logger["logger"].log("Android: force audio codec to " + audioCodec);
        }

        track.levelCodec = audioCodec;
        track.id = data.id;
      }

      track = tracks.video;

      if (track) {
        track.levelCodec = this.levels[this.level].videoCodec;
        track.id = data.id;
      }

      this.hls.trigger(events["default"].BUFFER_CODECS, tracks); // loop through tracks that are going to be provided to bufferController

      for (trackName in tracks) {
        track = tracks[trackName];
        logger["logger"].log("main track:" + trackName + ",container:" + track.container + ",codecs[level/parsed]=[" + track.levelCodec + "/" + track.codec + "]");
        var initSegment = track.initSegment;

        if (initSegment) {
          this.appended = true; // arm pending Buffering flag before appending a segment

          this.pendingBuffering = true;
          this.hls.trigger(events["default"].BUFFER_APPENDING, {
            type: trackName,
            data: initSegment,
            parent: 'main',
            content: 'initSegment'
          });
        }
      } // trigger handler right now


      this.tick();
    }
  };

  _proto.onFragParsingData = function onFragParsingData(data) {
    var _this2 = this;

    var fragCurrent = this.fragCurrent;
    var fragNew = data.frag;

    if (fragCurrent && data.id === 'main' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && !(data.type === 'audio' && this.altAudio) && // filter out main audio if audio track is loaded through audio stream controller
    this.state === State.PARSING) {
      var level = this.levels[this.level],
          frag = fragCurrent;

      if (!Object(number_isFinite["isFiniteNumber"])(data.endPTS)) {
        data.endPTS = data.startPTS + fragCurrent.duration;
        data.endDTS = data.startDTS + fragCurrent.duration;
      }

      if (data.hasAudio === true) {
        frag.addElementaryStream(ElementaryStreamTypes.AUDIO);
      }

      if (data.hasVideo === true) {
        frag.addElementaryStream(ElementaryStreamTypes.VIDEO);
      }

      logger["logger"].log("Parsed " + data.type + ",PTS:[" + data.startPTS.toFixed(3) + "," + data.endPTS.toFixed(3) + "],DTS:[" + data.startDTS.toFixed(3) + "/" + data.endDTS.toFixed(3) + "],nb:" + data.nb + ",dropped:" + (data.dropped || 0)); // Detect gaps in a fragment  and try to fix it by finding a keyframe in the previous fragment (see _findFragments)

      if (data.type === 'video') {
        frag.dropped = data.dropped;

        if (frag.dropped) {
          if (!frag.backtracked) {
            var levelDetails = level.details;

            if (levelDetails && frag.sn === levelDetails.startSN) {
              logger["logger"].warn('missing video frame(s) on first frag, appending with gap', frag.sn);
            } else {
              logger["logger"].warn('missing video frame(s), backtracking fragment', frag.sn); // Return back to the IDLE state without appending to buffer
              // Causes findFragments to backtrack a segment and find the keyframe
              // Audio fragments arriving before video sets the nextLoadPosition, causing _findFragments to skip the backtracked fragment

              this.fragmentTracker.removeFragment(frag);
              frag.backtracked = true;
              this.nextLoadPosition = data.startPTS;
              this.state = State.IDLE;
              this.fragPrevious = frag;
              this.tick();
              return;
            }
          } else {
            logger["logger"].warn('Already backtracked on this fragment, appending with the gap', frag.sn);
          }
        } else {
          // Only reset the backtracked flag if we've loaded the frag without any dropped frames
          frag.backtracked = false;
        }
      }

      var drift = updateFragPTSDTS(level.details, frag, data.startPTS, data.endPTS, data.startDTS, data.endDTS),
          hls = this.hls;
      hls.trigger(events["default"].LEVEL_PTS_UPDATED, {
        details: level.details,
        level: this.level,
        drift: drift,
        type: data.type,
        start: data.startPTS,
        end: data.endPTS
      }); // has remuxer dropped video frames located before first keyframe ?

      [data.data1, data.data2].forEach(function (buffer) {
        // only append in PARSING state (rationale is that an appending error could happen synchronously on first segment appending)
        // in that case it is useless to append following segments
        if (buffer && buffer.length && _this2.state === State.PARSING) {
          _this2.appended = true; // arm pending Buffering flag before appending a segment

          _this2.pendingBuffering = true;
          hls.trigger(events["default"].BUFFER_APPENDING, {
            type: data.type,
            data: buffer,
            parent: 'main',
            content: 'data'
          });
        }
      }); // trigger handler right now

      this.tick();
    }
  };

  _proto.onFragParsed = function onFragParsed(data) {
    var fragCurrent = this.fragCurrent;
    var fragNew = data.frag;

    if (fragCurrent && data.id === 'main' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {
      this.stats.tparsed = window.performance.now();
      this.state = State.PARSED;

      this._checkAppendedParsed();
    }
  };

  _proto.onAudioTrackSwitching = function onAudioTrackSwitching(data) {
    // if any URL found on new audio track, it is an alternate audio track
    var altAudio = !!data.url,
        trackId = data.id; // if we switch on main audio, ensure that main fragment scheduling is synced with media.buffered
    // don't do anything if we switch to alt audio: audio stream controller is handling it.
    // we will just have to change buffer scheduling on audioTrackSwitched

    if (!altAudio) {
      if (this.mediaBuffer !== this.media) {
        logger["logger"].log('switching on main audio, use media.buffered to schedule main fragment loading');
        this.mediaBuffer = this.media;
        var fragCurrent = this.fragCurrent; // we need to refill audio buffer from main: cancel any frag loading to speed up audio switch

        if (fragCurrent.loader) {
          logger["logger"].log('switching to main audio track, cancel main fragment load');
          fragCurrent.loader.abort();
        }

        this.fragCurrent = null;
        this.fragPrevious = null; // destroy demuxer to force init segment generation (following audio switch)

        if (this.demuxer) {
          this.demuxer.destroy();
          this.demuxer = null;
        } // switch to IDLE state to load new fragment


        this.state = State.IDLE;
      }

      var hls = this.hls; // switching to main audio, flush all audio and trigger track switched

      hls.trigger(events["default"].BUFFER_FLUSHING, {
        startOffset: 0,
        endOffset: Number.POSITIVE_INFINITY,
        type: 'audio'
      });
      hls.trigger(events["default"].AUDIO_TRACK_SWITCHED, {
        id: trackId
      });
      this.altAudio = false;
    }
  };

  _proto.onAudioTrackSwitched = function onAudioTrackSwitched(data) {
    var trackId = data.id,
        altAudio = !!this.hls.audioTracks[trackId].url;

    if (altAudio) {
      var videoBuffer = this.videoBuffer; // if we switched on alternate audio, ensure that main fragment scheduling is synced with video sourcebuffer buffered

      if (videoBuffer && this.mediaBuffer !== videoBuffer) {
        logger["logger"].log('switching on alternate audio, use video.buffered to schedule main fragment loading');
        this.mediaBuffer = videoBuffer;
      }
    }

    this.altAudio = altAudio;
    this.tick();
  };

  _proto.onBufferCreated = function onBufferCreated(data) {
    var tracks = data.tracks,
        mediaTrack,
        name,
        alternate = false;

    for (var type in tracks) {
      var track = tracks[type];

      if (track.id === 'main') {
        name = type;
        mediaTrack = track; // keep video source buffer reference

        if (type === 'video') {
          this.videoBuffer = tracks[type].buffer;
        }
      } else {
        alternate = true;
      }
    }

    if (alternate && mediaTrack) {
      logger["logger"].log("alternate track found, use " + name + ".buffered to schedule main fragment loading");
      this.mediaBuffer = mediaTrack.buffer;
    } else {
      this.mediaBuffer = this.media;
    }
  };

  _proto.onBufferAppended = function onBufferAppended(data) {
    if (data.parent === 'main') {
      var state = this.state;

      if (state === State.PARSING || state === State.PARSED) {
        // check if all buffers have been appended
        this.pendingBuffering = data.pending > 0;

        this._checkAppendedParsed();
      }
    }
  };

  _proto._checkAppendedParsed = function _checkAppendedParsed() {
    // trigger handler right now
    if (this.state === State.PARSED && (!this.appended || !this.pendingBuffering)) {
      var frag = this.fragCurrent;

      if (frag) {
        var media = this.mediaBuffer ? this.mediaBuffer : this.media;
        logger["logger"].log("main buffered : " + time_ranges.toString(media.buffered));
        this.fragPrevious = frag;
        var stats = this.stats;
        stats.tbuffered = window.performance.now(); // we should get rid of this.fragLastKbps

        this.fragLastKbps = Math.round(8 * stats.total / (stats.tbuffered - stats.tfirst));
        this.hls.trigger(events["default"].FRAG_BUFFERED, {
          stats: stats,
          frag: frag,
          id: 'main'
        });
        this.state = State.IDLE;
      }

      this.tick();
    }
  };

  _proto.onError = function onError(data) {
    var frag = data.frag || this.fragCurrent; // don't handle frag error not related to main fragment

    if (frag && frag.type !== 'main') {
      return;
    } // 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end


    var mediaBuffered = !!this.media && BufferHelper.isBuffered(this.media, this.media.currentTime) && BufferHelper.isBuffered(this.media, this.media.currentTime + 0.5);

    switch (data.details) {
      case errors["ErrorDetails"].FRAG_LOAD_ERROR:
      case errors["ErrorDetails"].FRAG_LOAD_TIMEOUT:
      case errors["ErrorDetails"].KEY_LOAD_ERROR:
      case errors["ErrorDetails"].KEY_LOAD_TIMEOUT:
        if (!data.fatal) {
          // keep retrying until the limit will be reached
          if (this.fragLoadError + 1 <= this.config.fragLoadingMaxRetry) {
            // exponential backoff capped to config.fragLoadingMaxRetryTimeout
            var delay = Math.min(Math.pow(2, this.fragLoadError) * this.config.fragLoadingRetryDelay, this.config.fragLoadingMaxRetryTimeout);
            logger["logger"].warn("mediaController: frag loading failed, retry in " + delay + " ms");
            this.retryDate = window.performance.now() + delay; // retry loading state
            // if loadedmetadata is not set, it means that we are emergency switch down on first frag
            // in that case, reset startFragRequested flag

            if (!this.loadedmetadata) {
              this.startFragRequested = false;
              this.nextLoadPosition = this.startPosition;
            }

            this.fragLoadError++;
            this.state = State.FRAG_LOADING_WAITING_RETRY;
          } else {
            logger["logger"].error("mediaController: " + data.details + " reaches max retry, redispatch as fatal ..."); // switch error to fatal

            data.fatal = true;
            this.state = State.ERROR;
          }
        }

        break;

      case errors["ErrorDetails"].LEVEL_LOAD_ERROR:
      case errors["ErrorDetails"].LEVEL_LOAD_TIMEOUT:
        if (this.state !== State.ERROR) {
          if (data.fatal) {
            // if fatal error, stop processing
            this.state = State.ERROR;
            logger["logger"].warn("streamController: " + data.details + ",switch to " + this.state + " state ...");
          } else {
            // in case of non fatal error while loading level, if level controller is not retrying to load level , switch back to IDLE
            if (!data.levelRetry && this.state === State.WAITING_LEVEL) {
              this.state = State.IDLE;
            }
          }
        }

        break;

      case errors["ErrorDetails"].BUFFER_FULL_ERROR:
        // if in appending state
        if (data.parent === 'main' && (this.state === State.PARSING || this.state === State.PARSED)) {
          // reduce max buf len if current position is buffered
          if (mediaBuffered) {
            this._reduceMaxBufferLength(this.config.maxBufferLength);

            this.state = State.IDLE;
          } else {
            // current position is not buffered, but browser is still complaining about buffer full error
            // this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708
            // in that case flush the whole buffer to recover
            logger["logger"].warn('buffer full error also media.currentTime is not buffered, flush everything');
            this.fragCurrent = null; // flush everything

            this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
          }
        }

        break;

      default:
        break;
    }
  };

  _proto._reduceMaxBufferLength = function _reduceMaxBufferLength(minLength) {
    var config = this.config;

    if (config.maxMaxBufferLength >= minLength) {
      // reduce max buffer length as it might be too high. we do this to avoid loop flushing ...
      config.maxMaxBufferLength /= 2;
      logger["logger"].warn("main:reduce max buffer length to " + config.maxMaxBufferLength + "s");
      return true;
    }

    return false;
  };
  /**
   * Checks the health of the buffer and attempts to resolve playback stalls.
   * @private
   */


  _proto._checkBuffer = function _checkBuffer() {
    var media = this.media;

    if (!media || media.readyState === 0) {
      // Exit early if we don't have media or if the media hasn't bufferd anything yet (readyState 0)
      return;
    }

    var mediaBuffer = this.mediaBuffer ? this.mediaBuffer : media;
    var buffered = mediaBuffer.buffered;

    if (!this.loadedmetadata && buffered.length) {
      this.loadedmetadata = true;

      this._seekToStartPos();
    } else if (this.immediateSwitch) {
      this.immediateLevelSwitchEnd();
    } else {
      this.gapController.poll(this.lastCurrentTime, buffered);
    }
  };

  _proto.onFragLoadEmergencyAborted = function onFragLoadEmergencyAborted() {
    this.state = State.IDLE; // if loadedmetadata is not set, it means that we are emergency switch down on first frag
    // in that case, reset startFragRequested flag

    if (!this.loadedmetadata) {
      this.startFragRequested = false;
      this.nextLoadPosition = this.startPosition;
    }

    this.tick();
  };

  _proto.onBufferFlushed = function onBufferFlushed() {
    /* after successful buffer flushing, filter flushed fragments from bufferedFrags
      use mediaBuffered instead of media (so that we will check against video.buffered ranges in case of alt audio track)
    */
    var media = this.mediaBuffer ? this.mediaBuffer : this.media;

    if (media) {
      // filter fragments potentially evicted from buffer. this is to avoid memleak on live streams
      this.fragmentTracker.detectEvictedFragments(ElementaryStreamTypes.VIDEO, media.buffered);
    } // move to IDLE once flush complete. this should trigger new fragment loading


    this.state = State.IDLE; // reset reference to frag

    this.fragPrevious = null;
  };

  _proto.swapAudioCodec = function swapAudioCodec() {
    this.audioCodecSwap = !this.audioCodecSwap;
  };

  _proto.computeLivePosition = function computeLivePosition(sliding, levelDetails) {
    var targetLatency = this.config.liveSyncDuration !== undefined ? this.config.liveSyncDuration : this.config.liveSyncDurationCount * levelDetails.targetduration;
    return sliding + Math.max(0, levelDetails.totalduration - targetLatency);
  };
  /**
   * Seeks to the set startPosition if not equal to the mediaElement's current time.
   * @private
   */


  _proto._seekToStartPos = function _seekToStartPos() {
    var media = this.media;
    var currentTime = media.currentTime; // only adjust currentTime if different from startPosition or if startPosition not buffered
    // at that stage, there should be only one buffered range, as we reach that code after first fragment has been buffered

    var startPosition = media.seeking ? currentTime : this.startPosition; // if currentTime not matching with expected startPosition or startPosition not buffered but close to first buffered

    if (currentTime !== startPosition) {
      // if startPosition not buffered, let's seek to buffered.start(0)
      logger["logger"].log("target start position not buffered, seek to buffered.start(0) " + startPosition + " from current time " + currentTime + " ");
      media.currentTime = startPosition;
    }
  };

  _proto._getAudioCodec = function _getAudioCodec(currentLevel) {
    var audioCodec = this.config.defaultAudioCodec || currentLevel.audioCodec;

    if (this.audioCodecSwap) {
      logger["logger"].log('swapping playlist audio codec');

      if (audioCodec) {
        if (audioCodec.indexOf('mp4a.40.5') !== -1) {
          audioCodec = 'mp4a.40.2';
        } else {
          audioCodec = 'mp4a.40.5';
        }
      }
    }

    return audioCodec;
  };

  stream_controller_createClass(StreamController, [{
    key: "state",
    set: function set(nextState) {
      if (this.state !== nextState) {
        var previousState = this.state;
        this._state = nextState;
        logger["logger"].log("main stream:" + previousState + "->" + nextState);
        this.hls.trigger(events["default"].STREAM_STATE_TRANSITION, {
          previousState: previousState,
          nextState: nextState
        });
      }
    },
    get: function get() {
      return this._state;
    }
  }, {
    key: "currentLevel",
    get: function get() {
      var media = this.media;

      if (media) {
        var frag = this.getBufferedFrag(media.currentTime);

        if (frag) {
          return frag.level;
        }
      }

      return -1;
    }
  }, {
    key: "nextBufferedFrag",
    get: function get() {
      var media = this.media;

      if (media) {
        // first get end range of current fragment
        return this.followingBufferedFrag(this.getBufferedFrag(media.currentTime));
      } else {
        return null;
      }
    }
  }, {
    key: "nextLevel",
    get: function get() {
      var frag = this.nextBufferedFrag;

      if (frag) {
        return frag.level;
      } else {
        return -1;
      }
    }
  }, {
    key: "liveSyncPosition",
    get: function get() {
      return this._liveSyncPosition;
    },
    set: function set(value) {
      this._liveSyncPosition = value;
    }
  }]);

  return StreamController;
}(base_stream_controller_BaseStreamController);

/* harmony default export */ var stream_controller = (stream_controller_StreamController);
// CONCATENATED MODULE: ./src/controller/level-controller.js
function level_controller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function level_controller_createClass(Constructor, protoProps, staticProps) { if (protoProps) level_controller_defineProperties(Constructor.prototype, protoProps); if (staticProps) level_controller_defineProperties(Constructor, staticProps); return Constructor; }

function level_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/*
 * Level Controller
*/






var level_controller_window = window,
    level_controller_performance = level_controller_window.performance;
var chromeOrFirefox;

var level_controller_LevelController =
/*#__PURE__*/
function (_EventHandler) {
  level_controller_inheritsLoose(LevelController, _EventHandler);

  function LevelController(hls) {
    var _this;

    _this = _EventHandler.call(this, hls, events["default"].MANIFEST_LOADED, events["default"].LEVEL_LOADED, events["default"].AUDIO_TRACK_SWITCHED, events["default"].FRAG_LOADED, events["default"].ERROR) || this;
    _this.canload = false;
    _this.currentLevelIndex = null;
    _this.manualLevelIndex = -1;
    _this.timer = null;
    chromeOrFirefox = /chrome|firefox/.test(navigator.userAgent.toLowerCase());
    return _this;
  }

  var _proto = LevelController.prototype;

  _proto.onHandlerDestroying = function onHandlerDestroying() {
    this.clearTimer();
    this.manualLevelIndex = -1;
  };

  _proto.clearTimer = function clearTimer() {
    if (this.timer !== null) {
      clearTimeout(this.timer);
      this.timer = null;
    }
  };

  _proto.startLoad = function startLoad() {
    var levels = this._levels;
    this.canload = true;
    this.levelRetryCount = 0; // clean up live level details to force reload them, and reset load errors

    if (levels) {
      levels.forEach(function (level) {
        level.loadError = 0;
        var levelDetails = level.details;

        if (levelDetails && levelDetails.live) {
          level.details = undefined;
        }
      });
    } // speed up live playlist refresh if timer exists


    if (this.timer !== null) {
      this.loadLevel();
    }
  };

  _proto.stopLoad = function stopLoad() {
    this.canload = false;
  };

  _proto.onManifestLoaded = function onManifestLoaded(data) {
    var levels = [];
    var audioTracks = [];
    var bitrateStart;
    var levelSet = {};
    var levelFromSet = null;
    var videoCodecFound = false;
    var audioCodecFound = false; // regroup redundant levels together

    data.levels.forEach(function (level) {
      var attributes = level.attrs;
      level.loadError = 0;
      level.fragmentError = false;
      videoCodecFound = videoCodecFound || !!level.videoCodec;
      audioCodecFound = audioCodecFound || !!level.audioCodec; // erase audio codec info if browser does not support mp4a.40.34.
      // demuxer will autodetect codec and fallback to mpeg/audio

      if (chromeOrFirefox && level.audioCodec && level.audioCodec.indexOf('mp4a.40.34') !== -1) {
        level.audioCodec = undefined;
      }

      levelFromSet = levelSet[level.bitrate]; // FIXME: we would also have to match the resolution here

      if (!levelFromSet) {
        level.url = [level.url];
        level.urlId = 0;
        levelSet[level.bitrate] = level;
        levels.push(level);
      } else {
        levelFromSet.url.push(level.url);
      }

      if (attributes) {
        if (attributes.AUDIO) {
          audioCodecFound = true;
          addGroupId(levelFromSet || level, 'audio', attributes.AUDIO);
        }

        if (attributes.SUBTITLES) {
          addGroupId(levelFromSet || level, 'text', attributes.SUBTITLES);
        }
      }
    }); // remove audio-only level if we also have levels with audio+video codecs signalled

    if (videoCodecFound && audioCodecFound) {
      levels = levels.filter(function (_ref) {
        var videoCodec = _ref.videoCodec;
        return !!videoCodec;
      });
    } // only keep levels with supported audio/video codecs


    levels = levels.filter(function (_ref2) {
      var audioCodec = _ref2.audioCodec,
          videoCodec = _ref2.videoCodec;
      return (!audioCodec || isCodecSupportedInMp4(audioCodec, 'audio')) && (!videoCodec || isCodecSupportedInMp4(videoCodec, 'video'));
    });

    if (data.audioTracks) {
      audioTracks = data.audioTracks.filter(function (track) {
        return !track.audioCodec || isCodecSupportedInMp4(track.audioCodec, 'audio');
      }); // Reassign id's after filtering since they're used as array indices

      audioTracks.forEach(function (track, index) {
        track.id = index;
      });
    }

    if (levels.length > 0) {
      // start bitrate is the first bitrate of the manifest
      bitrateStart = levels[0].bitrate; // sort level on bitrate

      levels.sort(function (a, b) {
        return a.bitrate - b.bitrate;
      });
      this._levels = levels; // find index of first level in sorted levels

      for (var i = 0; i < levels.length; i++) {
        if (levels[i].bitrate === bitrateStart) {
          this._firstLevel = i;
          logger["logger"].log("manifest loaded," + levels.length + " level(s) found, first bitrate:" + bitrateStart);
          break;
        }
      } // Audio is only alternate if manifest include a URI along with the audio group tag


      this.hls.trigger(events["default"].MANIFEST_PARSED, {
        levels: levels,
        audioTracks: audioTracks,
        firstLevel: this._firstLevel,
        stats: data.stats,
        audio: audioCodecFound,
        video: videoCodecFound,
        altAudio: audioTracks.some(function (t) {
          return !!t.url;
        })
      });
    } else {
      this.hls.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].MEDIA_ERROR,
        details: errors["ErrorDetails"].MANIFEST_INCOMPATIBLE_CODECS_ERROR,
        fatal: true,
        url: this.hls.url,
        reason: 'no level with compatible codecs found in manifest'
      });
    }
  };

  _proto.setLevelInternal = function setLevelInternal(newLevel) {
    var levels = this._levels;
    var hls = this.hls; // check if level idx is valid

    if (newLevel >= 0 && newLevel < levels.length) {
      // stopping live reloading timer if any
      this.clearTimer();

      if (this.currentLevelIndex !== newLevel) {
        logger["logger"].log("switching to level " + newLevel);
        this.currentLevelIndex = newLevel;
        var levelProperties = levels[newLevel];
        levelProperties.level = newLevel;
        hls.trigger(events["default"].LEVEL_SWITCHING, levelProperties);
      }

      var level = levels[newLevel];
      var levelDetails = level.details; // check if we need to load playlist for this level

      if (!levelDetails || levelDetails.live) {
        // level not retrieved yet, or live playlist we need to (re)load it
        var urlId = level.urlId;
        hls.trigger(events["default"].LEVEL_LOADING, {
          url: level.url[urlId],
          level: newLevel,
          id: urlId
        });
      }
    } else {
      // invalid level id given, trigger error
      hls.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].OTHER_ERROR,
        details: errors["ErrorDetails"].LEVEL_SWITCH_ERROR,
        level: newLevel,
        fatal: false,
        reason: 'invalid level idx'
      });
    }
  };

  _proto.onError = function onError(data) {
    if (data.fatal) {
      if (data.type === errors["ErrorTypes"].NETWORK_ERROR) {
        this.clearTimer();
      }

      return;
    }

    var levelError = false,
        fragmentError = false;
    var levelIndex; // try to recover not fatal errors

    switch (data.details) {
      case errors["ErrorDetails"].FRAG_LOAD_ERROR:
      case errors["ErrorDetails"].FRAG_LOAD_TIMEOUT:
      case errors["ErrorDetails"].KEY_LOAD_ERROR:
      case errors["ErrorDetails"].KEY_LOAD_TIMEOUT:
        levelIndex = data.frag.level;
        fragmentError = true;
        break;

      case errors["ErrorDetails"].LEVEL_LOAD_ERROR:
      case errors["ErrorDetails"].LEVEL_LOAD_TIMEOUT:
        levelIndex = data.context.level;
        levelError = true;
        break;

      case errors["ErrorDetails"].REMUX_ALLOC_ERROR:
        levelIndex = data.level;
        levelError = true;
        break;
    }

    if (levelIndex !== undefined) {
      this.recoverLevel(data, levelIndex, levelError, fragmentError);
    }
  };
  /**
   * Switch to a redundant stream if any available.
   * If redundant stream is not available, emergency switch down if ABR mode is enabled.
   *
   * @param {Object} errorEvent
   * @param {Number} levelIndex current level index
   * @param {Boolean} levelError
   * @param {Boolean} fragmentError
   */
  // FIXME Find a better abstraction where fragment/level retry management is well decoupled


  _proto.recoverLevel = function recoverLevel(errorEvent, levelIndex, levelError, fragmentError) {
    var _this2 = this;

    var config = this.hls.config;
    var errorDetails = errorEvent.details;
    var level = this._levels[levelIndex];
    var redundantLevels, delay, nextLevel;
    level.loadError++;
    level.fragmentError = fragmentError;

    if (levelError) {
      if (this.levelRetryCount + 1 <= config.levelLoadingMaxRetry) {
        // exponential backoff capped to max retry timeout
        delay = Math.min(Math.pow(2, this.levelRetryCount) * config.levelLoadingRetryDelay, config.levelLoadingMaxRetryTimeout); // Schedule level reload

        this.timer = setTimeout(function () {
          return _this2.loadLevel();
        }, delay); // boolean used to inform stream controller not to switch back to IDLE on non fatal error

        errorEvent.levelRetry = true;
        this.levelRetryCount++;
        logger["logger"].warn("level controller, " + errorDetails + ", retry in " + delay + " ms, current retry count is " + this.levelRetryCount);
      } else {
        logger["logger"].error("level controller, cannot recover from " + errorDetails + " error");
        this.currentLevelIndex = null; // stopping live reloading timer if any

        this.clearTimer(); // switch error to fatal

        errorEvent.fatal = true;
        return;
      }
    } // Try any redundant streams if available for both errors: level and fragment
    // If level.loadError reaches redundantLevels it means that we tried them all, no hope  => let's switch down


    if (levelError || fragmentError) {
      redundantLevels = level.url.length;

      if (redundantLevels > 1 && level.loadError < redundantLevels) {
        level.urlId = (level.urlId + 1) % redundantLevels;
        level.details = undefined;
        logger["logger"].warn("level controller, " + errorDetails + " for level " + levelIndex + ": switching to redundant URL-id " + level.urlId); // console.log('Current audio track group ID:', this.hls.audioTracks[this.hls.audioTrack].groupId);
        // console.log('New video quality level audio group id:', level.attrs.AUDIO);
      } else {
        // Search for available level
        if (this.manualLevelIndex === -1) {
          // When lowest level has been reached, let's start hunt from the top
          nextLevel = levelIndex === 0 ? this._levels.length - 1 : levelIndex - 1;
          logger["logger"].warn("level controller, " + errorDetails + ": switch to " + nextLevel);
          this.hls.nextAutoLevel = this.currentLevelIndex = nextLevel;
        } else if (fragmentError) {
          // Allow fragment retry as long as configuration allows.
          // reset this._level so that another call to set level() will trigger again a frag load
          logger["logger"].warn("level controller, " + errorDetails + ": reload a fragment");
          this.currentLevelIndex = null;
        }
      }
    }
  }; // reset errors on the successful load of a fragment


  _proto.onFragLoaded = function onFragLoaded(_ref3) {
    var frag = _ref3.frag;

    if (frag !== undefined && frag.type === 'main') {
      var level = this._levels[frag.level];

      if (level !== undefined) {
        level.fragmentError = false;
        level.loadError = 0;
        this.levelRetryCount = 0;
      }
    }
  };

  _proto.onLevelLoaded = function onLevelLoaded(data) {
    var _this3 = this;

    var level = data.level,
        details = data.details; // only process level loaded events matching with expected level

    if (level !== this.currentLevelIndex) {
      return;
    }

    var curLevel = this._levels[level]; // reset level load error counter on successful level loaded only if there is no issues with fragments

    if (!curLevel.fragmentError) {
      curLevel.loadError = 0;
      this.levelRetryCount = 0;
    } // if current playlist is a live playlist, arm a timer to reload it


    if (details.live) {
      var reloadInterval = computeReloadInterval(curLevel.details, details, data.stats.trequest);
      logger["logger"].log("live playlist, reload in " + Math.round(reloadInterval) + " ms");
      this.timer = setTimeout(function () {
        return _this3.loadLevel();
      }, reloadInterval);
    } else {
      this.clearTimer();
    }
  };

  _proto.onAudioTrackSwitched = function onAudioTrackSwitched(data) {
    var audioGroupId = this.hls.audioTracks[data.id].groupId;
    var currentLevel = this.hls.levels[this.currentLevelIndex];

    if (!currentLevel) {
      return;
    }

    if (currentLevel.audioGroupIds) {
      var urlId = -1;

      for (var i = 0; i < currentLevel.audioGroupIds.length; i++) {
        if (currentLevel.audioGroupIds[i] === audioGroupId) {
          urlId = i;
          break;
        }
      }

      if (urlId !== currentLevel.urlId) {
        currentLevel.urlId = urlId;
        this.startLoad();
      }
    }
  };

  _proto.loadLevel = function loadLevel() {
    logger["logger"].debug('call to loadLevel');

    if (this.currentLevelIndex !== null && this.canload) {
      var levelObject = this._levels[this.currentLevelIndex];

      if (typeof levelObject === 'object' && levelObject.url.length > 0) {
        var level = this.currentLevelIndex;
        var id = levelObject.urlId;
        var url = levelObject.url[id];
        logger["logger"].log("Attempt loading level index " + level + " with URL-id " + id); // console.log('Current audio track group ID:', this.hls.audioTracks[this.hls.audioTrack].groupId);
        // console.log('New video quality level audio group id:', levelObject.attrs.AUDIO, level);

        this.hls.trigger(events["default"].LEVEL_LOADING, {
          url: url,
          level: level,
          id: id
        });
      }
    }
  };

  level_controller_createClass(LevelController, [{
    key: "levels",
    get: function get() {
      return this._levels;
    }
  }, {
    key: "level",
    get: function get() {
      return this.currentLevelIndex;
    },
    set: function set(newLevel) {
      var levels = this._levels;

      if (levels) {
        newLevel = Math.min(newLevel, levels.length - 1);

        if (this.currentLevelIndex !== newLevel || !levels[newLevel].details) {
          this.setLevelInternal(newLevel);
        }
      }
    }
  }, {
    key: "manualLevel",
    get: function get() {
      return this.manualLevelIndex;
    },
    set: function set(newLevel) {
      this.manualLevelIndex = newLevel;

      if (this._startLevel === undefined) {
        this._startLevel = newLevel;
      }

      if (newLevel !== -1) {
        this.level = newLevel;
      }
    }
  }, {
    key: "firstLevel",
    get: function get() {
      return this._firstLevel;
    },
    set: function set(newLevel) {
      this._firstLevel = newLevel;
    }
  }, {
    key: "startLevel",
    get: function get() {
      // hls.startLevel takes precedence over config.startLevel
      // if none of these values are defined, fallback on this._firstLevel (first quality level appearing in variant manifest)
      if (this._startLevel === undefined) {
        var configStartLevel = this.hls.config.startLevel;

        if (configStartLevel !== undefined) {
          return configStartLevel;
        } else {
          return this._firstLevel;
        }
      } else {
        return this._startLevel;
      }
    },
    set: function set(newLevel) {
      this._startLevel = newLevel;
    }
  }, {
    key: "nextLoadLevel",
    get: function get() {
      if (this.manualLevelIndex !== -1) {
        return this.manualLevelIndex;
      } else {
        return this.hls.nextAutoLevel;
      }
    },
    set: function set(nextLevel) {
      this.level = nextLevel;

      if (this.manualLevelIndex === -1) {
        this.hls.nextAutoLevel = nextLevel;
      }
    }
  }]);

  return LevelController;
}(event_handler);


// EXTERNAL MODULE: ./src/demux/id3.js
var id3 = __webpack_require__("./src/demux/id3.js");

// CONCATENATED MODULE: ./src/utils/texttrack-utils.js
function sendAddTrackEvent(track, videoEl) {
  var event = null;

  try {
    event = new window.Event('addtrack');
  } catch (err) {
    // for IE11
    event = document.createEvent('Event');
    event.initEvent('addtrack', false, false);
  }

  event.track = track;
  videoEl.dispatchEvent(event);
}
function clearCurrentCues(track) {
  if (track && track.cues) {
    while (track.cues.length > 0) {
      track.removeCue(track.cues[0]);
    }
  }
}
// CONCATENATED MODULE: ./src/controller/id3-track-controller.js
function id3_track_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/*
 * id3 metadata track controller
*/





var id3_track_controller_ID3TrackController =
/*#__PURE__*/
function (_EventHandler) {
  id3_track_controller_inheritsLoose(ID3TrackController, _EventHandler);

  function ID3TrackController(hls) {
    var _this;

    _this = _EventHandler.call(this, hls, events["default"].MEDIA_ATTACHED, events["default"].MEDIA_DETACHING, events["default"].FRAG_PARSING_METADATA) || this;
    _this.id3Track = undefined;
    _this.media = undefined;
    return _this;
  }

  var _proto = ID3TrackController.prototype;

  _proto.destroy = function destroy() {
    event_handler.prototype.destroy.call(this);
  }; // Add ID3 metatadata text track.


  _proto.onMediaAttached = function onMediaAttached(data) {
    this.media = data.media;

    if (!this.media) {}
  };

  _proto.onMediaDetaching = function onMediaDetaching() {
    clearCurrentCues(this.id3Track);
    this.id3Track = undefined;
    this.media = undefined;
  };

  _proto.getID3Track = function getID3Track(textTracks) {
    for (var i = 0; i < textTracks.length; i++) {
      var textTrack = textTracks[i];

      if (textTrack.kind === 'metadata' && textTrack.label === 'id3') {
        // send 'addtrack' when reusing the textTrack for metadata,
        // same as what we do for captions
        sendAddTrackEvent(textTrack, this.media);
        return textTrack;
      }
    }

    return this.media.addTextTrack('metadata', 'id3');
  };

  _proto.onFragParsingMetadata = function onFragParsingMetadata(data) {
    var fragment = data.frag;
    var samples = data.samples; // create track dynamically

    if (!this.id3Track) {
      this.id3Track = this.getID3Track(this.media.textTracks);
      this.id3Track.mode = 'hidden';
    } // Attempt to recreate Safari functionality by creating
    // WebKitDataCue objects when available and store the decoded
    // ID3 data in the value property of the cue


    var Cue = window.WebKitDataCue || window.VTTCue || window.TextTrackCue;

    for (var i = 0; i < samples.length; i++) {
      var frames = id3["default"].getID3Frames(samples[i].data);

      if (frames) {
        var startTime = samples[i].pts;
        var endTime = i < samples.length - 1 ? samples[i + 1].pts : fragment.endPTS; // Give a slight bump to the endTime if it's equal to startTime to avoid a SyntaxError in IE

        if (startTime === endTime) {
          endTime += 0.0001;
        }

        for (var j = 0; j < frames.length; j++) {
          var frame = frames[j]; // Safari doesn't put the timestamp frame in the TextTrack

          if (!id3["default"].isTimeStampFrame(frame)) {
            var cue = new Cue(startTime, endTime, '');
            cue.value = frame;
            this.id3Track.addCue(cue);
          }
        }
      }
    }
  };

  return ID3TrackController;
}(event_handler);

/* harmony default export */ var id3_track_controller = (id3_track_controller_ID3TrackController);
// CONCATENATED MODULE: ./src/is-supported.ts

function is_supported_isSupported() {
  var mediaSource = getMediaSource();
  var sourceBuffer = SourceBuffer || window.WebKitSourceBuffer;
  var isTypeSupported = mediaSource && typeof mediaSource.isTypeSupported === 'function' && mediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"'); // if SourceBuffer is exposed ensure its API is valid
  // safari and old version of Chrome doe not expose SourceBuffer globally so checking SourceBuffer.prototype is impossible

  var sourceBufferValidAPI = !sourceBuffer || sourceBuffer.prototype && typeof sourceBuffer.prototype.appendBuffer === 'function' && typeof sourceBuffer.prototype.remove === 'function';
  return !!isTypeSupported && !!sourceBufferValidAPI;
}
// CONCATENATED MODULE: ./src/utils/ewma.js
/*
 * compute an Exponential Weighted moving average
 * - https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
 *  - heavily inspired from shaka-player
 */
var EWMA =
/*#__PURE__*/
function () {
  //  About half of the estimated value will be from the last |halfLife| samples by weight.
  function EWMA(halfLife) {
    // Larger values of alpha expire historical data more slowly.
    this.alpha_ = halfLife ? Math.exp(Math.log(0.5) / halfLife) : 0;
    this.estimate_ = 0;
    this.totalWeight_ = 0;
  }

  var _proto = EWMA.prototype;

  _proto.sample = function sample(weight, value) {
    var adjAlpha = Math.pow(this.alpha_, weight);
    this.estimate_ = value * (1 - adjAlpha) + adjAlpha * this.estimate_;
    this.totalWeight_ += weight;
  };

  _proto.getTotalWeight = function getTotalWeight() {
    return this.totalWeight_;
  };

  _proto.getEstimate = function getEstimate() {
    if (this.alpha_) {
      var zeroFactor = 1 - Math.pow(this.alpha_, this.totalWeight_);
      return this.estimate_ / zeroFactor;
    } else {
      return this.estimate_;
    }
  };

  return EWMA;
}();

/* harmony default export */ var ewma = (EWMA);
// CONCATENATED MODULE: ./src/utils/ewma-bandwidth-estimator.js
/*
 * EWMA Bandwidth Estimator
 *  - heavily inspired from shaka-player
 * Tracks bandwidth samples and estimates available bandwidth.
 * Based on the minimum of two exponentially-weighted moving averages with
 * different half-lives.
 */


var ewma_bandwidth_estimator_EwmaBandWidthEstimator =
/*#__PURE__*/
function () {
  function EwmaBandWidthEstimator(hls, slow, fast, defaultEstimate) {
    this.hls = hls;
    this.defaultEstimate_ = defaultEstimate;
    this.minWeight_ = 0.001;
    this.minDelayMs_ = 50;
    this.slow_ = new ewma(slow);
    this.fast_ = new ewma(fast);
  }

  var _proto = EwmaBandWidthEstimator.prototype;

  _proto.sample = function sample(durationMs, numBytes) {
    durationMs = Math.max(durationMs, this.minDelayMs_);
    var numBits = 8 * numBytes,
        // weight is duration in seconds
    durationS = durationMs / 1000,
        // value is bandwidth in bits/s
    bandwidthInBps = numBits / durationS;
    this.fast_.sample(durationS, bandwidthInBps);
    this.slow_.sample(durationS, bandwidthInBps);
  };

  _proto.canEstimate = function canEstimate() {
    var fast = this.fast_;
    return fast && fast.getTotalWeight() >= this.minWeight_;
  };

  _proto.getEstimate = function getEstimate() {
    if (this.canEstimate()) {
      // console.log('slow estimate:'+ Math.round(this.slow_.getEstimate()));
      // console.log('fast estimate:'+ Math.round(this.fast_.getEstimate()));
      // Take the minimum of these two estimates.  This should have the effect of
      // adapting down quickly, but up more slowly.
      return Math.min(this.fast_.getEstimate(), this.slow_.getEstimate());
    } else {
      return this.defaultEstimate_;
    }
  };

  _proto.destroy = function destroy() {};

  return EwmaBandWidthEstimator;
}();

/* harmony default export */ var ewma_bandwidth_estimator = (ewma_bandwidth_estimator_EwmaBandWidthEstimator);
// CONCATENATED MODULE: ./src/controller/abr-controller.js



function abr_controller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function abr_controller_createClass(Constructor, protoProps, staticProps) { if (protoProps) abr_controller_defineProperties(Constructor.prototype, protoProps); if (staticProps) abr_controller_defineProperties(Constructor, staticProps); return Constructor; }

function abr_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function abr_controller_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

/*
 * simple ABR Controller
 *  - compute next level based on last fragment bw heuristics
 *  - implement an abandon rules triggered if we have less than 2 frag buffered and if computed bw shows that we risk buffer stalling
 */






var abr_controller_window = window,
    abr_controller_performance = abr_controller_window.performance;

var abr_controller_AbrController =
/*#__PURE__*/
function (_EventHandler) {
  abr_controller_inheritsLoose(AbrController, _EventHandler);

  function AbrController(hls) {
    var _this;

    _this = _EventHandler.call(this, hls, events["default"].FRAG_LOADING, events["default"].FRAG_LOADED, events["default"].FRAG_BUFFERED, events["default"].ERROR) || this;
    _this.lastLoadedFragLevel = 0;
    _this._nextAutoLevel = -1;
    _this.hls = hls;
    _this.timer = null;
    _this._bwEstimator = null;
    _this.onCheck = _this._abandonRulesCheck.bind(abr_controller_assertThisInitialized(abr_controller_assertThisInitialized(_this)));
    return _this;
  }

  var _proto = AbrController.prototype;

  _proto.destroy = function destroy() {
    this.clearTimer();
    event_handler.prototype.destroy.call(this);
  };

  _proto.onFragLoading = function onFragLoading(data) {
    var frag = data.frag;

    if (frag.type === 'main') {
      if (!this.timer) {
        this.fragCurrent = frag;
        this.timer = setInterval(this.onCheck, 100);
      } // lazy init of BwEstimator, rationale is that we use different params for Live/VoD
      // so we need to wait for stream manifest / playlist type to instantiate it.


      if (!this._bwEstimator) {
        var hls = this.hls;
        var config = hls.config;
        var level = frag.level;
        var isLive = hls.levels[level].details.live;
        var ewmaFast;
        var ewmaSlow;

        if (isLive) {
          ewmaFast = config.abrEwmaFastLive;
          ewmaSlow = config.abrEwmaSlowLive;
        } else {
          ewmaFast = config.abrEwmaFastVoD;
          ewmaSlow = config.abrEwmaSlowVoD;
        }

        this._bwEstimator = new ewma_bandwidth_estimator(hls, ewmaSlow, ewmaFast, config.abrEwmaDefaultEstimate);
      }
    }
  };

  _proto._abandonRulesCheck = function _abandonRulesCheck() {
    /*
      monitor fragment retrieval time...
      we compute expected time of arrival of the complete fragment.
      we compare it to expected time of buffer starvation
    */
    var hls = this.hls;
    var video = hls.media;
    var frag = this.fragCurrent;

    if (!frag) {
      return;
    }

    var loader = frag.loader;
    var minAutoLevel = hls.minAutoLevel; // if loader has been destroyed or loading has been aborted, stop timer and return

    if (!loader || loader.stats && loader.stats.aborted) {
      logger["logger"].warn('frag loader destroy or aborted, disarm abandonRules');
      this.clearTimer(); // reset forced auto level value so that next level will be selected

      this._nextAutoLevel = -1;
      return;
    }

    var stats = loader.stats;
    /* only monitor frag retrieval time if
    (video not paused OR first fragment being loaded(ready state === HAVE_NOTHING = 0)) AND autoswitching enabled AND not lowest level (=> means that we have several levels) */

    if (video && stats && (!video.paused && video.playbackRate !== 0 || !video.readyState) && frag.autoLevel && frag.level) {
      var requestDelay = abr_controller_performance.now() - stats.trequest;
      var playbackRate = Math.abs(video.playbackRate); // monitor fragment load progress after half of expected fragment duration,to stabilize bitrate

      if (requestDelay > 500 * frag.duration / playbackRate) {
        var levels = hls.levels;
        var loadRate = Math.max(1, stats.bw ? stats.bw / 8 : stats.loaded * 1000 / requestDelay); // byte/s; at least 1 byte/s to avoid division by zero
        // compute expected fragment length using frag duration and level bitrate. also ensure that expected len is gte than already loaded size

        var level = levels[frag.level];
        var levelBitrate = level.realBitrate ? Math.max(level.realBitrate, level.bitrate) : level.bitrate;
        var expectedLen = stats.total ? stats.total : Math.max(stats.loaded, Math.round(frag.duration * levelBitrate / 8));
        var pos = video.currentTime;
        var fragLoadedDelay = (expectedLen - stats.loaded) / loadRate;
        var bufferStarvationDelay = (BufferHelper.bufferInfo(video, pos, hls.config.maxBufferHole).end - pos) / playbackRate; // consider emergency switch down only if we have less than 2 frag buffered AND
        // time to finish loading current fragment is bigger than buffer starvation delay
        // ie if we risk buffer starvation if bw does not increase quickly

        if (bufferStarvationDelay < 2 * frag.duration / playbackRate && fragLoadedDelay > bufferStarvationDelay) {
          var fragLevelNextLoadedDelay;
          var nextLoadLevel; // lets iterate through lower level and try to find the biggest one that could avoid rebuffering
          // we start from current level - 1 and we step down , until we find a matching level

          for (nextLoadLevel = frag.level - 1; nextLoadLevel > minAutoLevel; nextLoadLevel--) {
            // compute time to load next fragment at lower level
            // 0.8 : consider only 80% of current bw to be conservative
            // 8 = bits per byte (bps/Bps)
            var levelNextBitrate = levels[nextLoadLevel].realBitrate ? Math.max(levels[nextLoadLevel].realBitrate, levels[nextLoadLevel].bitrate) : levels[nextLoadLevel].bitrate;

            var _fragLevelNextLoadedDelay = frag.duration * levelNextBitrate / (8 * 0.8 * loadRate);

            if (_fragLevelNextLoadedDelay < bufferStarvationDelay) {
              // we found a lower level that be rebuffering free with current estimated bw !
              break;
            }
          } // only emergency switch down if it takes less time to load new fragment at lowest level instead
          // of finishing loading current one ...


          if (fragLevelNextLoadedDelay < fragLoadedDelay) {
            logger["logger"].warn("loading too slow, abort fragment loading and switch to level " + nextLoadLevel + ":fragLoadedDelay[" + nextLoadLevel + "]<fragLoadedDelay[" + (frag.level - 1) + "];bufferStarvationDelay:" + fragLevelNextLoadedDelay.toFixed(1) + "<" + fragLoadedDelay.toFixed(1) + ":" + bufferStarvationDelay.toFixed(1)); // force next load level in auto mode

            hls.nextLoadLevel = nextLoadLevel; // update bw estimate for this fragment before cancelling load (this will help reducing the bw)

            this._bwEstimator.sample(requestDelay, stats.loaded); // abort fragment loading


            loader.abort(); // stop abandon rules timer

            this.clearTimer();
            hls.trigger(events["default"].FRAG_LOAD_EMERGENCY_ABORTED, {
              frag: frag,
              stats: stats
            });
          }
        }
      }
    }
  };

  _proto.onFragLoaded = function onFragLoaded(data) {
    var frag = data.frag;

    if (frag.type === 'main' && Object(number_isFinite["isFiniteNumber"])(frag.sn)) {
      // stop monitoring bw once frag loaded
      this.clearTimer(); // store level id after successful fragment load

      this.lastLoadedFragLevel = frag.level; // reset forced auto level value so that next level will be selected

      this._nextAutoLevel = -1; // compute level average bitrate

      if (this.hls.config.abrMaxWithRealBitrate) {
        var level = this.hls.levels[frag.level];
        var loadedBytes = (level.loaded ? level.loaded.bytes : 0) + data.stats.loaded;
        var loadedDuration = (level.loaded ? level.loaded.duration : 0) + data.frag.duration;
        level.loaded = {
          bytes: loadedBytes,
          duration: loadedDuration
        };
        level.realBitrate = Math.round(8 * loadedBytes / loadedDuration);
      } // if fragment has been loaded to perform a bitrate test,


      if (data.frag.bitrateTest) {
        var stats = data.stats;
        stats.tparsed = stats.tbuffered = stats.tload;
        this.onFragBuffered(data);
      }
    }
  };

  _proto.onFragBuffered = function onFragBuffered(data) {
    var stats = data.stats;
    var frag = data.frag; // only update stats on first frag buffering
    // if same frag is loaded multiple times, it might be in browser cache, and loaded quickly
    // and leading to wrong bw estimation
    // on bitrate test, also only update stats once (if tload = tbuffered == on FRAG_LOADED)

    if (stats.aborted !== true && frag.type === 'main' && Object(number_isFinite["isFiniteNumber"])(frag.sn) && (!frag.bitrateTest || stats.tload === stats.tbuffered)) {
      // use tparsed-trequest instead of tbuffered-trequest to compute fragLoadingProcessing; rationale is that  buffer appending only happens once media is attached
      // in case we use config.startFragPrefetch while media is not attached yet, fragment might be parsed while media not attached yet, but it will only be buffered on media attached
      // as a consequence it could happen really late in the process. meaning that appending duration might appears huge ... leading to underestimated throughput estimation
      var fragLoadingProcessingMs = stats.tparsed - stats.trequest;
      logger["logger"].log("latency/loading/parsing/append/kbps:" + Math.round(stats.tfirst - stats.trequest) + "/" + Math.round(stats.tload - stats.tfirst) + "/" + Math.round(stats.tparsed - stats.tload) + "/" + Math.round(stats.tbuffered - stats.tparsed) + "/" + Math.round(8 * stats.loaded / (stats.tbuffered - stats.trequest)));

      this._bwEstimator.sample(fragLoadingProcessingMs, stats.loaded);

      stats.bwEstimate = this._bwEstimator.getEstimate(); // if fragment has been loaded to perform a bitrate test, (hls.startLevel = -1), store bitrate test delay duration

      if (frag.bitrateTest) {
        this.bitrateTestDelay = fragLoadingProcessingMs / 1000;
      } else {
        this.bitrateTestDelay = 0;
      }
    }
  };

  _proto.onError = function onError(data) {
    // stop timer in case of frag loading error
    switch (data.details) {
      case errors["ErrorDetails"].FRAG_LOAD_ERROR:
      case errors["ErrorDetails"].FRAG_LOAD_TIMEOUT:
        this.clearTimer();
        break;

      default:
        break;
    }
  };

  _proto.clearTimer = function clearTimer() {
    clearInterval(this.timer);
    this.timer = null;
  }; // return next auto level


  _proto._findBestLevel = function _findBestLevel(currentLevel, currentFragDuration, currentBw, minAutoLevel, maxAutoLevel, maxFetchDuration, bwFactor, bwUpFactor, levels) {
    for (var i = maxAutoLevel; i >= minAutoLevel; i--) {
      var levelInfo = levels[i];

      if (!levelInfo) {
        continue;
      }

      var levelDetails = levelInfo.details;
      var avgDuration = levelDetails ? levelDetails.totalduration / levelDetails.fragments.length : currentFragDuration;
      var live = levelDetails ? levelDetails.live : false;
      var adjustedbw = void 0; // follow algorithm captured from stagefright :
      // https://android.googlesource.com/platform/frameworks/av/+/master/media/libstagefright/httplive/LiveSession.cpp
      // Pick the highest bandwidth stream below or equal to estimated bandwidth.
      // consider only 80% of the available bandwidth, but if we are switching up,
      // be even more conservative (70%) to avoid overestimating and immediately
      // switching back.

      if (i <= currentLevel) {
        adjustedbw = bwFactor * currentBw;
      } else {
        adjustedbw = bwUpFactor * currentBw;
      }

      var bitrate = levels[i].realBitrate ? Math.max(levels[i].realBitrate, levels[i].bitrate) : levels[i].bitrate;
      var fetchDuration = bitrate * avgDuration / adjustedbw;
      logger["logger"].trace("level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: " + i + "/" + Math.round(adjustedbw) + "/" + bitrate + "/" + avgDuration + "/" + maxFetchDuration + "/" + fetchDuration); // if adjusted bw is greater than level bitrate AND

      if (adjustedbw > bitrate && ( // fragment fetchDuration unknown OR live stream OR fragment fetchDuration less than max allowed fetch duration, then this level matches
      // we don't account for max Fetch Duration for live streams, this is to avoid switching down when near the edge of live sliding window ...
      // special case to support startLevel = -1 (bitrateTest) on live streams : in that case we should not exit loop so that _findBestLevel will return -1
      !fetchDuration || live && !this.bitrateTestDelay || fetchDuration < maxFetchDuration)) {
        // as we are looping from highest to lowest, this will return the best achievable quality level
        return i;
      }
    } // not enough time budget even with quality level 0 ... rebuffering might happen


    return -1;
  };

  abr_controller_createClass(AbrController, [{
    key: "nextAutoLevel",
    get: function get() {
      var forcedAutoLevel = this._nextAutoLevel;
      var bwEstimator = this._bwEstimator; // in case next auto level has been forced, and bw not available or not reliable, return forced value

      if (forcedAutoLevel !== -1 && (!bwEstimator || !bwEstimator.canEstimate())) {
        return forcedAutoLevel;
      } // compute next level using ABR logic


      var nextABRAutoLevel = this._nextABRAutoLevel; // if forced auto level has been defined, use it to cap ABR computed quality level

      if (forcedAutoLevel !== -1) {
        nextABRAutoLevel = Math.min(forcedAutoLevel, nextABRAutoLevel);
      }

      return nextABRAutoLevel;
    },
    set: function set(nextLevel) {
      this._nextAutoLevel = nextLevel;
    }
  }, {
    key: "_nextABRAutoLevel",
    get: function get() {
      var hls = this.hls;
      var maxAutoLevel = hls.maxAutoLevel,
          levels = hls.levels,
          config = hls.config,
          minAutoLevel = hls.minAutoLevel;
      var video = hls.media;
      var currentLevel = this.lastLoadedFragLevel;
      var currentFragDuration = this.fragCurrent ? this.fragCurrent.duration : 0;
      var pos = video ? video.currentTime : 0; // playbackRate is the absolute value of the playback rate; if video.playbackRate is 0, we use 1 to load as
      // if we're playing back at the normal rate.

      var playbackRate = video && video.playbackRate !== 0 ? Math.abs(video.playbackRate) : 1.0;
      var avgbw = this._bwEstimator ? this._bwEstimator.getEstimate() : config.abrEwmaDefaultEstimate; // bufferStarvationDelay is the wall-clock time left until the playback buffer is exhausted.

      var bufferStarvationDelay = (BufferHelper.bufferInfo(video, pos, config.maxBufferHole).end - pos) / playbackRate; // First, look to see if we can find a level matching with our avg bandwidth AND that could also guarantee no rebuffering at all

      var bestLevel = this._findBestLevel(currentLevel, currentFragDuration, avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, config.abrBandWidthFactor, config.abrBandWidthUpFactor, levels);

      if (bestLevel >= 0) {
        return bestLevel;
      } else {
        logger["logger"].trace('rebuffering expected to happen, lets try to find a quality level minimizing the rebuffering'); // not possible to get rid of rebuffering ... let's try to find level that will guarantee less than maxStarvationDelay of rebuffering
        // if no matching level found, logic will return 0

        var maxStarvationDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxStarvationDelay) : config.maxStarvationDelay;
        var bwFactor = config.abrBandWidthFactor;
        var bwUpFactor = config.abrBandWidthUpFactor;

        if (bufferStarvationDelay === 0) {
          // in case buffer is empty, let's check if previous fragment was loaded to perform a bitrate test
          var bitrateTestDelay = this.bitrateTestDelay;

          if (bitrateTestDelay) {
            // if it is the case, then we need to adjust our max starvation delay using maxLoadingDelay config value
            // max video loading delay used in  automatic start level selection :
            // in that mode ABR controller will ensure that video loading time (ie the time to fetch the first fragment at lowest quality level +
            // the time to fetch the fragment at the appropriate quality level is less than ```maxLoadingDelay``` )
            // cap maxLoadingDelay and ensure it is not bigger 'than bitrate test' frag duration
            var maxLoadingDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxLoadingDelay) : config.maxLoadingDelay;
            maxStarvationDelay = maxLoadingDelay - bitrateTestDelay;
            logger["logger"].trace("bitrate test took " + Math.round(1000 * bitrateTestDelay) + "ms, set first fragment max fetchDuration to " + Math.round(1000 * maxStarvationDelay) + " ms"); // don't use conservative factor on bitrate test

            bwFactor = bwUpFactor = 1;
          }
        }

        bestLevel = this._findBestLevel(currentLevel, currentFragDuration, avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay + maxStarvationDelay, bwFactor, bwUpFactor, levels);
        return Math.max(bestLevel, 0);
      }
    }
  }]);

  return AbrController;
}(event_handler);

/* harmony default export */ var abr_controller = (abr_controller_AbrController);
// CONCATENATED MODULE: ./src/controller/buffer-controller.ts


function buffer_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/*
 * Buffer Controller
 */





var buffer_controller_MediaSource = getMediaSource();

var buffer_controller_BufferController =
/*#__PURE__*/
function (_EventHandler) {
  buffer_controller_inheritsLoose(BufferController, _EventHandler);

  // the value that we have set mediasource.duration to
  // (the actual duration may be tweaked slighly by the browser)
  // the value that we want to set mediaSource.duration to
  // the target duration of the current media playlist
  // current stream state: true - for live broadcast, false - for VoD content
  // cache the self generated object url to detect hijack of video tag
  // signals that the sourceBuffers need to be flushed
  // signals that mediaSource should have endOfStream called
  // this is optional because this property is removed from the class sometimes
  // The number of BUFFER_CODEC events received before any sourceBuffers are created
  // A reference to the attached media element
  // A reference to the active media source
  // List of pending segments to be appended to source buffer
  // A guard to see if we are currently appending to the source buffer
  // counters
  function BufferController(hls) {
    var _this;

    _this = _EventHandler.call(this, hls, events["default"].MEDIA_ATTACHING, events["default"].MEDIA_DETACHING, events["default"].MANIFEST_PARSED, events["default"].BUFFER_RESET, events["default"].BUFFER_APPENDING, events["default"].BUFFER_CODECS, events["default"].BUFFER_EOS, events["default"].BUFFER_FLUSHING, events["default"].LEVEL_PTS_UPDATED, events["default"].LEVEL_UPDATED) || this;
    _this._msDuration = null;
    _this._levelDuration = null;
    _this._levelTargetDuration = 10;
    _this._live = null;
    _this._objectUrl = null;
    _this._needsFlush = false;
    _this._needsEos = false;
    _this.config = void 0;
    _this.audioTimestampOffset = void 0;
    _this.bufferCodecEventsExpected = 0;
    _this.media = null;
    _this.mediaSource = null;
    _this.segments = [];
    _this.parent = void 0;
    _this.appending = false;
    _this.appended = 0;
    _this.appendError = 0;
    _this.flushBufferCounter = 0;
    _this.tracks = {};
    _this.pendingTracks = {};
    _this.sourceBuffer = {};
    _this.flushRange = [];

    _this._onMediaSourceOpen = function () {
      logger["logger"].log('media source opened');

      _this.hls.trigger(events["default"].MEDIA_ATTACHED, {
        media: _this.media
      });

      var mediaSource = _this.mediaSource;

      if (mediaSource) {
        // once received, don't listen anymore to sourceopen event
        mediaSource.removeEventListener('sourceopen', _this._onMediaSourceOpen);
      }

      _this.checkPendingTracks();
    };

    _this._onMediaSourceClose = function () {
      logger["logger"].log('media source closed');
    };

    _this._onMediaSourceEnded = function () {
      logger["logger"].log('media source ended');
    };

    _this._onSBUpdateEnd = function () {
      // update timestampOffset
      if (_this.audioTimestampOffset && _this.sourceBuffer.audio) {
        var audioBuffer = _this.sourceBuffer.audio;
        logger["logger"].warn("change mpeg audio timestamp offset from " + audioBuffer.timestampOffset + " to " + _this.audioTimestampOffset);
        audioBuffer.timestampOffset = _this.audioTimestampOffset;
        delete _this.audioTimestampOffset;
      }

      if (_this._needsFlush) {
        _this.doFlush();
      }

      if (_this._needsEos) {
        _this.checkEos();
      }

      _this.appending = false;
      var parent = _this.parent; // count nb of pending segments waiting for appending on this sourcebuffer

      var pending = _this.segments.reduce(function (counter, segment) {
        return segment.parent === parent ? counter + 1 : counter;
      }, 0); // this.sourceBuffer is better to use than media.buffered as it is closer to the PTS data from the fragments


      var timeRanges = {};
      var sbSet = _this.sourceBuffer;

      for (var streamType in sbSet) {
        var sb = sbSet[streamType];

        if (!sb) {
          throw Error("handling source buffer update end error: source buffer for " + streamType + " uninitilized and unable to update buffered TimeRanges.");
        }

        timeRanges[streamType] = sb.buffered;
      }

      _this.hls.trigger(events["default"].BUFFER_APPENDED, {
        parent: parent,
        pending: pending,
        timeRanges: timeRanges
      }); // don't append in flushing mode


      if (!_this._needsFlush) {
        _this.doAppending();
      }

      _this.updateMediaElementDuration(); // appending goes first


      if (pending === 0) {
        _this.flushLiveBackBuffer();
      }
    };

    _this._onSBUpdateError = function (event) {
      logger["logger"].error('sourceBuffer error:', event); // according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error
      // this error might not always be fatal (it is fatal if decode error is set, in that case
      // it will be followed by a mediaElement error ...)

      _this.hls.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].MEDIA_ERROR,
        details: errors["ErrorDetails"].BUFFER_APPENDING_ERROR,
        fatal: false
      }); // we don't need to do more than that, as accordin to the spec, updateend will be fired just after

    };

    _this.config = hls.config;
    return _this;
  }

  var _proto = BufferController.prototype;

  _proto.destroy = function destroy() {
    event_handler.prototype.destroy.call(this);
  };

  _proto.onLevelPtsUpdated = function onLevelPtsUpdated(data) {
    var type = data.type;
    var audioTrack = this.tracks.audio; // Adjusting `SourceBuffer.timestampOffset` (desired point in the timeline where the next frames should be appended)
    // in Chrome browser when we detect MPEG audio container and time delta between level PTS and `SourceBuffer.timestampOffset`
    // is greater than 100ms (this is enough to handle seek for VOD or level change for LIVE videos). At the time of change we issue
    // `SourceBuffer.abort()` and adjusting `SourceBuffer.timestampOffset` if `SourceBuffer.updating` is false or awaiting `updateend`
    // event if SB is in updating state.
    // More info here: https://github.com/video-dev/hls.js/issues/332#issuecomment-257986486

    if (type === 'audio' && audioTrack && audioTrack.container === 'audio/mpeg') {
      // Chrome audio mp3 track
      var audioBuffer = this.sourceBuffer.audio;

      if (!audioBuffer) {
        throw Error('Level PTS Updated and source buffer for audio uninitalized');
      }

      var delta = Math.abs(audioBuffer.timestampOffset - data.start); // adjust timestamp offset if time delta is greater than 100ms

      if (delta > 0.1) {
        var updating = audioBuffer.updating;

        try {
          audioBuffer.abort();
        } catch (err) {
          logger["logger"].warn('can not abort audio buffer: ' + err);
        }

        if (!updating) {
          logger["logger"].warn('change mpeg audio timestamp offset from ' + audioBuffer.timestampOffset + ' to ' + data.start);
          audioBuffer.timestampOffset = data.start;
        } else {
          this.audioTimestampOffset = data.start;
        }
      }
    }
  };

  _proto.onManifestParsed = function onManifestParsed(data) {
    // in case of alt audio 2 BUFFER_CODECS events will be triggered, one per stream controller
    // sourcebuffers will be created all at once when the expected nb of tracks will be reached
    // in case alt audio is not used, only one BUFFER_CODEC event will be fired from main stream controller
    // it will contain the expected nb of source buffers, no need to compute it
    this.bufferCodecEventsExpected = data.altAudio ? 2 : 1;
    logger["logger"].log(this.bufferCodecEventsExpected + " bufferCodec event(s) expected");
  };

  _proto.onMediaAttaching = function onMediaAttaching(data) {
    var media = this.media = data.media;

    if (media) {
      // setup the media source
      var ms = this.mediaSource = new buffer_controller_MediaSource(); // Media Source listeners

      ms.addEventListener('sourceopen', this._onMediaSourceOpen);
      ms.addEventListener('sourceended', this._onMediaSourceEnded);
      ms.addEventListener('sourceclose', this._onMediaSourceClose); // link video and media Source

      media.src = window.URL.createObjectURL(ms); // cache the locally generated object url

      this._objectUrl = media.src;
    }
  };

  _proto.onMediaDetaching = function onMediaDetaching() {
    logger["logger"].log('media source detaching');
    var ms = this.mediaSource;

    if (ms) {
      if (ms.readyState === 'open') {
        try {
          // endOfStream could trigger exception if any sourcebuffer is in updating state
          // we don't really care about checking sourcebuffer state here,
          // as we are anyway detaching the MediaSource
          // let's just avoid this exception to propagate
          ms.endOfStream();
        } catch (err) {
          logger["logger"].warn("onMediaDetaching:" + err.message + " while calling endOfStream");
        }
      }

      ms.removeEventListener('sourceopen', this._onMediaSourceOpen);
      ms.removeEventListener('sourceended', this._onMediaSourceEnded);
      ms.removeEventListener('sourceclose', this._onMediaSourceClose); // Detach properly the MediaSource from the HTMLMediaElement as
      // suggested in https://github.com/w3c/media-source/issues/53.

      if (this.media) {
        if (this._objectUrl) {
          window.URL.revokeObjectURL(this._objectUrl);
        } // clean up video tag src only if it's our own url. some external libraries might
        // hijack the video tag and change its 'src' without destroying the Hls instance first


        if (this.media.src === this._objectUrl) {
          this.media.removeAttribute('src');
          this.media.load();
        } else {
          logger["logger"].warn('media.src was changed by a third party - skip cleanup');
        }
      }

      this.mediaSource = null;
      this.media = null;
      this._objectUrl = null;
      this.pendingTracks = {};
      this.tracks = {};
      this.sourceBuffer = {};
      this.flushRange = [];
      this.segments = [];
      this.appended = 0;
    }

    this.hls.trigger(events["default"].MEDIA_DETACHED);
  };

  _proto.checkPendingTracks = function checkPendingTracks() {
    var bufferCodecEventsExpected = this.bufferCodecEventsExpected,
        pendingTracks = this.pendingTracks; // Check if we've received all of the expected bufferCodec events. When none remain, create all the sourceBuffers at once.
    // This is important because the MSE spec allows implementations to throw QuotaExceededErrors if creating new sourceBuffers after
    // data has been appended to existing ones.
    // 2 tracks is the max (one for audio, one for video). If we've reach this max go ahead and create the buffers.

    var pendingTracksCount = Object.keys(pendingTracks).length;

    if (pendingTracksCount && !bufferCodecEventsExpected || pendingTracksCount === 2) {
      // ok, let's create them now !
      this.createSourceBuffers(pendingTracks);
      this.pendingTracks = {}; // append any pending segments now !

      this.doAppending();
    }
  };

  _proto.onBufferReset = function onBufferReset() {
    var sourceBuffer = this.sourceBuffer;

    for (var _type in sourceBuffer) {
      var sb = sourceBuffer[_type];

      try {
        if (sb) {
          if (this.mediaSource) {
            this.mediaSource.removeSourceBuffer(sb);
          }

          sb.removeEventListener('updateend', this._onSBUpdateEnd);
          sb.removeEventListener('error', this._onSBUpdateError);
        }
      } catch (err) {}
    }

    this.sourceBuffer = {};
    this.flushRange = [];
    this.segments = [];
    this.appended = 0;
  };

  _proto.onBufferCodecs = function onBufferCodecs(tracks) {
    var _this2 = this;

    // if source buffer(s) not created yet, appended buffer tracks in this.pendingTracks
    // if sourcebuffers already created, do nothing ...
    if (Object.keys(this.sourceBuffer).length) {
      return;
    }

    Object.keys(tracks).forEach(function (trackName) {
      _this2.pendingTracks[trackName] = tracks[trackName];
    });
    this.bufferCodecEventsExpected = Math.max(this.bufferCodecEventsExpected - 1, 0);

    if (this.mediaSource && this.mediaSource.readyState === 'open') {
      this.checkPendingTracks();
    }
  };

  _proto.createSourceBuffers = function createSourceBuffers(tracks) {
    var sourceBuffer = this.sourceBuffer,
        mediaSource = this.mediaSource;

    if (!mediaSource) {
      throw Error('createSourceBuffers called when mediaSource was null');
    }

    for (var trackName in tracks) {
      if (!sourceBuffer[trackName]) {
        var track = tracks[trackName];

        if (!track) {
          throw Error("source buffer exists for track " + trackName + ", however track does not");
        } // use levelCodec as first priority


        var codec = track.levelCodec || track.codec;
        var mimeType = track.container + ";codecs=" + codec;
        logger["logger"].log("creating sourceBuffer(" + mimeType + ")");

        try {
          var sb = sourceBuffer[trackName] = mediaSource.addSourceBuffer(mimeType);
          sb.addEventListener('updateend', this._onSBUpdateEnd);
          sb.addEventListener('error', this._onSBUpdateError);
          this.tracks[trackName] = {
            buffer: sb,
            codec: codec,
            container: track.container,
            levelCodec: track.levelCodec
          };
        } catch (err) {
          logger["logger"].error("error while trying to add sourceBuffer:" + err.message);
          this.hls.trigger(events["default"].ERROR, {
            type: errors["ErrorTypes"].MEDIA_ERROR,
            details: errors["ErrorDetails"].BUFFER_ADD_CODEC_ERROR,
            fatal: false,
            err: err,
            mimeType: mimeType
          });
        }
      }
    }

    this.hls.trigger(events["default"].BUFFER_CREATED, {
      tracks: this.tracks
    });
  };

  _proto.onBufferAppending = function onBufferAppending(data) {
    if (!this._needsFlush) {
      if (!this.segments) {
        this.segments = [data];
      } else {
        this.segments.push(data);
      }

      this.doAppending();
    }
  }; // on BUFFER_EOS mark matching sourcebuffer(s) as ended and trigger checkEos()
  // an undefined data.type will mark all buffers as EOS.


  _proto.onBufferEos = function onBufferEos(data) {
    for (var _type2 in this.sourceBuffer) {
      if (!data.type || data.type === _type2) {
        var sb = this.sourceBuffer[_type2];

        if (sb && !sb.ended) {
          sb.ended = true;
          logger["logger"].log(_type2 + " sourceBuffer now EOS");
        }
      }
    }

    this.checkEos();
  }; // if all source buffers are marked as ended, signal endOfStream() to MediaSource.


  _proto.checkEos = function checkEos() {
    var sourceBuffer = this.sourceBuffer,
        mediaSource = this.mediaSource;

    if (!mediaSource || mediaSource.readyState !== 'open') {
      this._needsEos = false;
      return;
    }

    for (var _type3 in sourceBuffer) {
      var sb = sourceBuffer[_type3];
      if (!sb) continue;

      if (!sb.ended) {
        return;
      }

      if (sb.updating) {
        this._needsEos = true;
        return;
      }
    }

    logger["logger"].log('all media data are available, signal endOfStream() to MediaSource and stop loading fragment'); // Notify the media element that it now has all of the media data

    try {
      mediaSource.endOfStream();
    } catch (e) {
      logger["logger"].warn('exception while calling mediaSource.endOfStream()');
    }

    this._needsEos = false;
  };

  _proto.onBufferFlushing = function onBufferFlushing(data) {
    if (data.type) {
      this.flushRange.push({
        start: data.startOffset,
        end: data.endOffset,
        type: data.type
      });
    } else {
      this.flushRange.push({
        start: data.startOffset,
        end: data.endOffset,
        type: 'video'
      });
      this.flushRange.push({
        start: data.startOffset,
        end: data.endOffset,
        type: 'audio'
      });
    } // attempt flush immediately


    this.flushBufferCounter = 0;
    this.doFlush();
  };

  _proto.flushLiveBackBuffer = function flushLiveBackBuffer() {
    if (!this.media) {
      throw Error('flushLiveBackBuffer called without attaching media');
    } // clear back buffer for live only


    if (!this._live) {
      return;
    }

    var liveBackBufferLength = this.config.liveBackBufferLength;

    if (!isFinite(liveBackBufferLength) || liveBackBufferLength < 0) {
      return;
    }

    var currentTime = this.media.currentTime;
    var sourceBuffer = this.sourceBuffer;
    var bufferTypes = Object.keys(sourceBuffer);
    var targetBackBufferPosition = currentTime - Math.max(liveBackBufferLength, this._levelTargetDuration);

    for (var index = bufferTypes.length - 1; index >= 0; index--) {
      var bufferType = bufferTypes[index];
      var sb = sourceBuffer[bufferType];

      if (sb) {
        var buffered = sb.buffered; // when target buffer start exceeds actual buffer start

        if (buffered.length > 0 && targetBackBufferPosition > buffered.start(0)) {
          // remove buffer up until current time minus minimum back buffer length (removing buffer too close to current
          // time will lead to playback freezing)
          // credits for level target duration - https://github.com/videojs/http-streaming/blob/3132933b6aa99ddefab29c10447624efd6fd6e52/src/segment-loader.js#L91
          this.removeBufferRange(bufferType, sb, 0, targetBackBufferPosition);
        }
      }
    }
  };

  _proto.onLevelUpdated = function onLevelUpdated(_ref) {
    var details = _ref.details;

    if (details.fragments.length > 0) {
      this._levelDuration = details.totalduration + details.fragments[0].start;
      this._levelTargetDuration = details.averagetargetduration || details.targetduration || 10;
      this._live = details.live;
      this.updateMediaElementDuration();
    }
  };
  /**
   * Update Media Source duration to current level duration or override to Infinity if configuration parameter
   * 'liveDurationInfinity` is set to `true`
   * More details: https://github.com/video-dev/hls.js/issues/355
   */


  _proto.updateMediaElementDuration = function updateMediaElementDuration() {
    var config = this.config;
    var duration;

    if (this._levelDuration === null || !this.media || !this.mediaSource || !this.sourceBuffer || this.media.readyState === 0 || this.mediaSource.readyState !== 'open') {
      return;
    }

    for (var _type4 in this.sourceBuffer) {
      var sb = this.sourceBuffer[_type4];

      if (sb && sb.updating === true) {
        // can't set duration whilst a buffer is updating
        return;
      }
    }

    duration = this.media.duration; // initialise to the value that the media source is reporting

    if (this._msDuration === null) {
      this._msDuration = this.mediaSource.duration;
    }

    if (this._live === true && config.liveDurationInfinity === true) {
      // Override duration to Infinity
      logger["logger"].log('Media Source duration is set to Infinity');
      this._msDuration = this.mediaSource.duration = Infinity;
    } else if (this._levelDuration > this._msDuration && this._levelDuration > duration || !Object(number_isFinite["isFiniteNumber"])(duration)) {
      // levelDuration was the last value we set.
      // not using mediaSource.duration as the browser may tweak this value
      // only update Media Source duration if its value increase, this is to avoid
      // flushing already buffered portion when switching between quality level
      logger["logger"].log("Updating Media Source duration to " + this._levelDuration.toFixed(3));
      this._msDuration = this.mediaSource.duration = this._levelDuration;
    }
  };

  _proto.doFlush = function doFlush() {
    // loop through all buffer ranges to flush
    while (this.flushRange.length) {
      var range = this.flushRange[0]; // flushBuffer will abort any buffer append in progress and flush Audio/Video Buffer

      if (this.flushBuffer(range.start, range.end, range.type)) {
        // range flushed, remove from flush array
        this.flushRange.shift();
        this.flushBufferCounter = 0;
      } else {
        this._needsFlush = true; // avoid looping, wait for SB update end to retrigger a flush

        return;
      }
    }

    if (this.flushRange.length === 0) {
      // everything flushed
      this._needsFlush = false; // let's recompute this.appended, which is used to avoid flush looping

      var appended = 0;
      var sourceBuffer = this.sourceBuffer;

      try {
        for (var _type5 in sourceBuffer) {
          var sb = sourceBuffer[_type5];

          if (sb) {
            appended += sb.buffered.length;
          }
        }
      } catch (error) {
        // error could be thrown while accessing buffered, in case sourcebuffer has already been removed from MediaSource
        // this is harmess at this stage, catch this to avoid reporting an internal exception
        logger["logger"].error('error while accessing sourceBuffer.buffered');
      }

      this.appended = appended;
      this.hls.trigger(events["default"].BUFFER_FLUSHED);
    }
  };

  _proto.doAppending = function doAppending() {
    var config = this.config,
        hls = this.hls,
        segments = this.segments,
        sourceBuffer = this.sourceBuffer;

    if (!Object.keys(sourceBuffer).length) {
      // early exit if no source buffers have been initialized yet
      return;
    }

    if (!this.media || this.media.error) {
      this.segments = [];
      logger["logger"].error('trying to append although a media error occured, flush segment and abort');
      return;
    }

    if (this.appending) {
      // logger.log(`sb appending in progress`);
      return;
    }

    var segment = segments.shift();

    if (!segment) {
      // handle undefined shift
      return;
    }

    try {
      var sb = sourceBuffer[segment.type];

      if (!sb) {
        // in case we don't have any source buffer matching with this segment type,
        // it means that Mediasource fails to create sourcebuffer
        // discard this segment, and trigger update end
        this._onSBUpdateEnd();

        return;
      }

      if (sb.updating) {
        // if we are still updating the source buffer from the last segment, place this back at the front of the queue
        segments.unshift(segment);
        return;
      } // reset sourceBuffer ended flag before appending segment


      sb.ended = false; // logger.log(`appending ${segment.content} ${type} SB, size:${segment.data.length}, ${segment.parent}`);

      this.parent = segment.parent;
      sb.appendBuffer(segment.data);
      this.appendError = 0;
      this.appended++;
      this.appending = true;
    } catch (err) {
      // in case any error occured while appending, put back segment in segments table
      logger["logger"].error("error while trying to append buffer:" + err.message);
      segments.unshift(segment);
      var event = {
        type: errors["ErrorTypes"].MEDIA_ERROR,
        parent: segment.parent,
        details: '',
        fatal: false
      };

      if (err.code === 22) {
        // QuotaExceededError: http://www.w3.org/TR/html5/infrastructure.html#quotaexceedederror
        // let's stop appending any segments, and report BUFFER_FULL_ERROR error
        this.segments = [];
        event.details = errors["ErrorDetails"].BUFFER_FULL_ERROR;
      } else {
        this.appendError++;
        event.details = errors["ErrorDetails"].BUFFER_APPEND_ERROR;
        /* with UHD content, we could get loop of quota exceeded error until
          browser is able to evict some data from sourcebuffer. retrying help recovering this
        */

        if (this.appendError > config.appendErrorMaxRetry) {
          logger["logger"].log("fail " + config.appendErrorMaxRetry + " times to append segment in sourceBuffer");
          this.segments = [];
          event.fatal = true;
        }
      }

      hls.trigger(events["default"].ERROR, event);
    }
  };
  /*
    flush specified buffered range,
    return true once range has been flushed.
    as sourceBuffer.remove() is asynchronous, flushBuffer will be retriggered on sourceBuffer update end
  */


  _proto.flushBuffer = function flushBuffer(startOffset, endOffset, sbType) {
    var sourceBuffer = this.sourceBuffer; // exit if no sourceBuffers are initialized

    if (!Object.keys(sourceBuffer).length) {
      return true;
    }

    var currentTime = 'null';

    if (this.media) {
      currentTime = this.media.currentTime.toFixed(3);
    }

    logger["logger"].log("flushBuffer,pos/start/end: " + currentTime + "/" + startOffset + "/" + endOffset); // safeguard to avoid infinite looping : don't try to flush more than the nb of appended segments

    if (this.flushBufferCounter >= this.appended) {
      logger["logger"].warn('abort flushing too many retries');
      return true;
    }

    var sb = sourceBuffer[sbType]; // we are going to flush buffer, mark source buffer as 'not ended'

    if (sb) {
      sb.ended = false;

      if (!sb.updating) {
        if (this.removeBufferRange(sbType, sb, startOffset, endOffset)) {
          this.flushBufferCounter++;
          return false;
        }
      } else {
        logger["logger"].warn('cannot flush, sb updating in progress');
        return false;
      }
    }

    logger["logger"].log('buffer flushed'); // everything flushed !

    return true;
  };
  /**
   * Removes first buffered range from provided source buffer that lies within given start and end offsets.
   *
   * @param {string} type Type of the source buffer, logging purposes only.
   * @param {SourceBuffer} sb Target SourceBuffer instance.
   * @param {number} startOffset
   * @param {number} endOffset
   *
   * @returns {boolean} True when source buffer remove requested.
   */


  _proto.removeBufferRange = function removeBufferRange(type, sb, startOffset, endOffset) {
    try {
      for (var i = 0; i < sb.buffered.length; i++) {
        var bufStart = sb.buffered.start(i);
        var bufEnd = sb.buffered.end(i);
        var removeStart = Math.max(bufStart, startOffset);
        var removeEnd = Math.min(bufEnd, endOffset);
        /* sometimes sourcebuffer.remove() does not flush
          the exact expected time range.
          to avoid rounding issues/infinite loop,
          only flush buffer range of length greater than 500ms.
        */

        if (Math.min(removeEnd, bufEnd) - removeStart > 0.5) {
          var currentTime = 'null';

          if (this.media) {
            currentTime = this.media.currentTime.toString();
          }

          logger["logger"].log("sb remove " + type + " [" + removeStart + "," + removeEnd + "], of [" + bufStart + "," + bufEnd + "], pos:" + currentTime);
          sb.remove(removeStart, removeEnd);
          return true;
        }
      }
    } catch (error) {
      logger["logger"].warn('removeBufferRange failed', error);
    }

    return false;
  };

  return BufferController;
}(event_handler);

/* harmony default export */ var buffer_controller = (buffer_controller_BufferController);
// CONCATENATED MODULE: ./src/controller/cap-level-controller.js
function cap_level_controller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function cap_level_controller_createClass(Constructor, protoProps, staticProps) { if (protoProps) cap_level_controller_defineProperties(Constructor.prototype, protoProps); if (staticProps) cap_level_controller_defineProperties(Constructor, staticProps); return Constructor; }

function cap_level_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/*
 * cap stream level to media size dimension controller
*/



var cap_level_controller_CapLevelController =
/*#__PURE__*/
function (_EventHandler) {
  cap_level_controller_inheritsLoose(CapLevelController, _EventHandler);

  function CapLevelController(hls) {
    var _this;

    _this = _EventHandler.call(this, hls, events["default"].FPS_DROP_LEVEL_CAPPING, events["default"].MEDIA_ATTACHING, events["default"].MANIFEST_PARSED, events["default"].BUFFER_CODECS, events["default"].MEDIA_DETACHING) || this;
    _this.autoLevelCapping = Number.POSITIVE_INFINITY;
    _this.firstLevel = null;
    _this.levels = [];
    _this.media = null;
    _this.restrictedLevels = [];
    _this.timer = null;
    return _this;
  }

  var _proto = CapLevelController.prototype;

  _proto.destroy = function destroy() {
    if (this.hls.config.capLevelToPlayerSize) {
      this.media = null;
      this.stopCapping();
    }
  };

  _proto.onFpsDropLevelCapping = function onFpsDropLevelCapping(data) {
    // Don't add a restricted level more than once
    if (CapLevelController.isLevelAllowed(data.droppedLevel, this.restrictedLevels)) {
      this.restrictedLevels.push(data.droppedLevel);
    }
  };

  _proto.onMediaAttaching = function onMediaAttaching(data) {
    this.media = data.media instanceof window.HTMLVideoElement ? data.media : null;
  };

  _proto.onManifestParsed = function onManifestParsed(data) {
    var hls = this.hls;
    this.restrictedLevels = [];
    this.levels = data.levels;
    this.firstLevel = data.firstLevel;

    if (hls.config.capLevelToPlayerSize && data.video) {
      // Start capping immediately if the manifest has signaled video codecs
      this.startCapping();
    }
  }; // Only activate capping when playing a video stream; otherwise, multi-bitrate audio-only streams will be restricted
  // to the first level


  _proto.onBufferCodecs = function onBufferCodecs(data) {
    var hls = this.hls;

    if (hls.config.capLevelToPlayerSize && data.video) {
      // If the manifest did not signal a video codec capping has been deferred until we're certain video is present
      this.startCapping();
    }
  };

  _proto.onLevelsUpdated = function onLevelsUpdated(data) {
    this.levels = data.levels;
  };

  _proto.onMediaDetaching = function onMediaDetaching() {
    this.stopCapping();
  };

  _proto.detectPlayerSize = function detectPlayerSize() {
    if (this.media) {
      var levelsLength = this.levels ? this.levels.length : 0;

      if (levelsLength) {
        var hls = this.hls;
        hls.autoLevelCapping = this.getMaxLevel(levelsLength - 1);

        if (hls.autoLevelCapping > this.autoLevelCapping) {
          // if auto level capping has a higher value for the previous one, flush the buffer using nextLevelSwitch
          // usually happen when the user go to the fullscreen mode.
          hls.streamController.nextLevelSwitch();
        }

        this.autoLevelCapping = hls.autoLevelCapping;
      }
    }
  };
  /*
  * returns level should be the one with the dimensions equal or greater than the media (player) dimensions (so the video will be downscaled)
  */


  _proto.getMaxLevel = function getMaxLevel(capLevelIndex) {
    var _this2 = this;

    if (!this.levels) {
      return -1;
    }

    var validLevels = this.levels.filter(function (level, index) {
      return CapLevelController.isLevelAllowed(index, _this2.restrictedLevels) && index <= capLevelIndex;
    });
    return CapLevelController.getMaxLevelByMediaSize(validLevels, this.mediaWidth, this.mediaHeight);
  };

  _proto.startCapping = function startCapping() {
    if (this.timer) {
      // Don't reset capping if started twice; this can happen if the manifest signals a video codec
      return;
    }

    this.autoLevelCapping = Number.POSITIVE_INFINITY;
    this.hls.firstLevel = this.getMaxLevel(this.firstLevel);
    clearInterval(this.timer);
    this.timer = setInterval(this.detectPlayerSize.bind(this), 1000);
    this.detectPlayerSize();
  };

  _proto.stopCapping = function stopCapping() {
    this.restrictedLevels = [];
    this.firstLevel = null;
    this.autoLevelCapping = Number.POSITIVE_INFINITY;

    if (this.timer) {
      this.timer = clearInterval(this.timer);
      this.timer = null;
    }
  };

  CapLevelController.isLevelAllowed = function isLevelAllowed(level, restrictedLevels) {
    if (restrictedLevels === void 0) {
      restrictedLevels = [];
    }

    return restrictedLevels.indexOf(level) === -1;
  };

  CapLevelController.getMaxLevelByMediaSize = function getMaxLevelByMediaSize(levels, width, height) {
    if (!levels || levels && !levels.length) {
      return -1;
    } // Levels can have the same dimensions but differing bandwidths - since levels are ordered, we can look to the next
    // to determine whether we've chosen the greatest bandwidth for the media's dimensions


    var atGreatestBandiwdth = function atGreatestBandiwdth(curLevel, nextLevel) {
      if (!nextLevel) {
        return true;
      }

      return curLevel.width !== nextLevel.width || curLevel.height !== nextLevel.height;
    }; // If we run through the loop without breaking, the media's dimensions are greater than every level, so default to
    // the max level


    var maxLevelIndex = levels.length - 1;

    for (var i = 0; i < levels.length; i += 1) {
      var level = levels[i];

      if ((level.width >= width || level.height >= height) && atGreatestBandiwdth(level, levels[i + 1])) {
        maxLevelIndex = i;
        break;
      }
    }

    return maxLevelIndex;
  };

  cap_level_controller_createClass(CapLevelController, [{
    key: "mediaWidth",
    get: function get() {
      var width;
      var media = this.media;

      if (media) {
        width = media.width || media.clientWidth || media.offsetWidth;
        width *= CapLevelController.contentScaleFactor;
      }

      return width;
    }
  }, {
    key: "mediaHeight",
    get: function get() {
      var height;
      var media = this.media;

      if (media) {
        height = media.height || media.clientHeight || media.offsetHeight;
        height *= CapLevelController.contentScaleFactor;
      }

      return height;
    }
  }], [{
    key: "contentScaleFactor",
    get: function get() {
      var pixelRatio = 1;

      try {
        pixelRatio = window.devicePixelRatio;
      } catch (e) {}

      return pixelRatio;
    }
  }]);

  return CapLevelController;
}(event_handler);

/* harmony default export */ var cap_level_controller = (cap_level_controller_CapLevelController);
// CONCATENATED MODULE: ./src/controller/fps-controller.js
function fps_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/*
 * FPS Controller
*/



var fps_controller_window = window,
    fps_controller_performance = fps_controller_window.performance;

var fps_controller_FPSController =
/*#__PURE__*/
function (_EventHandler) {
  fps_controller_inheritsLoose(FPSController, _EventHandler);

  function FPSController(hls) {
    return _EventHandler.call(this, hls, events["default"].MEDIA_ATTACHING) || this;
  }

  var _proto = FPSController.prototype;

  _proto.destroy = function destroy() {
    if (this.timer) {
      clearInterval(this.timer);
    }

    this.isVideoPlaybackQualityAvailable = false;
  };

  _proto.onMediaAttaching = function onMediaAttaching(data) {
    var config = this.hls.config;

    if (config.capLevelOnFPSDrop) {
      var video = this.video = data.media instanceof window.HTMLVideoElement ? data.media : null;

      if (typeof video.getVideoPlaybackQuality === 'function') {
        this.isVideoPlaybackQualityAvailable = true;
      }

      clearInterval(this.timer);
      this.timer = setInterval(this.checkFPSInterval.bind(this), config.fpsDroppedMonitoringPeriod);
    }
  };

  _proto.checkFPS = function checkFPS(video, decodedFrames, droppedFrames) {
    var currentTime = fps_controller_performance.now();

    if (decodedFrames) {
      if (this.lastTime) {
        var currentPeriod = currentTime - this.lastTime,
            currentDropped = droppedFrames - this.lastDroppedFrames,
            currentDecoded = decodedFrames - this.lastDecodedFrames,
            droppedFPS = 1000 * currentDropped / currentPeriod,
            hls = this.hls;
        hls.trigger(events["default"].FPS_DROP, {
          currentDropped: currentDropped,
          currentDecoded: currentDecoded,
          totalDroppedFrames: droppedFrames
        });

        if (droppedFPS > 0) {
          // logger.log('checkFPS : droppedFPS/decodedFPS:' + droppedFPS/(1000 * currentDecoded / currentPeriod));
          if (currentDropped > hls.config.fpsDroppedMonitoringThreshold * currentDecoded) {
            var currentLevel = hls.currentLevel;
            logger["logger"].warn('drop FPS ratio greater than max allowed value for currentLevel: ' + currentLevel);

            if (currentLevel > 0 && (hls.autoLevelCapping === -1 || hls.autoLevelCapping >= currentLevel)) {
              currentLevel = currentLevel - 1;
              hls.trigger(events["default"].FPS_DROP_LEVEL_CAPPING, {
                level: currentLevel,
                droppedLevel: hls.currentLevel
              });
              hls.autoLevelCapping = currentLevel;
              hls.streamController.nextLevelSwitch();
            }
          }
        }
      }

      this.lastTime = currentTime;
      this.lastDroppedFrames = droppedFrames;
      this.lastDecodedFrames = decodedFrames;
    }
  };

  _proto.checkFPSInterval = function checkFPSInterval() {
    var video = this.video;

    if (video) {
      if (this.isVideoPlaybackQualityAvailable) {
        var videoPlaybackQuality = video.getVideoPlaybackQuality();
        this.checkFPS(video, videoPlaybackQuality.totalVideoFrames, videoPlaybackQuality.droppedVideoFrames);
      } else {
        this.checkFPS(video, video.webkitDecodedFrameCount, video.webkitDroppedFrameCount);
      }
    }
  };

  return FPSController;
}(event_handler);

/* harmony default export */ var fps_controller = (fps_controller_FPSController);
// CONCATENATED MODULE: ./src/utils/xhr-loader.js
/**
 * XHR based logger
*/

var xhr_loader_window = window,
    xhr_loader_performance = xhr_loader_window.performance,
    xhr_loader_XMLHttpRequest = xhr_loader_window.XMLHttpRequest;

var xhr_loader_XhrLoader =
/*#__PURE__*/
function () {
  function XhrLoader(config) {
    if (config && config.xhrSetup) {
      this.xhrSetup = config.xhrSetup;
    }
  }

  var _proto = XhrLoader.prototype;

  _proto.destroy = function destroy() {
    this.abort();
    this.loader = null;
  };

  _proto.abort = function abort() {
    var loader = this.loader;

    if (loader && loader.readyState !== 4) {
      this.stats.aborted = true;
      loader.abort();
    }

    window.clearTimeout(this.requestTimeout);
    this.requestTimeout = null;
    window.clearTimeout(this.retryTimeout);
    this.retryTimeout = null;
  };

  _proto.load = function load(context, config, callbacks) {
    this.context = context;
    this.config = config;
    this.callbacks = callbacks;
    this.stats = {
      trequest: xhr_loader_performance.now(),
      retry: 0
    };
    this.retryDelay = config.retryDelay;
    this.loadInternal();
  };

  _proto.loadInternal = function loadInternal() {
    var xhr,
        context = this.context;
    xhr = this.loader = new xhr_loader_XMLHttpRequest();
    var stats = this.stats;
    stats.tfirst = 0;
    stats.loaded = 0;
    var xhrSetup = this.xhrSetup;

    try {
      if (xhrSetup) {
        try {
          xhrSetup(xhr, context.url);
        } catch (e) {
          // fix xhrSetup: (xhr, url) => {xhr.setRequestHeader("Content-Language", "test");}
          // not working, as xhr.setRequestHeader expects xhr.readyState === OPEN
          xhr.open('GET', context.url, true);
          xhrSetup(xhr, context.url);
        }
      }

      if (!xhr.readyState) {
        xhr.open('GET', context.url, true);
      }
    } catch (e) {
      // IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS
      this.callbacks.onError({
        code: xhr.status,
        text: e.message
      }, context, xhr);
      return;
    }

    if (context.rangeEnd) {
      xhr.setRequestHeader('Range', 'bytes=' + context.rangeStart + '-' + (context.rangeEnd - 1));
    }

    xhr.onreadystatechange = this.readystatechange.bind(this);
    xhr.onprogress = this.loadprogress.bind(this);
    xhr.responseType = context.responseType; // setup timeout before we perform request

    this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), this.config.timeout);
    xhr.send();
  };

  _proto.readystatechange = function readystatechange(event) {
    var xhr = event.currentTarget,
        readyState = xhr.readyState,
        stats = this.stats,
        context = this.context,
        config = this.config; // don't proceed if xhr has been aborted

    if (stats.aborted) {
      return;
    } // >= HEADERS_RECEIVED


    if (readyState >= 2) {
      // clear xhr timeout and rearm it if readyState less than 4
      window.clearTimeout(this.requestTimeout);

      if (stats.tfirst === 0) {
        stats.tfirst = Math.max(xhr_loader_performance.now(), stats.trequest);
      }

      if (readyState === 4) {
        var status = xhr.status; // http status between 200 to 299 are all successful

        if (status >= 200 && status < 300) {
          stats.tload = Math.max(stats.tfirst, xhr_loader_performance.now());
          var data, len;

          if (context.responseType === 'arraybuffer') {
            data = xhr.response;
            len = data.byteLength;
          } else {
            data = xhr.responseText;
            len = data.length;
          }

          stats.loaded = stats.total = len;
          var response = {
            url: xhr.responseURL,
            data: data
          };
          this.callbacks.onSuccess(response, stats, context, xhr);
        } else {
          // if max nb of retries reached or if http status between 400 and 499 (such error cannot be recovered, retrying is useless), return error
          if (stats.retry >= config.maxRetry || status >= 400 && status < 499) {
            logger["logger"].error(status + " while loading " + context.url);
            this.callbacks.onError({
              code: status,
              text: xhr.statusText
            }, context, xhr);
          } else {
            // retry
            logger["logger"].warn(status + " while loading " + context.url + ", retrying in " + this.retryDelay + "..."); // aborts and resets internal state

            this.destroy(); // schedule retry

            this.retryTimeout = window.setTimeout(this.loadInternal.bind(this), this.retryDelay); // set exponential backoff

            this.retryDelay = Math.min(2 * this.retryDelay, config.maxRetryDelay);
            stats.retry++;
          }
        }
      } else {
        // readyState >= 2 AND readyState !==4 (readyState = HEADERS_RECEIVED || LOADING) rearm timeout as xhr not finished yet
        this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), config.timeout);
      }
    }
  };

  _proto.loadtimeout = function loadtimeout() {
    logger["logger"].warn("timeout while loading " + this.context.url);
    this.callbacks.onTimeout(this.stats, this.context, null);
  };

  _proto.loadprogress = function loadprogress(event) {
    var xhr = event.currentTarget,
        stats = this.stats;
    stats.loaded = event.loaded;

    if (event.lengthComputable) {
      stats.total = event.total;
    }

    var onProgress = this.callbacks.onProgress;

    if (onProgress) {
      // third arg is to provide on progress data
      onProgress(stats, this.context, null, xhr);
    }
  };

  return XhrLoader;
}();

/* harmony default export */ var xhr_loader = (xhr_loader_XhrLoader);
// CONCATENATED MODULE: ./src/controller/audio-track-controller.js
function audio_track_controller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function audio_track_controller_createClass(Constructor, protoProps, staticProps) { if (protoProps) audio_track_controller_defineProperties(Constructor.prototype, protoProps); if (staticProps) audio_track_controller_defineProperties(Constructor, staticProps); return Constructor; }

function audio_track_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }





/**
 * @class AudioTrackController
 * @implements {EventHandler}
 *
 * Handles main manifest and audio-track metadata loaded,
 * owns and exposes the selectable audio-tracks data-models.
 *
 * Exposes internal interface to select available audio-tracks.
 *
 * Handles errors on loading audio-track playlists. Manages fallback mechanism
 * with redundants tracks (group-IDs).
 *
 * Handles level-loading and group-ID switches for video (fallback on video levels),
 * and eventually adapts the audio-track group-ID to match.
 *
 * @fires AUDIO_TRACK_LOADING
 * @fires AUDIO_TRACK_SWITCHING
 * @fires AUDIO_TRACKS_UPDATED
 * @fires ERROR
 *
 */

var audio_track_controller_AudioTrackController =
/*#__PURE__*/
function (_TaskLoop) {
  audio_track_controller_inheritsLoose(AudioTrackController, _TaskLoop);

  function AudioTrackController(hls) {
    var _this;

    _this = _TaskLoop.call(this, hls, events["default"].MANIFEST_LOADING, events["default"].MANIFEST_PARSED, events["default"].AUDIO_TRACK_LOADED, events["default"].AUDIO_TRACK_SWITCHED, events["default"].LEVEL_LOADED, events["default"].ERROR) || this;
    /**
     * @private
     * Currently selected index in `tracks`
     * @member {number} trackId
     */

    _this._trackId = -1;
    /**
     * @private
     * If should select tracks according to default track attribute
     * @member {boolean} _selectDefaultTrack
     */

    _this._selectDefaultTrack = true;
    /**
     * @public
     * All tracks available
     * @member {AudioTrack[]}
     */

    _this.tracks = [];
    /**
     * @public
     * List of blacklisted audio track IDs (that have caused failure)
     * @member {number[]}
     */

    _this.trackIdBlacklist = Object.create(null);
    /**
     * @public
     * The currently running group ID for audio
     * (we grab this on manifest-parsed and new level-loaded)
     * @member {string}
     */

    _this.audioGroupId = null;
    return _this;
  }
  /**
   * Reset audio tracks on new manifest loading.
   */


  var _proto = AudioTrackController.prototype;

  _proto.onManifestLoading = function onManifestLoading() {
    this.tracks = [];
    this._trackId = -1;
    this._selectDefaultTrack = true;
  };
  /**
   * Store tracks data from manifest parsed data.
   *
   * Trigger AUDIO_TRACKS_UPDATED event.
   *
   * @param {*} data
   */


  _proto.onManifestParsed = function onManifestParsed(data) {
    var tracks = this.tracks = data.audioTracks || [];
    this.hls.trigger(events["default"].AUDIO_TRACKS_UPDATED, {
      audioTracks: tracks
    });
  };
  /**
   * Store track details of loaded track in our data-model.
   *
   * Set-up metadata update interval task for live-mode streams.
   *
   * @param {} data
   */


  _proto.onAudioTrackLoaded = function onAudioTrackLoaded(data) {
    if (data.id >= this.tracks.length) {
      logger["logger"].warn('Invalid audio track id:', data.id);
      return;
    }

    logger["logger"].log("audioTrack " + data.id + " loaded");
    this.tracks[data.id].details = data.details; // check if current playlist is a live playlist
    // and if we have already our reload interval setup

    if (data.details.live && !this.hasInterval()) {
      // if live playlist we will have to reload it periodically
      // set reload period to playlist target duration
      var updatePeriodMs = data.details.targetduration * 1000;
      this.setInterval(updatePeriodMs);
    }

    if (!data.details.live && this.hasInterval()) {
      // playlist is not live and timer is scheduled: cancel it
      this.clearInterval();
    }
  };
  /**
   * Update the internal group ID to any audio-track we may have set manually
   * or because of a failure-handling fallback.
   *
   * Quality-levels should update to that group ID in this case.
   *
   * @param {*} data
   */


  _proto.onAudioTrackSwitched = function onAudioTrackSwitched(data) {
    var audioGroupId = this.tracks[data.id].groupId;

    if (audioGroupId && this.audioGroupId !== audioGroupId) {
      this.audioGroupId = audioGroupId;
    }
  };
  /**
   * When a level gets loaded, if it has redundant audioGroupIds (in the same ordinality as it's redundant URLs)
   * we are setting our audio-group ID internally to the one set, if it is different from the group ID currently set.
   *
   * If group-ID got update, we re-select the appropriate audio-track with this group-ID matching the currently
   * selected one (based on NAME property).
   *
   * @param {*} data
   */


  _proto.onLevelLoaded = function onLevelLoaded(data) {
    // FIXME: crashes because currentLevel is undefined
    // const levelInfo = this.hls.levels[this.hls.currentLevel];
    var levelInfo = this.hls.levels[data.level];

    if (!levelInfo.audioGroupIds) {
      return;
    }

    var audioGroupId = levelInfo.audioGroupIds[levelInfo.urlId];

    if (this.audioGroupId !== audioGroupId) {
      this.audioGroupId = audioGroupId;

      this._selectInitialAudioTrack();
    }
  };
  /**
   * Handle network errors loading audio track manifests
   * and also pausing on any netwok errors.
   *
   * @param {ErrorEventData} data
   */


  _proto.onError = function onError(data) {
    // Only handle network errors
    if (data.type !== errors["ErrorTypes"].NETWORK_ERROR) {
      return;
    } // If fatal network error, cancel update task


    if (data.fatal) {
      this.clearInterval();
    } // If not an audio-track loading error don't handle further


    if (data.details !== errors["ErrorDetails"].AUDIO_TRACK_LOAD_ERROR) {
      return;
    }

    logger["logger"].warn('Network failure on audio-track id:', data.context.id);

    this._handleLoadError();
  };
  /**
   * @type {AudioTrack[]} Audio-track list we own
   */


  /**
   * @private
   * @param {number} newId
   */
  _proto._setAudioTrack = function _setAudioTrack(newId) {
    // noop on same audio track id as already set
    if (this._trackId === newId && this.tracks[this._trackId].details) {
      logger["logger"].debug('Same id as current audio-track passed, and track details available -> no-op');
      return;
    } // check if level idx is valid


    if (newId < 0 || newId >= this.tracks.length) {
      logger["logger"].warn('Invalid id passed to audio-track controller');
      return;
    }

    var audioTrack = this.tracks[newId];
    logger["logger"].log("Now switching to audio-track index " + newId); // stopping live reloading timer if any

    this.clearInterval();
    this._trackId = newId;
    var url = audioTrack.url,
        type = audioTrack.type,
        id = audioTrack.id;
    this.hls.trigger(events["default"].AUDIO_TRACK_SWITCHING, {
      id: id,
      type: type,
      url: url
    });

    this._loadTrackDetailsIfNeeded(audioTrack);
  };
  /**
   * @override
   */


  _proto.doTick = function doTick() {
    this._updateTrack(this._trackId);
  };
  /**
   * Select initial track
   * @private
   */


  _proto._selectInitialAudioTrack = function _selectInitialAudioTrack() {
    var _this2 = this;

    var tracks = this.tracks;

    if (!tracks.length) {
      return;
    }

    var currentAudioTrack = this.tracks[this._trackId];
    var name = null;

    if (currentAudioTrack) {
      name = currentAudioTrack.name;
    } // Pre-select default tracks if there are any


    if (this._selectDefaultTrack) {
      var defaultTracks = tracks.filter(function (track) {
        return track.default;
      });

      if (defaultTracks.length) {
        tracks = defaultTracks;
      } else {
        logger["logger"].warn('No default audio tracks defined');
      }
    }

    var trackFound = false;

    var traverseTracks = function traverseTracks() {
      // Select track with right group ID
      tracks.forEach(function (track) {
        if (trackFound) {
          return;
        } // We need to match the (pre-)selected group ID
        // and the NAME of the current track.


        if ((!_this2.audioGroupId || track.groupId === _this2.audioGroupId) && (!name || name === track.name)) {
          // If there was a previous track try to stay with the same `NAME`.
          // It should be unique across tracks of same group, and consistent through redundant track groups.
          _this2._setAudioTrack(track.id);

          trackFound = true;
        }
      });
    };

    traverseTracks();

    if (!trackFound) {
      name = null;
      traverseTracks();
    }

    if (!trackFound) {
      logger["logger"].error("No track found for running audio group-ID: " + this.audioGroupId);
      this.hls.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].MEDIA_ERROR,
        details: errors["ErrorDetails"].AUDIO_TRACK_LOAD_ERROR,
        fatal: true
      });
    }
  };
  /**
   * @private
   * @param {AudioTrack} audioTrack
   * @returns {boolean}
   */


  _proto._needsTrackLoading = function _needsTrackLoading(audioTrack) {
    var details = audioTrack.details,
        url = audioTrack.url;

    if (!details || details.live) {
      // check if we face an audio track embedded in main playlist (audio track without URI attribute)
      return !!url;
    }

    return false;
  };
  /**
   * @private
   * @param {AudioTrack} audioTrack
   */


  _proto._loadTrackDetailsIfNeeded = function _loadTrackDetailsIfNeeded(audioTrack) {
    if (this._needsTrackLoading(audioTrack)) {
      var url = audioTrack.url,
          id = audioTrack.id; // track not retrieved yet, or live playlist we need to (re)load it

      logger["logger"].log("loading audio-track playlist for id: " + id);
      this.hls.trigger(events["default"].AUDIO_TRACK_LOADING, {
        url: url,
        id: id
      });
    }
  };
  /**
   * @private
   * @param {number} newId
   */


  _proto._updateTrack = function _updateTrack(newId) {
    // check if level idx is valid
    if (newId < 0 || newId >= this.tracks.length) {
      return;
    } // stopping live reloading timer if any


    this.clearInterval();
    this._trackId = newId;
    logger["logger"].log("trying to update audio-track " + newId);
    var audioTrack = this.tracks[newId];

    this._loadTrackDetailsIfNeeded(audioTrack);
  };
  /**
   * @private
   */


  _proto._handleLoadError = function _handleLoadError() {
    // First, let's black list current track id
    this.trackIdBlacklist[this._trackId] = true; // Let's try to fall back on a functional audio-track with the same group ID

    var previousId = this._trackId;
    var _this$tracks$previous = this.tracks[previousId],
        name = _this$tracks$previous.name,
        language = _this$tracks$previous.language,
        groupId = _this$tracks$previous.groupId;
    logger["logger"].warn("Loading failed on audio track id: " + previousId + ", group-id: " + groupId + ", name/language: \"" + name + "\" / \"" + language + "\""); // Find a non-blacklisted track ID with the same NAME
    // At least a track that is not blacklisted, thus on another group-ID.

    var newId = previousId;

    for (var i = 0; i < this.tracks.length; i++) {
      if (this.trackIdBlacklist[i]) {
        continue;
      }

      var newTrack = this.tracks[i];

      if (newTrack.name === name) {
        newId = i;
        break;
      }
    }

    if (newId === previousId) {
      logger["logger"].warn("No fallback audio-track found for name/language: \"" + name + "\" / \"" + language + "\"");
      return;
    }

    logger["logger"].log('Attempting audio-track fallback id:', newId, 'group-id:', this.tracks[newId].groupId);

    this._setAudioTrack(newId);
  };

  audio_track_controller_createClass(AudioTrackController, [{
    key: "audioTracks",
    get: function get() {
      return this.tracks;
    }
    /**
     * @type {number} Index into audio-tracks list of currently selected track.
     */

  }, {
    key: "audioTrack",
    get: function get() {
      return this._trackId;
    }
    /**
     * Select current track by index
     */
    ,
    set: function set(newId) {
      this._setAudioTrack(newId); // If audio track is selected from API then don't choose from the manifest default track


      this._selectDefaultTrack = false;
    }
  }]);

  return AudioTrackController;
}(TaskLoop);

/* harmony default export */ var audio_track_controller = (audio_track_controller_AudioTrackController);
// CONCATENATED MODULE: ./src/controller/audio-stream-controller.js




function audio_stream_controller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function audio_stream_controller_createClass(Constructor, protoProps, staticProps) { if (protoProps) audio_stream_controller_defineProperties(Constructor.prototype, protoProps); if (staticProps) audio_stream_controller_defineProperties(Constructor, staticProps); return Constructor; }

function audio_stream_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/*
 * Audio Stream Controller
*/












var audio_stream_controller_window = window,
    audio_stream_controller_performance = audio_stream_controller_window.performance;
var audio_stream_controller_TICK_INTERVAL = 100; // how often to tick in ms

var audio_stream_controller_AudioStreamController =
/*#__PURE__*/
function (_BaseStreamController) {
  audio_stream_controller_inheritsLoose(AudioStreamController, _BaseStreamController);

  function AudioStreamController(hls, fragmentTracker) {
    var _this;

    _this = _BaseStreamController.call(this, hls, events["default"].MEDIA_ATTACHED, events["default"].MEDIA_DETACHING, events["default"].AUDIO_TRACKS_UPDATED, events["default"].AUDIO_TRACK_SWITCHING, events["default"].AUDIO_TRACK_LOADED, events["default"].KEY_LOADED, events["default"].FRAG_LOADED, events["default"].FRAG_PARSING_INIT_SEGMENT, events["default"].FRAG_PARSING_DATA, events["default"].FRAG_PARSED, events["default"].ERROR, events["default"].BUFFER_RESET, events["default"].BUFFER_CREATED, events["default"].BUFFER_APPENDED, events["default"].BUFFER_FLUSHED, events["default"].INIT_PTS_FOUND) || this;
    _this.fragmentTracker = fragmentTracker;
    _this.config = hls.config;
    _this.audioCodecSwap = false;
    _this._state = State.STOPPED;
    _this.initPTS = [];
    _this.waitingFragment = null;
    _this.videoTrackCC = null;
    return _this;
  } // Signal that video PTS was found


  var _proto = AudioStreamController.prototype;

  _proto.onInitPtsFound = function onInitPtsFound(data) {
    var demuxerId = data.id,
        cc = data.frag.cc,
        initPTS = data.initPTS;

    if (demuxerId === 'main') {
      // Always update the new INIT PTS
      // Can change due level switch
      this.initPTS[cc] = initPTS;
      this.videoTrackCC = cc;
      logger["logger"].log("InitPTS for cc: " + cc + " found from video track: " + initPTS); // If we are waiting we need to demux/remux the waiting frag
      // With the new initPTS

      if (this.state === State.WAITING_INIT_PTS) {
        this.tick();
      }
    }
  };

  _proto.startLoad = function startLoad(startPosition) {
    if (this.tracks) {
      var lastCurrentTime = this.lastCurrentTime;
      this.stopLoad();
      this.setInterval(audio_stream_controller_TICK_INTERVAL);
      this.fragLoadError = 0;

      if (lastCurrentTime > 0 && startPosition === -1) {
        logger["logger"].log("audio:override startPosition with lastCurrentTime @" + lastCurrentTime.toFixed(3));
        this.state = State.IDLE;
      } else {
        this.lastCurrentTime = this.startPosition ? this.startPosition : startPosition;
        this.state = State.STARTING;
      }

      this.nextLoadPosition = this.startPosition = this.lastCurrentTime;
      this.tick();
    } else {
      this.startPosition = startPosition;
      this.state = State.STOPPED;
    }
  };

  _proto.doTick = function doTick() {
    var pos,
        track,
        trackDetails,
        hls = this.hls,
        config = hls.config; // logger.log('audioStream:' + this.state);

    switch (this.state) {
      case State.ERROR: // don't do anything in error state to avoid breaking further ...

      case State.PAUSED: // don't do anything in paused state either ...

      case State.BUFFER_FLUSHING:
        break;

      case State.STARTING:
        this.state = State.WAITING_TRACK;
        this.loadedmetadata = false;
        break;

      case State.IDLE:
        var tracks = this.tracks; // audio tracks not received => exit loop

        if (!tracks) {
          break;
        } // if video not attached AND
        // start fragment already requested OR start frag prefetch disable
        // exit loop
        // => if media not attached but start frag prefetch is enabled and start frag not requested yet, we will not exit loop


        if (!this.media && (this.startFragRequested || !config.startFragPrefetch)) {
          break;
        } // determine next candidate fragment to be loaded, based on current position and
        //  end of buffer position
        // if we have not yet loaded any fragment, start loading from start position


        if (this.loadedmetadata) {
          pos = this.media.currentTime;
        } else {
          pos = this.nextLoadPosition;

          if (pos === undefined) {
            break;
          }
        }

        var media = this.mediaBuffer ? this.mediaBuffer : this.media,
            videoBuffer = this.videoBuffer ? this.videoBuffer : this.media,
            bufferInfo = BufferHelper.bufferInfo(media, pos, config.maxBufferHole),
            mainBufferInfo = BufferHelper.bufferInfo(videoBuffer, pos, config.maxBufferHole),
            bufferLen = bufferInfo.len,
            bufferEnd = bufferInfo.end,
            fragPrevious = this.fragPrevious,
            // ensure we buffer at least config.maxBufferLength (default 30s) or config.maxMaxBufferLength (default: 600s)
        // whichever is smaller.
        // once we reach that threshold, don't buffer more than video (mainBufferInfo.len)
        maxConfigBuffer = Math.min(config.maxBufferLength, config.maxMaxBufferLength),
            maxBufLen = Math.max(maxConfigBuffer, mainBufferInfo.len),
            audioSwitch = this.audioSwitch,
            trackId = this.trackId; // if buffer length is less than maxBufLen try to load a new fragment

        if ((bufferLen < maxBufLen || audioSwitch) && trackId < tracks.length) {
          trackDetails = tracks[trackId].details; // if track info not retrieved yet, switch state and wait for track retrieval

          if (typeof trackDetails === 'undefined') {
            this.state = State.WAITING_TRACK;
            break;
          }

          if (!audioSwitch && this._streamEnded(bufferInfo, trackDetails)) {
            this.hls.trigger(events["default"].BUFFER_EOS, {
              type: 'audio'
            });
            this.state = State.ENDED;
            return;
          } // find fragment index, contiguous with end of buffer position


          var fragments = trackDetails.fragments,
              fragLen = fragments.length,
              start = fragments[0].start,
              end = fragments[fragLen - 1].start + fragments[fragLen - 1].duration,
              frag; // When switching audio track, reload audio as close as possible to currentTime

          if (audioSwitch) {
            if (trackDetails.live && !trackDetails.PTSKnown) {
              logger["logger"].log('switching audiotrack, live stream, unknown PTS,load first fragment');
              bufferEnd = 0;
            } else {
              bufferEnd = pos; // if currentTime (pos) is less than alt audio playlist start time, it means that alt audio is ahead of currentTime

              if (trackDetails.PTSKnown && pos < start) {
                // if everything is buffered from pos to start or if audio buffer upfront, let's seek to start
                if (bufferInfo.end > start || bufferInfo.nextStart) {
                  logger["logger"].log('alt audio track ahead of main track, seek to start of alt audio track');
                  this.media.currentTime = start + 0.05;
                } else {
                  return;
                }
              }
            }
          }

          if (trackDetails.initSegment && !trackDetails.initSegment.data) {
            frag = trackDetails.initSegment;
          } // eslint-disable-line brace-style
          // if bufferEnd before start of playlist, load first fragment
          else if (bufferEnd <= start) {
              frag = fragments[0];

              if (this.videoTrackCC !== null && frag.cc !== this.videoTrackCC) {
                // Ensure we find a fragment which matches the continuity of the video track
                frag = findFragWithCC(fragments, this.videoTrackCC);
              }

              if (trackDetails.live && frag.loadIdx && frag.loadIdx === this.fragLoadIdx) {
                // we just loaded this first fragment, and we are still lagging behind the start of the live playlist
                // let's force seek to start
                var nextBuffered = bufferInfo.nextStart ? bufferInfo.nextStart : start;
                logger["logger"].log("no alt audio available @currentTime:" + this.media.currentTime + ", seeking @" + (nextBuffered + 0.05));
                this.media.currentTime = nextBuffered + 0.05;
                return;
              }
            } else {
              var foundFrag;
              var maxFragLookUpTolerance = config.maxFragLookUpTolerance;
              var fragNext = fragPrevious ? fragments[fragPrevious.sn - fragments[0].sn + 1] : undefined;

              var fragmentWithinToleranceTest = function fragmentWithinToleranceTest(candidate) {
                // offset should be within fragment boundary - config.maxFragLookUpTolerance
                // this is to cope with situations like
                // bufferEnd = 9.991
                // frag[Ø] : [0,10]
                // frag[1] : [10,20]
                // bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here
                //              frag start               frag start+duration
                //                  |-----------------------------|
                //              <--->                         <--->
                //  ...--------><-----------------------------><---------....
                // previous frag         matching fragment         next frag
                //  return -1             return 0                 return 1
                // logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);
                // Set the lookup tolerance to be small enough to detect the current segment - ensures we don't skip over very small segments
                var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration);

                if (candidate.start + candidate.duration - candidateLookupTolerance <= bufferEnd) {
                  return 1;
                } else if (candidate.start - candidateLookupTolerance > bufferEnd && candidate.start) {
                  // if maxFragLookUpTolerance will have negative value then don't return -1 for first element
                  return -1;
                }

                return 0;
              };

              if (bufferEnd < end) {
                if (bufferEnd > end - maxFragLookUpTolerance) {
                  maxFragLookUpTolerance = 0;
                } // Prefer the next fragment if it's within tolerance


                if (fragNext && !fragmentWithinToleranceTest(fragNext)) {
                  foundFrag = fragNext;
                } else {
                  foundFrag = binary_search.search(fragments, fragmentWithinToleranceTest);
                }
              } else {
                // reach end of playlist
                foundFrag = fragments[fragLen - 1];
              }

              if (foundFrag) {
                frag = foundFrag;
                start = foundFrag.start; // logger.log('find SN matching with pos:' +  bufferEnd + ':' + frag.sn);

                if (fragPrevious && frag.level === fragPrevious.level && frag.sn === fragPrevious.sn) {
                  if (frag.sn < trackDetails.endSN) {
                    frag = fragments[frag.sn + 1 - trackDetails.startSN];
                    logger["logger"].log("SN just loaded, load next one: " + frag.sn);
                  } else {
                    frag = null;
                  }
                }
              }
            }

          if (frag) {
            // logger.log('      loading frag ' + i +',pos/bufEnd:' + pos.toFixed(3) + '/' + bufferEnd.toFixed(3));
            if (frag.encrypted) {
              logger["logger"].log("Loading key for " + frag.sn + " of [" + trackDetails.startSN + " ," + trackDetails.endSN + "],track " + trackId);
              this.state = State.KEY_LOADING;
              hls.trigger(events["default"].KEY_LOADING, {
                frag: frag
              });
            } else {
              logger["logger"].log("Loading " + frag.sn + ", cc: " + frag.cc + " of [" + trackDetails.startSN + " ," + trackDetails.endSN + "],track " + trackId + ", currentTime:" + pos + ",bufferEnd:" + bufferEnd.toFixed(3)); // only load if fragment is not loaded or if in audio switch
              // we force a frag loading in audio switch as fragment tracker might not have evicted previous frags in case of quick audio switch

              this.fragCurrent = frag;

              if (audioSwitch || this.fragmentTracker.getState(frag) === FragmentState.NOT_LOADED) {
                if (frag.sn !== 'initSegment') {
                  this.startFragRequested = true;
                }

                if (Object(number_isFinite["isFiniteNumber"])(frag.sn)) {
                  this.nextLoadPosition = frag.start + frag.duration;
                }

                hls.trigger(events["default"].FRAG_LOADING, {
                  frag: frag
                });
                this.state = State.FRAG_LOADING;
              }
            }
          }
        }

        break;

      case State.WAITING_TRACK:
        track = this.tracks[this.trackId]; // check if playlist is already loaded

        if (track && track.details) {
          this.state = State.IDLE;
        }

        break;

      case State.FRAG_LOADING_WAITING_RETRY:
        var now = audio_stream_controller_performance.now();
        var retryDate = this.retryDate;
        media = this.media;
        var isSeeking = media && media.seeking; // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading

        if (!retryDate || now >= retryDate || isSeeking) {
          logger["logger"].log('audioStreamController: retryDate reached, switch back to IDLE state');
          this.state = State.IDLE;
        }

        break;

      case State.WAITING_INIT_PTS:
        var videoTrackCC = this.videoTrackCC;

        if (this.initPTS[videoTrackCC] === undefined) {
          break;
        } // Ensure we don't get stuck in the WAITING_INIT_PTS state if the waiting frag CC doesn't match any initPTS


        var waitingFrag = this.waitingFragment;

        if (waitingFrag) {
          var waitingFragCC = waitingFrag.frag.cc;

          if (videoTrackCC !== waitingFragCC) {
            track = this.tracks[this.trackId];

            if (track.details && track.details.live) {
              logger["logger"].warn("Waiting fragment CC (" + waitingFragCC + ") does not match video track CC (" + videoTrackCC + ")");
              this.waitingFragment = null;
              this.state = State.IDLE;
            }
          } else {
            this.state = State.FRAG_LOADING;
            this.onFragLoaded(this.waitingFragment);
            this.waitingFragment = null;
          }
        } else {
          this.state = State.IDLE;
        }

        break;

      case State.STOPPED:
      case State.FRAG_LOADING:
      case State.PARSING:
      case State.PARSED:
      case State.ENDED:
        break;

      default:
        break;
    }
  };

  _proto.onMediaAttached = function onMediaAttached(data) {
    var media = this.media = this.mediaBuffer = data.media;
    this.onvseeking = this.onMediaSeeking.bind(this);
    this.onvended = this.onMediaEnded.bind(this);
    media.addEventListener('seeking', this.onvseeking);
    media.addEventListener('ended', this.onvended);
    var config = this.config;

    if (this.tracks && config.autoStartLoad) {
      this.startLoad(config.startPosition);
    }
  };

  _proto.onMediaDetaching = function onMediaDetaching() {
    var media = this.media;

    if (media && media.ended) {
      logger["logger"].log('MSE detaching and video ended, reset startPosition');
      this.startPosition = this.lastCurrentTime = 0;
    } // remove video listeners


    if (media) {
      media.removeEventListener('seeking', this.onvseeking);
      media.removeEventListener('ended', this.onvended);
      this.onvseeking = this.onvseeked = this.onvended = null;
    }

    this.media = this.mediaBuffer = this.videoBuffer = null;
    this.loadedmetadata = false;
    this.stopLoad();
  };

  _proto.onAudioTracksUpdated = function onAudioTracksUpdated(data) {
    logger["logger"].log('audio tracks updated');
    this.tracks = data.audioTracks;
  };

  _proto.onAudioTrackSwitching = function onAudioTrackSwitching(data) {
    // if any URL found on new audio track, it is an alternate audio track
    var altAudio = !!data.url;
    this.trackId = data.id;
    this.fragCurrent = null;
    this.state = State.PAUSED;
    this.waitingFragment = null; // destroy useless demuxer when switching audio to main

    if (!altAudio) {
      if (this.demuxer) {
        this.demuxer.destroy();
        this.demuxer = null;
      }
    } else {
      // switching to audio track, start timer if not already started
      this.setInterval(audio_stream_controller_TICK_INTERVAL);
    } // should we switch tracks ?


    if (altAudio) {
      this.audioSwitch = true; // main audio track are handled by stream-controller, just do something if switching to alt audio track

      this.state = State.IDLE;
    }

    this.tick();
  };

  _proto.onAudioTrackLoaded = function onAudioTrackLoaded(data) {
    var newDetails = data.details,
        trackId = data.id,
        track = this.tracks[trackId],
        duration = newDetails.totalduration,
        sliding = 0;
    logger["logger"].log("track " + trackId + " loaded [" + newDetails.startSN + "," + newDetails.endSN + "],duration:" + duration);

    if (newDetails.live) {
      var curDetails = track.details;

      if (curDetails && newDetails.fragments.length > 0) {
        // we already have details for that level, merge them
        mergeDetails(curDetails, newDetails);
        sliding = newDetails.fragments[0].start; // TODO
        // this.liveSyncPosition = this.computeLivePosition(sliding, curDetails);

        if (newDetails.PTSKnown) {
          logger["logger"].log("live audio playlist sliding:" + sliding.toFixed(3));
        } else {
          logger["logger"].log('live audio playlist - outdated PTS, unknown sliding');
        }
      } else {
        newDetails.PTSKnown = false;
        logger["logger"].log('live audio playlist - first load, unknown sliding');
      }
    } else {
      newDetails.PTSKnown = false;
    }

    track.details = newDetails; // compute start position

    if (!this.startFragRequested) {
      // compute start position if set to -1. use it straight away if value is defined
      if (this.startPosition === -1) {
        // first, check if start time offset has been set in playlist, if yes, use this value
        var startTimeOffset = newDetails.startTimeOffset;

        if (Object(number_isFinite["isFiniteNumber"])(startTimeOffset)) {
          logger["logger"].log("start time offset found in playlist, adjust startPosition to " + startTimeOffset);
          this.startPosition = startTimeOffset;
        } else {
          this.startPosition = 0;
        }
      }

      this.nextLoadPosition = this.startPosition;
    } // only switch batck to IDLE state if we were waiting for track to start downloading a new fragment


    if (this.state === State.WAITING_TRACK) {
      this.state = State.IDLE;
    } // trigger handler right now


    this.tick();
  };

  _proto.onKeyLoaded = function onKeyLoaded() {
    if (this.state === State.KEY_LOADING) {
      this.state = State.IDLE;
      this.tick();
    }
  };

  _proto.onFragLoaded = function onFragLoaded(data) {
    var fragCurrent = this.fragCurrent,
        fragLoaded = data.frag;

    if (this.state === State.FRAG_LOADING && fragCurrent && fragLoaded.type === 'audio' && fragLoaded.level === fragCurrent.level && fragLoaded.sn === fragCurrent.sn) {
      var track = this.tracks[this.trackId],
          details = track.details,
          duration = details.totalduration,
          trackId = fragCurrent.level,
          sn = fragCurrent.sn,
          cc = fragCurrent.cc,
          audioCodec = this.config.defaultAudioCodec || track.audioCodec || 'mp4a.40.2',
          stats = this.stats = data.stats;

      if (sn === 'initSegment') {
        this.state = State.IDLE;
        stats.tparsed = stats.tbuffered = audio_stream_controller_performance.now();
        details.initSegment.data = data.payload;
        this.hls.trigger(events["default"].FRAG_BUFFERED, {
          stats: stats,
          frag: fragCurrent,
          id: 'audio'
        });
        this.tick();
      } else {
        this.state = State.PARSING; // transmux the MPEG-TS data to ISO-BMFF segments

        this.appended = false;

        if (!this.demuxer) {
          this.demuxer = new demux_demuxer(this.hls, 'audio');
        } // Check if we have video initPTS
        // If not we need to wait for it


        var initPTS = this.initPTS[cc];
        var initSegmentData = details.initSegment ? details.initSegment.data : [];

        if (details.initSegment || initPTS !== undefined) {
          this.pendingBuffering = true;
          logger["logger"].log("Demuxing " + sn + " of [" + details.startSN + " ," + details.endSN + "],track " + trackId); // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live)

          var accurateTimeOffset = false; // details.PTSKnown || !details.live;

          this.demuxer.push(data.payload, initSegmentData, audioCodec, null, fragCurrent, duration, accurateTimeOffset, initPTS);
        } else {
          logger["logger"].log("unknown video PTS for continuity counter " + cc + ", waiting for video PTS before demuxing audio frag " + sn + " of [" + details.startSN + " ," + details.endSN + "],track " + trackId);
          this.waitingFragment = data;
          this.state = State.WAITING_INIT_PTS;
        }
      }
    }

    this.fragLoadError = 0;
  };

  _proto.onFragParsingInitSegment = function onFragParsingInitSegment(data) {
    var fragCurrent = this.fragCurrent;
    var fragNew = data.frag;

    if (fragCurrent && data.id === 'audio' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {
      var tracks = data.tracks,
          track; // delete any video track found on audio demuxer

      if (tracks.video) {
        delete tracks.video;
      } // include levelCodec in audio and video tracks


      track = tracks.audio;

      if (track) {
        track.levelCodec = track.codec;
        track.id = data.id;
        this.hls.trigger(events["default"].BUFFER_CODECS, tracks);
        logger["logger"].log("audio track:audio,container:" + track.container + ",codecs[level/parsed]=[" + track.levelCodec + "/" + track.codec + "]");
        var initSegment = track.initSegment;

        if (initSegment) {
          var appendObj = {
            type: 'audio',
            data: initSegment,
            parent: 'audio',
            content: 'initSegment'
          };

          if (this.audioSwitch) {
            this.pendingData = [appendObj];
          } else {
            this.appended = true; // arm pending Buffering flag before appending a segment

            this.pendingBuffering = true;
            this.hls.trigger(events["default"].BUFFER_APPENDING, appendObj);
          }
        } // trigger handler right now


        this.tick();
      }
    }
  };

  _proto.onFragParsingData = function onFragParsingData(data) {
    var _this2 = this;

    var fragCurrent = this.fragCurrent;
    var fragNew = data.frag;

    if (fragCurrent && data.id === 'audio' && data.type === 'audio' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {
      var trackId = this.trackId,
          track = this.tracks[trackId],
          hls = this.hls;

      if (!Object(number_isFinite["isFiniteNumber"])(data.endPTS)) {
        data.endPTS = data.startPTS + fragCurrent.duration;
        data.endDTS = data.startDTS + fragCurrent.duration;
      }

      fragCurrent.addElementaryStream(ElementaryStreamTypes.AUDIO);
      logger["logger"].log("parsed " + data.type + ",PTS:[" + data.startPTS.toFixed(3) + "," + data.endPTS.toFixed(3) + "],DTS:[" + data.startDTS.toFixed(3) + "/" + data.endDTS.toFixed(3) + "],nb:" + data.nb);
      updateFragPTSDTS(track.details, fragCurrent, data.startPTS, data.endPTS);
      var audioSwitch = this.audioSwitch,
          media = this.media,
          appendOnBufferFlush = false; // Only flush audio from old audio tracks when PTS is known on new audio track

      if (audioSwitch) {
        if (media && media.readyState) {
          var currentTime = media.currentTime;
          logger["logger"].log('switching audio track : currentTime:' + currentTime);

          if (currentTime >= data.startPTS) {
            logger["logger"].log('switching audio track : flushing all audio');
            this.state = State.BUFFER_FLUSHING;
            hls.trigger(events["default"].BUFFER_FLUSHING, {
              startOffset: 0,
              endOffset: Number.POSITIVE_INFINITY,
              type: 'audio'
            });
            appendOnBufferFlush = true; // Lets announce that the initial audio track switch flush occur

            this.audioSwitch = false;
            hls.trigger(events["default"].AUDIO_TRACK_SWITCHED, {
              id: trackId
            });
          }
        } else {
          // Lets announce that the initial audio track switch flush occur
          this.audioSwitch = false;
          hls.trigger(events["default"].AUDIO_TRACK_SWITCHED, {
            id: trackId
          });
        }
      }

      var pendingData = this.pendingData;

      if (!pendingData) {
        logger["logger"].warn('Apparently attempt to enqueue media payload without codec initialization data upfront');
        hls.trigger(events["default"].ERROR, {
          type: errors["ErrorTypes"].MEDIA_ERROR,
          details: null,
          fatal: true
        });
        return;
      }

      if (!this.audioSwitch) {
        [data.data1, data.data2].forEach(function (buffer) {
          if (buffer && buffer.length) {
            pendingData.push({
              type: data.type,
              data: buffer,
              parent: 'audio',
              content: 'data'
            });
          }
        });

        if (!appendOnBufferFlush && pendingData.length) {
          pendingData.forEach(function (appendObj) {
            // only append in PARSING state (rationale is that an appending error could happen synchronously on first segment appending)
            // in that case it is useless to append following segments
            if (_this2.state === State.PARSING) {
              // arm pending Buffering flag before appending a segment
              _this2.pendingBuffering = true;

              _this2.hls.trigger(events["default"].BUFFER_APPENDING, appendObj);
            }
          });
          this.pendingData = [];
          this.appended = true;
        }
      } // trigger handler right now


      this.tick();
    }
  };

  _proto.onFragParsed = function onFragParsed(data) {
    var fragCurrent = this.fragCurrent;
    var fragNew = data.frag;

    if (fragCurrent && data.id === 'audio' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {
      this.stats.tparsed = audio_stream_controller_performance.now();
      this.state = State.PARSED;

      this._checkAppendedParsed();
    }
  };

  _proto.onBufferReset = function onBufferReset() {
    // reset reference to sourcebuffers
    this.mediaBuffer = this.videoBuffer = null;
    this.loadedmetadata = false;
  };

  _proto.onBufferCreated = function onBufferCreated(data) {
    var audioTrack = data.tracks.audio;

    if (audioTrack) {
      this.mediaBuffer = audioTrack.buffer;
      this.loadedmetadata = true;
    }

    if (data.tracks.video) {
      this.videoBuffer = data.tracks.video.buffer;
    }
  };

  _proto.onBufferAppended = function onBufferAppended(data) {
    if (data.parent === 'audio') {
      var state = this.state;

      if (state === State.PARSING || state === State.PARSED) {
        // check if all buffers have been appended
        this.pendingBuffering = data.pending > 0;

        this._checkAppendedParsed();
      }
    }
  };

  _proto._checkAppendedParsed = function _checkAppendedParsed() {
    // trigger handler right now
    if (this.state === State.PARSED && (!this.appended || !this.pendingBuffering)) {
      var frag = this.fragCurrent,
          stats = this.stats,
          hls = this.hls;

      if (frag) {
        this.fragPrevious = frag;
        stats.tbuffered = audio_stream_controller_performance.now();
        hls.trigger(events["default"].FRAG_BUFFERED, {
          stats: stats,
          frag: frag,
          id: 'audio'
        });
        var media = this.mediaBuffer ? this.mediaBuffer : this.media;

        if (media) {
          logger["logger"].log("audio buffered : " + time_ranges.toString(media.buffered));
        }

        if (this.audioSwitch && this.appended) {
          this.audioSwitch = false;
          hls.trigger(events["default"].AUDIO_TRACK_SWITCHED, {
            id: this.trackId
          });
        }

        this.state = State.IDLE;
      }

      this.tick();
    }
  };

  _proto.onError = function onError(data) {
    var frag = data.frag; // don't handle frag error not related to audio fragment

    if (frag && frag.type !== 'audio') {
      return;
    }

    switch (data.details) {
      case errors["ErrorDetails"].FRAG_LOAD_ERROR:
      case errors["ErrorDetails"].FRAG_LOAD_TIMEOUT:
        var _frag = data.frag; // don't handle frag error not related to audio fragment

        if (_frag && _frag.type !== 'audio') {
          break;
        }

        if (!data.fatal) {
          var loadError = this.fragLoadError;

          if (loadError) {
            loadError++;
          } else {
            loadError = 1;
          }

          var config = this.config;

          if (loadError <= config.fragLoadingMaxRetry) {
            this.fragLoadError = loadError; // exponential backoff capped to config.fragLoadingMaxRetryTimeout

            var delay = Math.min(Math.pow(2, loadError - 1) * config.fragLoadingRetryDelay, config.fragLoadingMaxRetryTimeout);
            logger["logger"].warn("AudioStreamController: frag loading failed, retry in " + delay + " ms");
            this.retryDate = audio_stream_controller_performance.now() + delay; // retry loading state

            this.state = State.FRAG_LOADING_WAITING_RETRY;
          } else {
            logger["logger"].error("AudioStreamController: " + data.details + " reaches max retry, redispatch as fatal ..."); // switch error to fatal

            data.fatal = true;
            this.state = State.ERROR;
          }
        }

        break;

      case errors["ErrorDetails"].AUDIO_TRACK_LOAD_ERROR:
      case errors["ErrorDetails"].AUDIO_TRACK_LOAD_TIMEOUT:
      case errors["ErrorDetails"].KEY_LOAD_ERROR:
      case errors["ErrorDetails"].KEY_LOAD_TIMEOUT:
        //  when in ERROR state, don't switch back to IDLE state in case a non-fatal error is received
        if (this.state !== State.ERROR) {
          // if fatal error, stop processing, otherwise move to IDLE to retry loading
          this.state = data.fatal ? State.ERROR : State.IDLE;
          logger["logger"].warn("AudioStreamController: " + data.details + " while loading frag, now switching to " + this.state + " state ...");
        }

        break;

      case errors["ErrorDetails"].BUFFER_FULL_ERROR:
        // if in appending state
        if (data.parent === 'audio' && (this.state === State.PARSING || this.state === State.PARSED)) {
          var media = this.mediaBuffer,
              currentTime = this.media.currentTime,
              mediaBuffered = media && BufferHelper.isBuffered(media, currentTime) && BufferHelper.isBuffered(media, currentTime + 0.5); // reduce max buf len if current position is buffered

          if (mediaBuffered) {
            var _config = this.config;

            if (_config.maxMaxBufferLength >= _config.maxBufferLength) {
              // reduce max buffer length as it might be too high. we do this to avoid loop flushing ...
              _config.maxMaxBufferLength /= 2;
              logger["logger"].warn("AudioStreamController: reduce max buffer length to " + _config.maxMaxBufferLength + "s");
            }

            this.state = State.IDLE;
          } else {
            // current position is not buffered, but browser is still complaining about buffer full error
            // this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708
            // in that case flush the whole audio buffer to recover
            logger["logger"].warn('AudioStreamController: buffer full error also media.currentTime is not buffered, flush audio buffer');
            this.fragCurrent = null; // flush everything

            this.state = State.BUFFER_FLUSHING;
            this.hls.trigger(events["default"].BUFFER_FLUSHING, {
              startOffset: 0,
              endOffset: Number.POSITIVE_INFINITY,
              type: 'audio'
            });
          }
        }

        break;

      default:
        break;
    }
  };

  _proto.onBufferFlushed = function onBufferFlushed() {
    var _this3 = this;

    var pendingData = this.pendingData;

    if (pendingData && pendingData.length) {
      logger["logger"].log('AudioStreamController: appending pending audio data after buffer flushed');
      pendingData.forEach(function (appendObj) {
        _this3.hls.trigger(events["default"].BUFFER_APPENDING, appendObj);
      });
      this.appended = true;
      this.pendingData = [];
      this.state = State.PARSED;
    } else {
      // move to IDLE once flush complete. this should trigger new fragment loading
      this.state = State.IDLE; // reset reference to frag

      this.fragPrevious = null;
      this.tick();
    }
  };

  audio_stream_controller_createClass(AudioStreamController, [{
    key: "state",
    set: function set(nextState) {
      if (this.state !== nextState) {
        var previousState = this.state;
        this._state = nextState;
        logger["logger"].log("audio stream:" + previousState + "->" + nextState);
      }
    },
    get: function get() {
      return this._state;
    }
  }]);

  return AudioStreamController;
}(base_stream_controller_BaseStreamController);

/* harmony default export */ var audio_stream_controller = (audio_stream_controller_AudioStreamController);
// CONCATENATED MODULE: ./src/utils/vttcue.js
/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* harmony default export */ var vttcue = ((function () {
  if (typeof window !== 'undefined' && window.VTTCue) {
    return window.VTTCue;
  }

  var autoKeyword = 'auto';
  var directionSetting = {
    '': true,
    lr: true,
    rl: true
  };
  var alignSetting = {
    start: true,
    middle: true,
    end: true,
    left: true,
    right: true
  };

  function findDirectionSetting(value) {
    if (typeof value !== 'string') {
      return false;
    }

    var dir = directionSetting[value.toLowerCase()];
    return dir ? value.toLowerCase() : false;
  }

  function findAlignSetting(value) {
    if (typeof value !== 'string') {
      return false;
    }

    var align = alignSetting[value.toLowerCase()];
    return align ? value.toLowerCase() : false;
  }

  function extend(obj) {
    var i = 1;

    for (; i < arguments.length; i++) {
      var cobj = arguments[i];

      for (var p in cobj) {
        obj[p] = cobj[p];
      }
    }

    return obj;
  }

  function VTTCue(startTime, endTime, text) {
    var cue = this;
    var baseObj = {};
    baseObj.enumerable = true;
    /**
     * Shim implementation specific properties. These properties are not in
     * the spec.
     */
    // Lets us know when the VTTCue's data has changed in such a way that we need
    // to recompute its display state. This lets us compute its display state
    // lazily.

    cue.hasBeenReset = false;
    /**
     * VTTCue and TextTrackCue properties
     * http://dev.w3.org/html5/webvtt/#vttcue-interface
     */

    var _id = '';
    var _pauseOnExit = false;
    var _startTime = startTime;
    var _endTime = endTime;
    var _text = text;
    var _region = null;
    var _vertical = '';
    var _snapToLines = true;
    var _line = 'auto';
    var _lineAlign = 'start';
    var _position = 50;
    var _positionAlign = 'middle';
    var _size = 50;
    var _align = 'middle';
    Object.defineProperty(cue, 'id', extend({}, baseObj, {
      get: function get() {
        return _id;
      },
      set: function set(value) {
        _id = '' + value;
      }
    }));
    Object.defineProperty(cue, 'pauseOnExit', extend({}, baseObj, {
      get: function get() {
        return _pauseOnExit;
      },
      set: function set(value) {
        _pauseOnExit = !!value;
      }
    }));
    Object.defineProperty(cue, 'startTime', extend({}, baseObj, {
      get: function get() {
        return _startTime;
      },
      set: function set(value) {
        if (typeof value !== 'number') {
          throw new TypeError('Start time must be set to a number.');
        }

        _startTime = value;
        this.hasBeenReset = true;
      }
    }));
    Object.defineProperty(cue, 'endTime', extend({}, baseObj, {
      get: function get() {
        return _endTime;
      },
      set: function set(value) {
        if (typeof value !== 'number') {
          throw new TypeError('End time must be set to a number.');
        }

        _endTime = value;
        this.hasBeenReset = true;
      }
    }));
    Object.defineProperty(cue, 'text', extend({}, baseObj, {
      get: function get() {
        return _text;
      },
      set: function set(value) {
        _text = '' + value;
        this.hasBeenReset = true;
      }
    }));
    Object.defineProperty(cue, 'region', extend({}, baseObj, {
      get: function get() {
        return _region;
      },
      set: function set(value) {
        _region = value;
        this.hasBeenReset = true;
      }
    }));
    Object.defineProperty(cue, 'vertical', extend({}, baseObj, {
      get: function get() {
        return _vertical;
      },
      set: function set(value) {
        var setting = findDirectionSetting(value); // Have to check for false because the setting an be an empty string.

        if (setting === false) {
          throw new SyntaxError('An invalid or illegal string was specified.');
        }

        _vertical = setting;
        this.hasBeenReset = true;
      }
    }));
    Object.defineProperty(cue, 'snapToLines', extend({}, baseObj, {
      get: function get() {
        return _snapToLines;
      },
      set: function set(value) {
        _snapToLines = !!value;
        this.hasBeenReset = true;
      }
    }));
    Object.defineProperty(cue, 'line', extend({}, baseObj, {
      get: function get() {
        return _line;
      },
      set: function set(value) {
        if (typeof value !== 'number' && value !== autoKeyword) {
          throw new SyntaxError('An invalid number or illegal string was specified.');
        }

        _line = value;
        this.hasBeenReset = true;
      }
    }));
    Object.defineProperty(cue, 'lineAlign', extend({}, baseObj, {
      get: function get() {
        return _lineAlign;
      },
      set: function set(value) {
        var setting = findAlignSetting(value);

        if (!setting) {
          throw new SyntaxError('An invalid or illegal string was specified.');
        }

        _lineAlign = setting;
        this.hasBeenReset = true;
      }
    }));
    Object.defineProperty(cue, 'position', extend({}, baseObj, {
      get: function get() {
        return _position;
      },
      set: function set(value) {
        if (value < 0 || value > 100) {
          throw new Error('Position must be between 0 and 100.');
        }

        _position = value;
        this.hasBeenReset = true;
      }
    }));
    Object.defineProperty(cue, 'positionAlign', extend({}, baseObj, {
      get: function get() {
        return _positionAlign;
      },
      set: function set(value) {
        var setting = findAlignSetting(value);

        if (!setting) {
          throw new SyntaxError('An invalid or illegal string was specified.');
        }

        _positionAlign = setting;
        this.hasBeenReset = true;
      }
    }));
    Object.defineProperty(cue, 'size', extend({}, baseObj, {
      get: function get() {
        return _size;
      },
      set: function set(value) {
        if (value < 0 || value > 100) {
          throw new Error('Size must be between 0 and 100.');
        }

        _size = value;
        this.hasBeenReset = true;
      }
    }));
    Object.defineProperty(cue, 'align', extend({}, baseObj, {
      get: function get() {
        return _align;
      },
      set: function set(value) {
        var setting = findAlignSetting(value);

        if (!setting) {
          throw new SyntaxError('An invalid or illegal string was specified.');
        }

        _align = setting;
        this.hasBeenReset = true;
      }
    }));
    /**
     * Other <track> spec defined properties
     */
    // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state

    cue.displayState = void 0;
  }
  /**
   * VTTCue methods
   */


  VTTCue.prototype.getCueAsHTML = function () {
    // Assume WebVTT.convertCueToDOMTree is on the global.
    var WebVTT = window.WebVTT;
    return WebVTT.convertCueToDOMTree(window, this.text);
  };

  return VTTCue;
})());
// CONCATENATED MODULE: ./src/utils/vttparser.js
/*
 * Source: https://github.com/mozilla/vtt.js/blob/master/dist/vtt.js#L1716
 */


var StringDecoder = function StringDecoder() {
  return {
    decode: function decode(data) {
      if (!data) {
        return '';
      }

      if (typeof data !== 'string') {
        throw new Error('Error - expected string data.');
      }

      return decodeURIComponent(encodeURIComponent(data));
    }
  };
};

function VTTParser() {
  this.window = window;
  this.state = 'INITIAL';
  this.buffer = '';
  this.decoder = new StringDecoder();
  this.regionList = [];
} // Try to parse input as a time stamp.


function parseTimeStamp(input) {
  function computeSeconds(h, m, s, f) {
    return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;
  }

  var m = input.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);

  if (!m) {
    return null;
  }

  if (m[3]) {
    // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]
    return computeSeconds(m[1], m[2], m[3].replace(':', ''), m[4]);
  } else if (m[1] > 59) {
    // Timestamp takes the form of [hours]:[minutes].[milliseconds]
    // First position is hours as it's over 59.
    return computeSeconds(m[1], m[2], 0, m[4]);
  } else {
    // Timestamp takes the form of [minutes]:[seconds].[milliseconds]
    return computeSeconds(0, m[1], m[2], m[4]);
  }
} // A settings object holds key/value pairs and will ignore anything but the first
// assignment to a specific key.


function Settings() {
  this.values = Object.create(null);
}

Settings.prototype = {
  // Only accept the first assignment to any key.
  set: function set(k, v) {
    if (!this.get(k) && v !== '') {
      this.values[k] = v;
    }
  },
  // Return the value for a key, or a default value.
  // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
  // a number of possible default values as properties where 'defaultKey' is
  // the key of the property that will be chosen; otherwise it's assumed to be
  // a single value.
  get: function get(k, dflt, defaultKey) {
    if (defaultKey) {
      return this.has(k) ? this.values[k] : dflt[defaultKey];
    }

    return this.has(k) ? this.values[k] : dflt;
  },
  // Check whether we have a value for a key.
  has: function has(k) {
    return k in this.values;
  },
  // Accept a setting if its one of the given alternatives.
  alt: function alt(k, v, a) {
    for (var n = 0; n < a.length; ++n) {
      if (v === a[n]) {
        this.set(k, v);
        break;
      }
    }
  },
  // Accept a setting if its a valid (signed) integer.
  integer: function integer(k, v) {
    if (/^-?\d+$/.test(v)) {
      // integer
      this.set(k, parseInt(v, 10));
    }
  },
  // Accept a setting if its a valid percentage.
  percent: function percent(k, v) {
    var m;

    if (m = v.match(/^([\d]{1,3})(\.[\d]*)?%$/)) {
      v = parseFloat(v);

      if (v >= 0 && v <= 100) {
        this.set(k, v);
        return true;
      }
    }

    return false;
  }
}; // Helper function to parse input into groups separated by 'groupDelim', and
// interprete each group as a key/value pair separated by 'keyValueDelim'.

function parseOptions(input, callback, keyValueDelim, groupDelim) {
  var groups = groupDelim ? input.split(groupDelim) : [input];

  for (var i in groups) {
    if (typeof groups[i] !== 'string') {
      continue;
    }

    var kv = groups[i].split(keyValueDelim);

    if (kv.length !== 2) {
      continue;
    }

    var k = kv[0];
    var v = kv[1];
    callback(k, v);
  }
}

var defaults = new vttcue(0, 0, 0); // 'middle' was changed to 'center' in the spec: https://github.com/w3c/webvtt/pull/244
//  Safari doesn't yet support this change, but FF and Chrome do.

var center = defaults.align === 'middle' ? 'middle' : 'center';

function parseCue(input, cue, regionList) {
  // Remember the original input if we need to throw an error.
  var oInput = input; // 4.1 WebVTT timestamp

  function consumeTimeStamp() {
    var ts = parseTimeStamp(input);

    if (ts === null) {
      throw new Error('Malformed timestamp: ' + oInput);
    } // Remove time stamp from input.


    input = input.replace(/^[^\sa-zA-Z-]+/, '');
    return ts;
  } // 4.4.2 WebVTT cue settings


  function consumeCueSettings(input, cue) {
    var settings = new Settings();
    parseOptions(input, function (k, v) {
      switch (k) {
        case 'region':
          // Find the last region we parsed with the same region id.
          for (var i = regionList.length - 1; i >= 0; i--) {
            if (regionList[i].id === v) {
              settings.set(k, regionList[i].region);
              break;
            }
          }

          break;

        case 'vertical':
          settings.alt(k, v, ['rl', 'lr']);
          break;

        case 'line':
          var vals = v.split(','),
              vals0 = vals[0];
          settings.integer(k, vals0);

          if (settings.percent(k, vals0)) {
            settings.set('snapToLines', false);
          }

          settings.alt(k, vals0, ['auto']);

          if (vals.length === 2) {
            settings.alt('lineAlign', vals[1], ['start', center, 'end']);
          }

          break;

        case 'position':
          vals = v.split(',');
          settings.percent(k, vals[0]);

          if (vals.length === 2) {
            settings.alt('positionAlign', vals[1], ['start', center, 'end', 'line-left', 'line-right', 'auto']);
          }

          break;

        case 'size':
          settings.percent(k, v);
          break;

        case 'align':
          settings.alt(k, v, ['start', center, 'end', 'left', 'right']);
          break;
      }
    }, /:/, /\s/); // Apply default values for any missing fields.

    cue.region = settings.get('region', null);
    cue.vertical = settings.get('vertical', '');
    var line = settings.get('line', 'auto');

    if (line === 'auto' && defaults.line === -1) {
      // set numeric line number for Safari
      line = -1;
    }

    cue.line = line;
    cue.lineAlign = settings.get('lineAlign', 'start');
    cue.snapToLines = settings.get('snapToLines', true);
    cue.size = settings.get('size', 100);
    cue.align = settings.get('align', center);
    var position = settings.get('position', 'auto');

    if (position === 'auto' && defaults.position === 50) {
      // set numeric position for Safari
      position = cue.align === 'start' || cue.align === 'left' ? 0 : cue.align === 'end' || cue.align === 'right' ? 100 : 50;
    }

    cue.position = position;
  }

  function skipWhitespace() {
    input = input.replace(/^\s+/, '');
  } // 4.1 WebVTT cue timings.


  skipWhitespace();
  cue.startTime = consumeTimeStamp(); // (1) collect cue start time

  skipWhitespace();

  if (input.substr(0, 3) !== '-->') {
    // (3) next characters must match '-->'
    throw new Error('Malformed time stamp (time stamps must be separated by \'-->\'): ' + oInput);
  }

  input = input.substr(3);
  skipWhitespace();
  cue.endTime = consumeTimeStamp(); // (5) collect cue end time
  // 4.1 WebVTT cue settings list.

  skipWhitespace();
  consumeCueSettings(input, cue);
}

function fixLineBreaks(input) {
  return input.replace(/<br(?: \/)?>/gi, '\n');
}

VTTParser.prototype = {
  parse: function parse(data) {
    var self = this; // If there is no data then we won't decode it, but will just try to parse
    // whatever is in buffer already. This may occur in circumstances, for
    // example when flush() is called.

    if (data) {
      // Try to decode the data that we received.
      self.buffer += self.decoder.decode(data, {
        stream: true
      });
    }

    function collectNextLine() {
      var buffer = self.buffer;
      var pos = 0;
      buffer = fixLineBreaks(buffer);

      while (pos < buffer.length && buffer[pos] !== '\r' && buffer[pos] !== '\n') {
        ++pos;
      }

      var line = buffer.substr(0, pos); // Advance the buffer early in case we fail below.

      if (buffer[pos] === '\r') {
        ++pos;
      }

      if (buffer[pos] === '\n') {
        ++pos;
      }

      self.buffer = buffer.substr(pos);
      return line;
    } // 3.2 WebVTT metadata header syntax


    function parseHeader(input) {
      parseOptions(input, function (k, v) {
        switch (k) {
          case 'Region':
            // 3.3 WebVTT region metadata header syntax
            // console.log('parse region', v);
            // parseRegion(v);
            break;
        }
      }, /:/);
    } // 5.1 WebVTT file parsing.


    try {
      var line;

      if (self.state === 'INITIAL') {
        // We can't start parsing until we have the first line.
        if (!/\r\n|\n/.test(self.buffer)) {
          return this;
        }

        line = collectNextLine(); // strip of UTF-8 BOM if any
        // https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8

        var m = line.match(/^(ï»¿)?WEBVTT([ \t].*)?$/);

        if (!m || !m[0]) {
          throw new Error('Malformed WebVTT signature.');
        }

        self.state = 'HEADER';
      }

      var alreadyCollectedLine = false;

      while (self.buffer) {
        // We can't parse a line until we have the full line.
        if (!/\r\n|\n/.test(self.buffer)) {
          return this;
        }

        if (!alreadyCollectedLine) {
          line = collectNextLine();
        } else {
          alreadyCollectedLine = false;
        }

        switch (self.state) {
          case 'HEADER':
            // 13-18 - Allow a header (metadata) under the WEBVTT line.
            if (/:/.test(line)) {
              parseHeader(line);
            } else if (!line) {
              // An empty line terminates the header and starts the body (cues).
              self.state = 'ID';
            }

            continue;

          case 'NOTE':
            // Ignore NOTE blocks.
            if (!line) {
              self.state = 'ID';
            }

            continue;

          case 'ID':
            // Check for the start of NOTE blocks.
            if (/^NOTE($|[ \t])/.test(line)) {
              self.state = 'NOTE';
              break;
            } // 19-29 - Allow any number of line terminators, then initialize new cue values.


            if (!line) {
              continue;
            }

            self.cue = new vttcue(0, 0, '');
            self.state = 'CUE'; // 30-39 - Check if self line contains an optional identifier or timing data.

            if (line.indexOf('-->') === -1) {
              self.cue.id = line;
              continue;
            }

          // Process line as start of a cue.

          /* falls through */

          case 'CUE':
            // 40 - Collect cue timings and settings.
            try {
              parseCue(line, self.cue, self.regionList);
            } catch (e) {
              // In case of an error ignore rest of the cue.
              self.cue = null;
              self.state = 'BADCUE';
              continue;
            }

            self.state = 'CUETEXT';
            continue;

          case 'CUETEXT':
            var hasSubstring = line.indexOf('-->') !== -1; // 34 - If we have an empty line then report the cue.
            // 35 - If we have the special substring '-->' then report the cue,
            // but do not collect the line as we need to process the current
            // one as a new cue.

            if (!line || hasSubstring && (alreadyCollectedLine = true)) {
              // We are done parsing self cue.
              if (self.oncue) {
                self.oncue(self.cue);
              }

              self.cue = null;
              self.state = 'ID';
              continue;
            }

            if (self.cue.text) {
              self.cue.text += '\n';
            }

            self.cue.text += line;
            continue;

          case 'BADCUE':
            // BADCUE
            // 54-62 - Collect and discard the remaining cue.
            if (!line) {
              self.state = 'ID';
            }

            continue;
        }
      }
    } catch (e) {
      // If we are currently parsing a cue, report what we have.
      if (self.state === 'CUETEXT' && self.cue && self.oncue) {
        self.oncue(self.cue);
      }

      self.cue = null; // Enter BADWEBVTT state if header was not parsed correctly otherwise
      // another exception occurred so enter BADCUE state.

      self.state = self.state === 'INITIAL' ? 'BADWEBVTT' : 'BADCUE';
    }

    return this;
  },
  flush: function flush() {
    var self = this;

    try {
      // Finish decoding the stream.
      self.buffer += self.decoder.decode(); // Synthesize the end of the current cue or region.

      if (self.cue || self.state === 'HEADER') {
        self.buffer += '\n\n';
        self.parse();
      } // If we've flushed, parsed, and we're still on the INITIAL state then
      // that means we don't have enough of the stream to parse the first
      // line.


      if (self.state === 'INITIAL') {
        throw new Error('Malformed WebVTT signature.');
      }
    } catch (e) {
      throw e;
    }

    if (self.onflush) {
      self.onflush();
    }

    return this;
  }
};

/* harmony default export */ var vttparser = (VTTParser);
// CONCATENATED MODULE: ./src/utils/cues.js

function newCue(track, startTime, endTime, captionScreen) {
  var row;
  var cue;
  var indenting;
  var indent;
  var text;
  var VTTCue = window.VTTCue || window.TextTrackCue;

  for (var r = 0; r < captionScreen.rows.length; r++) {
    row = captionScreen.rows[r];
    indenting = true;
    indent = 0;
    text = '';

    if (!row.isEmpty()) {
      for (var c = 0; c < row.chars.length; c++) {
        if (row.chars[c].uchar.match(/\s/) && indenting) {
          indent++;
        } else {
          text += row.chars[c].uchar;
          indenting = false;
        }
      } // To be used for cleaning-up orphaned roll-up captions


      row.cueStartTime = startTime; // Give a slight bump to the endTime if it's equal to startTime to avoid a SyntaxError in IE

      if (startTime === endTime) {
        endTime += 0.0001;
      }

      cue = new VTTCue(startTime, endTime, fixLineBreaks(text.trim()));

      if (indent >= 16) {
        indent--;
      } else {
        indent++;
      } // VTTCue.line get's flakey when using controls, so let's now include line 13&14
      // also, drop line 1 since it's to close to the top


      if (navigator.userAgent.match(/Firefox\//)) {
        cue.line = r + 1;
      } else {
        cue.line = r > 7 ? r - 2 : r + 1;
      }

      cue.align = 'left'; // Clamp the position between 0 and 100 - if out of these bounds, Firefox throws an exception and captions break

      cue.position = Math.max(0, Math.min(100, 100 * (indent / 32) + (navigator.userAgent.match(/Firefox\//) ? 50 : 0)));
      track.addCue(cue);
    }
  }
}
// CONCATENATED MODULE: ./src/utils/cea-608-parser.js
/**
 *
 * This code was ported from the dash.js project at:
 *   https://github.com/Dash-Industry-Forum/dash.js/blob/development/externals/cea608-parser.js
 *   https://github.com/Dash-Industry-Forum/dash.js/commit/8269b26a761e0853bb21d78780ed945144ecdd4d#diff-71bc295a2d6b6b7093a1d3290d53a4b2
 *
 * The original copyright appears below:
 *
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2015-2016, DASH Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  1. Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  2. Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

/**
     *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes
     */
var specialCea608CharsCodes = {
  0x2a: 0xe1,
  // lowercase a, acute accent
  0x5c: 0xe9,
  // lowercase e, acute accent
  0x5e: 0xed,
  // lowercase i, acute accent
  0x5f: 0xf3,
  // lowercase o, acute accent
  0x60: 0xfa,
  // lowercase u, acute accent
  0x7b: 0xe7,
  // lowercase c with cedilla
  0x7c: 0xf7,
  // division symbol
  0x7d: 0xd1,
  // uppercase N tilde
  0x7e: 0xf1,
  // lowercase n tilde
  0x7f: 0x2588,
  // Full block
  // THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
  // THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F
  // THIS MEANS THAT \x50 MUST BE ADDED TO THE VALUES
  0x80: 0xae,
  // Registered symbol (R)
  0x81: 0xb0,
  // degree sign
  0x82: 0xbd,
  // 1/2 symbol
  0x83: 0xbf,
  // Inverted (open) question mark
  0x84: 0x2122,
  // Trademark symbol (TM)
  0x85: 0xa2,
  // Cents symbol
  0x86: 0xa3,
  // Pounds sterling
  0x87: 0x266a,
  // Music 8'th note
  0x88: 0xe0,
  // lowercase a, grave accent
  0x89: 0x20,
  // transparent space (regular)
  0x8a: 0xe8,
  // lowercase e, grave accent
  0x8b: 0xe2,
  // lowercase a, circumflex accent
  0x8c: 0xea,
  // lowercase e, circumflex accent
  0x8d: 0xee,
  // lowercase i, circumflex accent
  0x8e: 0xf4,
  // lowercase o, circumflex accent
  0x8f: 0xfb,
  // lowercase u, circumflex accent
  // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
  // THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F
  0x90: 0xc1,
  // capital letter A with acute
  0x91: 0xc9,
  // capital letter E with acute
  0x92: 0xd3,
  // capital letter O with acute
  0x93: 0xda,
  // capital letter U with acute
  0x94: 0xdc,
  // capital letter U with diaresis
  0x95: 0xfc,
  // lowercase letter U with diaeresis
  0x96: 0x2018,
  // opening single quote
  0x97: 0xa1,
  // inverted exclamation mark
  0x98: 0x2a,
  // asterisk
  0x99: 0x2019,
  // closing single quote
  0x9a: 0x2501,
  // box drawings heavy horizontal
  0x9b: 0xa9,
  // copyright sign
  0x9c: 0x2120,
  // Service mark
  0x9d: 0x2022,
  // (round) bullet
  0x9e: 0x201c,
  // Left double quotation mark
  0x9f: 0x201d,
  // Right double quotation mark
  0xa0: 0xc0,
  // uppercase A, grave accent
  0xa1: 0xc2,
  // uppercase A, circumflex
  0xa2: 0xc7,
  // uppercase C with cedilla
  0xa3: 0xc8,
  // uppercase E, grave accent
  0xa4: 0xca,
  // uppercase E, circumflex
  0xa5: 0xcb,
  // capital letter E with diaresis
  0xa6: 0xeb,
  // lowercase letter e with diaresis
  0xa7: 0xce,
  // uppercase I, circumflex
  0xa8: 0xcf,
  // uppercase I, with diaresis
  0xa9: 0xef,
  // lowercase i, with diaresis
  0xaa: 0xd4,
  // uppercase O, circumflex
  0xab: 0xd9,
  // uppercase U, grave accent
  0xac: 0xf9,
  // lowercase u, grave accent
  0xad: 0xdb,
  // uppercase U, circumflex
  0xae: 0xab,
  // left-pointing double angle quotation mark
  0xaf: 0xbb,
  // right-pointing double angle quotation mark
  // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
  // THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F
  0xb0: 0xc3,
  // Uppercase A, tilde
  0xb1: 0xe3,
  // Lowercase a, tilde
  0xb2: 0xcd,
  // Uppercase I, acute accent
  0xb3: 0xcc,
  // Uppercase I, grave accent
  0xb4: 0xec,
  // Lowercase i, grave accent
  0xb5: 0xd2,
  // Uppercase O, grave accent
  0xb6: 0xf2,
  // Lowercase o, grave accent
  0xb7: 0xd5,
  // Uppercase O, tilde
  0xb8: 0xf5,
  // Lowercase o, tilde
  0xb9: 0x7b,
  // Open curly brace
  0xba: 0x7d,
  // Closing curly brace
  0xbb: 0x5c,
  // Backslash
  0xbc: 0x5e,
  // Caret
  0xbd: 0x5f,
  // Underscore
  0xbe: 0x7c,
  // Pipe (vertical line)
  0xbf: 0x223c,
  // Tilde operator
  0xc0: 0xc4,
  // Uppercase A, umlaut
  0xc1: 0xe4,
  // Lowercase A, umlaut
  0xc2: 0xd6,
  // Uppercase O, umlaut
  0xc3: 0xf6,
  // Lowercase o, umlaut
  0xc4: 0xdf,
  // Esszett (sharp S)
  0xc5: 0xa5,
  // Yen symbol
  0xc6: 0xa4,
  // Generic currency sign
  0xc7: 0x2503,
  // Box drawings heavy vertical
  0xc8: 0xc5,
  // Uppercase A, ring
  0xc9: 0xe5,
  // Lowercase A, ring
  0xca: 0xd8,
  // Uppercase O, stroke
  0xcb: 0xf8,
  // Lowercase o, strok
  0xcc: 0x250f,
  // Box drawings heavy down and right
  0xcd: 0x2513,
  // Box drawings heavy down and left
  0xce: 0x2517,
  // Box drawings heavy up and right
  0xcf: 0x251b // Box drawings heavy up and left

};
/**
 * Utils
 */

var getCharForByte = function getCharForByte(byte) {
  var charCode = byte;

  if (specialCea608CharsCodes.hasOwnProperty(byte)) {
    charCode = specialCea608CharsCodes[byte];
  }

  return String.fromCharCode(charCode);
};

var NR_ROWS = 15,
    NR_COLS = 100; // Tables to look up row from PAC data

var rowsLowCh1 = {
  0x11: 1,
  0x12: 3,
  0x15: 5,
  0x16: 7,
  0x17: 9,
  0x10: 11,
  0x13: 12,
  0x14: 14
};
var rowsHighCh1 = {
  0x11: 2,
  0x12: 4,
  0x15: 6,
  0x16: 8,
  0x17: 10,
  0x13: 13,
  0x14: 15
};
var rowsLowCh2 = {
  0x19: 1,
  0x1A: 3,
  0x1D: 5,
  0x1E: 7,
  0x1F: 9,
  0x18: 11,
  0x1B: 12,
  0x1C: 14
};
var rowsHighCh2 = {
  0x19: 2,
  0x1A: 4,
  0x1D: 6,
  0x1E: 8,
  0x1F: 10,
  0x1B: 13,
  0x1C: 15
};
var backgroundColors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'black', 'transparent'];
/**
 * Simple logger class to be able to write with time-stamps and filter on level.
 */

var cea_608_parser_logger = {
  verboseFilter: {
    'DATA': 3,
    'DEBUG': 3,
    'INFO': 2,
    'WARNING': 2,
    'TEXT': 1,
    'ERROR': 0
  },
  time: null,
  verboseLevel: 0,
  // Only write errors
  setTime: function setTime(newTime) {
    this.time = newTime;
  },
  log: function log(severity, msg) {
    var minLevel = this.verboseFilter[severity];

    if (this.verboseLevel >= minLevel) {// console.log(this.time + ' [' + severity + '] ' + msg);
    }
  }
};

var numArrayToHexArray = function numArrayToHexArray(numArray) {
  var hexArray = [];

  for (var j = 0; j < numArray.length; j++) {
    hexArray.push(numArray[j].toString(16));
  }

  return hexArray;
};

var PenState =
/*#__PURE__*/
function () {
  function PenState(foreground, underline, italics, background, flash) {
    this.foreground = foreground || 'white';
    this.underline = underline || false;
    this.italics = italics || false;
    this.background = background || 'black';
    this.flash = flash || false;
  }

  var _proto = PenState.prototype;

  _proto.reset = function reset() {
    this.foreground = 'white';
    this.underline = false;
    this.italics = false;
    this.background = 'black';
    this.flash = false;
  };

  _proto.setStyles = function setStyles(styles) {
    var attribs = ['foreground', 'underline', 'italics', 'background', 'flash'];

    for (var i = 0; i < attribs.length; i++) {
      var style = attribs[i];

      if (styles.hasOwnProperty(style)) {
        this[style] = styles[style];
      }
    }
  };

  _proto.isDefault = function isDefault() {
    return this.foreground === 'white' && !this.underline && !this.italics && this.background === 'black' && !this.flash;
  };

  _proto.equals = function equals(other) {
    return this.foreground === other.foreground && this.underline === other.underline && this.italics === other.italics && this.background === other.background && this.flash === other.flash;
  };

  _proto.copy = function copy(newPenState) {
    this.foreground = newPenState.foreground;
    this.underline = newPenState.underline;
    this.italics = newPenState.italics;
    this.background = newPenState.background;
    this.flash = newPenState.flash;
  };

  _proto.toString = function toString() {
    return 'color=' + this.foreground + ', underline=' + this.underline + ', italics=' + this.italics + ', background=' + this.background + ', flash=' + this.flash;
  };

  return PenState;
}();
/**
 * Unicode character with styling and background.
 * @constructor
 */


var StyledUnicodeChar =
/*#__PURE__*/
function () {
  function StyledUnicodeChar(uchar, foreground, underline, italics, background, flash) {
    this.uchar = uchar || ' '; // unicode character

    this.penState = new PenState(foreground, underline, italics, background, flash);
  }

  var _proto2 = StyledUnicodeChar.prototype;

  _proto2.reset = function reset() {
    this.uchar = ' ';
    this.penState.reset();
  };

  _proto2.setChar = function setChar(uchar, newPenState) {
    this.uchar = uchar;
    this.penState.copy(newPenState);
  };

  _proto2.setPenState = function setPenState(newPenState) {
    this.penState.copy(newPenState);
  };

  _proto2.equals = function equals(other) {
    return this.uchar === other.uchar && this.penState.equals(other.penState);
  };

  _proto2.copy = function copy(newChar) {
    this.uchar = newChar.uchar;
    this.penState.copy(newChar.penState);
  };

  _proto2.isEmpty = function isEmpty() {
    return this.uchar === ' ' && this.penState.isDefault();
  };

  return StyledUnicodeChar;
}();
/**
 * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.
 * @constructor
 */


var Row =
/*#__PURE__*/
function () {
  function Row() {
    this.chars = [];

    for (var i = 0; i < NR_COLS; i++) {
      this.chars.push(new StyledUnicodeChar());
    }

    this.pos = 0;
    this.currPenState = new PenState();
  }

  var _proto3 = Row.prototype;

  _proto3.equals = function equals(other) {
    var equal = true;

    for (var i = 0; i < NR_COLS; i++) {
      if (!this.chars[i].equals(other.chars[i])) {
        equal = false;
        break;
      }
    }

    return equal;
  };

  _proto3.copy = function copy(other) {
    for (var i = 0; i < NR_COLS; i++) {
      this.chars[i].copy(other.chars[i]);
    }
  };

  _proto3.isEmpty = function isEmpty() {
    var empty = true;

    for (var i = 0; i < NR_COLS; i++) {
      if (!this.chars[i].isEmpty()) {
        empty = false;
        break;
      }
    }

    return empty;
  };
  /**
     *  Set the cursor to a valid column.
     */


  _proto3.setCursor = function setCursor(absPos) {
    if (this.pos !== absPos) {
      this.pos = absPos;
    }

    if (this.pos < 0) {
      cea_608_parser_logger.log('ERROR', 'Negative cursor position ' + this.pos);
      this.pos = 0;
    } else if (this.pos > NR_COLS) {
      cea_608_parser_logger.log('ERROR', 'Too large cursor position ' + this.pos);
      this.pos = NR_COLS;
    }
  };
  /**
     * Move the cursor relative to current position.
     */


  _proto3.moveCursor = function moveCursor(relPos) {
    var newPos = this.pos + relPos;

    if (relPos > 1) {
      for (var i = this.pos + 1; i < newPos + 1; i++) {
        this.chars[i].setPenState(this.currPenState);
      }
    }

    this.setCursor(newPos);
  };
  /**
     * Backspace, move one step back and clear character.
     */


  _proto3.backSpace = function backSpace() {
    this.moveCursor(-1);
    this.chars[this.pos].setChar(' ', this.currPenState);
  };

  _proto3.insertChar = function insertChar(byte) {
    if (byte >= 0x90) {
      // Extended char
      this.backSpace();
    }

    var char = getCharForByte(byte);

    if (this.pos >= NR_COLS) {
      cea_608_parser_logger.log('ERROR', 'Cannot insert ' + byte.toString(16) + ' (' + char + ') at position ' + this.pos + '. Skipping it!');
      return;
    }

    this.chars[this.pos].setChar(char, this.currPenState);
    this.moveCursor(1);
  };

  _proto3.clearFromPos = function clearFromPos(startPos) {
    var i;

    for (i = startPos; i < NR_COLS; i++) {
      this.chars[i].reset();
    }
  };

  _proto3.clear = function clear() {
    this.clearFromPos(0);
    this.pos = 0;
    this.currPenState.reset();
  };

  _proto3.clearToEndOfRow = function clearToEndOfRow() {
    this.clearFromPos(this.pos);
  };

  _proto3.getTextString = function getTextString() {
    var chars = [];
    var empty = true;

    for (var i = 0; i < NR_COLS; i++) {
      var char = this.chars[i].uchar;

      if (char !== ' ') {
        empty = false;
      }

      chars.push(char);
    }

    if (empty) {
      return '';
    } else {
      return chars.join('');
    }
  };

  _proto3.setPenStyles = function setPenStyles(styles) {
    this.currPenState.setStyles(styles);
    var currChar = this.chars[this.pos];
    currChar.setPenState(this.currPenState);
  };

  return Row;
}();
/**
 * Keep a CEA-608 screen of 32x15 styled characters
 * @constructor
*/


var CaptionScreen =
/*#__PURE__*/
function () {
  function CaptionScreen() {
    this.rows = [];

    for (var i = 0; i < NR_ROWS; i++) {
      this.rows.push(new Row());
    } // Note that we use zero-based numbering (0-14)


    this.currRow = NR_ROWS - 1;
    this.nrRollUpRows = null;
    this.reset();
  }

  var _proto4 = CaptionScreen.prototype;

  _proto4.reset = function reset() {
    for (var i = 0; i < NR_ROWS; i++) {
      this.rows[i].clear();
    }

    this.currRow = NR_ROWS - 1;
  };

  _proto4.equals = function equals(other) {
    var equal = true;

    for (var i = 0; i < NR_ROWS; i++) {
      if (!this.rows[i].equals(other.rows[i])) {
        equal = false;
        break;
      }
    }

    return equal;
  };

  _proto4.copy = function copy(other) {
    for (var i = 0; i < NR_ROWS; i++) {
      this.rows[i].copy(other.rows[i]);
    }
  };

  _proto4.isEmpty = function isEmpty() {
    var empty = true;

    for (var i = 0; i < NR_ROWS; i++) {
      if (!this.rows[i].isEmpty()) {
        empty = false;
        break;
      }
    }

    return empty;
  };

  _proto4.backSpace = function backSpace() {
    var row = this.rows[this.currRow];
    row.backSpace();
  };

  _proto4.clearToEndOfRow = function clearToEndOfRow() {
    var row = this.rows[this.currRow];
    row.clearToEndOfRow();
  };
  /**
     * Insert a character (without styling) in the current row.
     */


  _proto4.insertChar = function insertChar(char) {
    var row = this.rows[this.currRow];
    row.insertChar(char);
  };

  _proto4.setPen = function setPen(styles) {
    var row = this.rows[this.currRow];
    row.setPenStyles(styles);
  };

  _proto4.moveCursor = function moveCursor(relPos) {
    var row = this.rows[this.currRow];
    row.moveCursor(relPos);
  };

  _proto4.setCursor = function setCursor(absPos) {
    cea_608_parser_logger.log('INFO', 'setCursor: ' + absPos);
    var row = this.rows[this.currRow];
    row.setCursor(absPos);
  };

  _proto4.setPAC = function setPAC(pacData) {
    cea_608_parser_logger.log('INFO', 'pacData = ' + JSON.stringify(pacData));
    var newRow = pacData.row - 1;

    if (this.nrRollUpRows && newRow < this.nrRollUpRows - 1) {
      newRow = this.nrRollUpRows - 1;
    } // Make sure this only affects Roll-up Captions by checking this.nrRollUpRows


    if (this.nrRollUpRows && this.currRow !== newRow) {
      // clear all rows first
      for (var i = 0; i < NR_ROWS; i++) {
        this.rows[i].clear();
      } // Copy this.nrRollUpRows rows from lastOutputScreen and place it in the newRow location
      // topRowIndex - the start of rows to copy (inclusive index)


      var topRowIndex = this.currRow + 1 - this.nrRollUpRows; // We only copy if the last position was already shown.
      // We use the cueStartTime value to check this.

      var lastOutputScreen = this.lastOutputScreen;

      if (lastOutputScreen) {
        var prevLineTime = lastOutputScreen.rows[topRowIndex].cueStartTime;

        if (prevLineTime && prevLineTime < cea_608_parser_logger.time) {
          for (var _i = 0; _i < this.nrRollUpRows; _i++) {
            this.rows[newRow - this.nrRollUpRows + _i + 1].copy(lastOutputScreen.rows[topRowIndex + _i]);
          }
        }
      }
    }

    this.currRow = newRow;
    var row = this.rows[this.currRow];

    if (pacData.indent !== null) {
      var indent = pacData.indent;
      var prevPos = Math.max(indent - 1, 0);
      row.setCursor(pacData.indent);
      pacData.color = row.chars[prevPos].penState.foreground;
    }

    var styles = {
      foreground: pacData.color,
      underline: pacData.underline,
      italics: pacData.italics,
      background: 'black',
      flash: false
    };
    this.setPen(styles);
  };
  /**
     * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).
     */


  _proto4.setBkgData = function setBkgData(bkgData) {
    cea_608_parser_logger.log('INFO', 'bkgData = ' + JSON.stringify(bkgData));
    this.backSpace();
    this.setPen(bkgData);
    this.insertChar(0x20); // Space
  };

  _proto4.setRollUpRows = function setRollUpRows(nrRows) {
    this.nrRollUpRows = nrRows;
  };

  _proto4.rollUp = function rollUp() {
    if (this.nrRollUpRows === null) {
      cea_608_parser_logger.log('DEBUG', 'roll_up but nrRollUpRows not set yet');
      return; // Not properly setup
    }

    cea_608_parser_logger.log('TEXT', this.getDisplayText());
    var topRowIndex = this.currRow + 1 - this.nrRollUpRows;
    var topRow = this.rows.splice(topRowIndex, 1)[0];
    topRow.clear();
    this.rows.splice(this.currRow, 0, topRow);
    cea_608_parser_logger.log('INFO', 'Rolling up'); // logger.log('TEXT', this.get_display_text())
  };
  /**
    * Get all non-empty rows with as unicode text.
    */


  _proto4.getDisplayText = function getDisplayText(asOneRow) {
    asOneRow = asOneRow || false;
    var displayText = [];
    var text = '';
    var rowNr = -1;

    for (var i = 0; i < NR_ROWS; i++) {
      var rowText = this.rows[i].getTextString();

      if (rowText) {
        rowNr = i + 1;

        if (asOneRow) {
          displayText.push('Row ' + rowNr + ': \'' + rowText + '\'');
        } else {
          displayText.push(rowText.trim());
        }
      }
    }

    if (displayText.length > 0) {
      if (asOneRow) {
        text = '[' + displayText.join(' | ') + ']';
      } else {
        text = displayText.join('\n');
      }
    }

    return text;
  };

  _proto4.getTextAndFormat = function getTextAndFormat() {
    return this.rows;
  };

  return CaptionScreen;
}(); // var modes = ['MODE_ROLL-UP', 'MODE_POP-ON', 'MODE_PAINT-ON', 'MODE_TEXT'];


var Cea608Channel =
/*#__PURE__*/
function () {
  function Cea608Channel(channelNumber, outputFilter) {
    this.chNr = channelNumber;
    this.outputFilter = outputFilter;
    this.mode = null;
    this.verbose = 0;
    this.displayedMemory = new CaptionScreen();
    this.nonDisplayedMemory = new CaptionScreen();
    this.lastOutputScreen = new CaptionScreen();
    this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
    this.writeScreen = this.displayedMemory;
    this.mode = null;
    this.cueStartTime = null; // Keeps track of where a cue started.
  }

  var _proto5 = Cea608Channel.prototype;

  _proto5.reset = function reset() {
    this.mode = null;
    this.displayedMemory.reset();
    this.nonDisplayedMemory.reset();
    this.lastOutputScreen.reset();
    this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
    this.writeScreen = this.displayedMemory;
    this.mode = null;
    this.cueStartTime = null;
    this.lastCueEndTime = null;
  };

  _proto5.getHandler = function getHandler() {
    return this.outputFilter;
  };

  _proto5.setHandler = function setHandler(newHandler) {
    this.outputFilter = newHandler;
  };

  _proto5.setPAC = function setPAC(pacData) {
    this.writeScreen.setPAC(pacData);
  };

  _proto5.setBkgData = function setBkgData(bkgData) {
    this.writeScreen.setBkgData(bkgData);
  };

  _proto5.setMode = function setMode(newMode) {
    if (newMode === this.mode) {
      return;
    }

    this.mode = newMode;
    cea_608_parser_logger.log('INFO', 'MODE=' + newMode);

    if (this.mode === 'MODE_POP-ON') {
      this.writeScreen = this.nonDisplayedMemory;
    } else {
      this.writeScreen = this.displayedMemory;
      this.writeScreen.reset();
    }

    if (this.mode !== 'MODE_ROLL-UP') {
      this.displayedMemory.nrRollUpRows = null;
      this.nonDisplayedMemory.nrRollUpRows = null;
    }

    this.mode = newMode;
  };

  _proto5.insertChars = function insertChars(chars) {
    for (var i = 0; i < chars.length; i++) {
      this.writeScreen.insertChar(chars[i]);
    }

    var screen = this.writeScreen === this.displayedMemory ? 'DISP' : 'NON_DISP';
    cea_608_parser_logger.log('INFO', screen + ': ' + this.writeScreen.getDisplayText(true));

    if (this.mode === 'MODE_PAINT-ON' || this.mode === 'MODE_ROLL-UP') {
      cea_608_parser_logger.log('TEXT', 'DISPLAYED: ' + this.displayedMemory.getDisplayText(true));
      this.outputDataUpdate();
    }
  };

  _proto5.ccRCL = function ccRCL() {
    // Resume Caption Loading (switch mode to Pop On)
    cea_608_parser_logger.log('INFO', 'RCL - Resume Caption Loading');
    this.setMode('MODE_POP-ON');
  };

  _proto5.ccBS = function ccBS() {
    // BackSpace
    cea_608_parser_logger.log('INFO', 'BS - BackSpace');

    if (this.mode === 'MODE_TEXT') {
      return;
    }

    this.writeScreen.backSpace();

    if (this.writeScreen === this.displayedMemory) {
      this.outputDataUpdate();
    }
  };

  _proto5.ccAOF = function ccAOF() {// Reserved (formerly Alarm Off)
  };

  _proto5.ccAON = function ccAON() {// Reserved (formerly Alarm On)
  };

  _proto5.ccDER = function ccDER() {
    // Delete to End of Row
    cea_608_parser_logger.log('INFO', 'DER- Delete to End of Row');
    this.writeScreen.clearToEndOfRow();
    this.outputDataUpdate();
  };

  _proto5.ccRU = function ccRU(nrRows) {
    // Roll-Up Captions-2,3,or 4 Rows
    cea_608_parser_logger.log('INFO', 'RU(' + nrRows + ') - Roll Up');
    this.writeScreen = this.displayedMemory;
    this.setMode('MODE_ROLL-UP');
    this.writeScreen.setRollUpRows(nrRows);
  };

  _proto5.ccFON = function ccFON() {
    // Flash On
    cea_608_parser_logger.log('INFO', 'FON - Flash On');
    this.writeScreen.setPen({
      flash: true
    });
  };

  _proto5.ccRDC = function ccRDC() {
    // Resume Direct Captioning (switch mode to PaintOn)
    cea_608_parser_logger.log('INFO', 'RDC - Resume Direct Captioning');
    this.setMode('MODE_PAINT-ON');
  };

  _proto5.ccTR = function ccTR() {
    // Text Restart in text mode (not supported, however)
    cea_608_parser_logger.log('INFO', 'TR');
    this.setMode('MODE_TEXT');
  };

  _proto5.ccRTD = function ccRTD() {
    // Resume Text Display in Text mode (not supported, however)
    cea_608_parser_logger.log('INFO', 'RTD');
    this.setMode('MODE_TEXT');
  };

  _proto5.ccEDM = function ccEDM() {
    // Erase Displayed Memory
    cea_608_parser_logger.log('INFO', 'EDM - Erase Displayed Memory');
    this.displayedMemory.reset();
    this.outputDataUpdate(true);
  };

  _proto5.ccCR = function ccCR() {
    // Carriage Return
    cea_608_parser_logger.log('CR - Carriage Return');
    this.writeScreen.rollUp();
    this.outputDataUpdate(true);
  };

  _proto5.ccENM = function ccENM() {
    // Erase Non-Displayed Memory
    cea_608_parser_logger.log('INFO', 'ENM - Erase Non-displayed Memory');
    this.nonDisplayedMemory.reset();
  };

  _proto5.ccEOC = function ccEOC() {
    // End of Caption (Flip Memories)
    cea_608_parser_logger.log('INFO', 'EOC - End Of Caption');

    if (this.mode === 'MODE_POP-ON') {
      var tmp = this.displayedMemory;
      this.displayedMemory = this.nonDisplayedMemory;
      this.nonDisplayedMemory = tmp;
      this.writeScreen = this.nonDisplayedMemory;
      cea_608_parser_logger.log('TEXT', 'DISP: ' + this.displayedMemory.getDisplayText());
    }

    this.outputDataUpdate(true);
  };

  _proto5.ccTO = function ccTO(nrCols) {
    // Tab Offset 1,2, or 3 columns
    cea_608_parser_logger.log('INFO', 'TO(' + nrCols + ') - Tab Offset');
    this.writeScreen.moveCursor(nrCols);
  };

  _proto5.ccMIDROW = function ccMIDROW(secondByte) {
    // Parse MIDROW command
    var styles = {
      flash: false
    };
    styles.underline = secondByte % 2 === 1;
    styles.italics = secondByte >= 0x2e;

    if (!styles.italics) {
      var colorIndex = Math.floor(secondByte / 2) - 0x10;
      var colors = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta'];
      styles.foreground = colors[colorIndex];
    } else {
      styles.foreground = 'white';
    }

    cea_608_parser_logger.log('INFO', 'MIDROW: ' + JSON.stringify(styles));
    this.writeScreen.setPen(styles);
  };

  _proto5.outputDataUpdate = function outputDataUpdate(dispatch) {
    if (dispatch === void 0) {
      dispatch = false;
    }

    var t = cea_608_parser_logger.time;

    if (t === null) {
      return;
    }

    if (this.outputFilter) {
      if (this.cueStartTime === null && !this.displayedMemory.isEmpty()) {
        // Start of a new cue
        this.cueStartTime = t;
      } else {
        if (!this.displayedMemory.equals(this.lastOutputScreen)) {
          if (this.outputFilter.newCue) {
            this.outputFilter.newCue(this.cueStartTime, t, this.lastOutputScreen);

            if (dispatch === true && this.outputFilter.dispatchCue) {
              this.outputFilter.dispatchCue();
            }
          }

          this.cueStartTime = this.displayedMemory.isEmpty() ? null : t;
        }
      }

      this.lastOutputScreen.copy(this.displayedMemory);
    }
  };

  _proto5.cueSplitAtTime = function cueSplitAtTime(t) {
    if (this.outputFilter) {
      if (!this.displayedMemory.isEmpty()) {
        if (this.outputFilter.newCue) {
          this.outputFilter.newCue(this.cueStartTime, t, this.displayedMemory);
        }

        this.cueStartTime = t;
      }
    }
  };

  return Cea608Channel;
}();

var Cea608Parser =
/*#__PURE__*/
function () {
  function Cea608Parser(field, out1, out2) {
    this.field = field || 1;
    this.outputs = [out1, out2];
    this.channels = [new Cea608Channel(1, out1), new Cea608Channel(2, out2)];
    this.currChNr = -1; // Will be 1 or 2

    this.lastCmdA = null; // First byte of last command

    this.lastCmdB = null; // Second byte of last command

    this.bufferedData = [];
    this.startTime = null;
    this.lastTime = null;
    this.dataCounters = {
      'padding': 0,
      'char': 0,
      'cmd': 0,
      'other': 0
    };
  }

  var _proto6 = Cea608Parser.prototype;

  _proto6.getHandler = function getHandler(index) {
    return this.channels[index].getHandler();
  };

  _proto6.setHandler = function setHandler(index, newHandler) {
    this.channels[index].setHandler(newHandler);
  };
  /**
     * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.
     */


  _proto6.addData = function addData(t, byteList) {
    var cmdFound,
        a,
        b,
        charsFound = false;
    this.lastTime = t;
    cea_608_parser_logger.setTime(t);

    for (var i = 0; i < byteList.length; i += 2) {
      a = byteList[i] & 0x7f;
      b = byteList[i + 1] & 0x7f;

      if (a === 0 && b === 0) {
        this.dataCounters.padding += 2;
        continue;
      } else {
        cea_608_parser_logger.log('DATA', '[' + numArrayToHexArray([byteList[i], byteList[i + 1]]) + '] -> (' + numArrayToHexArray([a, b]) + ')');
      }

      cmdFound = this.parseCmd(a, b);

      if (!cmdFound) {
        cmdFound = this.parseMidrow(a, b);
      }

      if (!cmdFound) {
        cmdFound = this.parsePAC(a, b);
      }

      if (!cmdFound) {
        cmdFound = this.parseBackgroundAttributes(a, b);
      }

      if (!cmdFound) {
        charsFound = this.parseChars(a, b);

        if (charsFound) {
          if (this.currChNr && this.currChNr >= 0) {
            var channel = this.channels[this.currChNr - 1];
            channel.insertChars(charsFound);
          } else {
            cea_608_parser_logger.log('WARNING', 'No channel found yet. TEXT-MODE?');
          }
        }
      }

      if (cmdFound) {
        this.dataCounters.cmd += 2;
      } else if (charsFound) {
        this.dataCounters.char += 2;
      } else {
        this.dataCounters.other += 2;
        cea_608_parser_logger.log('WARNING', 'Couldn\'t parse cleaned data ' + numArrayToHexArray([a, b]) + ' orig: ' + numArrayToHexArray([byteList[i], byteList[i + 1]]));
      }
    }
  };
  /**
     * Parse Command.
     * @returns {Boolean} Tells if a command was found
     */


  _proto6.parseCmd = function parseCmd(a, b) {
    var chNr = null;
    var cond1 = (a === 0x14 || a === 0x1C) && b >= 0x20 && b <= 0x2F;
    var cond2 = (a === 0x17 || a === 0x1F) && b >= 0x21 && b <= 0x23;

    if (!(cond1 || cond2)) {
      return false;
    }

    if (a === this.lastCmdA && b === this.lastCmdB) {
      this.lastCmdA = null;
      this.lastCmdB = null; // Repeated commands are dropped (once)

      cea_608_parser_logger.log('DEBUG', 'Repeated command (' + numArrayToHexArray([a, b]) + ') is dropped');
      return true;
    }

    if (a === 0x14 || a === 0x17) {
      chNr = 1;
    } else {
      chNr = 2;
    } // (a === 0x1C || a=== 0x1f)


    var channel = this.channels[chNr - 1];

    if (a === 0x14 || a === 0x1C) {
      if (b === 0x20) {
        channel.ccRCL();
      } else if (b === 0x21) {
        channel.ccBS();
      } else if (b === 0x22) {
        channel.ccAOF();
      } else if (b === 0x23) {
        channel.ccAON();
      } else if (b === 0x24) {
        channel.ccDER();
      } else if (b === 0x25) {
        channel.ccRU(2);
      } else if (b === 0x26) {
        channel.ccRU(3);
      } else if (b === 0x27) {
        channel.ccRU(4);
      } else if (b === 0x28) {
        channel.ccFON();
      } else if (b === 0x29) {
        channel.ccRDC();
      } else if (b === 0x2A) {
        channel.ccTR();
      } else if (b === 0x2B) {
        channel.ccRTD();
      } else if (b === 0x2C) {
        channel.ccEDM();
      } else if (b === 0x2D) {
        channel.ccCR();
      } else if (b === 0x2E) {
        channel.ccENM();
      } else if (b === 0x2F) {
        channel.ccEOC();
      }
    } else {
      // a == 0x17 || a == 0x1F
      channel.ccTO(b - 0x20);
    }

    this.lastCmdA = a;
    this.lastCmdB = b;
    this.currChNr = chNr;
    return true;
  };
  /**
     * Parse midrow styling command
     * @returns {Boolean}
     */


  _proto6.parseMidrow = function parseMidrow(a, b) {
    var chNr = null;

    if ((a === 0x11 || a === 0x19) && b >= 0x20 && b <= 0x2f) {
      if (a === 0x11) {
        chNr = 1;
      } else {
        chNr = 2;
      }

      if (chNr !== this.currChNr) {
        cea_608_parser_logger.log('ERROR', 'Mismatch channel in midrow parsing');
        return false;
      }

      var channel = this.channels[chNr - 1];
      channel.ccMIDROW(b);
      cea_608_parser_logger.log('DEBUG', 'MIDROW (' + numArrayToHexArray([a, b]) + ')');
      return true;
    }

    return false;
  };
  /**
     * Parse Preable Access Codes (Table 53).
     * @returns {Boolean} Tells if PAC found
     */


  _proto6.parsePAC = function parsePAC(a, b) {
    var chNr = null;
    var row = null;
    var case1 = (a >= 0x11 && a <= 0x17 || a >= 0x19 && a <= 0x1F) && b >= 0x40 && b <= 0x7F;
    var case2 = (a === 0x10 || a === 0x18) && b >= 0x40 && b <= 0x5F;

    if (!(case1 || case2)) {
      return false;
    }

    if (a === this.lastCmdA && b === this.lastCmdB) {
      this.lastCmdA = null;
      this.lastCmdB = null;
      return true; // Repeated commands are dropped (once)
    }

    chNr = a <= 0x17 ? 1 : 2;

    if (b >= 0x40 && b <= 0x5F) {
      row = chNr === 1 ? rowsLowCh1[a] : rowsLowCh2[a];
    } else {
      // 0x60 <= b <= 0x7F
      row = chNr === 1 ? rowsHighCh1[a] : rowsHighCh2[a];
    }

    var pacData = this.interpretPAC(row, b);
    var channel = this.channels[chNr - 1];
    channel.setPAC(pacData);
    this.lastCmdA = a;
    this.lastCmdB = b;
    this.currChNr = chNr;
    return true;
  };
  /**
     * Interpret the second byte of the pac, and return the information.
     * @returns {Object} pacData with style parameters.
     */


  _proto6.interpretPAC = function interpretPAC(row, byte) {
    var pacIndex = byte;
    var pacData = {
      color: null,
      italics: false,
      indent: null,
      underline: false,
      row: row
    };

    if (byte > 0x5F) {
      pacIndex = byte - 0x60;
    } else {
      pacIndex = byte - 0x40;
    }

    pacData.underline = (pacIndex & 1) === 1;

    if (pacIndex <= 0xd) {
      pacData.color = ['white', 'green', 'blue', 'cyan', 'red', 'yellow', 'magenta', 'white'][Math.floor(pacIndex / 2)];
    } else if (pacIndex <= 0xf) {
      pacData.italics = true;
      pacData.color = 'white';
    } else {
      pacData.indent = Math.floor((pacIndex - 0x10) / 2) * 4;
    }

    return pacData; // Note that row has zero offset. The spec uses 1.
  };
  /**
     * Parse characters.
     * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.
     */


  _proto6.parseChars = function parseChars(a, b) {
    var channelNr = null,
        charCodes = null,
        charCode1 = null;

    if (a >= 0x19) {
      channelNr = 2;
      charCode1 = a - 8;
    } else {
      channelNr = 1;
      charCode1 = a;
    }

    if (charCode1 >= 0x11 && charCode1 <= 0x13) {
      // Special character
      var oneCode = b;

      if (charCode1 === 0x11) {
        oneCode = b + 0x50;
      } else if (charCode1 === 0x12) {
        oneCode = b + 0x70;
      } else {
        oneCode = b + 0x90;
      }

      cea_608_parser_logger.log('INFO', 'Special char \'' + getCharForByte(oneCode) + '\' in channel ' + channelNr);
      charCodes = [oneCode];
    } else if (a >= 0x20 && a <= 0x7f) {
      charCodes = b === 0 ? [a] : [a, b];
    }

    if (charCodes) {
      var hexCodes = numArrayToHexArray(charCodes);
      cea_608_parser_logger.log('DEBUG', 'Char codes =  ' + hexCodes.join(','));
      this.lastCmdA = null;
      this.lastCmdB = null;
    }

    return charCodes;
  };
  /**
    * Parse extended background attributes as well as new foreground color black.
    * @returns{Boolean} Tells if background attributes are found
    */


  _proto6.parseBackgroundAttributes = function parseBackgroundAttributes(a, b) {
    var bkgData, index, chNr, channel;
    var case1 = (a === 0x10 || a === 0x18) && b >= 0x20 && b <= 0x2f;
    var case2 = (a === 0x17 || a === 0x1f) && b >= 0x2d && b <= 0x2f;

    if (!(case1 || case2)) {
      return false;
    }

    bkgData = {};

    if (a === 0x10 || a === 0x18) {
      index = Math.floor((b - 0x20) / 2);
      bkgData.background = backgroundColors[index];

      if (b % 2 === 1) {
        bkgData.background = bkgData.background + '_semi';
      }
    } else if (b === 0x2d) {
      bkgData.background = 'transparent';
    } else {
      bkgData.foreground = 'black';

      if (b === 0x2f) {
        bkgData.underline = true;
      }
    }

    chNr = a < 0x18 ? 1 : 2;
    channel = this.channels[chNr - 1];
    channel.setBkgData(bkgData);
    this.lastCmdA = null;
    this.lastCmdB = null;
    return true;
  };
  /**
     * Reset state of parser and its channels.
     */


  _proto6.reset = function reset() {
    for (var i = 0; i < this.channels.length; i++) {
      if (this.channels[i]) {
        this.channels[i].reset();
      }
    }

    this.lastCmdA = null;
    this.lastCmdB = null;
  };
  /**
     * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.
     */


  _proto6.cueSplitAtTime = function cueSplitAtTime(t) {
    for (var i = 0; i < this.channels.length; i++) {
      if (this.channels[i]) {
        this.channels[i].cueSplitAtTime(t);
      }
    }
  };

  return Cea608Parser;
}();

/* harmony default export */ var cea_608_parser = (Cea608Parser);
// CONCATENATED MODULE: ./src/utils/output-filter.js
var OutputFilter =
/*#__PURE__*/
function () {
  function OutputFilter(timelineController, trackName) {
    this.timelineController = timelineController;
    this.trackName = trackName;
    this.startTime = null;
    this.endTime = null;
    this.screen = null;
  }

  var _proto = OutputFilter.prototype;

  _proto.dispatchCue = function dispatchCue() {
    if (this.startTime === null) {
      return;
    }

    this.timelineController.addCues(this.trackName, this.startTime, this.endTime, this.screen);
    this.startTime = null;
  };

  _proto.newCue = function newCue(startTime, endTime, screen) {
    if (this.startTime === null || this.startTime > startTime) {
      this.startTime = startTime;
    }

    this.endTime = endTime;
    this.screen = screen;
    this.timelineController.createCaptionsTrack(this.trackName);
  };

  return OutputFilter;
}();


// CONCATENATED MODULE: ./src/utils/webvtt-parser.js





 // String.prototype.startsWith is not supported in IE11

var startsWith = function startsWith(inputString, searchString, position) {
  return inputString.substr(position || 0, searchString.length) === searchString;
};

var webvtt_parser_cueString2millis = function cueString2millis(timeString) {
  var ts = parseInt(timeString.substr(-3));
  var secs = parseInt(timeString.substr(-6, 2));
  var mins = parseInt(timeString.substr(-9, 2));
  var hours = timeString.length > 9 ? parseInt(timeString.substr(0, timeString.indexOf(':'))) : 0;

  if (!Object(number_isFinite["isFiniteNumber"])(ts) || !Object(number_isFinite["isFiniteNumber"])(secs) || !Object(number_isFinite["isFiniteNumber"])(mins) || !Object(number_isFinite["isFiniteNumber"])(hours)) {
    throw Error("Malformed X-TIMESTAMP-MAP: Local:" + timeString);
  }

  ts += 1000 * secs;
  ts += 60 * 1000 * mins;
  ts += 60 * 60 * 1000 * hours;
  return ts;
}; // From https://github.com/darkskyapp/string-hash


var hash = function hash(text) {
  var hash = 5381;
  var i = text.length;

  while (i) {
    hash = hash * 33 ^ text.charCodeAt(--i);
  }

  return (hash >>> 0).toString();
};

var calculateOffset = function calculateOffset(vttCCs, cc, presentationTime) {
  var currCC = vttCCs[cc];
  var prevCC = vttCCs[currCC.prevCC]; // This is the first discontinuity or cues have been processed since the last discontinuity
  // Offset = current discontinuity time

  if (!prevCC || !prevCC.new && currCC.new) {
    vttCCs.ccOffset = vttCCs.presentationOffset = currCC.start;
    currCC.new = false;
    return;
  } // There have been discontinuities since cues were last parsed.
  // Offset = time elapsed


  while (prevCC && prevCC.new) {
    vttCCs.ccOffset += currCC.start - prevCC.start;
    currCC.new = false;
    currCC = prevCC;
    prevCC = vttCCs[currCC.prevCC];
  }

  vttCCs.presentationOffset = presentationTime;
};

var WebVTTParser = {
  parse: function parse(vttByteArray, syncPTS, vttCCs, cc, callBack, errorCallBack) {
    // Convert byteArray into string, replacing any somewhat exotic linefeeds with "\n", then split on that character.
    var re = /\r\n|\n\r|\n|\r/g; // Uint8Array.prototype.reduce is not implemented in IE11

    var vttLines = Object(id3["utf8ArrayToStr"])(new Uint8Array(vttByteArray)).trim().replace(re, '\n').split('\n');
    var cueTime = '00:00.000';
    var mpegTs = 0;
    var localTime = 0;
    var presentationTime = 0;
    var cues = [];
    var parsingError;
    var inHeader = true;
    var timestampMap = false; // let VTTCue = VTTCue || window.TextTrackCue;
    // Create parser object using VTTCue with TextTrackCue fallback on certain browsers.

    var parser = new vttparser();

    parser.oncue = function (cue) {
      // Adjust cue timing; clamp cues to start no earlier than - and drop cues that don't end after - 0 on timeline.
      var currCC = vttCCs[cc];
      var cueOffset = vttCCs.ccOffset; // Update offsets for new discontinuities

      if (currCC && currCC.new) {
        if (localTime !== undefined) {
          // When local time is provided, offset = discontinuity start time - local time
          cueOffset = vttCCs.ccOffset = currCC.start;
        } else {
          calculateOffset(vttCCs, cc, presentationTime);
        }
      }

      if (presentationTime) {
        // If we have MPEGTS, offset = presentation time + discontinuity offset
        cueOffset = presentationTime - vttCCs.presentationOffset;
      }

      if (timestampMap) {
        cue.startTime += cueOffset - localTime;
        cue.endTime += cueOffset - localTime;
      } // Create a unique hash id for a cue based on start/end times and text.
      // This helps timeline-controller to avoid showing repeated captions.


      cue.id = hash(cue.startTime.toString()) + hash(cue.endTime.toString()) + hash(cue.text); // Fix encoding of special characters. TODO: Test with all sorts of weird characters.

      cue.text = decodeURIComponent(encodeURIComponent(cue.text));

      if (cue.endTime > 0) {
        cues.push(cue);
      }
    };

    parser.onparsingerror = function (e) {
      parsingError = e;
    };

    parser.onflush = function () {
      if (parsingError && errorCallBack) {
        errorCallBack(parsingError);
        return;
      }

      callBack(cues);
    }; // Go through contents line by line.


    vttLines.forEach(function (line) {
      if (inHeader) {
        // Look for X-TIMESTAMP-MAP in header.
        if (startsWith(line, 'X-TIMESTAMP-MAP=')) {
          // Once found, no more are allowed anyway, so stop searching.
          inHeader = false;
          timestampMap = true; // Extract LOCAL and MPEGTS.

          line.substr(16).split(',').forEach(function (timestamp) {
            if (startsWith(timestamp, 'LOCAL:')) {
              cueTime = timestamp.substr(6);
            } else if (startsWith(timestamp, 'MPEGTS:')) {
              mpegTs = parseInt(timestamp.substr(7));
            }
          });

          try {
            // Calculate subtitle offset in milliseconds.
            if (syncPTS + (vttCCs[cc].start * 90000 || 0) < 0) {
              syncPTS += 8589934592;
            } // Adjust MPEGTS by sync PTS.


            mpegTs -= syncPTS; // Convert cue time to seconds

            localTime = webvtt_parser_cueString2millis(cueTime) / 1000; // Convert MPEGTS to seconds from 90kHz.

            presentationTime = mpegTs / 90000;
          } catch (e) {
            timestampMap = false;
            parsingError = e;
          } // Return without parsing X-TIMESTAMP-MAP line.


          return;
        } else if (line === '') {
          inHeader = false;
        }
      } // Parse line by default.


      parser.parse(line + '\n');
    });
    parser.flush();
  }
};
/* harmony default export */ var webvtt_parser = (WebVTTParser);
// CONCATENATED MODULE: ./src/controller/timeline-controller.js



function timeline_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function timeline_controller_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

/*
 * Timeline Controller
*/








function canReuseVttTextTrack(inUseTrack, manifestTrack) {
  return inUseTrack && inUseTrack.label === manifestTrack.name && !(inUseTrack.textTrack1 || inUseTrack.textTrack2);
}

function intersection(x1, x2, y1, y2) {
  return Math.min(x2, y2) - Math.max(x1, y1);
}

var timeline_controller_TimelineController =
/*#__PURE__*/
function (_EventHandler) {
  timeline_controller_inheritsLoose(TimelineController, _EventHandler);

  function TimelineController(hls) {
    var _this;

    _this = _EventHandler.call(this, hls, events["default"].MEDIA_ATTACHING, events["default"].MEDIA_DETACHING, events["default"].FRAG_PARSING_USERDATA, events["default"].FRAG_DECRYPTED, events["default"].MANIFEST_LOADING, events["default"].MANIFEST_LOADED, events["default"].FRAG_LOADED, events["default"].LEVEL_SWITCHING, events["default"].INIT_PTS_FOUND) || this;
    _this.hls = hls;
    _this.config = hls.config;
    _this.enabled = true;
    _this.Cues = hls.config.cueHandler;
    _this.textTracks = [];
    _this.tracks = [];
    _this.unparsedVttFrags = [];
    _this.initPTS = [];
    _this.cueRanges = [];
    _this.captionsTracks = {};
    _this.captionsProperties = {
      textTrack1: {
        label: _this.config.captionsTextTrack1Label,
        languageCode: _this.config.captionsTextTrack1LanguageCode
      },
      textTrack2: {
        label: _this.config.captionsTextTrack2Label,
        languageCode: _this.config.captionsTextTrack2LanguageCode
      }
    };

    if (_this.config.enableCEA708Captions) {
      var channel1 = new OutputFilter(timeline_controller_assertThisInitialized(timeline_controller_assertThisInitialized(_this)), 'textTrack1');
      var channel2 = new OutputFilter(timeline_controller_assertThisInitialized(timeline_controller_assertThisInitialized(_this)), 'textTrack2');
      _this.cea608Parser = new cea_608_parser(0, channel1, channel2);
    }

    return _this;
  }

  var _proto = TimelineController.prototype;

  _proto.addCues = function addCues(trackName, startTime, endTime, screen) {
    // skip cues which overlap more than 50% with previously parsed time ranges
    var ranges = this.cueRanges;
    var merged = false;

    for (var i = ranges.length; i--;) {
      var cueRange = ranges[i];
      var overlap = intersection(cueRange[0], cueRange[1], startTime, endTime);

      if (overlap >= 0) {
        cueRange[0] = Math.min(cueRange[0], startTime);
        cueRange[1] = Math.max(cueRange[1], endTime);
        merged = true;

        if (overlap / (endTime - startTime) > 0.5) {
          return;
        }
      }
    }

    if (!merged) {
      ranges.push([startTime, endTime]);
    }

    this.Cues.newCue(this.captionsTracks[trackName], startTime, endTime, screen);
  }; // Triggered when an initial PTS is found; used for synchronisation of WebVTT.


  _proto.onInitPtsFound = function onInitPtsFound(data) {
    var _this2 = this;

    if (data.id === 'main') {
      this.initPTS[data.frag.cc] = data.initPTS;
    } // Due to asynchronous processing, initial PTS may arrive later than the first VTT fragments are loaded.
    // Parse any unparsed fragments upon receiving the initial PTS.


    if (this.unparsedVttFrags.length) {
      var unparsedVttFrags = this.unparsedVttFrags;
      this.unparsedVttFrags = [];
      unparsedVttFrags.forEach(function (frag) {
        _this2.onFragLoaded(frag);
      });
    }
  };

  _proto.getExistingTrack = function getExistingTrack(trackName) {
    var media = this.media;

    if (media) {
      for (var i = 0; i < media.textTracks.length; i++) {
        var textTrack = media.textTracks[i];

        if (textTrack[trackName]) {
          return textTrack;
        }
      }
    }

    return null;
  };

  _proto.createCaptionsTrack = function createCaptionsTrack(trackName) {
    var _this$captionsPropert = this.captionsProperties[trackName],
        label = _this$captionsPropert.label,
        languageCode = _this$captionsPropert.languageCode;
    var captionsTracks = this.captionsTracks;

    if (!captionsTracks[trackName]) {
      // Enable reuse of existing text track.
      var existingTrack = this.getExistingTrack(trackName);

      if (!existingTrack) {
        var textTrack = this.createTextTrack('captions', label, languageCode);

        if (textTrack) {
          // Set a special property on the track so we know it's managed by Hls.js
          textTrack[trackName] = true;
          captionsTracks[trackName] = textTrack;
        }
      } else {
        captionsTracks[trackName] = existingTrack;
        clearCurrentCues(captionsTracks[trackName]);
        sendAddTrackEvent(captionsTracks[trackName], this.media);
      }
    }
  };

  _proto.createTextTrack = function createTextTrack(kind, label, lang) {
    var media = this.media;

    if (media) {
      return media.addTextTrack(kind, label, lang);
    }
  };

  _proto.destroy = function destroy() {
    event_handler.prototype.destroy.call(this);
  };

  _proto.onMediaAttaching = function onMediaAttaching(data) {
    this.media = data.media;

    this._cleanTracks();
  };

  _proto.onMediaDetaching = function onMediaDetaching() {
    var captionsTracks = this.captionsTracks;
    Object.keys(captionsTracks).forEach(function (trackName) {
      clearCurrentCues(captionsTracks[trackName]);
      delete captionsTracks[trackName];
    });
  };

  _proto.onManifestLoading = function onManifestLoading() {
    this.lastSn = -1; // Detect discontiguity in fragment parsing

    this.prevCC = -1;
    this.vttCCs = {
      // Detect discontinuity in subtitle manifests
      ccOffset: 0,
      presentationOffset: 0,
      0: {
        start: 0,
        prevCC: -1,
        new: false
      }
    };

    this._cleanTracks();
  };

  _proto._cleanTracks = function _cleanTracks() {
    // clear outdated subtitles
    var media = this.media;

    if (media) {
      var textTracks = media.textTracks;

      if (textTracks) {
        for (var i = 0; i < textTracks.length; i++) {
          clearCurrentCues(textTracks[i]);
        }
      }
    }
  };

  _proto.onManifestLoaded = function onManifestLoaded(data) {
    var _this3 = this;

    this.textTracks = [];
    this.unparsedVttFrags = this.unparsedVttFrags || [];
    this.initPTS = [];
    this.cueRanges = [];

    if (this.config.enableWebVTT) {
      this.tracks = data.subtitles || [];
      var inUseTracks = this.media ? this.media.textTracks : [];
      this.tracks.forEach(function (track, index) {
        var textTrack;

        if (index < inUseTracks.length) {
          var inUseTrack = null;

          for (var i = 0; i < inUseTracks.length; i++) {
            if (canReuseVttTextTrack(inUseTracks[i], track)) {
              inUseTrack = inUseTracks[i];
              break;
            }
          } // Reuse tracks with the same label, but do not reuse 608/708 tracks


          if (inUseTrack) {
            textTrack = inUseTrack;
          }
        }

        if (!textTrack) {
          textTrack = _this3.createTextTrack('subtitles', track.name, track.lang);
        }

        if (track.default) {
          textTrack.mode = _this3.hls.subtitleDisplay ? 'showing' : 'hidden';
        } else {
          textTrack.mode = 'disabled';
        }

        _this3.textTracks.push(textTrack);
      });
    }
  };

  _proto.onLevelSwitching = function onLevelSwitching() {
    this.enabled = this.hls.currentLevel.closedCaptions !== 'NONE';
  };

  _proto.onFragLoaded = function onFragLoaded(data) {
    var frag = data.frag,
        payload = data.payload;

    if (frag.type === 'main') {
      var sn = frag.sn; // if this frag isn't contiguous, clear the parser so cues with bad start/end times aren't added to the textTrack

      if (sn !== this.lastSn + 1) {
        var cea608Parser = this.cea608Parser;

        if (cea608Parser) {
          cea608Parser.reset();
        }
      }

      this.lastSn = sn;
    } // eslint-disable-line brace-style
    // If fragment is subtitle type, parse as WebVTT.
    else if (frag.type === 'subtitle') {
        if (payload.byteLength) {
          // We need an initial synchronisation PTS. Store fragments as long as none has arrived.
          if (!Object(number_isFinite["isFiniteNumber"])(this.initPTS[frag.cc])) {
            this.unparsedVttFrags.push(data);

            if (this.initPTS.length) {
              // finish unsuccessfully, otherwise the subtitle-stream-controller could be blocked from loading new frags.
              this.hls.trigger(events["default"].SUBTITLE_FRAG_PROCESSED, {
                success: false,
                frag: frag
              });
            }

            return;
          }

          var decryptData = frag.decryptdata; // If the subtitles are not encrypted, parse VTTs now. Otherwise, we need to wait.

          if (decryptData == null || decryptData.key == null || decryptData.method !== 'AES-128') {
            this._parseVTTs(frag, payload);
          }
        } else {
          // In case there is no payload, finish unsuccessfully.
          this.hls.trigger(events["default"].SUBTITLE_FRAG_PROCESSED, {
            success: false,
            frag: frag
          });
        }
      }
  };

  _proto._parseVTTs = function _parseVTTs(frag, payload) {
    var vttCCs = this.vttCCs;

    if (!vttCCs[frag.cc]) {
      vttCCs[frag.cc] = {
        start: frag.start,
        prevCC: this.prevCC,
        new: true
      };
      this.prevCC = frag.cc;
    }

    var textTracks = this.textTracks,
        hls = this.hls; // Parse the WebVTT file contents.

    webvtt_parser.parse(payload, this.initPTS[frag.cc], vttCCs, frag.cc, function (cues) {
      var currentTrack = textTracks[frag.level]; // WebVTTParser.parse is an async method and if the currently selected text track mode is set to "disabled"
      // before parsing is done then don't try to access currentTrack.cues.getCueById as cues will be null
      // and trying to access getCueById method of cues will throw an exception

      if (currentTrack.mode === 'disabled') {
        hls.trigger(events["default"].SUBTITLE_FRAG_PROCESSED, {
          success: false,
          frag: frag
        });
        return;
      } // Add cues and trigger event with success true.


      cues.forEach(function (cue) {
        // Sometimes there are cue overlaps on segmented vtts so the same
        // cue can appear more than once in different vtt files.
        // This avoid showing duplicated cues with same timecode and text.
        if (!currentTrack.cues.getCueById(cue.id)) {
          try {
            currentTrack.addCue(cue);
          } catch (err) {
            var textTrackCue = new window.TextTrackCue(cue.startTime, cue.endTime, cue.text);
            textTrackCue.id = cue.id;
            currentTrack.addCue(textTrackCue);
          }
        }
      });
      hls.trigger(events["default"].SUBTITLE_FRAG_PROCESSED, {
        success: true,
        frag: frag
      });
    }, function (e) {
      // Something went wrong while parsing. Trigger event with success false.
      logger["logger"].log("Failed to parse VTT cue: " + e);
      hls.trigger(events["default"].SUBTITLE_FRAG_PROCESSED, {
        success: false,
        frag: frag
      });
    });
  };

  _proto.onFragDecrypted = function onFragDecrypted(data) {
    var decryptedData = data.payload,
        frag = data.frag;

    if (frag.type === 'subtitle') {
      if (!Object(number_isFinite["isFiniteNumber"])(this.initPTS[frag.cc])) {
        this.unparsedVttFrags.push(data);
        return;
      }

      this._parseVTTs(frag, decryptedData);
    }
  };

  _proto.onFragParsingUserdata = function onFragParsingUserdata(data) {
    // push all of the CEA-708 messages into the interpreter
    // immediately. It will create the proper timestamps based on our PTS value
    if (this.enabled && this.config.enableCEA708Captions) {
      for (var i = 0; i < data.samples.length; i++) {
        var ccdatas = this.extractCea608Data(data.samples[i].bytes);
        this.cea608Parser.addData(data.samples[i].pts, ccdatas);
      }
    }
  };

  _proto.extractCea608Data = function extractCea608Data(byteArray) {
    var count = byteArray[0] & 31;
    var position = 2;
    var tmpByte, ccbyte1, ccbyte2, ccValid, ccType;
    var actualCCBytes = [];

    for (var j = 0; j < count; j++) {
      tmpByte = byteArray[position++];
      ccbyte1 = 0x7F & byteArray[position++];
      ccbyte2 = 0x7F & byteArray[position++];
      ccValid = (4 & tmpByte) !== 0;
      ccType = 3 & tmpByte;

      if (ccbyte1 === 0 && ccbyte2 === 0) {
        continue;
      }

      if (ccValid) {
        if (ccType === 0) {
          // || ccType === 1
          actualCCBytes.push(ccbyte1);
          actualCCBytes.push(ccbyte2);
        }
      }
    }

    return actualCCBytes;
  };

  return TimelineController;
}(event_handler);

/* harmony default export */ var timeline_controller = (timeline_controller_TimelineController);
// CONCATENATED MODULE: ./src/controller/subtitle-track-controller.js


function subtitle_track_controller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function subtitle_track_controller_createClass(Constructor, protoProps, staticProps) { if (protoProps) subtitle_track_controller_defineProperties(Constructor.prototype, protoProps); if (staticProps) subtitle_track_controller_defineProperties(Constructor, staticProps); return Constructor; }

function subtitle_track_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }






var subtitle_track_controller_SubtitleTrackController =
/*#__PURE__*/
function (_EventHandler) {
  subtitle_track_controller_inheritsLoose(SubtitleTrackController, _EventHandler);

  function SubtitleTrackController(hls) {
    var _this;

    _this = _EventHandler.call(this, hls, events["default"].MEDIA_ATTACHED, events["default"].MEDIA_DETACHING, events["default"].MANIFEST_LOADED, events["default"].SUBTITLE_TRACK_LOADED) || this;
    _this.tracks = [];
    _this.trackId = -1;
    _this.media = null;
    _this.stopped = true;
    /**
     * @member {boolean} subtitleDisplay Enable/disable subtitle display rendering
     */

    _this.subtitleDisplay = true;
    return _this;
  }

  var _proto = SubtitleTrackController.prototype;

  _proto.destroy = function destroy() {
    event_handler.prototype.destroy.call(this);
  }; // Listen for subtitle track change, then extract the current track ID.


  _proto.onMediaAttached = function onMediaAttached(data) {
    var _this2 = this;

    this.media = data.media;

    if (!this.media) {
      return;
    }

    if (this.queuedDefaultTrack) {
      this.subtitleTrack = this.queuedDefaultTrack;
      delete this.queuedDefaultTrack;
    }

    this.trackChangeListener = this._onTextTracksChanged.bind(this);
    this.useTextTrackPolling = !(this.media.textTracks && 'onchange' in this.media.textTracks);

    if (this.useTextTrackPolling) {
      this.subtitlePollingInterval = setInterval(function () {
        _this2.trackChangeListener();
      }, 500);
    } else {
      this.media.textTracks.addEventListener('change', this.trackChangeListener);
    }
  };

  _proto.onMediaDetaching = function onMediaDetaching() {
    if (!this.media) {
      return;
    }

    if (this.useTextTrackPolling) {
      clearInterval(this.subtitlePollingInterval);
    } else {
      this.media.textTracks.removeEventListener('change', this.trackChangeListener);
    }

    this.media = null;
  }; // Fired whenever a new manifest is loaded.


  _proto.onManifestLoaded = function onManifestLoaded(data) {
    var _this3 = this;

    var tracks = data.subtitles || [];
    this.tracks = tracks;
    this.hls.trigger(events["default"].SUBTITLE_TRACKS_UPDATED, {
      subtitleTracks: tracks
    }); // loop through available subtitle tracks and autoselect default if needed
    // TODO: improve selection logic to handle forced, etc

    tracks.forEach(function (track) {
      if (track.default) {
        // setting this.subtitleTrack will trigger internal logic
        // if media has not been attached yet, it will fail
        // we keep a reference to the default track id
        // and we'll set subtitleTrack when onMediaAttached is triggered
        if (_this3.media) {
          _this3.subtitleTrack = track.id;
        } else {
          _this3.queuedDefaultTrack = track.id;
        }
      }
    });
  };

  _proto.onSubtitleTrackLoaded = function onSubtitleTrackLoaded(data) {
    var _this4 = this;

    var id = data.id,
        details = data.details;
    var trackId = this.trackId,
        tracks = this.tracks;
    var currentTrack = tracks[trackId];

    if (id >= tracks.length || id !== trackId || !currentTrack || this.stopped) {
      this._clearReloadTimer();

      return;
    }

    logger["logger"].log("subtitle track " + id + " loaded");

    if (details.live) {
      var reloadInterval = computeReloadInterval(currentTrack.details, details, data.stats.trequest);
      logger["logger"].log("Reloading live subtitle playlist in " + reloadInterval + "ms");
      this.timer = setTimeout(function () {
        _this4._loadCurrentTrack();
      }, reloadInterval);
    } else {
      this._clearReloadTimer();
    }
  };

  _proto.startLoad = function startLoad() {
    this.stopped = false;

    this._loadCurrentTrack();
  };

  _proto.stopLoad = function stopLoad() {
    this.stopped = true;

    this._clearReloadTimer();
  };
  /** get alternate subtitle tracks list from playlist **/


  _proto._clearReloadTimer = function _clearReloadTimer() {
    if (this.timer) {
      clearTimeout(this.timer);
      this.timer = null;
    }
  };

  _proto._loadCurrentTrack = function _loadCurrentTrack() {
    var trackId = this.trackId,
        tracks = this.tracks,
        hls = this.hls;
    var currentTrack = tracks[trackId];

    if (trackId < 0 || !currentTrack || currentTrack.details && !currentTrack.details.live) {
      return;
    }

    logger["logger"].log("Loading subtitle track " + trackId);
    hls.trigger(events["default"].SUBTITLE_TRACK_LOADING, {
      url: currentTrack.url,
      id: trackId
    });
  };
  /**
   * Disables the old subtitleTrack and sets current mode on the next subtitleTrack.
   * This operates on the DOM textTracks.
   * A value of -1 will disable all subtitle tracks.
   * @param newId - The id of the next track to enable
   * @private
   */


  _proto._toggleTrackModes = function _toggleTrackModes(newId) {
    var media = this.media,
        subtitleDisplay = this.subtitleDisplay,
        trackId = this.trackId;

    if (!media) {
      return;
    }

    var textTracks = filterSubtitleTracks(media.textTracks);

    if (newId === -1) {
      [].slice.call(textTracks).forEach(function (track) {
        track.mode = 'disabled';
      });
    } else {
      var oldTrack = textTracks[trackId];

      if (oldTrack) {
        oldTrack.mode = 'disabled';
      }
    }

    var nextTrack = textTracks[newId];

    if (nextTrack) {
      nextTrack.mode = subtitleDisplay ? 'showing' : 'hidden';
    }
  };
  /**
     * This method is responsible for validating the subtitle index and periodically reloading if live.
     * Dispatches the SUBTITLE_TRACK_SWITCH event, which instructs the subtitle-stream-controller to load the selected track.
     * @param newId - The id of the subtitle track to activate.
     */


  _proto._setSubtitleTrackInternal = function _setSubtitleTrackInternal(newId) {
    var hls = this.hls,
        tracks = this.tracks;

    if (!Object(number_isFinite["isFiniteNumber"])(newId) || newId < -1 || newId >= tracks.length) {
      return;
    }

    this.trackId = newId;
    logger["logger"].log("Switching to subtitle track " + newId);
    hls.trigger(events["default"].SUBTITLE_TRACK_SWITCH, {
      id: newId
    });

    this._loadCurrentTrack();
  };

  _proto._onTextTracksChanged = function _onTextTracksChanged() {
    // Media is undefined when switching streams via loadSource()
    if (!this.media) {
      return;
    }

    var trackId = -1;
    var tracks = filterSubtitleTracks(this.media.textTracks);

    for (var id = 0; id < tracks.length; id++) {
      if (tracks[id].mode === 'hidden') {
        // Do not break in case there is a following track with showing.
        trackId = id;
      } else if (tracks[id].mode === 'showing') {
        trackId = id;
        break;
      }
    } // Setting current subtitleTrack will invoke code.


    this.subtitleTrack = trackId;
  };

  subtitle_track_controller_createClass(SubtitleTrackController, [{
    key: "subtitleTracks",
    get: function get() {
      return this.tracks;
    }
    /** get index of the selected subtitle track (index in subtitle track lists) **/

  }, {
    key: "subtitleTrack",
    get: function get() {
      return this.trackId;
    }
    /** select a subtitle track, based on its index in subtitle track lists**/
    ,
    set: function set(subtitleTrackId) {
      if (this.trackId !== subtitleTrackId) {
        this._toggleTrackModes(subtitleTrackId);

        this._setSubtitleTrackInternal(subtitleTrackId);
      }
    }
  }]);

  return SubtitleTrackController;
}(event_handler);

function filterSubtitleTracks(textTrackList) {
  var tracks = [];

  for (var i = 0; i < textTrackList.length; i++) {
    var track = textTrackList[i]; // Edge adds a track without a label; we don't want to use it

    if (track.kind === 'subtitles' && track.label) {
      tracks.push(textTrackList[i]);
    }
  }

  return tracks;
}

/* harmony default export */ var subtitle_track_controller = (subtitle_track_controller_SubtitleTrackController);
// EXTERNAL MODULE: ./src/crypt/decrypter.js + 3 modules
var decrypter = __webpack_require__("./src/crypt/decrypter.js");

// CONCATENATED MODULE: ./src/controller/subtitle-stream-controller.js
function subtitle_stream_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function subtitle_stream_controller_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

/**
 * @class SubtitleStreamController
 */








var subtitle_stream_controller_window = window,
    subtitle_stream_controller_performance = subtitle_stream_controller_window.performance;
var subtitle_stream_controller_TICK_INTERVAL = 500; // how often to tick in ms

var subtitle_stream_controller_SubtitleStreamController =
/*#__PURE__*/
function (_BaseStreamController) {
  subtitle_stream_controller_inheritsLoose(SubtitleStreamController, _BaseStreamController);

  function SubtitleStreamController(hls, fragmentTracker) {
    var _this;

    _this = _BaseStreamController.call(this, hls, events["default"].MEDIA_ATTACHED, events["default"].MEDIA_DETACHING, events["default"].ERROR, events["default"].KEY_LOADED, events["default"].FRAG_LOADED, events["default"].SUBTITLE_TRACKS_UPDATED, events["default"].SUBTITLE_TRACK_SWITCH, events["default"].SUBTITLE_TRACK_LOADED, events["default"].SUBTITLE_FRAG_PROCESSED, events["default"].LEVEL_UPDATED) || this;
    _this.fragmentTracker = fragmentTracker;
    _this.config = hls.config;
    _this.state = State.STOPPED;
    _this.tracks = [];
    _this.tracksBuffered = [];
    _this.currentTrackId = -1;
    _this.decrypter = new decrypter["default"](hls, hls.config); // lastAVStart stores the time in seconds for the start time of a level load

    _this.lastAVStart = 0;
    _this._onMediaSeeking = _this.onMediaSeeking.bind(subtitle_stream_controller_assertThisInitialized(subtitle_stream_controller_assertThisInitialized(_this)));
    return _this;
  }

  var _proto = SubtitleStreamController.prototype;

  _proto.onSubtitleFragProcessed = function onSubtitleFragProcessed(data) {
    var frag = data.frag,
        success = data.success;
    this.fragPrevious = frag;
    this.state = State.IDLE;

    if (!success) {
      return;
    }

    var buffered = this.tracksBuffered[this.currentTrackId];

    if (!buffered) {
      return;
    } // Create/update a buffered array matching the interface used by BufferHelper.bufferedInfo
    // so we can re-use the logic used to detect how much have been buffered


    var timeRange;
    var fragStart = frag.start;

    for (var i = 0; i < buffered.length; i++) {
      if (fragStart >= buffered[i].start && fragStart <= buffered[i].end) {
        timeRange = buffered[i];
        break;
      }
    }

    var fragEnd = frag.start + frag.duration;

    if (timeRange) {
      timeRange.end = fragEnd;
    } else {
      timeRange = {
        start: fragStart,
        end: fragEnd
      };
      buffered.push(timeRange);
    }
  };

  _proto.onMediaAttached = function onMediaAttached(_ref) {
    var media = _ref.media;
    this.media = media;
    media.addEventListener('seeking', this._onMediaSeeking);
    this.state = State.IDLE;
  };

  _proto.onMediaDetaching = function onMediaDetaching() {
    this.media.removeEventListener('seeking', this._onMediaSeeking);
    this.media = null;
    this.state = State.STOPPED;
  }; // If something goes wrong, proceed to next frag, if we were processing one.


  _proto.onError = function onError(data) {
    var frag = data.frag; // don't handle error not related to subtitle fragment

    if (!frag || frag.type !== 'subtitle') {
      return;
    }

    this.state = State.IDLE;
  }; // Got all new subtitle tracks.


  _proto.onSubtitleTracksUpdated = function onSubtitleTracksUpdated(data) {
    var _this2 = this;

    logger["logger"].log('subtitle tracks updated');
    this.tracksBuffered = [];
    this.tracks = data.subtitleTracks;
    this.tracks.forEach(function (track) {
      _this2.tracksBuffered[track.id] = [];
    });
  };

  _proto.onSubtitleTrackSwitch = function onSubtitleTrackSwitch(data) {
    this.currentTrackId = data.id;

    if (!this.tracks || this.currentTrackId === -1) {
      this.clearInterval();
      return;
    } // Check if track has the necessary details to load fragments


    var currentTrack = this.tracks[this.currentTrackId];

    if (currentTrack && currentTrack.details) {
      this.setInterval(subtitle_stream_controller_TICK_INTERVAL);
    }
  }; // Got a new set of subtitle fragments.


  _proto.onSubtitleTrackLoaded = function onSubtitleTrackLoaded(data) {
    var id = data.id,
        details = data.details;
    var currentTrackId = this.currentTrackId,
        tracks = this.tracks;
    var currentTrack = tracks[currentTrackId];

    if (id >= tracks.length || id !== currentTrackId || !currentTrack) {
      return;
    }

    if (details.live) {
      mergeSubtitlePlaylists(currentTrack.details, details, this.lastAVStart);
    }

    currentTrack.details = details;
    this.setInterval(subtitle_stream_controller_TICK_INTERVAL);
  };

  _proto.onKeyLoaded = function onKeyLoaded() {
    if (this.state === State.KEY_LOADING) {
      this.state = State.IDLE;
    }
  };

  _proto.onFragLoaded = function onFragLoaded(data) {
    var fragCurrent = this.fragCurrent;
    var decryptData = data.frag.decryptdata;
    var fragLoaded = data.frag;
    var hls = this.hls;

    if (this.state === State.FRAG_LOADING && fragCurrent && data.frag.type === 'subtitle' && fragCurrent.sn === data.frag.sn) {
      // check to see if the payload needs to be decrypted
      if (data.payload.byteLength > 0 && decryptData && decryptData.key && decryptData.method === 'AES-128') {
        var startTime = subtitle_stream_controller_performance.now(); // decrypt the subtitles

        this.decrypter.decrypt(data.payload, decryptData.key.buffer, decryptData.iv.buffer, function (decryptedData) {
          var endTime = subtitle_stream_controller_performance.now();
          hls.trigger(events["default"].FRAG_DECRYPTED, {
            frag: fragLoaded,
            payload: decryptedData,
            stats: {
              tstart: startTime,
              tdecrypt: endTime
            }
          });
        });
      }
    }
  };

  _proto.onLevelUpdated = function onLevelUpdated(_ref2) {
    var details = _ref2.details;
    var frags = details.fragments;
    this.lastAVStart = frags.length ? frags[0].start : 0;
  };

  _proto.doTick = function doTick() {
    if (!this.media) {
      this.state = State.IDLE;
      return;
    }

    switch (this.state) {
      case State.IDLE:
        {
          var config = this.config,
              currentTrackId = this.currentTrackId,
              fragmentTracker = this.fragmentTracker,
              media = this.media,
              tracks = this.tracks;

          if (!tracks || !tracks[currentTrackId] || !tracks[currentTrackId].details) {
            break;
          }

          var maxBufferHole = config.maxBufferHole,
              maxFragLookUpTolerance = config.maxFragLookUpTolerance;
          var maxConfigBuffer = Math.min(config.maxBufferLength, config.maxMaxBufferLength);
          var bufferedInfo = BufferHelper.bufferedInfo(this._getBuffered(), media.currentTime, maxBufferHole);
          var bufferEnd = bufferedInfo.end,
              bufferLen = bufferedInfo.len;
          var trackDetails = tracks[currentTrackId].details;
          var fragments = trackDetails.fragments;
          var fragLen = fragments.length;
          var end = fragments[fragLen - 1].start + fragments[fragLen - 1].duration;

          if (bufferLen > maxConfigBuffer) {
            return;
          }

          var foundFrag;
          var fragPrevious = this.fragPrevious;

          if (bufferEnd < end) {
            if (fragPrevious && trackDetails.hasProgramDateTime) {
              foundFrag = findFragmentByPDT(fragments, fragPrevious.endProgramDateTime, maxFragLookUpTolerance);
            }

            if (!foundFrag) {
              foundFrag = findFragmentByPTS(fragPrevious, fragments, bufferEnd, maxFragLookUpTolerance);
            }
          } else {
            foundFrag = fragments[fragLen - 1];
          }

          if (foundFrag && foundFrag.encrypted) {
            logger["logger"].log("Loading key for " + foundFrag.sn);
            this.state = State.KEY_LOADING;
            this.hls.trigger(events["default"].KEY_LOADING, {
              frag: foundFrag
            });
          } else if (foundFrag && fragmentTracker.getState(foundFrag) === FragmentState.NOT_LOADED) {
            // only load if fragment is not loaded
            this.fragCurrent = foundFrag;
            this.state = State.FRAG_LOADING;
            this.hls.trigger(events["default"].FRAG_LOADING, {
              frag: foundFrag
            });
          }
        }
    }
  };

  _proto.stopLoad = function stopLoad() {
    this.lastAVStart = 0;

    _BaseStreamController.prototype.stopLoad.call(this);
  };

  _proto._getBuffered = function _getBuffered() {
    return this.tracksBuffered[this.currentTrackId] || [];
  };

  _proto.onMediaSeeking = function onMediaSeeking() {
    this.fragPrevious = null;
  };

  return SubtitleStreamController;
}(base_stream_controller_BaseStreamController);
// CONCATENATED MODULE: ./src/controller/eme-controller.ts
function eme_controller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function eme_controller_createClass(Constructor, protoProps, staticProps) { if (protoProps) eme_controller_defineProperties(Constructor.prototype, protoProps); if (staticProps) eme_controller_defineProperties(Constructor, staticProps); return Constructor; }

function eme_controller_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/**
 * @author Stephan Hesse <disparat@gmail.com> | <tchakabam@gmail.com>
 *
 * DRM support for Hls.js
 */




var MAX_LICENSE_REQUEST_FAILURES = 3;
/**
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess
 */

var KeySystems;
/**
 * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration
 * @param {Array<string>} audioCodecs List of required audio codecs to support
 * @param {Array<string>} videoCodecs List of required video codecs to support
 * @param {object} drmSystemOptions Optional parameters/requirements for the key-system
 * @returns {Array<MediaSystemConfiguration>} An array of supported configurations
 */

(function (KeySystems) {
  KeySystems["WIDEVINE"] = "com.widevine.alpha";
  KeySystems["PLAYREADY"] = "com.microsoft.playready";
})(KeySystems || (KeySystems = {}));

var createWidevineMediaKeySystemConfigurations = function createWidevineMediaKeySystemConfigurations(audioCodecs, videoCodecs) {
  /* jshint ignore:line */
  var baseConfig = {
    // initDataTypes: ['keyids', 'mp4'],
    // label: "",
    // persistentState: "not-allowed", // or "required" ?
    // distinctiveIdentifier: "not-allowed", // or "required" ?
    // sessionTypes: ['temporary'],
    videoCapabilities: [] // { contentType: 'video/mp4; codecs="avc1.42E01E"' }

  };
  videoCodecs.forEach(function (codec) {
    baseConfig.videoCapabilities.push({
      contentType: "video/mp4; codecs=\"" + codec + "\""
    });
  });
  return [baseConfig];
};
/**
 * The idea here is to handle key-system (and their respective platforms) specific configuration differences
 * in order to work with the local requestMediaKeySystemAccess method.
 *
 * We can also rule-out platform-related key-system support at this point by throwing an error.
 *
 * @param {string} keySystem Identifier for the key-system, see `KeySystems` enum
 * @param {Array<string>} audioCodecs List of required audio codecs to support
 * @param {Array<string>} videoCodecs List of required video codecs to support
 * @throws will throw an error if a unknown key system is passed
 * @returns {Array<MediaSystemConfiguration>} A non-empty Array of MediaKeySystemConfiguration objects
 */


var getSupportedMediaKeySystemConfigurations = function getSupportedMediaKeySystemConfigurations(keySystem, audioCodecs, videoCodecs) {
  switch (keySystem) {
    case KeySystems.WIDEVINE:
      return createWidevineMediaKeySystemConfigurations(audioCodecs, videoCodecs);

    default:
      throw new Error("Unknown key-system: " + keySystem);
  }
};

/**
 * Controller to deal with encrypted media extensions (EME)
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Encrypted_Media_Extensions_API
 *
 * @class
 * @constructor
 */
var eme_controller_EMEController =
/*#__PURE__*/
function (_EventHandler) {
  eme_controller_inheritsLoose(EMEController, _EventHandler);

  /**
     * @constructs
     * @param {Hls} hls Our Hls.js instance
     */
  function EMEController(hls) {
    var _this;

    _this = _EventHandler.call(this, hls, events["default"].MEDIA_ATTACHED, events["default"].MEDIA_DETACHED, events["default"].MANIFEST_PARSED) || this;
    _this._widevineLicenseUrl = void 0;
    _this._licenseXhrSetup = void 0;
    _this._emeEnabled = void 0;
    _this._requestMediaKeySystemAccess = void 0;
    _this._mediaKeysList = [];
    _this._media = null;
    _this._hasSetMediaKeys = false;
    _this._requestLicenseFailureCount = 0;

    _this._onMediaEncrypted = function (e) {
      logger["logger"].log("Media is encrypted using \"" + e.initDataType + "\" init data type");

      _this._attemptSetMediaKeys();

      _this._generateRequestWithPreferredKeySession(e.initDataType, e.initData);
    };

    _this._widevineLicenseUrl = hls.config.widevineLicenseUrl;
    _this._licenseXhrSetup = hls.config.licenseXhrSetup;
    _this._emeEnabled = hls.config.emeEnabled;
    _this._requestMediaKeySystemAccess = hls.config.requestMediaKeySystemAccessFunc;
    return _this;
  }
  /**
   * @param {string} keySystem Identifier for the key-system, see `KeySystems` enum
   * @returns {string} License server URL for key-system (if any configured, otherwise causes error)
   * @throws if a unsupported keysystem is passed
   */


  var _proto = EMEController.prototype;

  _proto.getLicenseServerUrl = function getLicenseServerUrl(keySystem) {
    switch (keySystem) {
      case KeySystems.WIDEVINE:
        return this._widevineLicenseUrl;
    }

    throw new Error("no license server URL configured for key-system \"" + keySystem + "\"");
  };
  /**
     * Requests access object and adds it to our list upon success
     * @private
     * @param {string} keySystem System ID (see `KeySystems`)
     * @param {Array<string>} audioCodecs List of required audio codecs to support
     * @param {Array<string>} videoCodecs List of required video codecs to support
     * @throws When a unsupported KeySystem is passed
     */


  _proto._attemptKeySystemAccess = function _attemptKeySystemAccess(keySystem, audioCodecs, videoCodecs) {
    var _this2 = this;

    // TODO: add other DRM "options"
    // This can throw, but is caught in event handler callpath
    var mediaKeySystemConfigs = getSupportedMediaKeySystemConfigurations(keySystem, audioCodecs, videoCodecs);
    logger["logger"].log('Requesting encrypted media key-system access'); // expecting interface like window.navigator.requestMediaKeySystemAccess

    this.requestMediaKeySystemAccess(keySystem, mediaKeySystemConfigs).then(function (mediaKeySystemAccess) {
      _this2._onMediaKeySystemAccessObtained(keySystem, mediaKeySystemAccess);
    }).catch(function (err) {
      logger["logger"].error("Failed to obtain key-system \"" + keySystem + "\" access:", err);
    });
  };

  /**
     * Handles obtaining access to a key-system
     * @private
     * @param {string} keySystem
     * @param {MediaKeySystemAccess} mediaKeySystemAccess https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess
     */
  _proto._onMediaKeySystemAccessObtained = function _onMediaKeySystemAccessObtained(keySystem, mediaKeySystemAccess) {
    var _this3 = this;

    logger["logger"].log("Access for key-system \"" + keySystem + "\" obtained");
    var mediaKeysListItem = {
      mediaKeysSessionInitialized: false,
      mediaKeySystemAccess: mediaKeySystemAccess,
      mediaKeySystemDomain: keySystem
    };

    this._mediaKeysList.push(mediaKeysListItem);

    mediaKeySystemAccess.createMediaKeys().then(function (mediaKeys) {
      mediaKeysListItem.mediaKeys = mediaKeys;
      logger["logger"].log("Media-keys created for key-system \"" + keySystem + "\"");

      _this3._onMediaKeysCreated();
    }).catch(function (err) {
      logger["logger"].error('Failed to create media-keys:', err);
    });
  };
  /**
   * Handles key-creation (represents access to CDM). We are going to create key-sessions upon this
   * for all existing keys where no session exists yet.
   *
   * @private
   */


  _proto._onMediaKeysCreated = function _onMediaKeysCreated() {
    var _this4 = this;

    // check for all key-list items if a session exists, otherwise, create one
    this._mediaKeysList.forEach(function (mediaKeysListItem) {
      if (!mediaKeysListItem.mediaKeysSession) {
        // mediaKeys is definitely initialized here
        mediaKeysListItem.mediaKeysSession = mediaKeysListItem.mediaKeys.createSession();

        _this4._onNewMediaKeySession(mediaKeysListItem.mediaKeysSession);
      }
    });
  };
  /**
     * @private
     * @param {*} keySession
     */


  _proto._onNewMediaKeySession = function _onNewMediaKeySession(keySession) {
    var _this5 = this;

    logger["logger"].log("New key-system session " + keySession.sessionId);
    keySession.addEventListener('message', function (event) {
      _this5._onKeySessionMessage(keySession, event.message);
    }, false);
  };
  /**
   * @private
   * @param {MediaKeySession} keySession
   * @param {ArrayBuffer} message
   */


  _proto._onKeySessionMessage = function _onKeySessionMessage(keySession, message) {
    logger["logger"].log('Got EME message event, creating license request');

    this._requestLicense(message, function (data) {
      logger["logger"].log('Received license data, updating key-session');
      keySession.update(data);
    });
  };
  /**
   * @private
   * @param {string} initDataType
   * @param {ArrayBuffer|null} initData
   */


  /**
   * @private
   */
  _proto._attemptSetMediaKeys = function _attemptSetMediaKeys() {
    if (!this._media) {
      throw new Error('Attempted to set mediaKeys without first attaching a media element');
    }

    if (!this._hasSetMediaKeys) {
      // FIXME: see if we can/want/need-to really to deal with several potential key-sessions?
      var keysListItem = this._mediaKeysList[0];

      if (!keysListItem || !keysListItem.mediaKeys) {
        logger["logger"].error('Fatal: Media is encrypted but no CDM access or no keys have been obtained yet');
        this.hls.trigger(events["default"].ERROR, {
          type: errors["ErrorTypes"].KEY_SYSTEM_ERROR,
          details: errors["ErrorDetails"].KEY_SYSTEM_NO_KEYS,
          fatal: true
        });
        return;
      }

      logger["logger"].log('Setting keys for encrypted media');

      this._media.setMediaKeys(keysListItem.mediaKeys);

      this._hasSetMediaKeys = true;
    }
  };
  /**
   * @private
   */


  _proto._generateRequestWithPreferredKeySession = function _generateRequestWithPreferredKeySession(initDataType, initData) {
    var _this6 = this;

    // FIXME: see if we can/want/need-to really to deal with several potential key-sessions?
    var keysListItem = this._mediaKeysList[0];

    if (!keysListItem) {
      logger["logger"].error('Fatal: Media is encrypted but not any key-system access has been obtained yet');
      this.hls.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].KEY_SYSTEM_ERROR,
        details: errors["ErrorDetails"].KEY_SYSTEM_NO_ACCESS,
        fatal: true
      });
      return;
    }

    if (keysListItem.mediaKeysSessionInitialized) {
      logger["logger"].warn('Key-Session already initialized but requested again');
      return;
    }

    var keySession = keysListItem.mediaKeysSession;

    if (!keySession) {
      logger["logger"].error('Fatal: Media is encrypted but no key-session existing');
      this.hls.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].KEY_SYSTEM_ERROR,
        details: errors["ErrorDetails"].KEY_SYSTEM_NO_SESSION,
        fatal: true
      });
      return;
    }

    logger["logger"].log("Generating key-session request for \"" + initDataType + "\" init data type");
    keysListItem.mediaKeysSessionInitialized = true;
    keySession.generateRequest(initDataType, initData).then(function () {
      logger["logger"].debug('Key-session generation succeeded');
    }).catch(function (err) {
      logger["logger"].error('Error generating key-session request:', err);

      _this6.hls.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].KEY_SYSTEM_ERROR,
        details: errors["ErrorDetails"].KEY_SYSTEM_NO_SESSION,
        fatal: false
      });
    });
  };
  /**
   * @private
   * @param {string} url License server URL
   * @param {ArrayBuffer} keyMessage Message data issued by key-system
   * @param {function} callback Called when XHR has succeeded
   * @returns {XMLHttpRequest} Unsent (but opened state) XHR object
   * @throws if XMLHttpRequest construction failed
   */


  _proto._createLicenseXhr = function _createLicenseXhr(url, keyMessage, callback) {
    var xhr = new XMLHttpRequest();
    var licenseXhrSetup = this._licenseXhrSetup;

    try {
      if (licenseXhrSetup) {
        try {
          licenseXhrSetup(xhr, url);
        } catch (e) {
          // let's try to open before running setup
          xhr.open('POST', url, true);
          licenseXhrSetup(xhr, url);
        }
      } // if licenseXhrSetup did not yet call open, let's do it now


      if (!xhr.readyState) {
        xhr.open('POST', url, true);
      }
    } catch (e) {
      // IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS
      throw new Error("issue setting up KeySystem license XHR " + e);
    } // Because we set responseType to ArrayBuffer here, callback is typed as handling only array buffers


    xhr.responseType = 'arraybuffer';
    xhr.onreadystatechange = this._onLicenseRequestReadyStageChange.bind(this, xhr, url, keyMessage, callback);
    return xhr;
  };
  /**
   * @private
   * @param {XMLHttpRequest} xhr
   * @param {string} url License server URL
   * @param {ArrayBuffer} keyMessage Message data issued by key-system
   * @param {function} callback Called when XHR has succeeded
   */


  _proto._onLicenseRequestReadyStageChange = function _onLicenseRequestReadyStageChange(xhr, url, keyMessage, callback) {
    switch (xhr.readyState) {
      case 4:
        if (xhr.status === 200) {
          this._requestLicenseFailureCount = 0;
          logger["logger"].log('License request succeeded');

          if (xhr.responseType !== 'arraybuffer') {
            logger["logger"].warn('xhr response type was not set to the expected arraybuffer for license request');
          }

          callback(xhr.response);
        } else {
          logger["logger"].error("License Request XHR failed (" + url + "). Status: " + xhr.status + " (" + xhr.statusText + ")");
          this._requestLicenseFailureCount++;

          if (this._requestLicenseFailureCount > MAX_LICENSE_REQUEST_FAILURES) {
            this.hls.trigger(events["default"].ERROR, {
              type: errors["ErrorTypes"].KEY_SYSTEM_ERROR,
              details: errors["ErrorDetails"].KEY_SYSTEM_LICENSE_REQUEST_FAILED,
              fatal: true
            });
            return;
          }

          var attemptsLeft = MAX_LICENSE_REQUEST_FAILURES - this._requestLicenseFailureCount + 1;
          logger["logger"].warn("Retrying license request, " + attemptsLeft + " attempts left");

          this._requestLicense(keyMessage, callback);
        }

        break;
    }
  };
  /**
   * @private
   * @param {MediaKeysListItem} keysListItem
   * @param {ArrayBuffer} keyMessage
   * @returns {ArrayBuffer} Challenge data posted to license server
   * @throws if KeySystem is unsupported
   */


  _proto._generateLicenseRequestChallenge = function _generateLicenseRequestChallenge(keysListItem, keyMessage) {
    switch (keysListItem.mediaKeySystemDomain) {
      // case KeySystems.PLAYREADY:
      // from https://github.com/MicrosoftEdge/Demos/blob/master/eme/scripts/demo.js

      /*
        if (this.licenseType !== this.LICENSE_TYPE_WIDEVINE) {
          // For PlayReady CDMs, we need to dig the Challenge out of the XML.
          var keyMessageXml = new DOMParser().parseFromString(String.fromCharCode.apply(null, new Uint16Array(keyMessage)), 'application/xml');
          if (keyMessageXml.getElementsByTagName('Challenge')[0]) {
              challenge = atob(keyMessageXml.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue);
          } else {
              throw 'Cannot find <Challenge> in key message';
          }
          var headerNames = keyMessageXml.getElementsByTagName('name');
          var headerValues = keyMessageXml.getElementsByTagName('value');
          if (headerNames.length !== headerValues.length) {
              throw 'Mismatched header <name>/<value> pair in key message';
          }
          for (var i = 0; i < headerNames.length; i++) {
              xhr.setRequestHeader(headerNames[i].childNodes[0].nodeValue, headerValues[i].childNodes[0].nodeValue);
          }
        }
        break;
      */
      case KeySystems.WIDEVINE:
        // For Widevine CDMs, the challenge is the keyMessage.
        return keyMessage;
    }

    throw new Error("unsupported key-system: " + keysListItem.mediaKeySystemDomain);
  };
  /**
   * @private
   * @param keyMessage
   * @param callback
   */


  _proto._requestLicense = function _requestLicense(keyMessage, callback) {
    logger["logger"].log('Requesting content license for key-system');
    var keysListItem = this._mediaKeysList[0];

    if (!keysListItem) {
      logger["logger"].error('Fatal error: Media is encrypted but no key-system access has been obtained yet');
      this.hls.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].KEY_SYSTEM_ERROR,
        details: errors["ErrorDetails"].KEY_SYSTEM_NO_ACCESS,
        fatal: true
      });
      return;
    }

    try {
      var url = this.getLicenseServerUrl(keysListItem.mediaKeySystemDomain);

      var xhr = this._createLicenseXhr(url, keyMessage, callback);

      logger["logger"].log("Sending license request to URL: " + url);

      var challenge = this._generateLicenseRequestChallenge(keysListItem, keyMessage);

      xhr.send(challenge);
    } catch (e) {
      logger["logger"].error("Failure requesting DRM license: " + e);
      this.hls.trigger(events["default"].ERROR, {
        type: errors["ErrorTypes"].KEY_SYSTEM_ERROR,
        details: errors["ErrorDetails"].KEY_SYSTEM_LICENSE_REQUEST_FAILED,
        fatal: true
      });
    }
  };

  _proto.onMediaAttached = function onMediaAttached(data) {
    if (!this._emeEnabled) {
      return;
    }

    var media = data.media; // keep reference of media

    this._media = media;
    media.addEventListener('encrypted', this._onMediaEncrypted);
  };

  _proto.onMediaDetached = function onMediaDetached() {
    if (this._media) {
      this._media.removeEventListener('encrypted', this._onMediaEncrypted);

      this._media = null; // release reference
    }
  }; // TODO: Use manifest types here when they are defined


  _proto.onManifestParsed = function onManifestParsed(data) {
    if (!this._emeEnabled) {
      return;
    }

    var audioCodecs = data.levels.map(function (level) {
      return level.audioCodec;
    });
    var videoCodecs = data.levels.map(function (level) {
      return level.videoCodec;
    });

    this._attemptKeySystemAccess(KeySystems.WIDEVINE, audioCodecs, videoCodecs);
  };

  eme_controller_createClass(EMEController, [{
    key: "requestMediaKeySystemAccess",
    get: function get() {
      if (!this._requestMediaKeySystemAccess) {
        throw new Error('No requestMediaKeySystemAccess function configured');
      }

      return this._requestMediaKeySystemAccess;
    }
  }]);

  return EMEController;
}(event_handler);

/* harmony default export */ var eme_controller = (eme_controller_EMEController);
// CONCATENATED MODULE: ./src/utils/mediakeys-helper.js
var requestMediaKeySystemAccess = function () {
  if (typeof window !== 'undefined' && window.navigator && window.navigator.requestMediaKeySystemAccess) {
    return window.navigator.requestMediaKeySystemAccess.bind(window.navigator);
  } else {
    return null;
  }
}();


// CONCATENATED MODULE: ./src/config.ts
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * HLS config
 */




 // import FetchLoader from './utils/fetch-loader';









var hlsDefaultConfig = _objectSpread({
  autoStartLoad: true,
  // used by stream-controller
  startPosition: -1,
  // used by stream-controller
  defaultAudioCodec: void 0,
  // used by stream-controller
  debug: false,
  // used by logger
  capLevelOnFPSDrop: false,
  // used by fps-controller
  capLevelToPlayerSize: false,
  // used by cap-level-controller
  initialLiveManifestSize: 1,
  // used by stream-controller
  maxBufferLength: 30,
  // used by stream-controller
  maxBufferSize: 60 * 1000 * 1000,
  // used by stream-controller
  maxBufferHole: 0.5,
  // used by stream-controller
  lowBufferWatchdogPeriod: 0.5,
  // used by stream-controller
  highBufferWatchdogPeriod: 3,
  // used by stream-controller
  nudgeOffset: 0.1,
  // used by stream-controller
  nudgeMaxRetry: 3,
  // used by stream-controller
  maxFragLookUpTolerance: 0.25,
  // used by stream-controller
  liveSyncDurationCount: 3,
  // used by stream-controller
  liveMaxLatencyDurationCount: Infinity,
  // used by stream-controller
  liveSyncDuration: void 0,
  // used by stream-controller
  liveMaxLatencyDuration: void 0,
  // used by stream-controller
  liveDurationInfinity: false,
  // used by buffer-controller
  liveBackBufferLength: Infinity,
  // used by buffer-controller
  maxMaxBufferLength: 600,
  // used by stream-controller
  enableWorker: true,
  // used by demuxer
  enableSoftwareAES: true,
  // used by decrypter
  manifestLoadingTimeOut: 10000,
  // used by playlist-loader
  manifestLoadingMaxRetry: 1,
  // used by playlist-loader
  manifestLoadingRetryDelay: 1000,
  // used by playlist-loader
  manifestLoadingMaxRetryTimeout: 64000,
  // used by playlist-loader
  startLevel: void 0,
  // used by level-controller
  levelLoadingTimeOut: 10000,
  // used by playlist-loader
  levelLoadingMaxRetry: 4,
  // used by playlist-loader
  levelLoadingRetryDelay: 1000,
  // used by playlist-loader
  levelLoadingMaxRetryTimeout: 64000,
  // used by playlist-loader
  fragLoadingTimeOut: 20000,
  // used by fragment-loader
  fragLoadingMaxRetry: 6,
  // used by fragment-loader
  fragLoadingRetryDelay: 1000,
  // used by fragment-loader
  fragLoadingMaxRetryTimeout: 64000,
  // used by fragment-loader
  startFragPrefetch: false,
  // used by stream-controller
  fpsDroppedMonitoringPeriod: 5000,
  // used by fps-controller
  fpsDroppedMonitoringThreshold: 0.2,
  // used by fps-controller
  appendErrorMaxRetry: 3,
  // used by buffer-controller
  loader: xhr_loader,
  // loader: FetchLoader,
  fLoader: void 0,
  // used by fragment-loader
  pLoader: void 0,
  // used by playlist-loader
  xhrSetup: void 0,
  // used by xhr-loader
  licenseXhrSetup: void 0,
  // used by eme-controller
  // fetchSetup: void 0,
  abrController: abr_controller,
  bufferController: buffer_controller,
  capLevelController: cap_level_controller,
  fpsController: fps_controller,
  stretchShortVideoTrack: false,
  // used by mp4-remuxer
  maxAudioFramesDrift: 1,
  // used by mp4-remuxer
  forceKeyFrameOnDiscontinuity: true,
  // used by ts-demuxer
  abrEwmaFastLive: 3,
  // used by abr-controller
  abrEwmaSlowLive: 9,
  // used by abr-controller
  abrEwmaFastVoD: 3,
  // used by abr-controller
  abrEwmaSlowVoD: 9,
  // used by abr-controller
  abrEwmaDefaultEstimate: 5e5,
  // 500 kbps  // used by abr-controller
  abrBandWidthFactor: 0.95,
  // used by abr-controller
  abrBandWidthUpFactor: 0.7,
  // used by abr-controller
  abrMaxWithRealBitrate: false,
  // used by abr-controller
  maxStarvationDelay: 4,
  // used by abr-controller
  maxLoadingDelay: 4,
  // used by abr-controller
  minAutoBitrate: 0,
  // used by hls
  emeEnabled: false,
  // used by eme-controller
  widevineLicenseUrl: void 0,
  // used by eme-controller
  requestMediaKeySystemAccessFunc: requestMediaKeySystemAccess
}, timelineConfig(), {
  subtitleStreamController:  true ? subtitle_stream_controller_SubtitleStreamController : undefined,
  subtitleTrackController:  true ? subtitle_track_controller : undefined,
  timelineController:  true ? timeline_controller : undefined,
  audioStreamController:  true ? audio_stream_controller : undefined,
  audioTrackController:  true ? audio_track_controller : undefined,
  emeController:  true ? eme_controller : undefined
});

function timelineConfig() {
  if (false) {}

  return {
    cueHandler: cues_namespaceObject,
    // used by timeline-controller
    enableCEA708Captions: true,
    // used by timeline-controller
    enableWebVTT: true,
    // used by timeline-controller
    captionsTextTrack1Label: 'English',
    // used by timeline-controller
    captionsTextTrack1LanguageCode: 'en',
    // used by timeline-controller
    captionsTextTrack2Label: 'Spanish',
    // used by timeline-controller
    captionsTextTrack2LanguageCode: 'es' // used by timeline-controller

  };
}
// CONCATENATED MODULE: ./src/hls.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return hls_Hls; });
function hls_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function hls_createClass(Constructor, protoProps, staticProps) { if (protoProps) hls_defineProperties(Constructor.prototype, protoProps); if (staticProps) hls_defineProperties(Constructor, staticProps); return Constructor; }

function hls_inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function hls_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }















/**
 * @module Hls
 * @class
 * @constructor
 */

var hls_Hls =
/*#__PURE__*/
function (_Observer) {
  hls_inheritsLoose(Hls, _Observer);

  /**
   * @type {boolean}
   */
  Hls.isSupported = function isSupported() {
    return is_supported_isSupported();
  };
  /**
   * @type {HlsEvents}
   */


  hls_createClass(Hls, null, [{
    key: "version",

    /**
     * @type {string}
     */
    get: function get() {
      return undefined;
    }
  }, {
    key: "Events",
    get: function get() {
      return events["default"];
    }
    /**
     * @type {HlsErrorTypes}
     */

  }, {
    key: "ErrorTypes",
    get: function get() {
      return errors["ErrorTypes"];
    }
    /**
     * @type {HlsErrorDetails}
     */

  }, {
    key: "ErrorDetails",
    get: function get() {
      return errors["ErrorDetails"];
    }
    /**
     * @type {HlsConfig}
     */

  }, {
    key: "DefaultConfig",
    get: function get() {
      if (!Hls.defaultConfig) {
        return hlsDefaultConfig;
      }

      return Hls.defaultConfig;
    }
    /**
     * @type {HlsConfig}
     */
    ,
    set: function set(defaultConfig) {
      Hls.defaultConfig = defaultConfig;
    }
    /**
     * Creates an instance of an HLS client that can attach to exactly one `HTMLMediaElement`.
     *
     * @constructs Hls
     * @param {HlsConfig} config
     */

  }]);

  function Hls(config) {
    var _this;

    if (config === void 0) {
      config = {};
    }

    _this = _Observer.call(this) || this;
    var defaultConfig = Hls.DefaultConfig;

    if ((config.liveSyncDurationCount || config.liveMaxLatencyDurationCount) && (config.liveSyncDuration || config.liveMaxLatencyDuration)) {
      throw new Error('Illegal hls.js config: don\'t mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration');
    }

    for (var prop in defaultConfig) {
      if (prop in config) continue;
      config[prop] = defaultConfig[prop];
    }

    if (config.liveMaxLatencyDurationCount !== void 0 && config.liveMaxLatencyDurationCount <= config.liveSyncDurationCount) {
      throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be gt "liveSyncDurationCount"');
    }

    if (config.liveMaxLatencyDuration !== void 0 && (config.liveMaxLatencyDuration <= config.liveSyncDuration || config.liveSyncDuration === void 0)) {
      throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be gt "liveSyncDuration"');
    }

    Object(logger["enableLogs"])(config.debug);
    _this.config = config;
    _this._autoLevelCapping = -1; // core controllers and network loaders

    /**
     * @member {AbrController} abrController
     */

    var abrController = _this.abrController = new config.abrController(hls_assertThisInitialized(hls_assertThisInitialized(_this))); // eslint-disable-line new-cap

    var bufferController = new config.bufferController(hls_assertThisInitialized(hls_assertThisInitialized(_this))); // eslint-disable-line new-cap

    var capLevelController = _this.capLevelController = new config.capLevelController(hls_assertThisInitialized(hls_assertThisInitialized(_this))); // eslint-disable-line new-cap

    var fpsController = new config.fpsController(hls_assertThisInitialized(hls_assertThisInitialized(_this))); // eslint-disable-line new-cap

    var playListLoader = new playlist_loader(hls_assertThisInitialized(hls_assertThisInitialized(_this)));
    var fragmentLoader = new fragment_loader(hls_assertThisInitialized(hls_assertThisInitialized(_this)));
    var keyLoader = new key_loader(hls_assertThisInitialized(hls_assertThisInitialized(_this)));
    var id3TrackController = new id3_track_controller(hls_assertThisInitialized(hls_assertThisInitialized(_this))); // network controllers

    /**
     * @member {LevelController} levelController
     */

    var levelController = _this.levelController = new level_controller_LevelController(hls_assertThisInitialized(hls_assertThisInitialized(_this))); // FIXME: FragmentTracker must be defined before StreamController because the order of event handling is important

    var fragmentTracker = new fragment_tracker_FragmentTracker(hls_assertThisInitialized(hls_assertThisInitialized(_this)));
    /**
     * @member {StreamController} streamController
     */

    var streamController = _this.streamController = new stream_controller(hls_assertThisInitialized(hls_assertThisInitialized(_this)), fragmentTracker);
    var networkControllers = [levelController, streamController]; // optional audio stream controller

    /**
     * @var {ICoreComponent | Controller}
     */

    var Controller = config.audioStreamController;

    if (Controller) {
      networkControllers.push(new Controller(hls_assertThisInitialized(hls_assertThisInitialized(_this)), fragmentTracker));
    }
    /**
     * @member {INetworkController[]} networkControllers
     */


    _this.networkControllers = networkControllers;
    /**
     * @var {ICoreComponent[]}
     */

    var coreComponents = [playListLoader, fragmentLoader, keyLoader, abrController, bufferController, capLevelController, fpsController, id3TrackController, fragmentTracker]; // optional audio track and subtitle controller

    Controller = config.audioTrackController;

    if (Controller) {
      var audioTrackController = new Controller(hls_assertThisInitialized(hls_assertThisInitialized(_this)));
      /**
       * @member {AudioTrackController} audioTrackController
       */

      _this.audioTrackController = audioTrackController;
      coreComponents.push(audioTrackController);
    }

    Controller = config.subtitleTrackController;

    if (Controller) {
      var subtitleTrackController = new Controller(hls_assertThisInitialized(hls_assertThisInitialized(_this)));
      /**
       * @member {SubtitleTrackController} subtitleTrackController
       */

      _this.subtitleTrackController = subtitleTrackController;
      networkControllers.push(subtitleTrackController);
    }

    Controller = config.emeController;

    if (Controller) {
      var emeController = new Controller(hls_assertThisInitialized(hls_assertThisInitialized(_this)));
      /**
       * @member {EMEController} emeController
       */

      _this.emeController = emeController;
      coreComponents.push(emeController);
    } // optional subtitle controllers


    Controller = config.subtitleStreamController;

    if (Controller) {
      networkControllers.push(new Controller(hls_assertThisInitialized(hls_assertThisInitialized(_this)), fragmentTracker));
    }

    Controller = config.timelineController;

    if (Controller) {
      coreComponents.push(new Controller(hls_assertThisInitialized(hls_assertThisInitialized(_this))));
    }
    /**
     * @member {ICoreComponent[]}
     */


    _this.coreComponents = coreComponents;
    return _this;
  }
  /**
   * Dispose of the instance
   */


  var _proto = Hls.prototype;

  _proto.destroy = function destroy() {
    logger["logger"].log('destroy');
    this.trigger(events["default"].DESTROYING);
    this.detachMedia();
    this.coreComponents.concat(this.networkControllers).forEach(function (component) {
      component.destroy();
    });
    this.url = null;
    this.removeAllListeners();
    this._autoLevelCapping = -1;
  };
  /**
   * Attach a media element
   * @param {HTMLMediaElement} media
   */


  _proto.attachMedia = function attachMedia(media) {
    logger["logger"].log('attachMedia');
    this.media = media;
    this.trigger(events["default"].MEDIA_ATTACHING, {
      media: media
    });
  };
  /**
   * Detach from the media
   */


  _proto.detachMedia = function detachMedia() {
    logger["logger"].log('detachMedia');
    this.trigger(events["default"].MEDIA_DETACHING);
    this.media = null;
  };
  /**
   * Set the source URL. Can be relative or absolute.
   * @param {string} url
   */


  _proto.loadSource = function loadSource(url) {
    url = url_toolkit["buildAbsoluteURL"](window.location.href, url, {
      alwaysNormalize: true
    });
    logger["logger"].log("loadSource:" + url);
    this.url = url; // when attaching to a source URL, trigger a playlist load

    this.trigger(events["default"].MANIFEST_LOADING, {
      url: url
    });
  };
  /**
   * Start loading data from the stream source.
   * Depending on default config, client starts loading automatically when a source is set.
   *
   * @param {number} startPosition Set the start position to stream from
   * @default -1 None (from earliest point)
   */


  _proto.startLoad = function startLoad(startPosition) {
    if (startPosition === void 0) {
      startPosition = -1;
    }

    logger["logger"].log("startLoad(" + startPosition + ")");
    this.networkControllers.forEach(function (controller) {
      controller.startLoad(startPosition);
    });
  };
  /**
   * Stop loading of any stream data.
   */


  _proto.stopLoad = function stopLoad() {
    logger["logger"].log('stopLoad');
    this.networkControllers.forEach(function (controller) {
      controller.stopLoad();
    });
  };
  /**
   * Swap through possible audio codecs in the stream (for example to switch from stereo to 5.1)
   */


  _proto.swapAudioCodec = function swapAudioCodec() {
    logger["logger"].log('swapAudioCodec');
    this.streamController.swapAudioCodec();
  };
  /**
   * When the media-element fails, this allows to detach and then re-attach it
   * as one call (convenience method).
   *
   * Automatic recovery of media-errors by this process is configurable.
   */


  _proto.recoverMediaError = function recoverMediaError() {
    logger["logger"].log('recoverMediaError');
    var media = this.media;
    this.detachMedia();
    this.attachMedia(media);
  };
  /**
   * @type {QualityLevel[]}
   */


  hls_createClass(Hls, [{
    key: "levels",
    get: function get() {
      return this.levelController.levels;
    }
    /**
     * Index of quality level currently played
     * @type {number}
     */

  }, {
    key: "currentLevel",
    get: function get() {
      return this.streamController.currentLevel;
    }
    /**
     * Set quality level index immediately .
     * This will flush the current buffer to replace the quality asap.
     * That means playback will interrupt at least shortly to re-buffer and re-sync eventually.
     * @type {number} -1 for automatic level selection
     */
    ,
    set: function set(newLevel) {
      logger["logger"].log("set currentLevel:" + newLevel);
      this.loadLevel = newLevel;
      this.streamController.immediateLevelSwitch();
    }
    /**
     * Index of next quality level loaded as scheduled by stream controller.
     * @type {number}
     */

  }, {
    key: "nextLevel",
    get: function get() {
      return this.streamController.nextLevel;
    }
    /**
     * Set quality level index for next loaded data.
     * This will switch the video quality asap, without interrupting playback.
     * May abort current loading of data, and flush parts of buffer (outside currently played fragment region).
     * @type {number} -1 for automatic level selection
     */
    ,
    set: function set(newLevel) {
      logger["logger"].log("set nextLevel:" + newLevel);
      this.levelController.manualLevel = newLevel;
      this.streamController.nextLevelSwitch();
    }
    /**
     * Return the quality level of the currently or last (of none is loaded currently) segment
     * @type {number}
     */

  }, {
    key: "loadLevel",
    get: function get() {
      return this.levelController.level;
    }
    /**
     * Set quality level index for next loaded data in a conservative way.
     * This will switch the quality without flushing, but interrupt current loading.
     * Thus the moment when the quality switch will appear in effect will only be after the already existing buffer.
     * @type {number} newLevel -1 for automatic level selection
     */
    ,
    set: function set(newLevel) {
      logger["logger"].log("set loadLevel:" + newLevel);
      this.levelController.manualLevel = newLevel;
    }
    /**
     * get next quality level loaded
     * @type {number}
     */

  }, {
    key: "nextLoadLevel",
    get: function get() {
      return this.levelController.nextLoadLevel;
    }
    /**
     * Set quality level of next loaded segment in a fully "non-destructive" way.
     * Same as `loadLevel` but will wait for next switch (until current loading is done).
     * @type {number} level
     */
    ,
    set: function set(level) {
      this.levelController.nextLoadLevel = level;
    }
    /**
     * Return "first level": like a default level, if not set,
     * falls back to index of first level referenced in manifest
     * @type {number}
     */

  }, {
    key: "firstLevel",
    get: function get() {
      return Math.max(this.levelController.firstLevel, this.minAutoLevel);
    }
    /**
     * Sets "first-level", see getter.
     * @type {number}
     */
    ,
    set: function set(newLevel) {
      logger["logger"].log("set firstLevel:" + newLevel);
      this.levelController.firstLevel = newLevel;
    }
    /**
     * Return start level (level of first fragment that will be played back)
     * if not overrided by user, first level appearing in manifest will be used as start level
     * if -1 : automatic start level selection, playback will start from level matching download bandwidth
     * (determined from download of first segment)
     * @type {number}
     */

  }, {
    key: "startLevel",
    get: function get() {
      return this.levelController.startLevel;
    }
    /**
     * set  start level (level of first fragment that will be played back)
     * if not overrided by user, first level appearing in manifest will be used as start level
     * if -1 : automatic start level selection, playback will start from level matching download bandwidth
     * (determined from download of first segment)
     * @type {number} newLevel
     */
    ,
    set: function set(newLevel) {
      logger["logger"].log("set startLevel:" + newLevel);
      var hls = this; // if not in automatic start level detection, ensure startLevel is greater than minAutoLevel

      if (newLevel !== -1) {
        newLevel = Math.max(newLevel, hls.minAutoLevel);
      }

      hls.levelController.startLevel = newLevel;
    }
    /**
     * set  dynamically set capLevelToPlayerSize against (`CapLevelController`)
     *
     * @type {boolean}
     */

  }, {
    key: "capLevelToPlayerSize",
    set: function set(shouldStartCapping) {
      var newCapLevelToPlayerSize = !!shouldStartCapping;

      if (newCapLevelToPlayerSize !== this.config.capLevelToPlayerSize) {
        if (newCapLevelToPlayerSize) {
          this.capLevelController.startCapping(); // If capping occurs, nextLevelSwitch will happen based on size.
        } else {
          this.capLevelController.stopCapping();
          this.autoLevelCapping = -1;
          this.streamController.nextLevelSwitch(); // Now we're uncapped, get the next level asap.
        }

        this.config.capLevelToPlayerSize = newCapLevelToPlayerSize;
      }
    }
    /**
     * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)
     * @type {number}
     */

  }, {
    key: "autoLevelCapping",
    get: function get() {
      return this._autoLevelCapping;
    }
    /**
     * get bandwidth estimate
     * @type {number}
     */
    ,

    /**
     * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)
     * @type {number}
     */
    set: function set(newLevel) {
      logger["logger"].log("set autoLevelCapping:" + newLevel);
      this._autoLevelCapping = newLevel;
    }
    /**
     * True when automatic level selection enabled
     * @type {boolean}
     */

  }, {
    key: "bandwidthEstimate",
    get: function get() {
      var bwEstimator = this.abrController._bwEstimator;
      return bwEstimator ? bwEstimator.getEstimate() : NaN;
    }
  }, {
    key: "autoLevelEnabled",
    get: function get() {
      return this.levelController.manualLevel === -1;
    }
    /**
     * Level set manually (if any)
     * @type {number}
     */

  }, {
    key: "manualLevel",
    get: function get() {
      return this.levelController.manualLevel;
    }
    /**
     * min level selectable in auto mode according to config.minAutoBitrate
     * @type {number}
     */

  }, {
    key: "minAutoLevel",
    get: function get() {
      var hls = this;
      var levels = hls.levels;
      var minAutoBitrate = hls.config.minAutoBitrate;
      var len = levels ? levels.length : 0;

      for (var i = 0; i < len; i++) {
        var levelNextBitrate = levels[i].realBitrate ? Math.max(levels[i].realBitrate, levels[i].bitrate) : levels[i].bitrate;

        if (levelNextBitrate > minAutoBitrate) {
          return i;
        }
      }

      return 0;
    }
    /**
     * max level selectable in auto mode according to autoLevelCapping
     * @type {number}
     */

  }, {
    key: "maxAutoLevel",
    get: function get() {
      var hls = this;
      var levels = hls.levels;
      var autoLevelCapping = hls.autoLevelCapping;
      var maxAutoLevel;

      if (autoLevelCapping === -1 && levels && levels.length) {
        maxAutoLevel = levels.length - 1;
      } else {
        maxAutoLevel = autoLevelCapping;
      }

      return maxAutoLevel;
    }
    /**
     * next automatically selected quality level
     * @type {number}
     */

  }, {
    key: "nextAutoLevel",
    get: function get() {
      var hls = this; // ensure next auto level is between  min and max auto level

      return Math.min(Math.max(hls.abrController.nextAutoLevel, hls.minAutoLevel), hls.maxAutoLevel);
    }
    /**
     * this setter is used to force next auto level.
     * this is useful to force a switch down in auto mode:
     * in case of load error on level N, hls.js can set nextAutoLevel to N-1 for example)
     * forced value is valid for one fragment. upon succesful frag loading at forced level,
     * this value will be resetted to -1 by ABR controller.
     * @type {number}
     */
    ,
    set: function set(nextLevel) {
      var hls = this;
      hls.abrController.nextAutoLevel = Math.max(hls.minAutoLevel, nextLevel);
    }
    /**
     * @type {AudioTrack[]}
     */

  }, {
    key: "audioTracks",
    get: function get() {
      var audioTrackController = this.audioTrackController;
      return audioTrackController ? audioTrackController.audioTracks : [];
    }
    /**
     * index of the selected audio track (index in audio track lists)
     * @type {number}
     */

  }, {
    key: "audioTrack",
    get: function get() {
      var audioTrackController = this.audioTrackController;
      return audioTrackController ? audioTrackController.audioTrack : -1;
    }
    /**
     * selects an audio track, based on its index in audio track lists
     * @type {number}
     */
    ,
    set: function set(audioTrackId) {
      var audioTrackController = this.audioTrackController;

      if (audioTrackController) {
        audioTrackController.audioTrack = audioTrackId;
      }
    }
    /**
     * @type {Seconds}
     */

  }, {
    key: "liveSyncPosition",
    get: function get() {
      return this.streamController.liveSyncPosition;
    }
    /**
     * get alternate subtitle tracks list from playlist
     * @type {SubtitleTrack[]}
     */

  }, {
    key: "subtitleTracks",
    get: function get() {
      var subtitleTrackController = this.subtitleTrackController;
      return subtitleTrackController ? subtitleTrackController.subtitleTracks : [];
    }
    /**
     * index of the selected subtitle track (index in subtitle track lists)
     * @type {number}
     */

  }, {
    key: "subtitleTrack",
    get: function get() {
      var subtitleTrackController = this.subtitleTrackController;
      return subtitleTrackController ? subtitleTrackController.subtitleTrack : -1;
    }
    /**
     * select an subtitle track, based on its index in subtitle track lists
     * @type{number}
     */
    ,
    set: function set(subtitleTrackId) {
      var subtitleTrackController = this.subtitleTrackController;

      if (subtitleTrackController) {
        subtitleTrackController.subtitleTrack = subtitleTrackId;
      }
    }
    /**
     * @type {boolean}
     */

  }, {
    key: "subtitleDisplay",
    get: function get() {
      var subtitleTrackController = this.subtitleTrackController;
      return subtitleTrackController ? subtitleTrackController.subtitleDisplay : false;
    }
    /**
     * Enable/disable subtitle display rendering
     * @type {boolean}
     */
    ,
    set: function set(value) {
      var subtitleTrackController = this.subtitleTrackController;

      if (subtitleTrackController) {
        subtitleTrackController.subtitleDisplay = value;
      }
    }
  }]);

  return Hls;
}(Observer);



/***/ }),

/***/ "./src/polyfills/number-isFinite.js":
/*!******************************************!*\
  !*** ./src/polyfills/number-isFinite.js ***!
  \******************************************/
/*! exports provided: isFiniteNumber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFiniteNumber", function() { return isFiniteNumber; });
var isFiniteNumber = Number.isFinite || function (value) {
  return typeof value === 'number' && isFinite(value);
};

/***/ }),

/***/ "./src/utils/get-self-scope.js":
/*!*************************************!*\
  !*** ./src/utils/get-self-scope.js ***!
  \*************************************/
/*! exports provided: getSelfScope */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSelfScope", function() { return getSelfScope; });
function getSelfScope() {
  // see https://stackoverflow.com/a/11237259/589493
  if (typeof window === 'undefined') {
    /* eslint-disable-next-line no-undef */
    return self;
  } else {
    return window;
  }
}

/***/ }),

/***/ "./src/utils/logger.js":
/*!*****************************!*\
  !*** ./src/utils/logger.js ***!
  \*****************************/
/*! exports provided: enableLogs, logger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableLogs", function() { return enableLogs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logger", function() { return logger; });
/* harmony import */ var _get_self_scope__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-self-scope */ "./src/utils/get-self-scope.js");


function noop() {}

var fakeLogger = {
  trace: noop,
  debug: noop,
  log: noop,
  warn: noop,
  info: noop,
  error: noop
};
var exportedLogger = fakeLogger; // let lastCallTime;
// function formatMsgWithTimeInfo(type, msg) {
//   const now = Date.now();
//   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';
//   lastCallTime = now;
//   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';
//   return msg;
// }

function formatMsg(type, msg) {
  msg = '[' + type + '] > ' + msg;
  return msg;
}

var global = Object(_get_self_scope__WEBPACK_IMPORTED_MODULE_0__["getSelfScope"])();

function consolePrintFn(type) {
  var func = global.console[type];

  if (func) {
    return function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (args[0]) {
        args[0] = formatMsg(type, args[0]);
      }

      func.apply(global.console, args);
    };
  }

  return noop;
}

function exportLoggerFunctions(debugConfig) {
  for (var _len2 = arguments.length, functions = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    functions[_key2 - 1] = arguments[_key2];
  }

  functions.forEach(function (type) {
    exportedLogger[type] = debugConfig[type] ? debugConfig[type].bind(debugConfig) : consolePrintFn(type);
  });
}

var enableLogs = function enableLogs(debugConfig) {
  // check that console is available
  if (global.console && debugConfig === true || typeof debugConfig === 'object') {
    exportLoggerFunctions(debugConfig, // Remove out from list here to hard-disable a log-level
    // 'trace',
    'debug', 'log', 'info', 'warn', 'error'); // Some browsers don't allow to use bind on console object anyway
    // fallback to default if needed

    try {
      exportedLogger.log();
    } catch (e) {
      exportedLogger = fakeLogger;
    }
  } else {
    exportedLogger = fakeLogger;
  }
};
var logger = exportedLogger;

/***/ })

/******/ })["default"];
});
//# sourceMappingURL=hls.js.map

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // 工具条默认配置

// 工具集

// 事件工具集

//导入错误码转译字典


var _toolbarRightmenuConf = __webpack_require__(385);

var _tool = __webpack_require__(329);

var _eventUtil = __webpack_require__(330);

var _errordicts = __webpack_require__(386);

var _errordicts2 = _interopRequireDefault(_errordicts);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// NPPlayer的默认事件，包含窗口事件（单击、双击、窗口交换）、焦点改变等
var Toolbar = function () {
	function Toolbar() {
		_classCallCheck(this, Toolbar);

		this.defaultToolbarConf = {};
		//this._toolbar = {};
	}
	//创建工具条


	_createClass(Toolbar, [{
		key: '_createToolbar',
		value: function _createToolbar(_toolbars, type) {
			var _toolbar = _tool.Toolkit.deepMerge({}, _toolbars);
			if (!_toolbar.items) {
				this._createToolbarItems(_toolbar, 'single');
				return;
			}
			var _toolbarEle = document.createElement('div');
			_toolbarEle.className = type + ' ' + 'toolbar-panel toolbar-' + this.vOpt.uuid;
			var _toolbarInnerEle = document.createElement('div');
			_toolbarInnerEle.className = 'toolbar-panel-inner';
			_toolbarEle.appendChild(_toolbarInnerEle);

			this.vOpt.videoC.appendChild(_toolbarEle);
			this.vOpt.toolbarEleArr.push({
				type: type,
				toolbarEle: _toolbarEle
			});

			var _this = this;

			_eventUtil.EventUtil.addHandler(_toolbarEle, 'dblclick', function (event) {
				//阻止冒泡
				event.stopPropagation();
			});

			_eventUtil.EventUtil.addHandler(_toolbarEle, 'click', function (event) {
				_this.videoCMouseOverFlag = false;
			});

			_eventUtil.EventUtil.addHandler(_toolbarEle, 'mousemove', function (event) {
				if (_this.isDragProgress !== true) {
					// 在拖动历史进度条时，不阻止冒泡（为了让工具条上不显示红箭头）
					//阻止冒泡
					event.stopPropagation();
				}
				// 在工具条上红箭头不需要显示
				_this.isShowPtzRedArrow(false, event);
			});

			_eventUtil.EventUtil.addHandler(_toolbarEle, 'mouseenter', function (event) {
				//阻止冒泡
				event.stopPropagation();
				// 在工具条上红箭头不需要显示
				_this.isShowPtzRedArrow(false, event);
			});

			_eventUtil.EventUtil.addHandler(_toolbarEle, 'mouseleave', function (event) {
				//阻止冒泡
				event.stopPropagation();
			});

			_eventUtil.EventUtil.addHandler(_toolbarEle, 'mousedown', function (event) {
				//阻止冒泡
				event.stopPropagation();
				// 在工具条上红箭头不需要显示
				_this.isShowPtzRedArrow(false, event);
			});

			_eventUtil.EventUtil.addHandler(_toolbarEle, 'contextmenu', function (event) {
				//阻止冒泡
				event.stopPropagation();
				//取消浏览器默认动作
				event.preventDefault ? event.preventDefault() : event.returnValue = false;
			});

			//创建工具条的每一个按钮
			var _toolbarArr = _toolbar.items,
			    _length = _toolbarArr.length;
			for (var i = 0; i < _length; i++) {
				this._createToolbarItems(_toolbarArr[i], 'panel', _toolbarInnerEle);
			}
		}
		// 生成工具条上的按钮

	}, {
		key: '_createToolbarItems',
		value: function _createToolbarItems(item, flag, _toolbarEle) {
			if (item.style !== 'self-defined') {
				if (typeof item === 'string') {
					var itemConf = _tool.Toolkit.deepMerge({}, _toolbarRightmenuConf.defaultToolbarConf[item]);
					this.defaultToolbarConf[item] = itemConf;
					item = itemConf;
				} else {
					if (item.id) {
						if (_toolbarRightmenuConf.defaultToolbarConf[item.id]) {
							var oldItem = _tool.Toolkit.deepMerge({}, _toolbarRightmenuConf.defaultToolbarConf[item.id]);
							item = _tool.Toolkit.deepMerge(oldItem, item);
						}
						this.defaultToolbarConf[item.id] = item;
					}
				}
			}
			var _this = this,
			    _itemDiv = document.createElement('div'),
			    _leftOrRight = void 0;
			if (_toolbarEle) {
				_toolbarEle.appendChild(_itemDiv);
			} else {
				this.vOpt.videoC.appendChild(_itemDiv);
				this.vOpt.toolbarEleArr.push({
					type: null,
					toolbarEle: _itemDiv
				});
			}

			if (item.style === 'progress') {
				_itemDiv.className = item.className;
			} else if (item.className) {
				if (item.type === 'button') {
					if (!item.menuList) {
						_itemDiv.className = 'toolbar-item ' + item.style + ' ' + item.className + ' item-button';
						item.text && (_itemDiv.innerText = item.text);
					} else {
						_itemDiv.className = 'toolbar-item-btn';
					}
				} else {
					_itemDiv.className = 'toolbar-item ' + item.style + ' ' + item.className;
				}
			}
			if (item.show) {
				_itemDiv.style.display = 'inline-block';
			} else {
				_itemDiv.style.display = 'none';
			}
			_itemDiv.setAttribute('data-id', item.id);
			if (item.style && item.style !== 'self-defined' && item.style !== 'progress') {
				// 根据配置，判断是放在工具条的左边还是右边
				if (item.style.indexOf('right') > -1) {
					_leftOrRight = 'right';
				} else if (item.style.indexOf('left') > -1) {
					_leftOrRight = 'left';
				}
				_itemDiv.style.float = _leftOrRight;
			}
			switch (item.type) {
				case 'static':
					if (!item.menuList) {
						_itemDiv.setAttribute('data-type', item.type);
						_itemDiv.className = _itemDiv.className + ' item-' + item.type;
						this.setStaticContent(item.id, item.text);
						if (item.id === 'videoTitle') {
							var _text = this._videoTitle ? this._videoTitle : '未知视频';
							this.setStaticContent(item.id, _text);
						}
						return;
					}
					this._createMenuList(_itemDiv, item);
					break;
				case 'button':
					// 若没有下拉样式
					if (!item.menuList) {
						//设置提示
						if (item.tooltip) {
							_itemDiv.setAttribute('title', item.tooltip);
						}
						_eventUtil.EventUtil.addHandler(_itemDiv, 'click', function (event) {
							//阻止冒泡
							//event.stopPropagation();
							//默认点击事件(工具条)
							_this._btnClickFunction(item, _itemDiv);
						});
						_eventUtil.EventUtil.addHandler(_itemDiv, 'mousedown', function (event) {
							//阻止冒泡
							event.stopPropagation();
						});
						_eventUtil.EventUtil.addHandler(_itemDiv, 'mouseup', function (event) {
							//阻止冒泡
							//event.stopPropagation();
						});
						_eventUtil.EventUtil.addHandler(_itemDiv, 'dblclick', function (event) {
							//阻止冒泡
							event.stopPropagation();
						});
						_itemDiv.setAttribute('data-type', item.type);
						return;
					}
					this._createMenuList(_itemDiv, item);
					break;
				case 'progress':
					_itemDiv.setAttribute('data-type', 'static');
					// 进度条内容 (包涵进度条和缓冲条)
					this._videoProressD = document.createElement('div');
					this._videoProressD.className = 'video-progress-detail';
					_itemDiv.appendChild(this._videoProressD);

					// 缓冲条
					this._bufferedProress = document.createElement('div');
					this._bufferedProress.className = 'video-progress-buffered';
					this._videoProressD.appendChild(this._bufferedProress);

					// 播放进度条
					this._realProress = document.createElement('div');
					this._realProress.className = 'video-progress-real';
					this._videoProressD.appendChild(this._realProress);

					// 播放进度条圆形按钮
					this._circleRange = document.createElement('span');
					this._circleRange.className = 'video-circle-range';
					_itemDiv.appendChild(this._circleRange);

					//进度条的提示框
					var progressTip = document.createElement('span');
					progressTip.className = 'video-progress-tip';
					_itemDiv.appendChild(progressTip);

					//进度条的点击事件
					var _ele = this._videoProressD;
					try {
						_ele = this._videoProressD.closest(".video-progress");
					} catch (error) {
						_ele = this._videoProressD.parentNode;
					}

					_eventUtil.EventUtil.addHandler(_ele, 'click', function (event) {
						var e = event || window.event,
						    videoProgressCW = _this._videoProressD.offsetWidth,
						    eW = e.offsetX,
						    targetLeft = void 0;
						if (e.target.classList.contains("video-circle-range") || e.target.classList.contains("video-progress-tip")) {
							targetLeft = _eventUtil.EventUtil.getEleToParentDistance(e.target, "video-progress").offsetLeft;
							targetLeft = targetLeft < 0 ? 0 : targetLeft;
							eW = targetLeft + eW;
						}
						if (_this._videoplayer) {
							//流时间
							_this.currentT = eW / videoProgressCW * _this.durationT;
							//video时间
							_this._videoplayer.currentTime = _this.currentT - _this._playtimeOffset;
						}
						_this.updatePorgress();
						//阻止冒泡
						//event.stopPropagation();
					});

					_eventUtil.EventUtil.addHandler(_ele, 'mousemove', _tool.Toolkit.debounce(function (event) {
						if (_this.durationT <= 0 || !isFinite(_this.durationT)) {
							return;
						}
						var e = event || window.event,
						    videoProgressCW = _this._videoProressD.offsetWidth,
						    eW = e.offsetX,
						    targetLeft = void 0;
						if (e.target.classList.contains("video-circle-range") || e.target.classList.contains("video-progress-tip")) {
							targetLeft = _eventUtil.EventUtil.getEleToParentDistance(e.target, "video-progress").offsetLeft;
							targetLeft = targetLeft < 0 ? 0 : targetLeft;
							eW = targetLeft + eW;
						}
						eW = eW < 0 ? 0 : eW;
						eW = eW > videoProgressCW ? videoProgressCW : eW;
						var currentT = eW / videoProgressCW * _this.durationT;
						if (_this._srcStartPts && _this.vOpt.enableProgressShowPts) {
							progressTip.innerText = new Date(_this._srcStartPts + currentT * 1000).format('yyyy-MM-dd hh:mm:ss');
						} else {
							progressTip.innerText = _this.formartTime(currentT);
						}

						progressTip.style.visibility = 'visible';
						var tipWidth = progressTip.clientWidth;
						progressTip.style.left = eW - 12 + 'px';
						if (eW < tipWidth / 2) {
							progressTip.style.left = 0;
						} else if (eW + tipWidth / 2 > videoProgressCW) {
							progressTip.style.left = videoProgressCW - tipWidth + 'px';
						} else {
							progressTip.style.left = eW - tipWidth / 2 + 'px';
						}
					}, 0, true));
					// 鼠标移出进度条
					_eventUtil.EventUtil.addHandler(_ele, 'mouseout', function (event) {
						progressTip.style.visibility = 'hidden';
						//阻止冒泡
						event.stopPropagation();
					});
					//进度条拖动
					_eventUtil.EventUtil.addHandler(this._circleRange, 'mousedown', function (event) {
						_this.isDragProgress = true;
						// 隐藏右键菜单
						_this.showOrHideRightMenu(false);
						_eventUtil.EventUtil.addHandler(_this.vOpt.videoC, 'mousemove', function (event) {
							if (_this.isDragProgress) {
								var e = event || window.event,
								    eW = e.offsetX,
								    videoProgressCW = _this._videoProressD.offsetWidth,
								    progressLeftDis = 10;
								if (e.target.nodeName.toLowerCase() === "video" || e.target.classList.contains("toolbar-panel")) {
									eW = eW - progressLeftDis;
									eW = eW < 0 ? 0 : eW;
								} else if (!e.target.classList.contains("video-progress-detail") && !e.target.classList.contains("toolbar-panel-inner") && !e.target.classList.contains("video-progress-real")) {
									var targetLeft = _eventUtil.EventUtil.getEleToParentDistance(e.target, "h5vp-video-container").offsetLeft;
									eW = targetLeft - progressLeftDis + eW;
									eW = eW < 0 ? 0 : eW;
								}

								var _currentP = eW / videoProgressCW * 100;
								_currentP = _currentP > 100 ? 100 : _currentP;
								//_currentP = (_currentP < 0 ? 0 : _currentP);
								_this.currentP = _currentP;
								setTimeout(function () {
									if (_this._realProress) {
										_this._realProress.style.width = _currentP + '%';
									}
									if (_this._circleRange) {
										_this._circleRange.style.left = _currentP + '%';
									}
								}, 0);
							}
						});

						_eventUtil.EventUtil.addHandler(document, 'mouseup', function (event) {
							if (_this.isDragProgress) {
								//去播放
								_this.showOrHideBtn('videoPlay', false);
								_this.showOrHideBtn('videoPause', true);
								_this.updatePorgress(true);
								_this.isDragProgress = false;
							}
							//阻止冒泡
							//event.stopPropagation();
						});
					});

					break;
			}
		}
		/**
   * 获取当前播放时间
   * @method getPlayTime
   * @return {number} 当前播放时间，单位秒
   */

	}, {
		key: 'getPlayTime',
		value: function getPlayTime() {
			if (this._videoplayer) {
				//流时间
				return this._videoplayer.currentTime + this._playtimeOffset;
			}
			return 0;
		}

		/**
   * 设置播放时间
   * @method setPlaytTime
   * @param {number} time 指定的播放时间，单位秒
   * @return {boolean} true-成功  false-错误
   */

	}, {
		key: 'setPlayTime',
		value: function setPlayTime(time) {
			//流时间
			if (this._videoplayer) {
				this._videoplayer.currentTime = time - this._playtimeOffset; //video时间
				return true;
			}
			return false;
		}

		/**
   * 获取播放速度
   * @method getPlaySpeed
   * @return {number} 当前播放速度
   */

	}, {
		key: 'getPlaySpeed',
		value: function getPlaySpeed() {
			if (this._videoplayer) {
				return this._videoplayer.playbackRate;
			}
			return 1;
		}
		/**
   * 设置播放速度
   * @method setPlaySpeed
   * @param {number} speed 指定的播放速度
   * @return {boolean} true-成功  false-错误
   */
		/*setPlaySpeed(speed) {
  	if (this._videoplayer) {
  		this._videoplayer.playbackRate = speed;
  		if (this.getToobarBtnById('videoRateChange')) {
  			let _conf = this.getToobarItemStatusById('videoRateChange'),
  				_list = _conf && _conf.menuList && _conf.menuList.list ? _conf.menuList.list: [],
  				arr = [];
  			if (_conf.isExecuteDefaultFunc) {
  				for (let i = 0; i < _list.length; i++) {
  					if (speed == _list[i].value) {
  						arr.push({ id: _list[i].id, checked: true });
  						this.setStaticContent('videoRateChange', _list[i].text);
  					} else {
  						arr.push({ id: _list[i].id, checked: false });
  					}
  				}
  				this.setToolbarMenuById('videoRateChange', arr);
  			}
  		}
  		return true;
  	}
  	return false;
  } */
		/**
   * 设置播放速度
   * @method setPlaySpeed
   * @param {number} speed 指定的播放速度
   * @return {boolean} true-成功  false-错误
   */

	}, {
		key: 'setPlaySpeed',
		value: function setPlaySpeed(speed) {
			if (this._videoplayer && typeof speed === "number") {
				this._videoplayer.playbackRate = speed;
				if (this.getToobarBtnById('curRate')) {
					var speedStr = "";
					if (speed == 0.5 || speed == 0.25 || speed == 0.125 || speed == 0.0625) {
						speedStr = "x1/" + 1 / speed;
					} else if (speed.toString().indexOf(".") !== -1) {
						speedStr = "x" + speed;
						//保留小数点后2位
						speedStr = speedStr.substr(0, speedStr.indexOf(".") + 3);
					} else {
						speedStr = "x" + speed;
					}
					this.setStaticContent('curRate', speedStr);
				}
				return true;
			}
			return false;
		}
	}, {
		key: '_getOriginVideoSize',
		value: function _getOriginVideoSize() {
			var videoC = this.vOpt.videoC,
			    width = videoC.clientWidth,
			    height = videoC.clientHeight,
			    obj = { left: 0, top: 0, width: width, height: height };
			if (this._videoWidth > 0 && this._videoHeight > 0) {
				// 原始比例，视频的可见区域需要重新计算
				var widthR = this._videoWidth / width,
				    heightR = this._videoHeight / height;
				if (widthR <= heightR) {
					obj.height = height;
					obj.width = Math.round(this._videoWidth / this._videoHeight * height);
					obj.top = 0;
					obj.left = Math.round((width - obj.width) / 2);
				} else {
					obj.width = width;
					obj.height = Math.round(this._videoHeight / this._videoWidth * width);
					obj.left = 0;
					obj.top = Math.round((height - obj.height) / 2);
				}
			}
			return obj;
		}
		//设置画面比例：origin 、stretch、4:3、16:9、16:10
		//比例跟随窗口

	}, {
		key: 'setRatio',
		value: function setRatio(value) {
			if (value !== 'origin' && value !== 'stretch' && value !== '4:3' && value !== '16:9' && value !== '16:10') {
				return false;
			}
			this._videoRatio = value;
			var posObj = {};
			switch (value) {
				case 'origin':
					this.vOpt.videoEle.style.objectFit = 'contain';
					this.vOpt.videoC.style.padding = 0;
					//计算并获取Video标签时间显示视频的大小，其他都用这个
					var pos = this._getOriginVideoSize();
					posObj = this.setZoomSVGPosition(pos);
					this.setVMCanvasPosition(posObj); //同video视频区域
					this.setRTSVGPosition(posObj); //同video视频区域
					break;
				case 'stretch':
					this.vOpt.videoEle.style.objectFit = 'fill';
					this.vOpt.videoC.style.padding = 0;
					posObj = this.setZoomSVGPosition({
						left: 0,
						top: 0,
						width: parseInt(this.vOpt.videoC.clientWidth),
						height: parseInt(this.vOpt.videoC.clientHeight)
					});
					this.setVMCanvasPosition(posObj); //同video视频区域
					this.setRTSVGPosition(posObj); //同video视频区域

					break;
				case '4:3':
					this._ratioAdjust(3 / 4);
					break;
				case '16:9':
					this._ratioAdjust(9 / 16);
					break;
				case '16:10':
					this._ratioAdjust(10 / 16);
					break;
				default:
			}

			if (this.getToobarBtnById('videoRatio')) {
				var _conf = this.getToobarItemStatusById('videoRatio'),
				    _list = _conf && _conf.menuList && _conf.menuList.list ? _conf.menuList.list : [],
				    arr = [];
				if (_conf.isExecuteDefaultFunc) {
					for (var i = 0; i < _list.length; i++) {
						if (value == _list[i].value) {
							arr.push({ id: _list[i].id, checked: true });
						} else {
							arr.push({ id: _list[i].id, checked: false });
						}
					}
					this.setToolbarMenuById('videoRatio', arr);
				}
			}
			return true;
		}

		//获得当前画面比例的编号

	}, {
		key: 'getRatioCode',
		value: function getRatioCode() {
			return this._videoRatio ? this._videoRatio : this.vOpt.ratio;
		}

		//画面比例的调整
		/* _ratioAdjust(targetRatio) {
  	let _curRatio = parseInt(this.vOpt.height) / parseInt(this.vOpt.width);
  	// if (_curRatio === targetRatio) {
  	// 	return;
  	// }
  	this.vOpt.videoEle.style.objectFit = 'fill';
  	let _paddingValue = 0;
  	if (_curRatio - targetRatio > 0) {
  		_paddingValue = (parseInt(this.vOpt.height) - parseInt(this.vOpt.width) * targetRatio) / 2 + 'px';
  		this.vOpt.videoC.style.paddingTop = _paddingValue;
  		this.vOpt.videoC.style.paddingLeft = 0;
  		this.vOpt.videoC.style.paddingRight = 0;
  		this.vOpt.videoC.style.paddingBottom = _paddingValue;
  	} else if (_curRatio - targetRatio < 0) {
  		_paddingValue = (parseInt(this.vOpt.width) - parseInt(this.vOpt.height) / targetRatio) / 2 + 'px';
  		this.vOpt.videoC.style.paddingTop = 0;
  		this.vOpt.videoC.style.paddingLeft = _paddingValue;
  		this.vOpt.videoC.style.paddingRight = _paddingValue;
  		this.vOpt.videoC.style.paddingBottom = 0;
  	}
  } */

	}, {
		key: '_ratioAdjust',
		value: function _ratioAdjust(targetRatio) {
			var videoWidth = this.vOpt.videoC.style.width,
			    videoHeight = this.vOpt.videoC.style.height,
			    curRatio = parseInt(videoHeight) / parseInt(videoWidth);
			if (curRatio === targetRatio) {
				return;
			}
			this.vOpt.videoEle.style.objectFit = 'fill';
			var _paddingValue = 0,
			    posObj = {};
			if (curRatio - targetRatio > 0) {
				_paddingValue = (parseInt(videoHeight) - parseInt(videoWidth) * targetRatio) / 2;
				this.vOpt.videoC.style.paddingTop = _paddingValue + 'px';
				this.vOpt.videoC.style.paddingLeft = 0;
				this.vOpt.videoC.style.paddingRight = 0;
				this.vOpt.videoC.style.paddingBottom = _paddingValue + 'px';

				posObj = this.setZoomSVGPosition({
					left: 0,
					top: _paddingValue,
					width: parseInt(this.vOpt.videoC.clientWidth),
					height: parseInt(this.vOpt.videoC.clientHeight) - _paddingValue - _paddingValue
				});
				this.setVMCanvasPosition(posObj); //同video视频区域
				this.setRTSVGPosition(posObj); //同video视频区域
			} else if (curRatio - targetRatio < 0) {
				_paddingValue = (parseInt(videoWidth) - parseInt(videoHeight) / targetRatio) / 2;
				this.vOpt.videoC.style.paddingTop = 0;
				this.vOpt.videoC.style.paddingLeft = _paddingValue + 'px';
				this.vOpt.videoC.style.paddingRight = _paddingValue + 'px';
				this.vOpt.videoC.style.paddingBottom = 0;
				posObj = this.setZoomSVGPosition({
					left: _paddingValue,
					top: 0,
					width: parseInt(this.vOpt.videoC.clientWidth) - _paddingValue - _paddingValue,
					height: parseInt(this.vOpt.videoC.clientHeight)
				});
				this.setVMCanvasPosition(posObj); //同video视频区域
				this.setRTSVGPosition(posObj); //同video视频区域
			}
		}
		//创建文字下拉列表

	}, {
		key: '_createMenuList',
		value: function _createMenuList(divContainer, item) {
			divContainer.setAttribute('data-type', item.type + '-menu');
			//设置提示
			if (item.tooltip) {
				divContainer.setAttribute('title', item.tooltip);
			}
			var oFragment = document.createDocumentFragment(),

			//只有item.type === 'static'时才需要建立textEle，但由于点击选项卡时需要更新textEle的值
			//为了防止报错，把它的声明放到此处
			textEle = void 0;
			if (item.type === 'static') {
				divContainer.className = 'static-menu-box' + ' item-' + item.type;
				// 创建当前选中的文本
				textEle = document.createElement('span');
				textEle.className = 'static-menu-text';
				divContainer.appendChild(textEle);
			} else {
				var btnIconEle = document.createElement('i');
				btnIconEle.className = item.className + " item-button-icon";
				divContainer.appendChild(btnIconEle);
			}
			// 创建选项面板
			var menuListCEle = document.createElement('ul');
			menuListCEle.className = 'video-menu-list-box ' + item.style;
			divContainer.appendChild(menuListCEle);

			for (var i = 0; i < item.menuList.list.length; i++) {
				var liEle = document.createElement('li'),
				    _listItem = item.menuList.list[i];
				if (_listItem.checked) {
					liEle.className = 'video-menu-list-li active';
				} else {
					_listItem.checked = false;
					liEle.className = 'video-menu-list-li';
				}

				if (_listItem.gray) {
					liEle.className = 'video-menu-list-li not-allowed';
				} else {
					_listItem.gray = false;
				}

				if (textEle && _listItem.checked) {
					textEle.innerText = _listItem.text;
					textEle.title = _listItem.text;
				}
				liEle.setAttribute('data-value', _listItem.value);
				liEle.setAttribute('data-text', _listItem.text);
				liEle.setAttribute('data-id', _listItem.id);

				var checkEle = document.createElement('div');
				checkEle.className = 'toolbar-menu-icon-box';
				liEle.appendChild(checkEle);

				var checkIconEle = document.createElement('span');
				checkIconEle.className = 'checked-icon';
				checkEle.appendChild(checkIconEle);

				var liTextEle = document.createElement('div');
				liTextEle.className = 'menu-text-text';
				liEle.appendChild(liTextEle);
				liTextEle.innerText = _listItem.text;

				oFragment.appendChild(liEle);
			}
			menuListCEle.appendChild(oFragment);
			var _this = this;
			//鼠标移入显示选项面板
			_eventUtil.EventUtil.addHandler(divContainer, 'mouseenter', function (event) {
				menuListCEle.style.display = 'block';
				//鼠标移入时，选项卡面板的层级要高于其他工具条的层级
				/* var parentEle = EventUtil.getParentEle(menuListCEle, "toolbar-panel");
    parentEle.style.zIndex = 100; */
				menuListCEle.style.left = _this._getVidoContainerEventInfo(event).x + 'px';
			});

			//鼠标移出隐藏选项面板
			_eventUtil.EventUtil.addHandler(divContainer, 'mouseleave', function (event) {
				menuListCEle.style.display = 'none';
				//鼠标移出时，选项卡面板的层级要低于其他工具条的层级
				/* var parentEle = EventUtil.getParentEle(menuListCEle, "toolbar-panel");
    parentEle.style.zIndex = 99; */
			});

			//选项面板的点击事件
			_eventUtil.EventUtil.addHandler(menuListCEle, 'click', function (event) {
				//阻止冒泡
				//event.stopPropagation();
				var e = event || window.event;
				if (e.target.className.indexOf('active') > -1) {
					return;
				}
				var _nearLiEle = _tool.Toolkit.findNearAncestor(e.target, 'video-menu-list-li');
				if (!_nearLiEle) {
					return;
				}

				//通过父元素找到其所有的兄弟节点
				var items = _nearLiEle.parentNode.children,
				    length = items.length,
				    arr = [];
				for (var j = 0; j < length; j++) {
					var value = items[j].getAttribute('data-value'),
					    text = items[j].getAttribute('data-text'),
					    id = items[j].getAttribute('data-id');
					if (_nearLiEle == items[j]) {
						var _checkold = item.menuList.list[j].checked;
						if (item.isOnlyOneChecked) {
							if (item.isExecuteDefaultFunc) {
								if (item.id === 'videoRateChange') {
									//设置倍速去播放
									_this.setPlaySpeed(value);
								}
								if (item.id === 'videoRatio') {
									//设置画面比例
									_this.setRatio(value);
								}
							}
							// 设置文本下拉菜单的值
							_this.setStaticContent(item.id, text);
						}
						item.menuList.list[j].function && item.menuList.list[j].function({
							index: _this.vOpt.index,
							item: item,
							clickedItem: item.menuList.list[j]
						});
						arr.push({
							id: id,
							checked: _checkold && !item.menuList.list[j].checked ? false : true
						});
					} else {
						if (item.isOnlyOneChecked) {
							arr.push({
								id: id,
								checked: false
							});
						}
					}
				}
				_this.setToolbarMenuById(item.id, arr);
				menuListCEle.style.display = 'none';
			});
		}
	}, {
		key: 'checkZoomBtnStatus',
		value: function checkZoomBtnStatus() {
			var status = this.getZoomStatus(),
			    btn = this.getToobarBtnById("videoZoom");
			if (!btn) {
				return;
			}
			if (status == "init" || status == "end") {
				btn.classList.remove("video-inzoom");
				btn.classList.add("video-zoom");
			} else {
				btn.classList.remove("video-zoom");
				btn.classList.add("video-inzoom");
			}
		}
	}, {
		key: '_btnClickFunction',
		value: function _btnClickFunction(item, ele) {
			if (item.gray) {
				return;
			}
			if (!item.id) {
				item.function && item.function({
					index: this.vOpt.index,
					item: item,
					ele: ele
				});
				return;
			}
			switch (item.id) {
				case 'videoClose':
					if (item.isExecuteDefaultFunc) {
						this._videoCloseFunc();
					}

					break;
				case 'videoPrintScreen':
					break;
				case 'videoRatio':
					break;
				case 'videoZoom':
					if (item.isExecuteDefaultFunc) {
						var status = this.getZoomStatus(),
						    btn = this.getToobarBtnById("videoZoom");
						if (status == "init" || status == "end") {
							this.startZoom();
							btn.classList.remove("video-zoom");
							btn.classList.add("video-inzoom");
						} else {
							this.stopZoom();
							btn.classList.remove("video-inzoom");
							btn.classList.add("video-zoom");
						}
					}
					break;
				case 'videoPause':
					if (item.isExecuteDefaultFunc) {
						this.pause();
						this.showOrHideBtn('videoPause', false);
						this.showOrHideBtn('videoPlay', true);
					}
					break;
				case 'videoPlay':
					if (item.isExecuteDefaultFunc) {
						this.play();
						this.showOrHideBtn('videoPlay', false);
						this.showOrHideBtn('videoPause', true);
					}
					break;
				case 'slowPlay':
					{
						if (item.isExecuteDefaultFunc) {
							var speed = this._videoplayer.playbackRate,
							    speedArr = [16, 8, 4, 2, 1, 0.5, 0.25, 0.125, 0.0625],
							    result = void 0;
							for (var i = speedArr.length - 1; i >= 0; i--) {
								if (speed <= speedArr[i]) {
									result = speedArr[i + 1];
									break;
								}
							}
							result = typeof result === 'number' ? result : 0.0625;
							this.setPlaySpeed(result);
						}
						break;
					}
				case 'fastPlay':
					{
						if (item.isExecuteDefaultFunc) {
							var _speed = this._videoplayer.playbackRate,
							    _speedArr = [16, 8, 4, 2, 1, 0.5, 0.25, 0.125, 0.0625],
							    _result = void 0;
							for (var _i = 0, len = _speedArr.length; _i < len; _i++) {
								if (_speed >= _speedArr[_i]) {
									_result = _speedArr[_i - 1];
									break;
								}
							}
							_result = typeof _result === 'number' ? _result : 16;
							this.setPlaySpeed(_result);
						}
						break;
					}
				case 'stepPlay':
					{
						if (item.isExecuteDefaultFunc) {
							this.showOrHideBtn('videoPause', false);
							this.showOrHideBtn('videoPlay', true);
							this.singleFramePlay();
						}
						break;
					}
				case 'videoRealNormal':
				case 'videoRealHover':
					{
						var realBtn = this.getToobarBtnById("videoRealNormal") || this.getToobarBtnById("videoRealHover"),
						    hisBtn = this.getToobarBtnById("videoHisNormal") || this.getToobarBtnById("videoHisHover");

						if (realBtn.classList.contains("video-real-normal")) {
							realBtn.classList.remove("video-real-normal");
							realBtn.classList.add("video-real-hover");
							hisBtn.classList.remove("video-history-hover");
							hisBtn.classList.add("video-history-normal");
						}
						break;
					}
				case 'videoHisNormal':
				case 'videoHisHover':
					{
						var _realBtn = this.getToobarBtnById("videoRealNormal") || this.getToobarBtnById("videoRealHover"),
						    _hisBtn = this.getToobarBtnById("videoHisNormal") || this.getToobarBtnById("videoHisHover");

						if (_hisBtn.classList.contains("video-history-normal")) {
							_hisBtn.classList.remove("video-history-normal");
							_hisBtn.classList.add("video-history-hover");
							_realBtn.classList.remove("video-real-hover");
							_realBtn.classList.add("video-real-normal");
						}
						break;
					}
				default:
					{
						if (item.hasOwnProperty('_rightmenu') && !item.menuList && this.rightMenuEle) {
							this.rightMenuEle.style.display = 'none';
						} //先隐藏再回调
					}
			}

			item.function && item.function({
				index: this.vOpt.index,
				item: item,
				ele: ele
			});
		}
	}, {
		key: '_showError',
		value: function _showError(type, details, info) {
			this._showOrHideLoading(false);
			this._setBgImg(true);
			this.isVideoPtz = false;
			this._changeVideoCursor();
			this.ptzDirection = -1;
			if (this.mousewheelTimer) {
				clearTimeout(this.mousewheelTimer);
				this.mousewheelTimer = null;
			}

			var strtext = "";
			if (type == 'StreamError') {
				if (details == 'StartStreamError') {
					strtext = '<start>' + _errordicts2.default['' + (info.error ? info.error : info.code)];
				} else if (details == 'ReadFileError') {
					strtext = '<readfile>' + _errordicts2.default['' + (info.error ? info.error : info.code)];
				} else {
					strtext = '<stream>' + _errordicts2.default['' + (info.error ? info.error : info.code)];
				}
			} else if (type == 'MediaError') {
				if (details == 'MediaVideoError') {
					if (info.code == 1) {
						strtext = '<video>取回过程被用户中止';
					} else if (info.code == 2) {
						strtext = '<video>下载发生错误';
					} else if (info.code == 3) {
						strtext = '<video>解码发生错误';
					} else if (info.code == 4) {
						strtext = '<video>不支持的视音频';
					} else {
						strtext = '<video>网络异常';
					}
				} else if (details == 'MediaMSEError') {
					strtext = '<MSE>源扩展发生错误';
				} else {
					strtext = '<MSE>解封装发生错误';
				}
			} else if (type == 'NetworkError') {

				if (details == 'Exception') {
					strtext = '<IO>网络异常';
				} else if (details = 'Unsupport') {
					strtext = '<IO>网络协议不支持';
				} else if ('HttpStatusCodeInvalid') {
					strtext = '<IO>HTTP状态错误';
				} else {}
			}
			//strtext = strtext.replace(/</g,"&lt;");
			//strtext = strtext.replace(/>/g,"&gt;");
			this.addWaterMark({ id: '_showError_',
				text: strtext,
				// color: '#F00',
				color: 'rgba(255,255,255,.7)',
				fontSize: '17px',
				top: '50%',
				marginTop: "60px"
			});
		}
	}, {
		key: '_videoCloseFunc',
		value: function _videoCloseFunc() {

			this.delAllWaterMark(); //水印
			this.stopDrawing(true); //实时绘制
			this.stopVideo();
			this.removeToolbar();
			this.removeRightMenu();
		}

		//显示/隐藏某个工具条项

	}, {
		key: 'showOrHideBtn',
		value: function showOrHideBtn(id, flag) {
			var btnEle = this.getToobarBtnById(id);
			if (btnEle) {
				btnEle.style.display = flag ? 'inline-block' : 'none';
			}
			this.setToobarItemStatusById(id, { show: flag });
		}

		// 深度优先遍历递归算法查找根节点找到对应id的子节点

	}, {
		key: '_deepTraversal',
		value: function _deepTraversal(node, id) {
			if (node) {
				var childrens = node.children;
				for (var i = 0, len = childrens.length; i < len; i++) {
					if (childrens[i].getAttribute('data-id') === id) {
						this.curOperateNode = childrens[i];
					} else {
						this._deepTraversal(childrens[i], id);
					}
				}
			}
		}

		//根据工具条上项的id获得对应的元素的DOM

	}, {
		key: 'getToobarBtnById',
		value: function getToobarBtnById(id) {
			this.curOperateNode = null;
			for (var i = 0, length = this.vOpt.toolbarEleArr.length; i < length; i++) {
				var item = this.vOpt.toolbarEleArr[i].toolbarEle;
				this._deepTraversal(item, id);
			}
			return this.curOperateNode;
		}
		//根据工具条上项的id设置对应的元素属性

	}, {
		key: 'setToobarItemStatusById',
		value: function setToobarItemStatusById(id, obj) {
			if (!id || id && typeof id !== 'string' || !obj || obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) != 'object') {
				return null;
			}
			if (id && this.defaultToolbarConf[id]) {
				this.defaultToolbarConf[id] = _tool.Toolkit.deepMerge(this.defaultToolbarConf[id], obj);
			}
		}

		// 根据id设置工具条属性

	}, {
		key: 'setToolbarItemAttrsById',
		value: function setToolbarItemAttrsById(id, obj) {
			if (!id || id && typeof id !== 'string' || !obj || obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) != 'object') {
				return null;
			}
			if (id && this.defaultToolbarConf[id]) {
				this.defaultToolbarConf[id] = _tool.Toolkit.deepMerge(this.defaultToolbarConf[id], obj);
			}
			var itemEle = this.getToobarBtnById(id);
			if (itemEle) {
				if (obj.hasOwnProperty('checked')) {
					if (obj.checked) {
						this._setToolbarCheckedStyle(itemEle);
					} else {
						this._setToolbarNotCheckedStyle(itemEle);
					}
				}

				if (obj.hasOwnProperty('gray')) {
					if (obj.gray) {
						this._setToolbarGrayStyle(itemEle);
					} else {
						this._setToolbarNotGrayStyle(itemEle);
					}
				}

				if (obj.hasOwnProperty('text')) {
					this.setToolbarItemText(id, obj.text);
					if (itemEle.children[1]) {
						itemEle.children[1].innerHTML = obj.text;
					}
				}
			}
		}

		// 设置工具条checked样式

	}, {
		key: '_setToolbarCheckedStyle',
		value: function _setToolbarCheckedStyle(itemEle) {
			itemEle.classList.add('active');
			itemEle.classList.remove('not-allowed');
		}
		// 设置工具条非checked样式

	}, {
		key: '_setToolbarNotCheckedStyle',
		value: function _setToolbarNotCheckedStyle(itemEle) {
			itemEle.classList.remove('active');
		}
		// 设置工具条checked

	}, {
		key: 'setToolbarItemChecked',
		value: function setToolbarItemChecked(id, checkFlag) {
			if (!id || id && typeof id !== 'string' || checkFlag !== true && checkFlag !== false) {
				return null;
			}
			if (this.defaultToolbarConf[id]) {
				this.defaultToolbarConf[id] = _tool.Toolkit.deepMerge(this.defaultToolbarConf[id], { checked: checkFlag });
			}
			var itemEle = this.getToobarBtnById(id);
			if (checkFlag) {
				this._setToolbarCheckedStyle(itemEle);
			} else {
				this._setToolbarNotCheckedStyle(itemEle);
			}
		}
		// 设置工具条样式置灰

	}, {
		key: '_setToolbarGrayStyle',
		value: function _setToolbarGrayStyle(itemEle) {
			itemEle.classList.add('not-allowed');
			itemEle.classList.remove('active');
		}
		// 设置工具条样式非置灰

	}, {
		key: '_setToolbarNotGrayStyle',
		value: function _setToolbarNotGrayStyle(itemEle) {
			itemEle.classList.remove('not-allowed');
		}
		// 设置工具条是否置灰

	}, {
		key: 'setToolbarItemGray',
		value: function setToolbarItemGray(id, grayFlag) {
			if (!id || id && typeof id !== 'string' || grayFlag !== true && grayFlag !== false) {
				return null;
			}
			if (this.defaultToolbarConf[id]) {
				this.defaultToolbarConf[id] = _tool.Toolkit.deepMerge(this.defaultToolbarConf[id], { gray: grayFlag });
			}
			var itemEle = this.getToobarBtnById(id);
			if (grayFlag) {
				this._setToolbarGrayStyle(itemEle);
			} else {
				this._setToolbarNotGrayStyle(itemEle);
			}
		}
		// 设置工具条文本

	}, {
		key: 'setToolbarItemText',
		value: function setToolbarItemText(id, text) {
			if (!id || id && typeof id !== 'string' || text && typeof text !== 'string') {
				return null;
			}
			if (this.defaultToolbarConf[id]) {
				this.defaultToolbarConf[id] = _tool.Toolkit.deepMerge(this.defaultToolbarConf[id], { text: text });
			}
			var itemEle = this.getToobarBtnById(id);
			if (itemEle && itemEle.children[1]) {
				itemEle.children[1].innerHTML = text;
			}
		}

		//根据工具条上项的id获得对应的元素

	}, {
		key: 'getToobarItemStatusById',
		value: function getToobarItemStatusById(id) {
			if (!id) {
				return null;
			}
			return this.defaultToolbarConf[id] ? this.defaultToolbarConf[id] : null;
		}

		// 设置工具条上的下拉菜单

	}, {
		key: 'setToolbarMenuById',
		value: function setToolbarMenuById(id, arr) {
			if (!id || !arr || arr && arr.length === 0) {
				return;
			}
			var _menuListConf = this.defaultToolbarConf[id],
			    menuListEle = this.getToobarBtnById(id),
			    listEle = menuListEle.lastChild.children;
			if (_menuListConf && _menuListConf.menuList && _menuListConf.menuList.list && _menuListConf.menuList.list.length > 0) {
				var _list = _menuListConf.menuList.list;
				for (var i = 0, len0 = arr.length; i < len0; i++) {
					for (var j = 0, len1 = _list.length; j < len1; j++) {
						var _liEle = listEle[j];
						if (arr[i].id == _list[j].id) {
							_tool.Toolkit.deepMerge(_list[j], arr[i]);
							if (_list[j] && _list[j].checked) {
								_liEle.classList.add('active');
								_liEle.classList.remove('not-allowed');
							} else {
								_liEle.classList.remove('active');
							}
							if (_list[j] && _list[j].gray) {
								_liEle.classList.add('not-allowed');
								_liEle.classList.remove('active');
							} else {
								_liEle.classList.remove('not-allowed');
							}
							break;
						}
					}
				}
			}
		}
	}, {
		key: 'showToolbarAuto',
		value: function showToolbarAuto(flag) {
			if (flag) {
				this.vOpt.videoC.classList.add("hoverClass");
			} else {
				this.vOpt.videoC.classList.remove("hoverClass");
			}
		}

		// 显示或隐藏工具条，若不传id，则显示或隐藏全部工具条

	}, {
		key: 'showOrHideToolbar',
		value: function showOrHideToolbar(flag, id) {
			if (!id) {
				var opacity = "";
				if (flag === undefined) {} else if (flag) {
					opacity = 1;
				} else {
					opacity = 0;
				}
				for (var j = 0, length = this.vOpt.toolbarEleArr.length; j < length; j++) {
					var itemEle = this.vOpt.toolbarEleArr[j].toolbarEle;
					itemEle.style.opacity = opacity;
				}
				return;
			}
			var _itemEle = this.getToobarBtnById(id);
			if (_itemEle) {
				_itemEle.style.display = flag ? 'block' : 'none';
			}
			this.setToobarItemStatusById(id, { show: flag });
		}

		// 创建工具条

	}, {
		key: 'createToolbar',
		value: function createToolbar(toolbarObj) {
			for (var i in toolbarObj) {
				this._createToolbar(toolbarObj[i], i);
			}
		}

		//删除工具条,若不传id，则删除全部工具条
		//需要增加 删除上下功能条的功能

	}, {
		key: 'removeToolbar',
		value: function removeToolbar(id) {
			if (!id) {
				for (var j = 0, length = this.vOpt.toolbarEleArr.length; j < length; j++) {
					var itemEle = this.vOpt.toolbarEleArr[j].toolbarEle;
					if (itemEle && itemEle.parentNode) {
						itemEle.parentNode.removeChild(itemEle);
					}
				}
				this.defaultToolbarConf = {};
				if (this._bufferedProress) {
					this._bufferedProress = null;
				}
				if (this._circleRange) {
					this._circleRange = null;
				}
				if (this._realProress) {
					this._realProress = null;
				}
				if (this._videoProressD) {
					this._videoProressD = null;
				}
				// 工具条的集合也需要清空
				this.vOpt.toolbarEleArr = [];
				this._videoTitle = '';
				return;
			}

			var _removeEle = this.getToobarBtnById(id);
			if (_removeEle && _removeEle.parentNode) {
				_removeEle.parentNode.removeChild(_removeEle);
			}
			if (this.defaultToolbarConf[id]) {
				delete this.defaultToolbarConf[id];
			}
		}

		// 设置文本，针对静态文本按钮(即type为'static'的非下拉项)有效

	}, {
		key: 'setStaticContent',
		value: function setStaticContent(id, str) {
			if (!id || !str) {
				return;
			}
			var _setContentEle = this.getToobarBtnById(id);
			if (_setContentEle && _setContentEle.getAttribute('data-type') === 'static') {
				_setContentEle.innerText = str;
				_setContentEle.setAttribute('title', str);
				this.setToobarItemStatusById(id, { text: str, tooltip: str });
			}
			if (_setContentEle && _setContentEle.getAttribute('data-type') === 'static-menu') {
				var spanText = _setContentEle.firstChild;
				spanText.innerText = str;
				spanText.setAttribute('title', str);
				this.setToobarItemStatusById(id, { text: str, tooltip: str });
			}
		}

		// 获取静态文本内容，针对静态文本按钮(即type为'static'的非下拉项）有效

	}, {
		key: 'getStaticContent',
		value: function getStaticContent(id) {
			if (!id) {
				return;
			}
			var _setContentEle = this.getToobarBtnById(id);
			if (_setContentEle && _setContentEle.getAttribute('data-type') === 'static') {
				return _setContentEle.innerText;
			}
		}

		// 更新进度条位置

	}, {
		key: 'updatePorgress',
		value: function updatePorgress(flag) {
			if (flag) {
				//计算当前播放时间，并进行播放
				var currentTime = this.currentP / 100 * this.durationT;
				if (this._videoplayer) {
					//video时间
					this._videoplayer.currentTime = currentTime - this._playtimeOffset;
					//更新当前时间的显示
					this._updateCurrentTText();
				}
			} else {
				this.currentP = Number(this.currentT / this.durationT * 100);
				this.currentP = this.currentP > 100 ? 100 : this.currentP;
				//this.currentP = (this.currentP < 0 ? 0 : this.currentP);
				if (this._realProress) {
					this._realProress.style.width = this.currentP + '%';
				}
				if (this._circleRange) {
					this._circleRange.style.left = this.currentP + '%';
				}
				//更新当前时间的显示
				this._updateCurrentTText();
			}
		}
	}, {
		key: '_updateDateRate',
		value: function _updateDateRate() {
			// 码率显示文本更新
			var _dataRate = '--';
			if (this._dataRate && !isNaN(this._dataRate) && this._dataRate > 0) {
				_dataRate = Math.floor(this._dataRate) + 'KB';
			}
			this.setStaticContent('videoRate', _dataRate);

			// 每秒帧数更新
			var _fps = this._fps ? this._fps + 'FPS' : '--';
			this.setStaticContent('videoFps', _fps);
		}
	}, {
		key: '_updateCurrentTText',
		value: function _updateCurrentTText() {
			var _durationT = this.durationT > 0 && isFinite(this.durationT) ? this.formartTime(this.durationT) : '--',
			    str = '';
			if (this.currentT > 0) {
				str = this.formartTime(this.currentT) + '/' + _durationT;
			} else {
				str = '--/' + _durationT;
			}
			this.setStaticContent('videoTime', str);
		}
	}]);

	return Toolbar;
}();

exports.default = Toolbar;

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

// 工具条默认配置
var defaultToolbarConf = {
	videoTitle: {
		id: 'videoTitle',
		className: 'video-title',
		style: 'left-top',
		type: 'static',
		show: true,
		text: '无视频',
		tooltip: '无视频'
	},
	videoRate: {
		id: 'videoRate',
		className: 'video-rate',
		style: 'left-top',
		type: 'static',
		show: true,
		text: '--',
		tooltip: '--'
	},
	videoFps: {
		id: 'videoFps',
		className: 'video-rate',
		style: 'left-top',
		type: 'static',
		show: true,
		text: '--',
		tooltip: '--'
	},
	videoClose: {
		id: 'videoClose',
		isExecuteDefaultFunc: true,
		className: 'video-close',
		type: 'button',
		style: 'right-top',
		show: true,
		tooltip: '关闭'
	},
	videoPrintScreen: {
		id: 'videoPrintScreen',
		isExecuteDefaultFunc: true,
		className: 'video-printscreen',
		type: 'button',
		style: 'right-top',
		show: true,
		tooltip: '抓图'
	},
	// 1表示原始；2表示拉伸；3表示4:3；4表示16:9；5表示16:10
	videoRatio: {
		id: 'videoRatio',
		className: 'video-ratio',
		type: 'button',
		style: 'right-top',
		show: true,
		tooltip: '画面比例',
		isExecuteDefaultFunc: true,
		isOnlyOneChecked: true,
		menuList: {
			list: [{
				id: "orignRatio",
				text: '原始',
				value: 'origin',
				gray: false,
				checked: true
			}, {
				id: "stretchRatio",
				text: '拉伸',
				value: 'stretch',
				gray: false,
				checked: false
			}, {
				id: "4R3Ratio",
				text: '4:3',
				value: '4:3',
				gray: false,
				checked: false
			}, {
				id: "16R9Ratio",
				text: '16:9',
				value: '16:9',
				gray: false,
				checked: false
			}, {
				id: "16R10Ratio",
				text: '16:10',
				value: '16:10',
				gray: false,
				checked: false
			}]
		}
	},
	videoZoom: {
		id: 'videoZoom',
		isExecuteDefaultFunc: true,
		className: 'video-zoom',
		type: 'button',
		style: 'right-buttom',
		show: true,
		tooltip: '数字放大'
	},
	videoRealHover: {
		id: 'videoRealHover',
		className: 'video-real-hover',
		type: 'button',
		style: 'left-bottom',
		show: true,
		text: '实时',
		tooltip: '实时'
	},
	videoRealNormal: {
		id: 'videoRealNormal',
		className: 'video-real-normal',
		type: 'button',
		style: 'left-bottom',
		show: true,
		text: '实时',
		tooltip: '实时'
	},
	videoHisNormal: {
		id: 'videoHisNormal',
		className: 'video-history-normal',
		type: 'button',
		style: 'left-bottom',
		show: true,
		text: '历史',
		tooltip: '历史'
	},
	videoHisHover: {
		id: 'videoHisHover',
		className: 'video-history-hover',
		type: 'button',
		style: 'left-bottom',
		show: true,
		text: '历史',
		tooltip: '历史'
	},
	videoPause: {
		id: 'videoPause',
		isExecuteDefaultFunc: true,
		className: 'video-pause',
		type: 'button',
		style: 'left-bottom',
		show: true,
		tooltip: '暂停'
	},
	videoPlay: {
		id: 'videoPlay',
		isExecuteDefaultFunc: true,
		className: 'video-play',
		type: 'button',
		style: 'left-bottom',
		show: false,
		tooltip: '播放'
	},
	slowPlay: {
		id: 'slowPlay',
		isExecuteDefaultFunc: true,
		className: 'slow-play',
		type: 'button',
		style: 'left-bottom',
		show: true,
		tooltip: '慢放'
	},
	stepPlay: {
		id: 'stepPlay',
		isExecuteDefaultFunc: true,
		className: 'step-play',
		type: 'button',
		style: 'left-bottom',
		show: true,
		tooltip: '单帧播放'
	},
	fastPlay: {
		id: 'fastPlay',
		isExecuteDefaultFunc: true,
		className: 'fast-play',
		type: 'button',
		style: 'left-bottom',
		show: true,
		tooltip: '快放'
	},
	curRate: {
		id: 'curRate',
		className: 'cur-rate',
		style: 'left-bottom',
		type: 'static',
		show: true,
		text: 'x1'
	},
	videoRateChange: {
		id: 'videoRateChange',
		type: 'static',
		style: 'left-bottom',
		show: true,
		text: '',
		isExecuteDefaultFunc: true,
		isOnlyOneChecked: true,
		menuList: {
			list: [{
				id: "16Rate",
				text: 'x16',
				value: 16,
				gray: false,
				checked: false
			}, {
				id: "8Rate",
				text: 'x8',
				value: 8,
				gray: false,
				checked: false
			}, {
				id: "4Rate",
				text: 'x4',
				value: 4,
				gray: false,
				checked: false
			}, {
				id: "2Rate",
				text: 'x2',
				value: 2,
				gray: false,
				checked: false
			}, {
				id: "1Rate",
				text: 'x1',
				value: 1,
				gray: false,
				checked: true
			}, {
				id: "0.5Rate",
				text: 'x1/2',
				value: 0.5,
				gray: false,
				checked: false
			}, {
				id: "0.25Rate",
				text: 'x1/4',
				value: 0.25,
				gray: false,
				checked: false
			}, {
				id: "0.125Rate",
				text: 'x1/8',
				value: 0.125,
				gray: false,
				checked: false
			}, {
				id: "0.0625Rate",
				text: 'x1/16',
				value: 0.0625,
				gray: false,
				checked: false
			}]
		}
	},
	videoProgress: {
		id: 'videoProgress',
		className: 'video-progress',
		type: 'progress',
		key: 1,
		show: true
	},
	videoTime: {
		id: 'videoTime',
		className: 'video-time',
		style: 'right-bottom',
		type: 'static',
		key: 1,
		show: true,
		text: '--/--',
		tooltip: '--/--'
	}
};
// 右键菜单默认配置
var defaultRightMenuConf = {
	videoClose: {
		id: 'videoClose',
		text: '关闭当前流',
		gray: false,
		checked: false,
		isExecuteDefaultFunc: true
	},
	lineSplit: {
		type: 1,
		name: 'lineSplit'
	},
	videoRatio: {
		id: 'videoRatio',
		text: '设置画面比例',
		gray: false,
		checked: false,
		menuList: [{
			id: "orignRatio",
			text: '原始',
			value: 'origin',
			gray: false,
			originId: "videoRatio",
			checked: true,
			function: function _function(obj) {
				console.log(obj.item.value);
			}
		}, {
			id: "stretchRatio",
			text: '拉伸',
			value: 'stretch',
			gray: false,
			originId: "videoRatio",
			checked: false,
			function: function _function(obj) {
				console.log(obj.item.value);
			}
		}, {
			id: "4R3Ratio",
			text: '4:3',
			value: '4:3',
			gray: false,
			originId: "videoRatio",
			checked: false,
			function: function _function(obj) {
				console.log(obj.item.value);
			}
		}, {
			id: "16R9Ratio",
			text: '16:9',
			value: '16:9',
			gray: false,
			checked: false,
			originId: "videoRatio",
			function: function _function(obj) {
				console.log(obj.item.value);
			}
		}, {
			id: "16R10Ratio",
			text: '16:10',
			value: '16:10',
			gray: false,
			originId: "videoRatio",
			checked: false,
			function: function _function(obj) {
				console.log(obj.item.value);
			}
		}]
	}
};

exports.defaultToolbarConf = defaultToolbarConf;
exports.defaultRightMenuConf = defaultRightMenuConf;

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
    "1": "操作成功并重起",
    "2": "夹带数据",
    "3": "操作成功但需要重起",
    "4": "该指令需被重定向到其它服务器执行",
    "5": "传输地址被自动协商和补齐",
    "11": "请求类型与本驱动/过滤器不匹配，请尝试其它驱动/过滤器",
    "12": "操作成功但没有连接",
    "13": "操作成功，作为一个false结果",
    "101": "成功新建db",
    "-1": "未分类错误",
    "-2": "avport错误",
    "-3": "服务器配置信息被破坏",
    "-4": "服务器必须重新启动",
    "-5": "字符串的长度超出预设长度",
    "-6": "指令已经过时",
    "-7": "指令没有实现",
    "-8": "运行时异常",
    "-9": "驱动程序内部故障",
    "-10": "内部程序逻辑错误",
    "-11": "对象不支持的POSA接口",
    "-12": "创建线程失败",
    "-13": "空函数，不应该调用到此处",
    "-14": "缺少或没有配置驱动(POSA对象构造器)",
    "-15": "该功能限制使用",
    "-16": "指令用法错误，程序逻辑错误",
    "-17": "输出参数缓冲区太小",
    "-18": "路由连接失败，找不到匹配网关主机模式集",
    "-19": "试图注销尚未注册的POSA对象构造器",
    "-20": "重复注册已经注册的POSA对象构造器",
    "-21": "设置系统时间失败",
    "-22": "设置服务器ip失败",
    "-23": "取得服务器ip失败",
    "-24": "更新系统文件失败",
    "-25": "接收夹带数据失败",
    "-26": "没有足够的内存",
    "-27": "错误的组播地址数量",
    "-28": "服务端检测到无法解析的请求",
    "-29": "IO操作超时",
    "-30": "IO操作被取消",
    "-31": "连接正在进行中",
    "-32": "未被挂装的Host",
    "-33": "被固定挂装的Host",
    "-34": "系统退出中，请求无法完成",
    "-35": "外部程序逻辑错误",
    "-41": "读取avsetting配置信息错误",
    "-42": "写avsetting配置信息错误",
    "-43": "没有找到要保存的类型",
    "-45": "av名字错误",
    "-46": "坐标不正确",
    "-47": "宽度或是高度不正确",
    "-48": "设置叠加位图不正确",
    "-49": "获得动态感知错误",
    "-50": "功能限制",
    "-51": "设置编码参数失败",
    "-52": "矩阵端口参数越界",
    "-53": "视频尺寸参数错误",
    "-54": "视频制式参数错误",
    "-55": "视频编码器av口参数越界",
    "-56": "视频编码器未知错误",
    "-57": "视频解码器未知错误",
    "-81": "列出用户信息失败",
    "-82": "加入用户失败",
    "-83": "删除用户失败",
    "-84": "没有此用户",
    "-85": "保存用户失败",
    "-86": "用户数超出限制",
    "-87": "没有请求的功能",
    "-88": "没有权限访问",
    "-89": "用户名或密码不正确",
    "-90": "用户级别太低",
    "-91": "已经有用户登录",
    "-92": "本用户已经登录",
    "-93": "不正确的对象名字",
    "-94": "DDB存取出错",
    "-95": "Ticket无效",
    "-96": "登录失败",
    "-97": "TCP Session连接数限制",
    "-101": "设置的长度不能小于0",
    "-102": "打开目录失败",
    "-103": "删除文件失败",
    "-104": "设置文件生存期错误",
    "-105": "错误的时间格式",
    "-106": "smf文件已经开始存储数据，请在存储数据前添加所有的流信息",
    "-107": "被保护的文件无法删除，请取消保护后再删除",
    "-110": "参数重复设置",
    "-111": "参数不存在",
    "-112": "磁盘空间不足",
    "-141": "串口的端口号错误",
    "-142": "打开串口失败",
    "-143": "保存串口配置失败",
    "-144": "读串口配置失败",
    "-145": "setpioHelper错误",
    "-146": "摄像头已经被锁定",
    "-147": "摄像头不能被控制",
    "-148": "访问受限",
    "-149": "设备PTZControl失败",
    "-150": "不支持的设备型号",
    "-151": "向串口发送数据失败",
    "-152": "获取PTZ操作信息失败",
    "-153": "获取PTZ控制信息失败",
    "-161": "磁盘号错误",
    "-162": "磁盘格式化错误",
    "-163": "错误的分区号",
    "-164": "格式化磁盘分区错误",
    "-166": "正在录像的文件不能删除",
    "-167": "错误的文件名",
    "-168": "没有找到满足条件的文件",
    "-169": "错误的文件类型",
    "-170": "缺少标题，不能录像",
    "-171": "没有找到自动录像指令",
    "-172": "设置自动录像失败",
    "-173": "清除自动录像失败",
    "-174": "分配地址失败",
    "-175": "设置视频输出制式错误",
    "-176": "设置视频输入制式错误",
    "-177": "初始化MP4编码器错误",
    "-178": "初始化MP4解码器错误",
    "-179": "设定视频输入颜色",
    "-180": "视频采集驱动初始化错误",
    "-181": "视频显示驱动初始化错误",
    "-182": "管理的objs超过系统范围",
    "-183": "本sobj所拥有的targets超过限制",
    "-184": "增加一个sobj错误",
    "-185": "增加一个tboj错误",
    "-186": "打开文件失败",
    "-187": "没有找到指定的目标",
    "-188": "处于disable状态",
    "-189": "avsobj没有初始化",
    "-190": "avtobj没有初始化",
    "-191": "不能启动大图模式",
    "-192": "在大图模式无法完成此操作",
    "-193": "音频输入驱动初始化错误",
    "-194": "音频输出驱动初始化错误",
    "-195": "源重复打开",
    "-196": "目标重复打开",
    "-197": "MP3编码器初始化失败",
    "-198": "MP3解码器初始化失败",
    "-199": "错误的目标通道名",
    "-200": "文件数目太多",
    "-201": "错误的target数量(只支持一个target)",
    "-202": "传输不存在或用户没有发起该target",
    "-203": "错误的指令",
    "-204": "错误的事件类型",
    "-205": "错误的音频编码码率",
    "-206": "串口处于disable状态",
    "-207": "设置自动录像的条件重复",
    "-208": "目标流不存在",
    "-209": "节点处于断线状态",
    "-210": "CarryId重复",
    "-211": "CarryId不存在",
    "-212": "设备处于断线状态",
    "-213": "关闭文件错误",
    "-214": "要读的长度错误",
    "-215": "文件句柄错误",
    "-216": "读文件错误",
    "-217": "seekfile错误",
    "-218": "得到文件长度错误",
    "-219": "得到文件当前位置错误",
    "-220": "没有音频数据",
    "-221": "没有视频数据",
    "-222": "写文件错误",
    "-223": "系统资源(非内存)不足",
    "-224": "PosaClass对象不存在",
    "-225": "不是一个PosaSourceStream",
    "-226": "不是一个PosaTargetStream",
    "-227": "PosaHost对象已经存在",
    "-228": "PosaHost对象不存在",
    "-229": "PosaPort对象已经存在",
    "-230": "PosaPort对象不存在",
    "-231": "没有找到合适的PosaHost驱动",
    "-232": "没有找到合适的PosaSourceStream驱动",
    "-233": "没有找到合适的PosaTargetStream驱动",
    "-234": "没有找到合适的PosaDecoder驱动",
    "-235": "没有找到合适的PosaSilenceGenerator驱动",
    "-236": "Posa对象已经存在",
    "-237": "PosaSourceChannel已经被关闭",
    "-238": "分配本地地址或端口失败",
    "-239": "请求传输失败",
    "-240": "请求接收数据失败",
    "-241": "对象不存在",
    "-242": "对象已经存在",
    "-243": "对象属性设置错误",
    "-244": "属性值为空或非法",
    "-245": "不能分配到路径",
    "-246": "目标必须是本地的，不能是远程的",
    "-247": "路径连接失败",
    "-248": "属性不存在",
    "-249": "资源被抢占",
    "-250": "资源编号错误",
    "-251": "资源编号不存在",
    "-252": "超过该网段最大数字码流数",
    "-253": "POSA流I/O超时",
    "-254": "POSA流格式不匹配",
    "-255": "没有为软解码器设置Renderer",
    "-256": "没有为POSA目标流设置源",
    "-257": "POSA流的url格式不正确",
    "-258": "UDP或TCP端口已经被占用",
    "-259": "源流不存在",
    "-260": "解码器初始化失败",
    "-261": "解码失败",
    "-262": "没有初始化POSA运行支持库",
    "-263": "已经初始化过了POSA运行支持库",
    "-264": "没有提供定时器API",
    "-265": "加入到组播失败",
    "-266": "连接设备失败",
    "-267": "本地矩阵切换线路被抢占",
    "-268": "选定的节点路由(PassNODE)中不包括本节点或者找不到对应的网关",
    "-269": "传输的源和目标NPS地址不能都要求自动分配",
    "-270": "服务器连接其它设备或服务器时发生网络断线错误",
    "-271": "选定的节点路由(PassNODE)已经包括本节点",
    "-272": "断线重连动作现在不能进行, 必须推迟",
    "-273": "看门狗线程检查到源流在设定时间内没收到任何码流数据",
    "-274": "非法的目标通道名称",
    "-275": "检查到TCP socket已经无效(无法获取对方IP)",
    "-276": "视频丢失",
    "-277": "非法XML字符串",
    "-278": "XML格式不匹配",
    "-279": "抢占数字干线优先级不够",

    //posa2.
    "-300": "正在重连中",
    "-301": "模块引用计数不为0",
    "-302": "缓冲区长度不够",

    //sqlite
    "-320": "打开Sqlite数据库失败",
    "-321": "查询Sqlite数据库失败",
    "-322": "不支持的数据类型",
    "-323": "创建数据表失败",
    "-324": "删除数据表失败",
    "-325": "删除数据失败",
    "-326": "插入数据失败",
    "-327": "更新数据失败",

    // 授权
    "-350": "授权过期",
    "-351": "录像达到授权最大路数或未授权",
    "-352": "实时流达到授权最大路数或未授权",
    "-353": "点播达到授权最大路数或未授权",
    "-354": "矩阵模块功能未授权",
    "-355": "帧标记模块功能未授权",
    "-356": "报警主机模块功能未授权",
    "-357": "PTZ控制功能未授权",

    "-501": "函数或参数格式不正确",
    "-502": "连接服务器失败",
    "-503": "客户端功能未实现",
    "-504": "客户端内存溢出",
    "-505": "客户端不认识的属性类型",
    "-506": "尚未连接服务器",
    "-507": "发送失败",
    "-508": "接收失败",
    "-509": "客户端不能打开文件",
    "-510": "客户端文件格式不正确",
    "-511": "客户端不能读文件",
    "-512": "客户端检测到无法解析的应答",
    "-513": "已经连接了服务器",
    "-514": "不正确的IP地址或主机名称",
    "-515": "无法创建新的RawObject",
    "-517": "服务器没有响应",
    "-518": "收到无法处理的应答",
    "-519": "传输已经发起",
    "-520": "摄像机没有设置传输协议",
    "-521": "摄像机的传输协议目前不支持",
    "-522": "用户没有登录",
    "-523": "网络接收超时",
    "-524": "网络地址PING不通",
    "-525": "服务器TCP端口错误",
    "-526": "对方已经关闭连接",
    "-527": "用户登录次数太多",
    "-528": "设备不支持的参数配置",
    "-600": "非法的服务器本地数据库文件",
    "-601": "程序没有初始化",
    "-702": "非法db对象ID",
    "-703": "db缓冲区太小",
    "-704": "db对象或者属性不存在",
    "-705": "db对象或者属性已经存在",
    "-706": "db内存不足",
    "-707": "db没有初始化",
    "-708": "db打开文件失败",
    "-709": "db数据check失败",
    "-710": "db类型不匹配",
    "-711": "db非法对象名",
    "-712": "db错误的文档",
    "-713": "db密码不可读",
    "-800": "设备尺寸太小",
    "-801": "不能识别分区格式",
    "-802": "存储设备上的ROFS版本高于当前程序支持版本",
    "-803": "分区尺寸改变",
    "-804": "分区头信息损坏",
    "-805": "缺少关键Slice",
    "-806": "Slice时间差过大",
    "-807": "Package时间长度大于时间段最大允许值",
    "-808": "磁盘空间不足",
    "-809": "磁盘设备参数异常",
    "-810": "Package数量为0",
    "-811": "无效的Package序列号",
    "-812": "没有与读mask匹配的Slice",
    "-813": "打开ROFS原始设备失败",
    "-814": "ROFS原始设备重复打开",
    "-815": "非法ROFS存储设备名",
    "-816": "只有未格式化或者停止态的磁盘才进行格式化/反格式化操作",
    "-817": "不存在的StgName",
    "-818": "缺少同步Slice",
    "-819": "ROFS设备未格式化",
    "-820": "ROFS设备录像中",
    "-821": "ROFS设备数据修复中",
    "-822": "ROFS设备未打开",
    "-823": "无法获取ROFS设备信息",
    "-824": "ROFS管理器已经初始化",
    "-825": "ROFS管理器未初始化",
    "-826": "ROFS固定区标识信息不匹配",
    "-827": "ROFS固定区标识信息太大",
    "-828": "ROFS Package内slice数太多",
    "-829": "数据包信息损坏",
    "-830": "数据信息不一致",
    "-831": "用户取消ROFS设备数据修复",
    "-832": "未处于修复状态",
    "-833": "不是ROFS主设备",
    "-834": "ROFS辅设备忙",
    "-835": "ROFS索引数据损坏",
    "-836": "ROFS时间段数据损坏",
    "-837": "ROFS设备未开始同步拷贝",
    "-838": "ROFS设备已经开始同步拷贝",
    "-839": "不是ROFS辅设备",
    "-840": "循环同步",
    "-841": "ROFS设备写失败",
    "-842": "ROFS设备读失败",
    "-843": "没有与查询时间匹配的Package",
    "-844": "没有与读条件时间匹配的Package索引",
    "-845": "创建元数据文件失败",
    "-846": "打开元数据文件失败",
    "-847": "元数据文件尺寸错误",
    "-848": "元数据文件内容错误",
    "-855": "重复配置ROFS原始设备",
    "-856": "ROFS2设备(StoreGroup)太小，无法格式化",
    "-857": "存在通道时，ROFS2不能格式化",
    "-858": "ROFS2基本头信息损坏",
    "-859": "ROFS2非法块数量",
    "-860": "ROFS2非法通道数量",
    "-861": "ROFS2块头信息损坏",
    "-862": "ROFS2通道头信息损坏",
    "-863": "ROFS2剩余空间不足",
    "-864": "ROFS2命名重复",
    "-865": "ROFS2没有可用块",
    "-866": "ROFS2未找到可删除的最旧数据块",
    "-867": "ROFS2非法块大小",
    "-868": "ROFS2构造组的磁盘路径不匹配",
    "-869": "ROFS2数据已经加锁",
    "-870": "ROFS2没有剩余可用空间，已经录像数据总时间没有满足设定值",
    "-871": "通道名称不存在！",
    "-872": "ROFS2块空间不足",
    "-873": "ROFS2 由于录像周期已到达或是空间不足，未发生写设备动作",
    "-874": "Player,ID 错误",
    "-875": "Player,缓冲区需要数据",
    "-876": "Player,缓冲区已满",
    "-877": "Player, input slice缓冲区回调函数没有设置",

    //系统错误 TCPS_ERROR
    "-10002": "系统调用失败",
    "-10003": "系统资源不足/被占用",
    "-10004": "内存不足",
    "-10005": "未分类异常",
    "-10006": "内部程序逻辑错误",
    "-10007": "外部程序逻辑错误",
    "-10008": "不支持的功能",
    "-10009": "功能未实现",
    "-10010": "系统/任务退出中，请求无法完成",
    "-10011": "服务端对象状态不支持，请求被拒绝",
    "-10012": "参数值或格式不正确",
    "-10013": "任务未完成",
    "-10014": "服务已经存在",
    "-10015": "服务不存在",
    "-10016": "会话已经存在",
    "-10017": "会话不存在",
    "-10018": "TCP服务端口已经被使用",
    "-10019": "网络对端关闭/或断线",
    "-10020": "会话被放弃",
    "-10021": "服务退出中",
    "-10022": "连接服务器/设备失败",
    "-10023": "未连接服务/设备",
    "-10024": "接收数据失败",
    "-10025": "发送数据失败",
    "-10026": "无法解析的请求",
    "-10027": "无法解析的应答",
    "-10028": "功能已经启动",
    "-10029": "功能未启动",
    "-10030": "系统忙，请求/调用被忽略",
    "-10031": "非法网络请求协议头",
    "-10032": "巨大网络请求数据，拒绝",
    "-10033": "动作已被请求",
    "-10034": "动作未被请求",
    "-10035": "服务连接中，稍后再试",
    "-10036": "当前上下文中，无效IP地址",
    "-10037": "请求端对象状态不支持，请求被拒绝",
    "-10038": "网络连接超时",
    "-10039": "资源使用中，不能卸载或删除",
    "-10040": "ISCM授权失败",
    "-10041": "对象已存在",
    "-10042": "对象不存在",
    "-10043": "会话处于并行调用模式，只支持并行posting型方法",
    "-10044": "会话处于并行回调模式，只支持并行posting型回调/无法解析的网络数据",
    "-10045": "对象状态不支持，调用被忽略",
    "-10046": "TCP/UDP无有效端口可用",
    "-10047": "检测到线程死锁，调用被忽略",

    // 下面为ISCM特有错误
    "-10048": "消息队列满，投递消息失败",
    "-10049": "消息队列满，发送消息失败",
    "-10050": "接口未定义",
    "-10051": "对端方法不存在或不匹配，请检查网络两端接口版本是否一致",
    "-10052": "对端回调不存在或不匹配，请检查网络两端接口版本是否一致",
    "-10053": "回调未就绪，调用被忽略",
    "-10054": "绑定回调连接失败",
    "-10055": "方法匹配失败，请尝试调用其它方法集",
    "-10056": "ISCM回调未实现，请在派生类中重载实现",
    "-10057": "已经登录",
    "-10058": "未登录",
    "-10059": "ISCM客户端接口对象服务IPP无效",
    "-10060": "ISCM接口对象异步调用队列满",
    "-10061": "没有此用户",
    "-10062": "用户名或密码不正确",
    "-10063": "没有权限访问",
    "-10064": "异步调用缓存内存大小限制",
    "-10065": "会话未连接或正在关闭中",
    "-10066": "此用户已被禁用",
    "-10067": "无效UDP连接key",
    "-10068": "对象名或路径名含有非法字符",
    "-10069": "ISCM流式回调未实现，继续调用普通方式回调",

    // ISCM服务
    "-10100": "已在服务群组中",
    "-10101": "不在服务群组中",
    "-10102": "应用服务IPP冲突",
    "-10103": "启动服务进程失败",
    "-10104": "文件已存在",
    "-10105": "文件不存在",
    "-10106": "文件打开失败",
    "-10107": "文件读失败",
    "-10108": "文件写失败",
    "-10109": "禁止操作此文件/路径名（服务使用中，或未授权路径）",
    "-10110": "创建目录失败",
    "-10111": "订阅回调已发起",
    "-10112": "订阅回调未发起",
    "-10113": "无效ISCM远程任务库",
    "-10114": "无效ISCM远程任务函数",
    "-10115": "ISCM远程任务已存在",
    "-10116": "ISCM远程任务不存在",
    "-10117": "无效ISCM模块",
    "-10118": "ISCM模块已存在",
    "-10119": "ISCM模块不存在",

    //SDK错误
    "-20000": "基本错误边界值",
    "-20001": "不支持",
    "-20002": "功能暂未实现",
    "-20003": "未初始化",
    "-20005": "内存不足",
    "-20004": "打开太多句柄，系统资源不足",
    "-20006": "无效句柄，可能已经关闭",
    "-20007": "无效对象名，没有这个对象",
    "-20008": "参数错误",
    "-20009": "没有文件",
    "-20010": "正在查找文件",
    "-20011": "查找文件时没有更多的文件",
    "-20012": "查找文件时异常",
    "-20013": "文件Url全路径错误",
    "-20014": "元素已存在ESIST",
    "-20015": "对象不存在",
    "-20016": "OSD叠加文本错误",
    "-20017": "OSD类型错误",
    "-20018": "OSD显示错误",
    "-20019": "获取默认端口错误",
    "-20020": "登录失败",
    "-20021": "没有更多查讯数据",
    "-20022": "设置密码错误",
    "-20023": "设置键值不存在",
    "-20024": "对应的键没有值",
    "-20025": "功能未实现",
    "-20026": "获得句柄错误",
    "-20027": "事件重复订阅",
    "-20028": "读到文件末尾",
    "-20029": "句柄不存在",
    "-20030": "对象指针为空",
    "-20031": "第一侦不是I侦",
    "-20032": "不支持的平台",
    "-20033": "缓冲区太小",
    "-20034": "不支持的服务器类型",
    "-20035": "没有权限",
    "-20036": "超过最多画面数",
    "-20037": "磁盘空间不足",
    "-20038": "转码时内存错误（转码库返回）",
    "-20039": "打开编码器错误（转码库返回）",
    "-20040": "未查询到该分段录像",

    "-21001": "句柄错误,获取窗口坐标失败",
    "-21002": "播放缓冲区需要数据",
    "-21003": "播放缓冲区已满",
    "-21004": "输入多个slice方式下回调函数没有设置",
    "-21005": "错误的播放命令",
    "-21006": "错误的播放速度",
    "-21007": "实时播放时不能采用回调方式输入Slice数据",
    "-21008": "资源已经释放",
    "-21009": "播放线程已经停止",
    "-21010": "资源重复打开",
    "-21011": "打开音频设备失败",
    "-21012": "开始采集音频失败",
    "-21013": "停止采集音频失败",
    "-21014": "视频信息获取失败",
    "-21015": "超过最大警告本地缓存",
    "-21016": "小于最小警告本地缓存",

    ///22000以上为日志服务器错误代码
    "-22001": "未定义的错误类型",
    "-22002": "数据查询结果不正确",

    ///PFSSDK错误码
    "40025": "文件结束 桶结束",
    "40026": "没有更多文件",
    "40027": "没有系统错误",
    "-30001": "流化已完成",
    "-30002 ": "功能暂未实现",
    "-30003": "流不存在或没流化",
    "-30004": "不能识别",
    "-30005": "正在转码",
    "-30006": "转码失败",
    "-30007": "正在流化",
    "-30008": "流化失败",
    "-30009": "流数据损坏",
    "-30010": "版本不一致",
    "-30011": "等待流化中",
    "-30012": "对象不可写",
    "-30013": "没有打开",
    "-30014": "写入不完整",
    "-30015": "文件不完整",
    "-30016": "读不完整",
    "-30017": "丢失文件",
    "-30018": "上传流失败，可能是原始文件已经存在或者无法打开",
    "-30019": "流状态不正常",
    "-30020": "流化任务已经被取消",
    "-30021": "函数调用顺序不正确",
    "-30022": "无效的数据",
    "-30023": "集群不存在",
    "-30024": "成员不在集群中",
    "-30025": "成员已经在当前集群中了",
    "-30026": "成员已经在另外一个集群中了",
    "-30027": "更新成员信息失败",
    "-30028": "系统繁忙，请稍后再试",
    "-30029": "引用的模块发生了错误",
    "-30030": "数据校对出错",
    "-30031": "操作对象为空，还未赋值",

    "-40000": "文件或目录或桶不存在",
    "-40001": "IO错误",
    "-40002": "无效的句柄",
    "-40003": "配置信息错误",
    "-40004": "无效的参数",
    "-40005": "创建句柄失败",
    "-40006": "无效的路径",
    "-40007": "文件或目录或桶已存在",
    "-40008 ": "此路径是一个目录",
    "-40009": "对象被写保护",
    "-40010 ": "此路径不是一个目录",
    "-40011": "存储空间已满",
    "-40012": "对象不能创建",
    "-40013": "路径太长",
    "-40014": "无效的名称,文件名不能包含后面任何字符：/ \ : * \" ? < > | ",
    "-40015": "设备IO错误",
    "-40016": "文件已经删除",
    "-40017": "文件太大",
    "-40018": "不能偏移",
    "-40019": "操作被禁止",
    "-40020": "目录非空",
    "-40021": "过期的文件句柄",
    "-40022": "对象没有初始化",
    "-40023": "内存不足",
    "-40024": "打开太多句柄，系统资源不足",
    "-40028 ": "对象正在被使用",
    "-40029 ": "创建cache对象失败",
    "-40030 ": "bfs前缀路径为空",
    "-40031 ": "系统read读取文件失败",
    "-40032 ": "系统pread错误",
    "-40033 ": "未知的文件类型",
    "-40034 ": "服务对象不存在",

    //数据库操作错误码
    "-41001 ": "数据库查询失败",
    "-41002 ": "数据库查询结果不唯一",
    "-41003 ": "更新数据库失败",
    "-41004 ": "数据库删除操作失败",
    "-41005 ": "查询记录中没有对应的键值",
    "-41006 ": "数据库插入数据失败",

    //桶错误从-45001到-46001
    "-45001": "桶索引已经被打开",
    "-45002": "桶操作 new 申请内存失败",
    "-45003": "打开桶索引文件失败",
    "-45004": "索引文件写失败",
    "-45005": "索引文件读失败",
    "-45006": "连接主节点超时",
    "-45007": "key-v内存写入失败",
    "-45008": "写dat文件失败",
    "-45009": "关闭dat文件失败",
    "-45010": "attr文件打开失败",
    "-45011": "attr为空",
    "-45012": "写入文件超时",
    "-45013": "获取zk中桶打开个数失败",
    "-45014": "桶正在被使用",
    "-45015": "桶被损坏(索引文件或打包文件被损坏)",
    "-45016": "未发现桶id",
    "-45017": "桶的主节点未加载完成",
    "-45018": "从桶的主节点获取桶信息失败",
    "-45019": "选举桶主节点失败",
    "-45020": "正在选举桶主节点",
    "-45021": "与主节点所在PFS服务失去连接，正在尝试连接",
    "-45022": "桶内索引文件不存在",
    "-45023": "桶内索引文件或属性文件创建失败",
    "-45024": "非主桶",
    "-45025": "关闭主桶失败",
    "-45026": "打开主桶失败",

    "-50000": "小文件系统初始化失败",
    "-50001": "获取桶Index文件错误",
    "-50002": "监测桶路径错误，路径为/或为空或者此目录下含有其他文件夹",

    // 流化服务返回的错误
    "-80000 ": "参数错误",
    "-80003 ": "创建流化器失败",
    "-80005 ": "打开文件失败",
    "-80006 ": "读取文件失败",
    "-80007": "写入文件失败",
    "-80008": "关闭文件失败",
    "-80009": "移动文件指针失败",
    "-80010": "第三方SDK失败",
    "-80011": "空指针错误",
    "-80012": "创建流化进程失败",
    "-80013": "不支持的文件类型",
    "-80014": "创建线程失败",
    "-80015": "申请内存失败",
    "-80016": "不支持的视频格式",
    "-80017": "不支持的音频格式",
    "-80018": "流化进程崩溃",
    "-80019": "流化进程死掉",

    "-101001": "未分配SS",
    "-101002": "未分配FS",
    "-101003": "未分配PAU",
    "-101004": "设备未分配PAU",
    "-101005": "超出用户流控限制",
    "-101006": "超出平台流控限制",
    "-101007": "非法的JSON字符串",
    "-101008": "与PAU之间通信失败",
    "-101030": "监视器已经被锁定",
    "-101031": "监视器不能被控制",

    "-102001": "会话无效（不存在）",
    "-102002": "FS流断线",
    "-102003": "非节点内部监视器",
    "-102004": "监视器被锁定",

    "-103001": "通道不可用",
    "-103002": "PAU不可用",
    "-103003": "未分配日志服务",
    "-103004": "与PAU服务OPEN失败",
    "-103005": "与PVG服务OPEN失败",
    "-103006": "本地数据库未初始化",
    "-103007": "本地数据库异常",
    "-103008": "通道已在录像",
    "-103009": "未分配PVG",
    "-103010": "喊话通道被占用",
    "-103011": "设备不存在",
    "-103012": "请求的路径已经存在",
    "-103013": "无可用的rofs3s",
    "-103014": "PAU服务无法连接",
    "-103015": "无资源权限(资源屏蔽)",
    "-103016": "键盘巡检已存在",
    "-103017": "键盘宏已存在",
    "-103018": "调用次序错误",
    "-103019": "用户被禁用",
    "-103020": "通道录像被复用",

    ///Adapter自定义错误码
    "-21200": "未播放",
    "-21201": "已播放",
    "-21202": "未下载",
    "-21203": "未在sdk动态链接库中找到对应函数",
    "-21204": "动态加载sdk失败",
    "-21205": "输入参数非法",
    "-21206": "登陆服务器失败",
    "-21207": "功能未实现或不支持",
    "-21208": "内存不足",
    "-21209": "该命名对象不存在",
    "-21210": "对象类型不匹配",
    "-21211": "打开国标实时流失败",
    "-21212": "打开国标录像流失败",
    "-21213": "国标不支持单帧播放录像",
    "-21214": "打开AVI文件失败",
    "-21215": "初始化YUVd对象失败",
    "-21216": "yuv对象的画图对象还未初始化",
    "-21217": "传给yuv画图对象的key值已经被占用",
    "-21218": "初始化yuv画图对象失败",
    "-21219": "非不妨布控模式不支持图形元素操作",
    "-21220": "创建事件失败",
    "-21221": "启动线程失败",
    "-21222": "窗口句柄失效",
    "-21223": "窗口太小,不能画图",
    "-21224": "录像文件长度为0",
    "-21225": "还没有得到第一个关键帧,请稍后再试",
    "-21226": "为uuid开的buffer太小",
    "-21227": "pvg file sdk不支持avi转码",
    "-21228": "查找配置文件失败",
    "-21229": "配置文件内容无效",
    "-21230": "硬解码模式下不支持该功能",
    "-21231": "HW开通道失败",
    "-21232": "需要登陆服务器",
    "-21233": "打开流失败",
    "-21234": "下载录像时间间隔过短",
    "-21235": "接收到错误的应答",
    "-21236": "创建文件失败",
    "-21237": "查询失败",

    "-21238": "不支持的编码方式",
    "-21239": "无编码数据回调",
    "-21240": "mp4文件无法打开",
    "-21241": "写文件失败",
    "-21242": "创建TrackID错误",
    "-21243": "rofs open reader错误",
    "-21244": "编码错误",
    "-21245": "20秒无数据",
    "-21246": "非标准码流，转MP4需要强制转码",

    "-49999": "未知错误",
    "-49998": "分配内存错误",
    "-49997": "非法参数",
    "-49996": "连接服务器失败",
    "-49995": "未连接服务器",
    "-49994": "接收失败",
    "-49993": "发送失败",
    "-49992": "接收到错误的应答",
    "-49991": "网络接收超时",
    "-49990": "网络发送超时",
    "-49989": "XXX不存在",
    "-49988": "XXX不存在",
    "-49987": "功能未实现",
    "-49986": "非法指令",
    "-49985": "系统资源错误",
    "-49984": "XXX已存在",
    "-49983": "处理中、稍后再试",
    "-49982": "抓图失败",
    "-49981": "本次设置无效",
    "-49980": "不支持此功能",
    "-49979": "无权限",
    "-49978": "用户放弃选择",
    "-49977": "请求服务超时",
    "-49976": "设备进程已达到极限、且各进程已达到内存限制",
    "-49975": "创建线程失败",
    "-49974": "重复的工具条类型",
    "-49973": "xml配置文件创建失败",
    "-49972": "工具条饱和",
    "-49971": "工具条图片下载失败",
    "-49970": "工具条图片下载版本回退",
    "-49969": "工具条未找到对应的id",
    "-49968": "无法写",
    //从这里开始 updateserver + 2
    "-49967": "没有找到设置的类型",
    "-49966": "重复设置类型",
    "-49965": "创建文件夹失败",
    "-49964": "拷贝文件夹失败",
    "-49963": "删除文件夹失败",
    "-49962": "开启进程失败",
    "-49961": "拷贝文件失败",
    "-49960": "删除文件失败",
    "-49959": "抽取失败",
    "-49958": "解压失败",
    "-49957": "关闭进程失败",
    "-49956": "读取文件失败",
    "-49955": "sdk 格式或内容非法",
    "-49954": "打开文件失败",
    "-49953": "获取IP地址",
    "-49952": "没有pva_json文件",
    "-49951": "没有目录",
    "-49950": "写文件失败",
    "-49949": "PFS定位失败",
    "-49948": "PFS文件检测超时"
};

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // 右键菜单默认配置

// 工具集

// 事件工具集


var _toolbarRightmenuConf = __webpack_require__(385);

var _tool = __webpack_require__(329);

var _eventUtil = __webpack_require__(330);

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RightMenu = function () {
	function RightMenu() {
		_classCallCheck(this, RightMenu);
	}

	_createClass(RightMenu, [{
		key: 'initializer',
		value: function initializer() {
			this.defaultRightMenuConf = {};
			this.rightMenuMouseOverFlag = false;
		}
		//创建右键菜单

	}, {
		key: 'createRightMenu',
		value: function createRightMenu(rightMenuConf) {
			if (!rightMenuConf.menuList) {
				console.log('传入的参数不正确！');
				return;
			}
			//右键菜单面板
			this.rightMenuEle = document.createElement('ul');
			this.rightMenuEle.className = 'right-menu-box';
			if (rightMenuConf.width) {
				this.rightMenuEle.style.width = rightMenuConf.width;
			}
			this.vOpt.videoC.appendChild(this.rightMenuEle);
			this._createRightMenuList(rightMenuConf.menuList, this.rightMenuEle);

			_eventUtil.EventUtil.addHandler(this.rightMenuEle, 'mousedown', function (event) {
				//阻止冒泡
				event.stopPropagation();
			});

			_eventUtil.EventUtil.addHandler(this.rightMenuEle, 'mouseup', function (event) {
				//阻止冒泡
				event.stopPropagation();
			});
		}
	}, {
		key: 'showOrHideRightMenu',
		value: function showOrHideRightMenu(flag, event) {
			if (this.rightMenuEle) {
				if (flag) {
					this._setRightMenuPosition(event);
				} else {
					this.rightMenuEle.style.display = 'none';
				}
			}
		}
	}, {
		key: 'getRightMenuItemById',
		value: function getRightMenuItemById(id) {
			if (!id) {
				return null;
			}
			return this.defaultRightMenuConf[id] ? this.defaultRightMenuConf[id] : null;
		}

		// 深度优先遍历递归算法查找根节点找到对应id的子节点

	}, {
		key: '_deepTraversal',
		value: function _deepTraversal(node, id) {
			if (node) {
				var childrens = node.children;
				for (var i = 0, len = childrens.length; i < len; i++) {
					if (childrens[i].getAttribute('data-id') === id) {
						this.curOperateNode = childrens[i];
					} else {
						this._deepTraversal(childrens[i], id);
					}
				}
			}
		}
	}, {
		key: '_getRightMenuEleById',
		value: function _getRightMenuEleById(id) {
			if (!id || id && typeof id !== 'string') {
				return null;
			}

			if (this.rightMenuEle) {
				this._deepTraversal(this.rightMenuEle, id);
				return this.curOperateNode;
			}
		}
	}, {
		key: 'setRightMenuItemAttrsById',
		value: function setRightMenuItemAttrsById(id, obj) {
			if (!id || id && typeof id !== 'string' || !obj || obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) != 'object') {
				return null;
			}
			if (this.defaultRightMenuConf[id]) {
				this.defaultRightMenuConf[id] = _tool.Toolkit.deepMerge(this.defaultRightMenuConf[id], obj);
			}

			var itemEle = this._getRightMenuEleById(id);

			if (obj.hasOwnProperty('checked')) {
				if (obj.checked) {
					this._setRightMenuCheckedStyle(itemEle);
				} else {
					this._setRightMenuNotCheckedStyle(itemEle);
				}
			}

			if (obj.hasOwnProperty('gray')) {
				if (obj.gray) {
					this._setRightMenuGrayStyle(itemEle);
				} else {
					this._setRightMenuNotGrayStyle(itemEle);
				}
			}

			if (obj.hasOwnProperty('text')) {
				this.setRightMenuItemText(id, obj.text);
				itemEle.children[1].innerHTML = obj.text;
			}
		}
		// 设置右键菜单checked样式

	}, {
		key: '_setRightMenuCheckedStyle',
		value: function _setRightMenuCheckedStyle(itemEle) {
			itemEle.classList.add('active');
			itemEle.classList.remove('not-allowed');
		}
		// 设置右键菜单非checked样式

	}, {
		key: '_setRightMenuNotCheckedStyle',
		value: function _setRightMenuNotCheckedStyle(itemEle) {
			itemEle.classList.remove('active');
		}
		// 设置右键菜单checked

	}, {
		key: 'setRightMenuItemChecked',
		value: function setRightMenuItemChecked(id, checkFlag) {
			if (!id || id && typeof id !== 'string' || checkFlag !== true && checkFlag !== false) {
				return null;
			}
			if (this.defaultRightMenuConf[id]) {
				this.defaultRightMenuConf[id] = _tool.Toolkit.deepMerge(this.defaultRightMenuConf[id], { checked: checkFlag });
			}
			var itemEle = this._getRightMenuEleById(id);
			if (checkFlag) {
				this._setRightMenuCheckedStyle(itemEle);
			} else {
				this._setRightMenuNotCheckedStyle(itemEle);
			}
		}
		// 设置右键菜单样式置灰

	}, {
		key: '_setRightMenuGrayStyle',
		value: function _setRightMenuGrayStyle(itemEle) {
			itemEle.classList.add('not-allowed');
			itemEle.classList.remove('active');
			itemEle.setAttribute('isShowChildren', false);
		}
		// 设置右键菜单样式非置灰

	}, {
		key: '_setRightMenuNotGrayStyle',
		value: function _setRightMenuNotGrayStyle(itemEle) {
			itemEle.classList.remove('not-allowed');
			itemEle.setAttribute('isShowChildren', true);
		}
		// 设置右键菜单是否置灰

	}, {
		key: 'setRightMenuItemGray',
		value: function setRightMenuItemGray(id, grayFlag) {
			if (!id || id && typeof id !== 'string' || grayFlag !== true && grayFlag !== false) {
				return null;
			}
			if (this.defaultRightMenuConf[id]) {
				this.defaultRightMenuConf[id] = _tool.Toolkit.deepMerge(this.defaultRightMenuConf[id], { gray: grayFlag });
			}
			var itemEle = this._getRightMenuEleById(id);
			if (grayFlag) {
				this._setRightMenuGrayStyle(itemEle);
			} else {
				this._setRightMenuNotGrayStyle(itemEle);
			}
		}
		// 设置右键菜单项文本

	}, {
		key: 'setRightMenuItemText',
		value: function setRightMenuItemText(id, text) {
			if (!id || id && typeof id !== 'string' || text && typeof text !== 'string') {
				return null;
			}
			if (this.defaultRightMenuConf[id]) {
				this.defaultRightMenuConf[id] = _tool.Toolkit.deepMerge(this.defaultRightMenuConf[id], { text: text });
			}
			var itemEle = this._getRightMenuEleById(id);
			itemEle.children[1].innerHTML = text;
		}
	}, {
		key: 'removeRightMenu',
		value: function removeRightMenu() {
			if (this.rightMenuEle) {
				this.rightMenuEle.parentNode && this.rightMenuEle.parentNode.removeChild(this.rightMenuEle);
			}
			this.defaultRightMenuConf = {};
		}
	}, {
		key: '_createRightMenuSubmenu',
		value: function _createRightMenuSubmenu(fatherId, container) {
			var submenu = document.createElement('ul');
			submenu.className = 'right-menu-box ' + 'item_' + fatherId;
			submenu.style.width = this.rightMenuEle.style.width;
			container.appendChild(submenu);
			submenu.style.display = 'none';
			return submenu;
		}
	}, {
		key: '_createRightMenuList',
		value: function _createRightMenuList(lists, domContainer) {
			var _this2 = this;

			var _loop = function _loop(i, len) {
				var item = lists[i],
				    liEle = void 0,
				    oldItem = void 0;
				if (item.name) {
					// 处理右键菜单分割线为name，而不是id，以语义化
					item.id = item.name;
				}
				if (item.id) {
					if (_toolbarRightmenuConf.defaultRightMenuConf[item.id]) {
						var _oldItem = _tool.Toolkit.deepMerge({}, _toolbarRightmenuConf.defaultRightMenuConf[item.id]);
						item = _tool.Toolkit.deepMerge(_oldItem, item);
					} else {
						if (!item.checked) {
							item.checked = false;
						}
						if (!item.gray) {
							item.gray = false;
						}
					}
					item._rightmenu = true;
					_this2.defaultRightMenuConf[item.id] = item;
				}
				if (item.type === 1) {
					liEle = document.createElement('li');
					liEle.className = 'right-menu-line-box';
					domContainer.appendChild(liEle);

					var checkEle = document.createElement('div');
					checkEle.className = 'right-menu-icon-box';
					liEle.appendChild(checkEle);

					var lineEle = document.createElement('div');
					lineEle.className = 'right-menu-line';
					liEle.appendChild(lineEle);
				} else {
					liEle = document.createElement('li');
					liEle.className = 'right-menu-text-box';
					domContainer.appendChild(liEle);
					if (item.id) {
						liEle.setAttribute('data-id', item.id);
					}

					var _checkEle = document.createElement('div');
					_checkEle.className = 'right-menu-icon-box';
					liEle.appendChild(_checkEle);

					var checkIconEle = document.createElement('span');
					checkIconEle.className = 'checked-icon';
					_checkEle.appendChild(checkIconEle);
					if (item.checked) {
						liEle.classList.add('active');
					}

					var textEle = document.createElement('div');
					textEle.className = 'right-menu-text-text';
					liEle.appendChild(textEle);
					textEle.innerText = item.text;

					var _this = _this2,
					    timeHandler = null;
					_eventUtil.EventUtil.addHandler(liEle, 'click', function (event) {
						//阻止冒泡
						event.stopPropagation();
						//clearTimeout(timeHandler);
						_this.videoCMouseOverFlag = false;
						if (item.menuList || item.gray) {
							_this.rightMenuMouseOverFlag = false;
						} else {
							_this.rightMenuMouseOverFlag = true;
						}
						//右键比例需要设置选中状态
						if (item.originId === 'videoRatio') {
							_this._setRightMenuCheckStyle(item);
						} else {
							_this._btnClickFunction(item);
						}
						//timeHandler = setTimeout(function() {
						//默认点击事件(菜单)
						//}, 250);
					});
					_eventUtil.EventUtil.addHandler(liEle, 'dblclick', function (event) {
						//clearTimeout(timeHandler);
						//阻止冒泡
						event.stopPropagation();
					});
					if (item.menuList) {
						liEle.classList.add("sub");
						var arrowEle = document.createElement('div');
						arrowEle.className = 'right-menu-icon-arrow';
						liEle.appendChild(arrowEle);
						var submenuContainer = _this2._createRightMenuSubmenu(item.id, liEle);
						_this2._createRightMenuList(item.menuList, submenuContainer);
						//鼠标移动
						_eventUtil.EventUtil.addHandler(liEle, 'mousemove', function (event) {
							_this.rightMenuMouseOverFlag = true;
						});
						//鼠标移入时，显示对应的二级菜单
						_eventUtil.EventUtil.addHandler(liEle, 'mouseenter', function (event) {
							_this.rightMenuMouseOverFlag = true;
							if (liEle.getAttribute('isShowChildren') === 'false') {
								return;
							}
							if (submenuContainer) {
								submenuContainer.style.display = 'inline-block';
								if (!_this.rightMenuEle || !_this.vOpt.videoC) {
									return;
								}

								submenuContainer.style.top = liEle.offsetTop + "px";
								submenuContainer.style.left = liEle.offsetWidth + "px";
								//最大显示范围     
								var maxWidth = document.documentElement.offsetWidth - submenuContainer.offsetWidth;
								var maxHeight = document.documentElement.offsetHeight - submenuContainer.offsetHeight;
								//防止溢出
								var offsetObj = _eventUtil.EventUtil.getEleToParentDistance(submenuContainer);
								maxWidth < offsetObj.offsetLeft && (submenuContainer.style.left = -submenuContainer.clientWidth + "px");
								maxHeight < offsetObj.offsetTop && (submenuContainer.style.top = -submenuContainer.clientHeight + liEle.offsetTop + liEle.clientHeight + "px");
							}
						});
						//鼠标移出时，隐藏对应的二级菜单
						_eventUtil.EventUtil.addHandler(liEle, 'mouseleave', function (event) {
							if (_this.rightMenuMouseOverFlag) {
								if (submenuContainer) {
									submenuContainer.style.display = 'none';
								}
							}
						});
					} else {
						if (item.gray) {
							/* liEle.classList.add('not-allowed');
       liEle.classList.remove('active'); */
							_this2._setRightMenuGrayStyle(liEle);
						} else {
							//liEle.classList.remove('not-allowed');
							_this2._setRightMenuNotGrayStyle(liEle);
						}
					}
				}
			};

			for (var i = 0, len = lists.length; i < len; i++) {
				_loop(i, len);
			}
		}

		// 获取右键菜单（主菜单，二级菜单的计算不在此处）实际显示的位置

	}, {
		key: '_setRightMenuPosition',
		value: function _setRightMenuPosition(e) {
			if (!this.rightMenuEle) {
				return;
			}
			var event = e || window.event,

			// positionParentOffsetBody = EventUtil.getEleToParentDistance(this.rightMenuEle.parentNode); // videoContainer距离body的距离
			positionParentOffsetBody = this.rightMenuEle.parentNode.getBoundingClientRect(); //videoContainer距离body的距离
			this.rightMenuEle.style.display = "block";
			this.rightMenuEle.style.top = event.clientY - positionParentOffsetBody.top + "px";
			this.rightMenuEle.style.left = event.clientX - positionParentOffsetBody.left + "px";
			//最大显示范围
			var maxWidth = document.documentElement.offsetWidth - this.rightMenuEle.offsetWidth - positionParentOffsetBody.offsetLeft;
			var maxHeight = document.documentElement.offsetHeight - this.rightMenuEle.offsetHeight - positionParentOffsetBody.offsetTop;
			//防止菜单溢出
			this.rightMenuEle.offsetTop > maxHeight && (this.rightMenuEle.style.top = maxHeight + "px");
			this.rightMenuEle.offsetLeft > maxWidth && (this.rightMenuEle.style.left = maxWidth + "px");
		}
		/**
   * 设置右键采单选中样式
   * @param {*} item{"originId":item.originId,value:item.value,id:item.id} 菜单类型
   * originId,父容器id
   * value：当前元素的值
   * id：当前元素的id
   */

	}, {
		key: '_setRightMenuCheckStyle',
		value: function _setRightMenuCheckStyle(item) {
			switch (item.originId) {
				case "videoRatio":
					var domList = document.querySelector('.item_videoRatio').children;
					[].concat(_toConsumableArray(domList)).forEach(function (el) {
						if (el.getAttribute("data-id") === item.id) {
							el.classList.add("active");
						} else {
							el.classList.remove("active");
						}
					});
					//设置画面比例
					this.setRatio(item.value);
					break;
				default:
					break;
			}
		}
	}]);

	return RightMenu;
}();

exports.default = RightMenu;

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // 事件工具集

// 工具集

// NPPlayer的默认事件，包含窗口事件（单击、双击、窗口交换）、焦点改变等


var _eventUtil = __webpack_require__(330);

var _tool = __webpack_require__(329);

var _NPPlayerEvent = __webpack_require__(389);

var _NPPlayerEvent2 = _interopRequireDefault(_NPPlayerEvent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Ptz = function () {
	function Ptz() {
		_classCallCheck(this, Ptz);
	}

	_createClass(Ptz, [{
		key: 'initializer',
		value: function initializer() {
			// 当前窗口的云台鼠标、键盘、滚轮事件是否触发，默认是直接触发的
			//this.isPtzDefault = true;
			// 当前窗口是否会出现云台红箭头，默认不出现
			this.isVideoPtz = false;

			// 焦距倍率，默认为15
			//this.focusRate = 15;
			// 云台范围模式：0表示像素为单位；1表示百分比为单位
			this.ptzRangeMode = 1;
			//上、下的宽度啥
			this.top_bottom = 20;
			//左、右的宽度
			this.left_right = 20;

			// 0右，1右上，2上，3左上，4左，5左下，6下，7右下，8左右自动扫描，9停止。转动速度param[0,15]。速度为0表示停止
			// 10 光圈变化(param>0扩大、param<0缩小、param=0表示停止,范围[-15,15])
			// 11 焦距变大(param>0倍率变大、param<0倍率变小、param=0表示停止, 范围[-15,15])
			// 12 聚焦调整(param>0前调、param<0后调、param=0表示停止, 范围[-15,15])
			// 13 转到指定预置位
			// 14 设置当前位置为一个预置位
			// 15 接通辅助设备开关(param=1 表示开,param=0 表示关,其它值无效)
			// 16 清洗
			// 17 接通雨刷开关
			// 18 接通灯光电源
			// 19 电源
			this.ptzDirection = -1;
			this._bPtzing = false; // 防止过多调用停止云台
		}
	}, {
		key: 'EnablePTZ',
		value: function EnablePTZ(flag) {
			this.vOpt.enablePtzMotion = flag;
		}

		// 设置指定窗口云台控制功能的开启或关闭(红箭头)

	}, {
		key: 'SetWindowPTZ',
		value: function SetWindowPTZ(flag) {
			this.isVideoPtz = flag;
			return true;
		}
	}, {
		key: 'isWindowPTZ',
		value: function isWindowPTZ() {
			return this.isVideoPtz;
		}
	}, {
		key: 'SetWndPtzSpeed',
		value: function SetWndPtzSpeed(ptzSpeed) {
			this.vOpt.windowPtzSpeed = ptzSpeed;
		}

		// 设置云台红色箭头的显示范围
		// mode 整数，0表示像素为单位；1表示百分比为单位
		// top_bottom  整数，到窗口顶部和底部的距离
		// left_right  整数，到窗口左边和右边的距离
		// 像素有效值>0 , 百分比有效值[1-49]

	}, {
		key: 'setPTZRange',
		value: function setPTZRange(mode, top_bottom, left_right) {
			// 若这三个参数不是正整数，或者mode不等于0或者1，则参数错误
			if (_tool.Toolkit.isPositiveInteger(mode) && (mode === 0 || mode === 1) && _tool.Toolkit.isPositiveInteger(top_bottom) && _tool.Toolkit.isPositiveInteger(left_right)) {
				if (mode === 0) {
					this.vOpt.ptzRangeMode = mode;
					this.vOpt.top_bottom = top_bottom;
					this.vOpt.left_right = left_right;
				} else if (mode === 1 && top_bottom <= 49 && left_right <= 49) {
					this.vOpt.ptzRangeMode = mode;
					this.vOpt.top_bottom = top_bottom;
					this.vOpt.left_right = left_right;
				}
			}
		}

		//是否在云台Ptz区域内

	}, {
		key: 'isInPtzRange',
		value: function isInPtzRange(x, y) {
			// 若没有窗口云台，则说明肯定不在ptz区域内
			if (!this.isVideoPtz) {
				return false;
			}
			var _ptzPositionFlag = this.ptzPositionFlag(x, y);
			if (_ptzPositionFlag === -1 || _ptzPositionFlag === 0) {
				return false;
			} else {
				return true;
			}
		}
		// 根据 x,y 判断是否在云台ptz区域内，若在，在哪个区域
		// -1表示不在，整数表示在

	}, {
		key: 'ptzPositionFlag',
		value: function ptzPositionFlag(x, y) {
			/* let w = this.vOpt.videoEle.offsetWidth,
   	h = this.vOpt.videoEle.offsetHeight, */
			var w = this.vOpt.videoC.offsetWidth,
			    h = this.vOpt.videoC.offsetHeight,
			    top_bottom_px = void 0,
			    left_right_px = void 0,

			//x, y 在ptz区域的位置，大于0表示在区域内，小于0表示不在
			positionFlag = -1;
			if (x + 16 >= w || y + 16 >= h) {
				//防止图片越界显示到其他窗口上
				return 0;
			}
			//根据范围模式算出范围
			if (this.vOpt.ptzRangeMode === 0) {
				top_bottom_px = this.vOpt.top_bottom;
				left_right_px = this.vOpt.left_right;
			} else if (this.vOpt.ptzRangeMode === 1) {
				top_bottom_px = this.vOpt.top_bottom * h / 100;
				left_right_px = this.vOpt.left_right * w / 100;
			}
			if (x <= left_right_px) {
				// 左边
				if (y <= top_bottom_px && y >= 0) {
					//左上角
					positionFlag = 1;
				} else if (y > h - top_bottom_px) {
					//左下角
					positionFlag = 7;
				} else {
					//左中
					positionFlag = 8;
				}
			} else if (x > w - left_right_px) {
				// 右边
				if (y <= top_bottom_px && y >= 0) {
					//右上角
					positionFlag = 3;
				} else if (y > h - top_bottom_px) {
					//右下角
					positionFlag = 5;
				} else {
					//右中
					positionFlag = 4;
				}
			} else {
				if (y <= top_bottom_px && y >= 0) {
					//中上
					positionFlag = 2;
				} else if (y > h - top_bottom_px) {
					//中下
					positionFlag = 6;
				} else {
					positionFlag = 0;
				}
			}

			//console.log("ptzPositionFlag",positionFlag, top_bottom_px, left_right_px,  x, y);
			return positionFlag;
		}
	}, {
		key: 'isShowPtzRedArrow',
		value: function isShowPtzRedArrow(flag, event) {
			if (!this.isVideoPtz) {
				return;
			}
			if (!flag) {
				this._changeVideoCursor();
				this.ptzDirection = -1;
				return;
			}
			var xy = this._getVidoContainerEventInfo(event),
			    x = xy.x,
			    y = xy.y;

			var _positionFlag = this.ptzPositionFlag(x, y);
			switch (_positionFlag) {
				case 0:
					//正中间
					this._changeVideoCursor();
					this.ptzDirection = -1;
					break;
				case 1:
					//左上角
					this._changeVideoCursor('ptz-leftup');
					this.ptzDirection = 3;
					break;
				case 2:
					//中上
					this._changeVideoCursor('ptz-up');
					this.ptzDirection = 2;
					break;
				case 3:
					//右上角
					this._changeVideoCursor('ptz-rightup');
					this.ptzDirection = 1;
					break;
				case 4:
					//右中
					this._changeVideoCursor('ptz-right');
					this.ptzDirection = 0;
					break;
				case 5:
					//右下角
					this._changeVideoCursor('ptz-rightdown');
					this.ptzDirection = 7;
					break;
				case 6:
					//中下
					this._changeVideoCursor('ptz-down');
					this.ptzDirection = 6;
					break;
				case 7:
					//左下角
					this._changeVideoCursor('ptz-leftdown');
					this.ptzDirection = 5;
					break;
				case 8:
					//左中
					this._changeVideoCursor('ptz-left');
					this.ptzDirection = 4;
					break;
				default:
					break;
			}
		}
	}, {
		key: '_changeVideoCursor',
		value: function _changeVideoCursor(cursorClass) {
			this.vOpt.videoC.classList.remove('ptz-left', 'ptz-leftup', 'ptz-up', 'ptz-leftdown', 'ptz-rightup', 'ptz-right', 'ptz-rightdown', 'ptz-down');
			if (cursorClass) {
				this.vOpt.videoC.classList.add(cursorClass);
			}
		}
		// 获取鼠标距离h5vp-video-container的距离

	}, {
		key: '_getVidoContainerEventInfo',
		value: function _getVidoContainerEventInfo(event) {
			event = _eventUtil.EventUtil.getEvent(event);
			var curTarget = event.target || event.srcElement,
			    distanceObj = _eventUtil.EventUtil.getEleToParentDistance(curTarget, 'h5vp-video-container'),
			    resultObj = {
				x: event.offsetX + distanceObj.offsetLeft,
				y: event.offsetY + distanceObj.offsetTop
			};

			return resultObj;
		}
	}, {
		key: 'mouseEvent',
		value: function mouseEvent(flag) {
			var _this = this,
			    _keyDownFlag = false,
			    _ptzSpeed = void 0;
			if (!flag) {
				// document.onkeydown = null;
				// document.onkeyup = null;
				// document.removeEventListener('DOMMouseScroll', scrollFunc, false);
				// window.onmousewheel = document.onmousewheel = null;
				return;
			}
			_eventUtil.EventUtil.addHandler(document, "keydown", function (keyEvent) {
				var e = _eventUtil.EventUtil.getEvent(keyEvent),
				    keyCode = e.keyCode || e.which || e.charCode;
				// 38=上键, 37=左键, 40=下键, 39=右键; 控制云台转动
				// Insert 45,  Delete 46, 控制光圈
				// Home 36,  End 35, 控制聚焦
				// Page Up 33,  Page Down 34, 控制焦距
				if (keyCode !== 37 && keyCode !== 38 && keyCode !== 39 && keyCode !== 40 && keyCode !== 33 && keyCode !== 34 && keyCode !== 35 && keyCode !== 36 && keyCode !== 45 && keyCode !== 46) {
					return;
				}
				_keyDownFlag = true;
				_ptzSpeed = _this.vOpt.windowPtzSpeed;
				switch (keyCode) {
					case 33:
						//Page Up
						_this.ptzDirection = 11;
						break;
					case 34:
						//Page Down
						_this.ptzDirection = 11;
						_ptzSpeed = 0 - _ptzSpeed;
						break;
					case 35:
						//  End 35
						_this.ptzDirection = 12;
						_ptzSpeed = 0 - _ptzSpeed;
						break;
					case 36:
						// Home 36
						_this.ptzDirection = 12;
						break;
					case 37:
						// 37=左键
						_this.ptzDirection = 4;
						break;
					case 38:
						// 38=上键
						_this.ptzDirection = 2;
						break;
					case 39:
						// 39=右键
						_this.ptzDirection = 0;
						break;
					case 40:
						// 40=下键
						_this.ptzDirection = 6;
						break;
					case 45:
						//Insert 45
						_this.ptzDirection = 10;
						break;
					case 46:
						//Delete 46
						_this.ptzDirection = 10;
						_ptzSpeed = 0 - _ptzSpeed;
						break;
					default:
						break;
				}
				_this._ptzControlByWin(_this.ptzDirection, _ptzSpeed, 1, keyCode);
			});
			document.onkeyup = function (keyEvent) {
				var e = _eventUtil.EventUtil.getEvent(keyEvent),
				    keyCode = e.keyCode || e.which || e.charCode;
				if (_keyDownFlag) {
					_this._ptzControlByWin(_this.ptzDirection, 0, 2, keyCode);
					_keyDownFlag = false;
				}
			};

			/*监听鼠标滚动事件
          * 1.火狐的是：DOMMouseScroll;
          * 2.IE/Opera/Chrome：直接添加事件*/
			if (document.addEventListener) {
				document.addEventListener('DOMMouseScroll', scrollFunc, false);
			}
			window.onmousewheel = document.onmousewheel = scrollFunc; //IE/Opera/Chrome
			function scrollFunc(ev) {
				ev = ev || window.event;
				// detail与wheelDelta只各取两个 值，detail只取±3，wheelDelta只取±150，其中正数表示为向下，负数表示向上
				if (ev.wheelDelta) {
					//IE/Opera/Chrome
					clearTimeout(_this.mousewheelTimer);
					if (ev.wheelDelta > 0) {
						_this._ptzControlByWin(11, _this.vOpt.windowPtzSpeed, 5);
						stopPtzFocus();
					} else {
						_this._ptzControlByWin(11, 0 - _this.vOpt.windowPtzSpeed, 6);
						stopPtzFocus();
					}
				} else if (ev.detail) {
					//Firefox
					clearTimeout(_this.mousewheelTimer);
					if (ev.detail > 0) {
						_this._ptzControlByWin(11, _this.vOpt.windowPtzSpeed, 5);
						stopPtzFocus();
					} else {
						_this._ptzControlByWin(11, 0 - _this.vOpt.windowPtzSpeed, 6);
						stopPtzFocus();
					}
				}
			}
			function stopPtzFocus() {
				_this.mousewheelTimer = setTimeout(function () {
					_this._ptzControlByWin(11, 0);
				}, 500);
			}
		}

		//窗口云台操作

	}, {
		key: '_ptzControlByWin',
		value: function _ptzControlByWin(cmd, param, nTrigger, keyCode) {
			if (this.isVideoPtz) {

				if (this._bPtzing && param == 0 || param != 0) {
					this._emitter.emit(_NPPlayerEvent2.default.OnPTZControlEvent, this.vOpt.index, cmd, param, this.vOpt.enablePtzMotion, nTrigger, keyCode);

					if (this.vOpt.enablePtzMotion) {
						this.ptzControl(cmd, param);
					}
					if (param != 0) {
						this._bPtzing = true;
					} else {
						this._bPtzing = false;
					}
					//console.log('_ptzControlByWin('+cmd+','+param+')');
				}
			}
		}
	}, {
		key: 'ptzControl',
		value: function ptzControl(cmd, param) {
			if (this._videoplayer) {
				return this._videoplayer.ptzControl(cmd, param);
			}
			return false;
		}
	}, {
		key: 'ptzControl3d',
		value: function ptzControl3d(direct, x, y, w, h) {
			//console.log("ptzControl3d("+direct+", "+x+"+, "+y+", "+w+", "+h+")");
			if (this._videoplayer) {
				return this._videoplayer.ptzControl3D(direct, x, y, w, h);
			}
			return false;
		}
	}, {
		key: 'ptzLock',
		value: function ptzLock(time) {
			if (this._videoplayer) {
				return this._videoplayer.ptzLock(time);
			}
			return false;
		}
	}]);

	return Ptz;
}();

exports.default = Ptz;

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var NPPlayerEvents = {
    //焦点改变
    OnFocusChange: 'OnFocusChange',
    //窗口被单击
    OnWndClick: 'OnWndClick',
    //窗口被双击
    OnWndDClik: 'OnWndDClik',
    //窗口发生交换
    OnSwitchWindow: 'OnSwitchWindow',
    //因设置不交换而未执行的窗口交换
    OnUnexecutedSwitchWindow: 'OnUnexecutedSwitchWindow',

    // 全屏
    OnFullScreen: 'OnFullScreen',
    // 退出全屏
    OnExitFullScreen: 'OnExitFullScreen',

    //布局发生改变
    OnLayoutChange: 'OnLayoutChange',
    OnSizeChange: 'OnSizeChange',

    // 云台通知事件
    OnPTZControlEvent: 'OnPTZControlEvent',
    OnPTZControl3DEvent: 'OnPTZControl3DEvent',

    //鼠标移入(单个窗口)
    OnMouseEnter: 'OnMouseEnter',
    //鼠标移出(单个窗口)
    OnMouseLeave: 'OnMouseLeave',
    //鼠标按下(单个窗口)
    OnMouseDown: 'OnMouseDown',
    //鼠标弹起(单个窗口)
    OnMouseUp: 'OnMouseUp',
    //鼠标移动(单个窗口)
    OnMouseMove: 'OnMouseMove',

    OnVideoClose: 'OnVideoClose',
    OnVideoStart: "OnVideoStart",
    OnTimeaxisLevel: "OnTimeaxisLevel",

    OnDrawingObject: 'OnDrawingObject',

    OnZoomStatusChange: 'OnZoomStatusChange'
    // OnSizeChanged
    // OnMouseWheelEvent
    // onExpandScreen
};

exports.default = NPPlayerEvents;

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // 工具集


var _tool = __webpack_require__(329);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WaterMark = function () {
	function WaterMark() {
		_classCallCheck(this, WaterMark);
	}

	_createClass(WaterMark, [{
		key: "initializer",
		value: function initializer() {
			this.watermkArr = [];
			this._watermkC = null;
		}
		// 当视频双击根据视频窗口的大小重置水印的位置

	}, {
		key: "resetWaterMarkPos",
		value: function resetWaterMarkPos(videoCLastWidth, videoCLastHeight, videoCCurWidth, videoCCurHeight) {
			if (videoCLastWidth === videoCCurWidth && videoCLastHeight === videoCCurHeight) {
				return;
			}

			videoCLastWidth = parseInt(videoCLastWidth);
			videoCLastHeight = parseInt(videoCLastHeight);
			videoCCurWidth = parseInt(videoCCurWidth);
			videoCCurHeight = parseInt(videoCCurHeight);
			var waterEle = null,
			    waterEleLeft = void 0,
			    waterEleTop = void 0;
			for (var i = 0, len = this.watermkArr.length; i < len; i++) {
				waterEle = document.getElementById(this.watermkArr[i].eleid);
				waterEleLeft = videoCCurWidth / videoCLastWidth * parseInt(waterEle.style.left) + "px";
				waterEleTop = videoCCurHeight / videoCLastHeight * parseInt(waterEle.style.top) + "px";
				if (!this.watermkArr[i].moving || this.watermkArr[i].moving === "static") {
					if (!this.watermkArr[i].left) {
						waterEleLeft = (videoCCurWidth - waterEle.clientWidth) / 2 + "px";
					} else if (this.watermkArr[i].left.indexOf('%') > 0) {
						waterEleLeft = this.watermkArr[i].left;
					}
					if (!this.watermkArr[i].top) {
						waterEleTop = (videoCCurHeight - waterEle.clientHeight) / 2 + "px";
					} else if (this.watermkArr[i].top.indexOf('%') > 0) {
						waterEleTop = this.watermkArr[i].top;
					}
				}

				waterEle.style.left = waterEleLeft;
				waterEle.style.top = waterEleTop;
			}
		}
		// 改变水印

	}, {
		key: "changeWaterMarkById",
		value: function changeWaterMarkById(id, attrObj) {
			var ele = null;
			for (var i = 0, len = this.watermkArr.length; i < len; i++) {
				if (id === this.watermkArr[i].id) {
					ele = document.getElementById(this.watermkArr[i].eleid);
					if (!ele) {
						return;
					}
					for (var item in attrObj) {
						if (item === "text") {
							ele.innerHTML = attrObj[item];
						} else if (item === "icon") {
							ele.style.backgroundImage = 'url(' + attrObj[item] + ')';
						} else {
							ele.style[item] = attrObj[item];
						}
						this.watermkArr[i][item] = attrObj[item];
					}
					break;
				}
			}
		}
		/* changeWaterMarkById(id, attrObj) {
  	this.delWaterMarkById(id);
  	this.addWaterMark([attrObj]);
  } */
		// 删除水印

	}, {
		key: "delWaterMarkById",
		value: function delWaterMarkById(id) {
			if (!this._watermkC) {
				return;
			}

			if (!id) {
				this.delAllWaterMark();
				return;
			}
			// 删除数组中保存的水印数据
			for (var i = 0, len = this.watermkArr.length; i < len; i++) {
				if (id === this.watermkArr[i].id) {
					// 删除DOM元素
					var rmEle = document.getElementById(this.watermkArr[i].eleid);
					rmEle && rmEle.parentNode && rmEle.parentNode.removeChild(rmEle);
					if (this.watermkArr[i].watermkInterval) {
						clearInterval(this.watermkArr[i].watermkInterval);
					}
					this.watermkArr.splice(i, 1);
					break;
				}
			}
			if (this.watermkArr.length == 0 && this._watermkC) {
				this._watermkC.parentNode.removeChild(this._watermkC);
				this._watermkC = null;
			}
			//console.log("this.watermkArr:",this.watermkArr);
		}
		// 刪除所有水印

	}, {
		key: "delAllWaterMark",
		value: function delAllWaterMark() {
			// 删除DOM元素
			for (var i = 0, len = this.watermkArr.length; i < len; i++) {
				var rmEle = document.getElementById(this.watermkArr[i].eleid);
				rmEle && rmEle.parentNode && rmEle.parentNode.removeChild(rmEle);
				if (this.watermkArr[i].watermkInterval) {
					clearInterval(this.watermkArr[i].watermkInterval);
				}
			}
			// 清空数组
			this.watermkArr.splice(0, this.watermkArr.length);
			if (this._watermkC) {
				this._watermkC.parentNode.removeChild(this._watermkC);
				this._watermkC = null;
			}
		}
	}, {
		key: "getWaterMarkById",
		value: function getWaterMarkById(id) {
			if (id) {
				var obj = null;
				for (var i = 0, len = this.watermkArr.length; i < len; i++) {
					if (id === this.watermkArr[i].id) {
						obj = _tool.Toolkit.deepMerge({}, this.watermkArr[i]);
					}
				}
				return obj;
			}
			return _tool.Toolkit.deepMerge([], this.watermkArr);
		}
		// 添加水印

	}, {
		key: "addWaterMark",
		value: function addWaterMark(arr) {
			var _this = this;
			if (arr instanceof Array) {
				arr.forEach(function (item) {
					item.watermkDiv = null;
					item.watermkInfo = null;
					item.watermkInterval = null;
					_this._addSingleWatermark(item);
				});
			} else {
				arr.watermkDiv = null;
				arr.watermkInfo = null;
				arr.watermkInterval = null;
				this._addSingleWatermark(arr);
			}
			//console.log("this.watermkArr:",this.watermkArr);
		}

		// 生成水印top随机数

	}, {
		key: "_generateWatermkRandomTop",
		value: function _generateWatermkRandomTop(info) {
			var videoC = this.vOpt.videoC,
			    top = Math.random() * videoC.offsetHeight,
			    topMax = videoC.offsetHeight - info.watermkDiv.clientHeight;

			info.watermkDiv.style.top = (top > topMax ? topMax : top) + 'px';
		}
		// 生成水印left随机数

	}, {
		key: "_generateWatermkRandomLeft",
		value: function _generateWatermkRandomLeft(info) {
			var videoC = this.vOpt.videoC,
			    left = Math.random() * videoC.offsetWidth,
			    leftMax = videoC.offsetWidth - info.watermkDiv.clientWidth;

			info.watermkDiv.style.left = (left > leftMax ? leftMax : left) + 'px';
		}
		// 水印循环、跳跃定时器方法

	}, {
		key: "_watermkMoving",
		value: function _watermkMoving(info) {
			// 控制定时器是否继续执行（若在this.watermkArr中没有了此水印，则代表水印已经删除，故停止定时器的执行）
			var isExeFlag = false;
			for (var i = 0, len = this.watermkArr.length; i < len; i++) {
				if (info.id === this.watermkArr[i].id) {
					isExeFlag = true;
				}
			}
			if (!isExeFlag) {
				clearInterval(info.watermkInterval);
				return;
			}
			//console.log("---enter _watermkMoving, info:",info);
			// 水印循环、跳跃主体
			var videoC = this.vOpt.videoC;
			if (info.watermkDiv) {
				if (info.moving.toLowerCase() === 'cycle') {
					info.watermkDiv.style.left = parseInt(info.watermkDiv.style.left) - parseInt(info.step) + 'px';
					if (parseInt(info.watermkDiv.style.left) < 0) {
						info.watermkDiv.style.left = videoC.offsetWidth - info.watermkDiv.clientWidth + 'px';
						this._generateWatermkRandomTop(info);
					} else if (parseInt(info.watermkDiv.style.left) > videoC.offsetWidth - info.watermkDiv.clientWidth) {
						info.watermkDiv.style.left = videoC.offsetWidth - info.watermkDiv.clientWidth + 'px';
						this._generateWatermkRandomTop(info);
					}
				} else if (info.moving.toLowerCase() != 'static') {
					this._generateWatermkRandomTop(info);
					this._generateWatermkRandomLeft(info);
				}
			}
		}
		// 添加单个水印

	}, {
		key: "_addSingleWatermark",
		value: function _addSingleWatermark(obj) {
			if (!this._watermkC) {
				this._watermkC = document.createElement("div");
				this._watermkC.className = "watermk-container";
				this._watermkC.draggable = true;
				if (this._drawVMCvsC) {
					_tool.Toolkit.insertAfter(this._watermkC, this._drawVMCvsC);
				} else {
					_tool.Toolkit.insertAfter(this._watermkC, this.vOpt.videoEle);
				}
				//this.vOpt.videoC.insertBefore(this._watermkC, this.vOpt.videoEle);
			}
			var info = Object.assign({ moving: 'static' }, obj),
			    videoC = this.vOpt.videoC;
			info.eleid = info.id + _tool.Toolkit.getUuid();
			if (!info.watermkDiv) {
				info.watermkDiv = document.createElement('div');
				info.watermkDiv.setAttribute("id", info.eleid);
				info.watermkDiv.className = 'player-watermk';
				this._watermkC.appendChild(info.watermkDiv);
				//this.vOpt.videoC.insertBefore(info.watermkDiv, this.vOpt.videoEle);
			}
			// 当是循环水印时，默认跳跃步骤为1
			if (info.moving.toLowerCase() === 'cycle') {
				info.step = "1";
			}
			// 图片
			if (info.icon) {
				info.watermkDiv.style.backgroundImage = 'url(' + info.icon + ')';
				info.watermkDiv.style.width = info.width;
				info.watermkDiv.style.height = info.height;
			}
			// 文字
			if (info.text) {
				info.watermkDiv.innerHTML = info.text;
				info.watermkDiv.style.fontSize = info.fontSize;
				info.watermkDiv.style.fontWeight = info.fontWeight;
				info.watermkDiv.style.color = info.color;
			}
			info.watermkDiv.style.opacity = info.opacity;
			info.watermkDiv.style.webkitTransform = info.transform;
			info.watermkDiv.style.msTransform = info.transform;
			info.watermkDiv.style.transform = info.transform;
			info.watermkDiv.style.marginTop = info.marginTop;
			if (info.watermkInterval) {
				window.clearInterval(info.watermkInterval);
				info.watermkInterval = null;
			}
			if (info.moving.toLowerCase() === 'static') {
				info.watermkDiv.style.top = info.top ? info.top : (videoC.offsetHeight - info.watermkDiv.clientHeight) / 2 + 'px';
				info.watermkDiv.style.left = info.left ? info.left : (videoC.offsetWidth - info.watermkDiv.clientWidth) / 2 + 'px';
			} else {
				var interval = 20;
				this._generateWatermkRandomTop(info);
				if (info.moving && info.moving.toLowerCase() === 'cycle') {
					info.watermkDiv.style.left = videoC.offsetWidth - info.watermkDiv.clientWidth + 'px';
				} else {
					this._generateWatermkRandomLeft(info);
					interval = 1000;
				}

				info.watermkInterval = window.setInterval(this._watermkMoving.bind(this, info), interval);
			}
			this.watermkArr.push(info);
		}
	}]);

	return WaterMark;
}();

exports.default = WaterMark;

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // 工具集


var _tool = __webpack_require__(329);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RealTimeVideoOverlay = function () {
	function RealTimeVideoOverlay() {
		_classCallCheck(this, RealTimeVideoOverlay);
	}

	_createClass(RealTimeVideoOverlay, [{
		key: "initializer",
		value: function initializer() {
			this.VMRealVideoOverlayFlag = false; // 威目实时视频叠加flag
			this._drawVMCvsC = null;
			this.drawVMCanvas = null; // 威目实时视频绘制canvas
			this._objectinfoBuffer = []; // websocket推上来的数据信息
			this.RTVOTimeHandler = null;
			this.lastPts = -1;
			this.timer = null;
			this.drawVMCanvasSize = { left: 0, top: 0, width: 0, height: 0 };
		}
	}, {
		key: "RTVOInit",
		value: function RTVOInit(obj) {
			/* obj.objects[0].attributes =[
   	{
   		"confidence": 0.9999418258666992,
   		"id": 3,
   		"key": "上身纹理",
   		"name": "纯色上身",
   		"value": "纯色上身",
   		"valuetype": 1
   	},
   	{
   		"confidence": 0.9999467134475708,
   		"id": 3,
   		"key": "上身颜色",
   		"name": "黑色上身",
   		"value": "黑色上身",
   		"valuetype": 1
   	},
   	{
   		"confidence": 0.9999668598175049,
   		"id": 3,
   		"key": "下身款式",
   		"name": "长裤",
   		"value": "长裤",
   		"valuetype": 1
   	},
   	{
   		"confidence": 0.9994192123413086,
   		"id": 3,
   		"key": "下身颜色",
   		"name": "黑色下身",
   		"value": "黑色下身",
   		"valuetype": 1
   	},
   	{
   		"confidence": 0.7320833802223206,
   		"id": 3,
   		"key": "年龄",
   		"name": "30到50岁",
   		"value": "30到50岁",
   		"valuetype": 1
   	},
   	{
   		"confidence": 0.9971515536308289,
   		"id": 2,
   		"key": "性别",
   		"name": "男",
   		"value": "男",
   		"valuetype": 1
   	},
   	{
   		"confidence": 0.9992857575416565,
   		"id": 1,
   		"key": "民族",
   		"name": "汉族",
   		"value": "汉族",
   		"valuetype": 1
   	}]; */
			this._objectinfoBuffer.push(obj);
			// 威目实时视频叠加
			if (this.VMRealVideoOverlayFlag === false) {
				if (this.drawVMCanvas) {
					this.setVMCanvasPosition(this.drawVMCanvasSize);
				}
				window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
				this.RTVOTimeHandler = window.requestAnimationFrame(this._VMRealTimeVideoOverlayEx.bind(this));
				this.VMRealVideoOverlayFlag = true;
				if (this.timer == null) {
					//定期清理，方式一直处于隐藏状态时出现内存持续增长
					this.timer = window.setInterval(this._VMRealTimeVideoOverlay.bind(this), 1000);
				}
			}
		}
		// 停止实时视频叠加

	}, {
		key: "stopRTVO",
		value: function stopRTVO() {
			if (this.VMRealVideoOverlayFlag) {
				window.cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame || window.webkitCancelRequestAnimationFrame;
				window.cancelAnimationFrame(this.RTVOTimeHandler);
				if (this.drawVMCanvas) {
					this.drawVMCanvas.getContext("2d").clearRect(0, 0, this.drawVMCanvas.width, this.drawVMCanvas.height);
				}
				this._objectinfoBuffer = [];
				if (this.timer) {
					window.clearInterval(this.timer);
					this.timer = null;
				}
				this.VMRealVideoOverlayFlag = false;
			}
		}
		// 威目实时视频叠加

	}, {
		key: "_VMRealTimeVideoOverlay",
		value: function _VMRealTimeVideoOverlay() {
			if (this._objectinfoBuffer.length) {
				while (true && this._objectinfoBuffer.length) {
					//实时流不存在问题
					var curTime = this._videoplayer.currentTime * 1000,
					    objectInfo = this._objectinfoBuffer.shift(),
					    // 一帧的图像信息
					tmeDif = curTime - objectInfo.pts;

					this.lastPts = objectInfo.pts;

					if (tmeDif > 50) {// 50毫秒的误差
						//已经过期

					} else if (tmeDif < -20) {
						//尚未到
						this._objectinfoBuffer.unshift(objectInfo);
						break;
					} else {
						//绘制该帧 --------在绘制下一帧的时候目标应该消失
						this._drawVMFrameCanvas(objectInfo);
						break;
					}
				}
			} else {
				var _curTime = this._videoplayer.currentTime * 1000,
				    _tmeDif = _curTime - this.lastPts;
				if (this.lastPts !== -1 && _tmeDif > 100) {
					// 清除画布
					this.drawVMCanvas.getContext("2d").clearRect(0, 0, this.drawVMCanvas.width, this.drawVMCanvas.height);
					this.lastPts = -1;
				}
			}
		}
	}, {
		key: "_VMRealTimeVideoOverlayEx",
		value: function _VMRealTimeVideoOverlayEx() {
			this._VMRealTimeVideoOverlay();
			this.RTVOTimeHandler = window.requestAnimationFrame(this._VMRealTimeVideoOverlayEx.bind(this));
		}
		// 设置威目实时视频canvas的位置，用于设置画面比例时，调整canvas的位置大小和视频画面保持一致 obj:{left: 50px; top: 100px;}

	}, {
		key: "setVMCanvasPosition",
		value: function setVMCanvasPosition(obj) {
			if (this.drawVMCanvas) {
				this.drawVMCanvas.style.left = obj.left + "px";
				this.drawVMCanvas.style.top = obj.top + "px";
				this.drawVMCanvas.style.width = obj.width + "px";
				this.drawVMCanvas.style.height = obj.height + "px";
				this.drawVMCanvas.width = obj.width;
				this.drawVMCanvas.height = obj.height;
			}
			this.drawVMCanvasSize = _tool.Toolkit.deepMerge({}, obj);
		}
	}, {
		key: "enableShowAttribute",
		value: function enableShowAttribute(flag) {
			this.vOpt.vmShowAttribute = flag;
		}
		// 获取rgba的色值

	}, {
		key: "_getRGBAColor",
		value: function _getRGBAColor(color) {
			if (color.indexOf("#") !== -1) {
				color = _tool.Toolkit.hexToRgb(color);
			}
			return _tool.Toolkit.rgbAndOpacityToRgba(color, 0.5);
		}
		// 绘制威目实时视频一帧的canvas

	}, {
		key: "_drawVMFrameCanvas",
		value: function _drawVMFrameCanvas(objectInfo) {
			if (!this.drawVMCanvas) {
				if (!this._drawVMCvsC) {
					this._drawVMCvsC = document.createElement("div");
					this._drawVMCvsC.className = "drawvm-container";
					this._drawVMCvsC.draggable = true;
					_tool.Toolkit.insertAfter(this._drawVMCvsC, this.vOpt.videoEle);
				}
				this.drawVMCanvas = document.createElement('canvas');
				this.drawVMCanvas.className = "VMCanvas";
				this.drawVMCanvas.draggable = true;
				//this.vOpt.videoC.insertBefore(this.drawVMCanvas, this.vOpt.videoC.getElementsByTagName("video")[0]);
				//Toolkit.insertAfter(this.drawVMCanvas, this.vOpt.videoEle);
				this._drawVMCvsC.appendChild(this.drawVMCanvas);
				this.setVMCanvasPosition(this.drawVMCanvasSize);
			}
			var ctx = this.drawVMCanvas.getContext("2d"),
			    singleGrap = null,
			    rect = null,
			    type = -1,
			    strokeColor = "",
			    title = "",
			    attrs = [];
			// 清除画布
			ctx.clearRect(0, 0, this.drawVMCanvas.width, this.drawVMCanvas.height);
			for (var i = 0, infoLen = objectInfo.objects.length; i < infoLen; i++) {
				singleGrap = objectInfo.objects[i];
				type = singleGrap.type;
				title = this.vOpt.VMTitleObj[type], rect = singleGrap.rect;
				rect.left = this._calHorSizeByCanvasResolution(rect.left);
				rect.right = this._calHorSizeByCanvasResolution(rect.right);
				rect.top = this._calVerByCanvasResolution(rect.top);
				rect.bottom = this._calVerByCanvasResolution(rect.bottom);
				attrs = singleGrap.attributes;
				// 画矩形
				strokeColor = this.vOpt.VMStrokeColorObj[type];
				ctx.strokeStyle = strokeColor;
				ctx.lineWidth = 1;
				ctx.strokeRect(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
				// 画矩形上的圆角
				var radiusLineWidth = 8;
				ctx.lineJoin = "round";
				ctx.lineWidth = 3;
				ctx.beginPath();
				// 左上角圆角
				ctx.moveTo(rect.left + radiusLineWidth, rect.top);
				ctx.lineTo(rect.left, rect.top);
				ctx.lineTo(rect.left, rect.top + radiusLineWidth);
				// 右上角圆角
				ctx.moveTo(rect.right - radiusLineWidth, rect.top);
				ctx.lineTo(rect.right, rect.top);
				ctx.lineTo(rect.right, rect.top + radiusLineWidth);
				// 右下角圆角
				ctx.moveTo(rect.right, rect.bottom - radiusLineWidth);
				ctx.lineTo(rect.right, rect.bottom);
				ctx.lineTo(rect.right - radiusLineWidth, rect.bottom);
				// 左下角圆角
				ctx.moveTo(rect.left, rect.bottom - radiusLineWidth);
				ctx.lineTo(rect.left, rect.bottom);
				ctx.lineTo(rect.left + radiusLineWidth, rect.bottom);
				ctx.stroke();

				// 标题 默认在上方显示
				ctx.fillStyle = strokeColor;
				ctx.font = "10px 微软雅黑";
				if (rect.top - 5 < 8) {
					// 临界值判断：当矩形框靠近视频上方时，标题在矩形框下方显示
					ctx.fillText(singleGrap.id + "_" + title, rect.left - 3, rect.bottom + 15);
				} else {
					ctx.fillText(singleGrap.id + "_" + title, rect.left - 3, rect.top - 5);
				}
				// 属性
				if (this.vOpt.vmShowAttribute && attrs && attrs.length) {
					var textBgWidth = 90,
					    textBgHeight = 18,
					    horizontalBgDis = 4,
					    verticalBgDis = 4,
					    attrRectColor = this._getRGBAColor(strokeColor),
					    attrLen = attrs.length,
					    attrRectTotalHeight = textBgHeight * attrLen + verticalBgDis * (attrLen - 1),
					    attrRectLeft = void 0,
					    attrRectTop = void 0,
					    attrTextLeft = void 0,
					    attrTextTop = void 0;

					for (var attrIndex = 0; attrIndex < attrLen; attrIndex++) {
						if (rect.right + horizontalBgDis + textBgWidth > this.drawVMCanvas.width) {
							// 临界值判断：当矩形框靠近视频右方时，属性在矩形框左侧显示 
							attrRectLeft = rect.left - textBgWidth - horizontalBgDis;
						} else {
							attrRectLeft = rect.right + horizontalBgDis;
						}
						if (rect.bottom + attrRectTotalHeight - (rect.bottom - rect.top) > this.drawVMCanvas.height) {
							// 临界值判断：当矩形框靠近视频下方时，且属性框的高度大于矩形框的高度时，属性在对其矩形框下方显示
							attrRectTop = this.drawVMCanvas.height - (attrLen - attrIndex) * textBgHeight - (attrLen - attrIndex - 1) * verticalBgDis;
						} else {
							attrRectTop = rect.top + textBgHeight * attrIndex + verticalBgDis * attrIndex;
						}
						attrTextLeft = attrRectLeft + horizontalBgDis;
						attrTextTop = attrRectTop + 13;
						// 属性背景色
						ctx.fillStyle = attrRectColor;
						ctx.fillRect(attrRectLeft, attrRectTop, textBgWidth, textBgHeight);
						// 属性文字
						ctx.fillStyle = "#FFF";
						ctx.fillText(attrs[attrIndex].key + ":" + attrs[attrIndex].value, attrTextLeft, attrTextTop);
					}
				}
			}
		}

		// 根据canvas分辨率计算显示的横向尺寸（width、left、right）,val为在分辨率下的值

	}, {
		key: "_calHorSizeByCanvasResolution",
		value: function _calHorSizeByCanvasResolution(val) {
			var realWidth = this._videoWidth,
			    showWidth = this.drawVMCanvas.clientWidth;

			return showWidth / realWidth * val;
		}
		// 根据canvas分辨率计算显示的纵向尺寸（height、top、bottom）,val为在分辨率下的值

	}, {
		key: "_calVerByCanvasResolution",
		value: function _calVerByCanvasResolution(val) {
			var realHeight = this._videoHeight,
			    showHeight = this.drawVMCanvas.clientHeight;

			return showHeight / realHeight * val;
		}
	}]);

	return RealTimeVideoOverlay;
}();

exports.default = RealTimeVideoOverlay;

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // 事件工具集

// 工具集


// NPPlayer的默认事件，包含窗口事件（单击、双击、窗口交换）、焦点改变等


var _eventUtil = __webpack_require__(330);

var _tool = __webpack_require__(329);

var _NPPlayerEvent = __webpack_require__(389);

var _NPPlayerEvent2 = _interopRequireDefault(_NPPlayerEvent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RTDrawStatus = {
	INIT: 0,
	BEGIN: 1,
	DRAWING: 2,
	FINISH: 3,
	STARTADJUST: 4, // 开始编辑
	ADJUST: 5, // 编辑中
	ADJUSTFINISH: 6, // 编辑完成
	MOVE: 7, // 开始移动，移动中
	MOVEFINISH: 8 // 移动完成
};
var pointSize = 3;

var RealTimeDrawing = function () {
	function RealTimeDrawing() {
		_classCallCheck(this, RealTimeDrawing);
	}

	_createClass(RealTimeDrawing, [{
		key: 'initializer',
		value: function initializer() {
			this.drawSvg = null;
			this.drawSvgC = null;
			this.RTDrawInfo = { // 每次绘制一个图形的对象
				type: '', // rect polygon line 
				status: RTDrawStatus.INIT,
				ele: null,
				eleGroup: null,
				polygonArr: [], // 多边形坐标
				pointCount: 0,
				direction: "",
				adjustIndex: -1,
				move: {}, // 移动初始坐标
				arrow: 0, //0：不要箭头 1：x2y2箭头 2：左右侧箭头线
				arrowpos: -1, //箭头位置
				distance: 4,
				title: null,
				titleStyle: {}
			};

			this._defVideoSize = { w: 1920, h: 1080 };
			this.RTAdjustInfo = _tool.Toolkit.deepMerge({}, this.RTDrawInfo);
			this.RTDrawResult = [];
			this.svgLastSize = { left: 0, top: 0, width: 0, height: 0 };
			this.lastHoverShape = null;
			this.lastSelectShape = null;
			this.lastMouseStyle = null;
			this._resultCB = null;
		}

		// 根据id删除绘制的图形

	}, {
		key: 'deleteDrawingById',
		value: function deleteDrawingById(id) {
			if (!id) {
				this._deleteAllDrawing();
				return;
			}
			if (!this.drawSvg) {
				return;
			}
			var svg = this.drawSvg,
			    children = svg.children,
			    group = null,
			    shape = null,
			    shapeId = "",
			    delIndex = -1,
			    _this = this;
			for (var i = 0, len = children.length; i < len; i++) {
				group = children[i];
				shape = group.children[0];
				shapeId = shape.getAttribute("id");
				if (id === shapeId) {
					svg.removeChild(group);
					this.RTDrawResult.every(function (item, index) {
						if (id === item.id) {
							if (_this.lastHoverShape && item == _this.lastHoverShape) {
								_this.lastHoverShape = null;
							}
							if (_this.lastSelectShape && item == _this.lastSelectShape) {
								_this.lastSelectShape = null;
							}
							delIndex = index;
							return false;
						}
						return true;
					});
					this.RTDrawResult.splice(delIndex, 1);
					break;
				}
			}
			if (this.RTDrawInfo.type == "" && this.RTDrawResult.length == 0) {
				this._removeDrawing();
			}
		}
	}, {
		key: 'addDrawingCallback',
		value: function addDrawingCallback(callback) {
			if (typeof callback === "function") {
				this._resultCB = callback;
			}
		}
		// 开启绘制

	}, {
		key: 'startDrawing',
		value: function startDrawing(type, style, callback) {
			type = type || "rect";
			if (this.RTDrawInfo.type != type) {
				if (this.RTDrawInfo.type == "polygon") {
					this._finishPolygon(true);
				}
				this.RTDrawInfo.type = type; //绘制
				this.RTDrawInfo.status = RTDrawStatus.INIT;
				this.RTDrawInfo.title = null;
				this.RTDrawInfo.titleStyle = {};
			}
			//style = style || {};
			style = _tool.Toolkit.deepMerge({ lineWidth: "2px", lineColor: "#00F", fillOpacity: 0.1, opacity: 0.7, dasharray: "" }, style);
			this.RTDrawInfo.lineWidth = style.lineWidth;
			this.RTDrawInfo.lineColor = style.lineColor;
			this.RTDrawInfo.fillOpacity = style.fillOpacity;
			this.RTDrawInfo.opacity = style.opacity;
			this.RTDrawInfo.dasharray = style.dasharray;
			this.RTDrawInfo.arrow = parseInt(style.arrow) || 0;
			this.RTDrawInfo.distance = parseInt(style.distance) || 10;
			if (this.RTDrawInfo.arrow) {
				this.RTDrawInfo.arrowpos = 1;
				if (type === "doubleline") {
					this.RTDrawInfo.arrow = 1; //双线只支持顶点箭头
				}
			}
			if (typeof callback === "function") {
				this._resultCB = callback;
			}
			if (!this.drawSvg) {
				this._initSvg();
			}
			this.drawSvgC.draggable = false;
		}
		// 结束绘制

	}, {
		key: 'stopDrawing',
		value: function stopDrawing(deleteall) {
			if (!this.drawSvgC) {
				return;
			}
			this.RTDrawInfo.status = RTDrawStatus.INIT;
			this.RTDrawInfo.type = ""; //绘制
			this.drawSvgC.style.zIndex = "auto";
			this.drawSvgC.draggable = true;
			if (deleteall) {
				this._deleteAllDrawing();
			}
			if (this.RTDrawResult.length == 0) {
				this._removeDrawing();
			}
		}

		//直接添加图像

	}, {
		key: 'addDrawingObject',
		value: function addDrawingObject(obj, callback) {
			if (typeof callback === "function") {
				this._resultCB = callback;
			}
			var _this = this;
			if (obj instanceof Array) {
				obj.forEach(function (item) {
					_this._addDrawingShape(item);
				});
			} else {
				this._addDrawingShape(obj);
			}
		}
	}, {
		key: 'getAllDrawingObject',
		value: function getAllDrawingObject() {
			return _tool.Toolkit.deepMerge([], this.RTDrawResult);
		}
	}, {
		key: 'removeSelectDrawing',
		value: function removeSelectDrawing() {
			if (this.drawSvgC) {
				this._hideAllGrapthPoint();
			}
		}
	}, {
		key: 'finishDrawing',
		value: function finishDrawing() {
			//数字放大等时，需要把未完成的多边形删除
			this._finishPolygon(true);
		}
	}, {
		key: '_addDrawingShape',
		value: function _addDrawingShape(obj) {
			if (!obj || obj.type != "rect" && obj.type != "polygon" && obj.type != "line" && obj.type != "doubleline") {
				return;
			}
			if (!this.drawSvg) {
				this._initSvg();
				this.drawSvgC.draggable = true;
			}
			this._hideAllGrapthPoint();
			if (obj.type != "polygon" && obj.posinfo.length == 2 || obj.type === "polygon" && obj.posinfo.length > 2) {
				this.RTAdjustInfo.type = obj.type; //绘制
				this.RTAdjustInfo.status = RTDrawStatus.FINISH;
				this.RTAdjustInfo.lineWidth = obj.lineWidth ? obj.lineWidth : "1px";
				this.RTAdjustInfo.lineColor = obj.lineColor ? obj.lineColor : "#00F";
				this.RTAdjustInfo.fillOpacity = obj.fillOpacity ? obj.fillOpacity : 0;
				this.RTAdjustInfo.title = obj.title;
				this.RTAdjustInfo.titleStyle = obj.titleStyle || {};
				this.RTAdjustInfo.dasharray = obj.dasharray;
				this.RTAdjustInfo.arrow = parseInt(obj.arrow) || 0;
				this.RTAdjustInfo.distance = parseInt(obj.distance) || 10;
				var arrowpos = parseInt(obj.arrowpos) || 0;
				if (this.RTAdjustInfo.arrow) {
					this.RTAdjustInfo.arrowpos = arrowpos === 1 ? 1 : 0;
					if (obj.type === "doubleline") {
						this.RTAdjustInfo.arrow = 1; //双线只支持顶点箭头
					}
				}

				var width = this.svgLastSize.width,
				    height = this.svgLastSize.height,
				    pointArr = obj.posinfo,
				    resArr = [];
				if (obj.postype && obj.postype == 1) {
					if (this._videoWidth > 0 && this._videoHeight > 0) {
						width = this.svgLastSize.width / this._videoWidth;
						height = this.svgLastSize.height / this._videoHeight;
					} else {
						width = this.svgLastSize.width / this._defVideoSize.w;
						height = this.svgLastSize.height / this._defVideoSize.h;
					}
				}
				for (var i = 0, len = pointArr.length; i < len; i++) {
					resArr.push({ x: Math.min(parseInt(pointArr[i].x * width), this.svgLastSize.width), y: Math.min(parseInt(pointArr[i].y * height), this.svgLastSize.height) });
				}

				if (obj.type === "rect") {
					this.RTAdjustInfo.polygonArr = _tool.Toolkit.deepMerge([], resArr);
					this._createShape(this.RTAdjustInfo);
					if (obj.min) {
						//视频像素
						this.RTAdjustInfo.ele.setAttribute("minsize", JSON.stringify(obj.min));
					}
					if (obj.max) {
						this.RTAdjustInfo.ele.setAttribute("maxsize", JSON.stringify(obj.max));
					}
					if (typeof obj.id === "string" && obj.id.length > 0) {
						this.RTAdjustInfo.ele.setAttribute("id", obj.id);
					}
					this._drawRect(this.RTAdjustInfo);
				} else if (obj.type === "doubleline") {
					this.RTAdjustInfo.polygonArr = resArr, // 多边形坐标
					this._createShape(this.RTAdjustInfo);
					this._drawDoubleline(this.RTAdjustInfo);
				} else {
					this.RTAdjustInfo.polygonArr = resArr, // 多边形坐标
					this._createShape(this.RTAdjustInfo);
					this._drawPolygonOrLine(this.RTAdjustInfo);
				}
			}
		}
	}, {
		key: '_removeDrawing',
		value: function _removeDrawing() {
			if (!this.drawSvg) {
				return;
			}
			this.drawSvgC.parentNode.removeChild(this.drawSvgC);
			this.drawSvgC = null;
			this.drawSvg = null;
		}
	}, {
		key: '_deleteAllDrawing',
		value: function _deleteAllDrawing() {
			if (!this.drawSvg) {
				return;
			}
			this.lastHoverShape = null;
			this.lastSelectShape = null;
			this.lastMouseStyle = null;
			var svg = this.drawSvg,
			    children = svg.children;
			while (children.length > 0) {
				svg.removeChild(children[0]);
			}
			this.RTDrawResult.splice(0, this.RTDrawResult.length);
			if (this.RTDrawInfo.type == "") {
				this._removeDrawing();
			}
		}

		// 创建svg元素和属性

	}, {
		key: '_createSVGEleTag',
		value: function _createSVGEleTag(tag, attrObj) {
			var ele = document.createElementNS('http://www.w3.org/2000/svg', tag);
			this._setSvgAttr(ele, attrObj);
			return ele;
		}
		// 设置元素属性

	}, {
		key: '_setSvgAttr',
		value: function _setSvgAttr(ele, attrObj) {
			try {
				for (var attr in attrObj) {
					ele.setAttribute(attr, attrObj[attr]);
				}
			} catch (e) {
				//debugger;
			}
		}
		// 初始化svg

	}, {
		key: '_initSvg',
		value: function _initSvg() {
			if (!this.drawSvg) {
				this.drawSvgC = document.createElement("div");
				this.drawSvgC.className = "draw-svg-container";
				this.drawSvg = this._createSVGEleTag("svg", { "xmlns": "http://www.w3.org/2000/svg", "class": "draw-svg" });
				//this.drawSvgC.style.zIndex = 102;
				this.setRTSVGPosition(this.svgLastSize);
				this.drawSvgC.appendChild(this.drawSvg);
				if (this._watermkC) {
					_tool.Toolkit.insertAfter(this.drawSvgC, this._watermkC);
				} else if (this._drawVMCvsC) {
					_tool.Toolkit.insertAfter(this.drawSvgC, this._drawVMCvsC);
				} else {
					_tool.Toolkit.insertAfter(this.drawSvgC, this.vOpt.videoEle);
				}

				this._bindSvgEvent();
			}
		}
		// 修改svg已经绘制图形的坐标

	}, {
		key: '_modifySVGAllShapeXY',
		value: function _modifySVGAllShapeXY(curWidth, curHeight) {
			if (curWidth == 0 || curHeight == 0 || this.svgLastSize.width == 0 || this.svgLastSize.height == 0) {
				return;
			}
			var _this = this,
			    svg = this.drawSvg,
			    ratioX = curWidth / this.svgLastSize.width,
			    ratioY = curHeight / this.svgLastSize.height,
			    children = svg.children,
			    group = null,
			    shapeChildren = null,
			    shape = null,
			    pointArr = [],
			    pathStr = '',
			    type = "";
			for (var i = 0, len = children.length; i < len; i++) {
				group = children[i];
				shapeChildren = group.children;
				for (var j = 0, shapeLen = shapeChildren.length; j < shapeLen; j++) {
					shape = group.children[j];
					if (shape.nodeName === "path") {
						type = shape.getAttribute("type");
						pointArr = JSON.parse(shape.getAttribute("pointArr"));
						for (var k = 0, pointLen = pointArr.length; k < pointLen; k++) {
							pointArr[k].x *= ratioX;
							pointArr[k].y *= ratioY;
						}
						if (shape === this.RTDrawInfo.ele) {
							this.RTDrawInfo.polygonArr = pointArr;
						}
						var objInfo = {
							type: type,
							arrow: shape.getAttribute("arrow") - "0",
							arrowpos: shape.getAttribute("arrowpos") - "0",
							distance: shape.getAttribute("distance") - "0",
							ele: shape,
							polygonArr: pointArr
						};
						if (type === "polygon" || type === "line") {
							if (this.RTDrawInfo.status === RTDrawStatus.DRAWING && shape === this.RTDrawInfo.ele) {
								objInfo.status = RTDrawStatus.DRAWING;
							}
							this._drawPolygonOrLine(objInfo);
						} else if (type === "rect") {
							this._drawRect(objInfo);
						} else if (type === "doubleline") {
							this._drawDoubleline(objInfo);
						}
					}
				}
			}

			this.RTDrawResult.forEach(function (item) {
				item._points = JSON.parse(item._ele.getAttribute("pointArr"));
			});
		}
		// 设置svg的位置，用于设置画面比例时，调整svg的位置大小和视频画面保持一致 obj:{left: 50px; top: 100px;}

	}, {
		key: 'setRTSVGPosition',
		value: function setRTSVGPosition(obj) {
			if (this.drawSvg) {
				this.drawSvg.style.left = obj.left + "px";
				this.drawSvg.style.top = obj.top + "px";
				this.drawSvg.style.width = obj.width + "px";
				this.drawSvg.style.height = obj.height + "px";
				this._setSvgAttr(this.drawSvg, { "width": obj.width, "height": obj.height });
				// 修改svg已经绘制图形的坐标
				this._modifySVGAllShapeXY(obj.width, obj.height);
			}
			if (obj.width != 0 && obj.height != 0) {
				this.svgLastSize = _tool.Toolkit.deepMerge({}, obj);return;
			}
		}
		// 绘制图形顶点

	}, {
		key: '_drawGraphPoint',
		value: function _drawGraphPoint(objInfo, pointArr) {
			var pointEles = objInfo.ele.closest("g").getElementsByClassName("rtd-point");
			if (!pointEles.length) {
				for (var i = 0, len = pointArr.length; i < len; i++) {
					var pointEle = this._createSVGEleTag("rect", { "style": 'fill:' + objInfo.lineColor + '; stroke-width: ' + pointSize * 2 + '; stroke-opacity: 0; stroke:' + objInfo.lineColor + ';', class: "rtd-point", "width": pointSize * 2, "height": pointSize * 2, "x": pointArr[i].x - pointSize, "y": pointArr[i].y - pointSize });
					objInfo.eleGroup.appendChild(pointEle);
				}
			} else {
				for (var _i = 0, _len = pointArr.length; _i < _len; _i++) {
					this._setSvgAttr(pointEles[_i], { "x": pointArr[_i].x - pointSize, "y": pointArr[_i].y - pointSize });
				}
			}
		}

		// 绘制箭头

	}, {
		key: '_drawLineArrow',
		value: function _drawLineArrow(objInfo) {
			if (objInfo.arrow === 1) {
				this._drawLineArrow1(objInfo);
			} else if (objInfo.arrow === 2) {
				this._drawLineArrow2(objInfo);
			} else {
				objInfo.ele.setAttribute("arrow", 0);
				objInfo.ele.setAttribute("arrowpos", -1);
			}
		}
	}, {
		key: '_drawLineArrow1',
		value: function _drawLineArrow1(objInfo) {
			var eles = objInfo.ele.closest("g").getElementsByClassName("rtd-arrow"),
			    ptArr = objInfo.polygonArr,
			    pt1 = ptArr[1],
			    pt0 = ptArr[0],
			    pos = objInfo.arrowpos === 0 ? 0 : 1,
			    pt = ptArr[pos],
			    dmove = 20,
			    theta = parseInt(Math.atan2(pt1.y - pt0.y, pt1.x - pt0.x) * (180 / Math.PI)) + 90 + (pos === 1 ? 0 : 180);

			if (!eles.length) {
				objInfo.ele.setAttribute("arrow", objInfo.arrow);
				objInfo.ele.setAttribute("arrowpos", objInfo.arrowpos);

				var ele = this._createSVGEleTag("svg", { "xmlns": "http://www.w3.org/2000/svg", "class": "rtd-arrow", "x": pt.x - dmove, "y": pt.y - dmove, "width": 60, "height": 60, "viewBox": "-20 -20 60 60", "fill": objInfo.lineColor, "fill-opacity": objInfo.fillOpacity, "stroke-width": objInfo.lineWidth, "stroke": objInfo.lineColor, "index": 0 }),
				    eleArrow = this._createSVGEleTag("polygon", { "points": "-10,20 0,0 10,20 0,0 -10,20", "transform": 'rotate(' + theta + ',0,0)' });
				ele.appendChild(eleArrow);
				objInfo.eleGroup.appendChild(ele);
				if (objInfo.type === "doubleline") {
					var xoffset = objInfo.ele.getAttribute("xoffset") - "0",
					    yoffset = objInfo.ele.getAttribute("yoffset") - "0",
					    ele2 = this._createSVGEleTag("svg", { "xmlns": "http://www.w3.org/2000/svg", "class": "rtd-arrow", "x": pt.x - dmove + xoffset, "y": pt.y - dmove + yoffset, "width": 60, "height": 60, "viewBox": "-20 -20 60 60", "fill": objInfo.lineColor, "fill-opacity": objInfo.fillOpacity, "stroke-width": objInfo.lineWidth, "stroke": objInfo.lineColor, "index": 1 }),
					    eleArrow2 = this._createSVGEleTag("polygon", { "points": "-10,20 0,0 10,20 0,0 -10,20", "transform": 'rotate(' + theta + ',0,0)' });
					ele2.appendChild(eleArrow2);
					objInfo.eleGroup.appendChild(ele2);
				}

				//this._bindSvgPointEvent(pointEle);
			} else {
				objInfo.ele.setAttribute("arrowpos", pos);
				var _xoffset = objInfo.ele.getAttribute("xoffset") - "0",
				    _yoffset = objInfo.ele.getAttribute("yoffset") - "0",
				    _eleitem = 0,
				    index = 0;
				for (var i = 0, len = eles.length; i < len; i++) {
					_eleitem = eles[i];
					index = _eleitem.getAttribute("index") - "0";
					if (index == 1) {
						this._setSvgAttr(_eleitem, { "x": pt.x - dmove + _xoffset, "y": pt.y - dmove + _yoffset });
					} else {
						this._setSvgAttr(_eleitem, { "x": pt.x - dmove, "y": pt.y - dmove });
					}
					for (var j = 0, lch = _eleitem.children.length; j < lch; j++) {
						this._setSvgAttr(_eleitem.children[j], { "transform": 'rotate(' + theta + ' 0 0)' });
					}
				}
			}
		}
	}, {
		key: '_drawLineArrow2',
		value: function _drawLineArrow2(objInfo) {
			var eles = objInfo.ele.closest("g").getElementsByClassName("rtd-arrow"),
			    ptArr = objInfo.polygonArr,
			    pt1 = ptArr[1],
			    pt0 = ptArr[0],
			    pos = objInfo.arrowpos,
			    dmove = 40,
			    theta = parseInt(Math.atan2(pt1.y - pt0.y, pt1.x - pt0.x) * (180 / Math.PI)),
			    point = { x: (pt0.x + pt1.x) / 2, y: (pt0.y + pt1.y) / 2 };
			if (!eles.length) {
				objInfo.ele.setAttribute("arrow", objInfo.arrow);
				objInfo.ele.setAttribute("arrowpos", objInfo.arrowpos);
				objInfo.ele.setAttribute("lastarrowpos", objInfo.arrowpos == 1 ? 0 : 1);

				//for(let i = 0; i < points.length; i++) {
				var ele = this._createSVGEleTag("svg", { "xmlns": "http://www.w3.org/2000/svg", "class": "rtd-arrow", "x": point.x - dmove, "y": point.y - dmove, "width": 80, "height": 80, "viewBox": "-40 -40 80 80", "fill": objInfo.lineColor, "fill-opacity": objInfo.fillOpacity, "stroke-width": objInfo.lineWidth, "stroke": objInfo.lineColor }),
				    eleArrow1 = this._createSVGEleTag("polygon", { "points": "-10,-20 0,-30 10,-20 0,-30 0,-10, 0,-30 -10,-20", "transform": 'rotate(' + theta + ',0,0)', "opacity": pos === 0 ? 0 : 1, "index": 1 }),
				    eleArrow2 = this._createSVGEleTag("polygon", { "points": "-10,20 0,30 10,20 0,30 0,10, 0,30 -10,20", "transform": 'rotate(' + theta + ',0,0)', "opacity": pos === 1 ? 0 : 1, "index": 0 });
				ele.appendChild(eleArrow1);
				ele.appendChild(eleArrow2);
				objInfo.eleGroup.appendChild(ele);
				//}
				//this._bindSvgPointEvent(pointEle);
			} else {
				objInfo.ele.setAttribute("arrowpos", pos);
				for (var i = 0, len = eles.length; i < len; i++) {
					var index = 0,
					    _eleitem = eles[i];

					this._setSvgAttr(_eleitem, { "x": point.x - dmove, "y": point.y - dmove });
					for (var j = 0, lch = _eleitem.children.length; j < lch; j++) {
						index = _eleitem.children[j].getAttribute("index") - "0";
						this._setSvgAttr(_eleitem.children[j], { "transform": 'rotate(' + theta + ' 0 0)', "opacity": index == pos || pos == 2 ? 1 : 0 });
					}
				}
			}
		}
	}, {
		key: '_adjustLineArrow',
		value: function _adjustLineArrow() {
			var pos = this.RTAdjustInfo.arrowpos,
			    type = this.RTAdjustInfo.type;
			if (this.RTAdjustInfo.arrow == 1 && (type === "line" || type === "doubleline")) {
				pos = pos === 1 ? 0 : 1;
				this.lastMouseStyle.mouse = "crosshair";
				this._addSVGMouseStyle(this.drawSvg, "crosshair");
			} else if (this.RTAdjustInfo.arrow == 2 && type === "line") {
				var ele = this.RTAdjustInfo.ele;
				if (pos == 0) {
					pos = 2;
					ele.setAttribute("lastarrowpos", 0);
				} else if (pos == 1) {
					pos = 2;
					ele.setAttribute("lastarrowpos", 1);
				} else if (pos == 2) {
					var last = ele.getAttribute("lastarrowpos") - "0";
					pos = last === 1 ? 0 : 1;
					if (this.lastMouseStyle.index != pos) {
						this.lastMouseStyle.mouse = "crosshair";
						this._addSVGMouseStyle(this.drawSvg, "crosshair");
					}
				}
			}

			this.RTAdjustInfo.arrowpos = pos;
			this._drawLineArrow(this.RTAdjustInfo);
			var id = this.RTAdjustInfo.ele.getAttribute("id"),
			    result = { arrowpos: pos };
			this.RTDrawResult.every(function (item) {
				if (id === item.id) {
					item.arrowpos = pos;
					item = _tool.Toolkit.deepMerge(result, item);
					return false;
				}
				return true;
			});
			this._resultCB && this._resultCB(_tool.Toolkit.deepMerge({ index: this.vOpt.index }, result));
			this._emitter.emit(_NPPlayerEvent2.default.OnDrawingObject, _tool.Toolkit.deepMerge({ index: this.vOpt.index }, result));
		}

		// 绘制多边形

	}, {
		key: '_drawPolygonOrLine',
		value: function _drawPolygonOrLine(objInfo) {
			var type = objInfo.type,
			    width = this.svgLastSize.width,
			    height = this.svgLastSize.height,
			    pointArr = objInfo.polygonArr,
			    pathStr = '',
			    resultShapeArr = [];

			for (var i = 0, len = pointArr.length; i < len; i++) {
				pathStr += pointArr[i].x + ',' + pointArr[i].y + ' ';
				resultShapeArr.push({ x: pointArr[i].x / width, y: pointArr[i].y / height });
			}
			pathStr = 'M ' + pathStr;

			if (type === "polygon" && objInfo.status != RTDrawStatus.DRAWING) {
				pathStr += ' Z';
				this._drawGraphPoint(objInfo, pointArr);
			} else if (type != "polygon") {
				this._drawGraphPoint(objInfo, pointArr);
			}
			if (type === "line") {
				this._drawLineArrow(objInfo);
			}

			this._setSvgAttr(objInfo.ele, { "d": pathStr, "pointArr": JSON.stringify(pointArr), "type": type });

			//
			this._changeTextPos(objInfo.ele, [{ x: pointArr[0].x, y: pointArr[0].y }]);

			this._emitEvent(objInfo, resultShapeArr, pointArr);
		}
	}, {
		key: '_emitEvent',
		value: function _emitEvent(objInfo, resultShapeArr, pointArr) {
			if (objInfo.status === RTDrawStatus.FINISH) {
				// 代表绘制完成
				// 绑定事件
				var id = objInfo.ele.getAttribute("id");
				if (!id) {
					id = _tool.Toolkit.getUuid();
					this._setSvgAttr(objInfo.ele, { "id": id });
				}
				this._setSvgAttr(objInfo.ele, { "id": id });
				var result = { id: id, type: objInfo.type, status: objInfo.status, lineColor: objInfo.lineColor, lineWidth: objInfo.lineWidth, opacity: objInfo.opacity, fillOpacity: objInfo.fillOpacity, videoWidth: this._videoWidth, videoHeight: this._videoHeight, title: objInfo.title, posinfo: resultShapeArr, arrow: objInfo.arrow, arrowpos: objInfo.arrowpos, min: JSON.parse(objInfo.ele.getAttribute("minsize")), max: JSON.parse(objInfo.ele.getAttribute("maxsize")), _ele: objInfo.ele, _points: pointArr };
				this.RTDrawResult.push(result);
				this.lastSelectShape = { id: id, lineWidth: objInfo.lineWidth, _ele: objInfo.ele };
				this._resultCB && this._resultCB(_tool.Toolkit.deepMerge({ index: this.vOpt.index }, result));
				this._emitter.emit(_NPPlayerEvent2.default.OnDrawingObject, _tool.Toolkit.deepMerge({ index: this.vOpt.index }, result));
			} else if (objInfo.status === RTDrawStatus.ADJUSTFINISH || objInfo.status === RTDrawStatus.MOVEFINISH) {
				var _id = objInfo.ele.getAttribute("id");
				var _result = { status: objInfo.status, arrowpos: objInfo.arrowpos, posinfo: resultShapeArr, _points: pointArr };
				this.RTDrawResult.every(function (item) {
					if (_id === item.id) {
						item = _tool.Toolkit.deepMerge(item, _result);
						_result = _tool.Toolkit.deepMerge(_result, item);
						return false;
					}
					return true;
				});

				this._resultCB && this._resultCB(_tool.Toolkit.deepMerge({ index: this.vOpt.index }, _result));
				this._emitter.emit(_NPPlayerEvent2.default.OnDrawingObject, _tool.Toolkit.deepMerge({ index: this.vOpt.index }, _result));
			}
		}

		// 绘制双线

	}, {
		key: '_drawDoubleline',
		value: function _drawDoubleline(objInfo) {
			var type = objInfo.type,
			    width = this.svgLastSize.width,
			    height = this.svgLastSize.height,
			    pointArr = _tool.Toolkit.deepMerge([], objInfo.polygonArr),
			    pointArr2 = _tool.Toolkit.getLinePoint(pointArr, objInfo.distance),
			    pathStr = '',
			    resultShapeArr = [];

			for (var i = 0, len = pointArr.length; i < len; i++) {
				pathStr += pointArr[i].x + ',' + pointArr[i].y + ' ';
				resultShapeArr.push({ x: pointArr[i].x / width, y: pointArr[i].y / height });
			}
			pathStr = 'M ' + pathStr + ' M';

			for (var _i2 = 0, _len2 = pointArr2.length; _i2 < _len2; _i2++) {
				pathStr += pointArr2[_i2].x + ',' + pointArr2[_i2].y + ' ';
			}
			this._setSvgAttr(objInfo.ele, { "d": pathStr, "pointArr": JSON.stringify(pointArr), "type": type, "distance": objInfo.distance, xoffset: pointArr2[0].x - pointArr[0].x, yoffset: pointArr2[0].y - pointArr[0].y });

			pointArr2.push.apply(pointArr2, pointArr);
			this._drawGraphPoint(objInfo, pointArr2);
			this._drawLineArrow(objInfo);
			//
			this._changeTextPos(objInfo.ele, [{ x: pointArr[0].x, y: pointArr[0].y }]);

			this._emitEvent(objInfo, resultShapeArr, pointArr);
		}

		// 改变文本的位置

	}, {
		key: '_changeTextPos',
		value: function _changeTextPos(ele, ptArr) {
			var textEle = ele.closest("g").getElementsByTagName("text");
			if (textEle && textEle.length) {
				var h = parseInt(textEle[0].style.fontSize),
				    title = textEle[0].getAttribute("text"),
				    pt = { x: ptArr[0].x, y: ptArr[0].y },
				    sz = {};
				if (ptArr.length > 1) {
					if (ptArr[0].x > ptArr[1].x) {
						pt.x = ptArr[1].x;
						sz.w = ptArr[0].x - ptArr[1].x;
					} else {
						pt.x = ptArr[0].x;
						sz.w = ptArr[1].x - ptArr[0].x;
					}
					if (ptArr[0].y > ptArr[1].y) {
						pt.y = ptArr[1].y;
						sz.h = ptArr[0].y - ptArr[1].y;
					} else {
						pt.y = ptArr[0].y;
						sz.h = ptArr[1].y - ptArr[0].y;
					}

					if (sz.w + 7 >= this.svgLastSize.width) {
						sz.w = this._videoWidth;
					} else {
						sz.w = sz.w * this._videoWidth / this.svgLastSize.width;
					}
					if (sz.h + 7 >= this.svgLastSize.height) {
						sz.h = this._videoHeight;
					} else {
						sz.h = sz.h * this._videoHeight / this.svgLastSize.height;
					}
				}
				this._setSvgAttr(textEle[0], { x0: pt.x, y0: pt.y });
				pt.x = pt.x + 2;
				if (pt.y > h + 2) {
					pt.y = pt.y - 3;
				} else {
					pt.y = pt.y + h + 3;
				}
				//console.log("_changeTextPos("+pt.x+", "+pt.y+")");
				this._setSvgAttr(textEle[0], { x: pt.x, y: pt.y });

				if (title && ptArr.length > 1) {
					textEle[0].innerHTML = title + "(" + Math.round(sz.w) + "X" + Math.round(sz.h) + ")";
				}
			}
		}
		// 绘制矩形框

	}, {
		key: '_drawRect',
		value: function _drawRect(objInfo) {
			// 设置矩形位置、大小
			var width = this.svgLastSize.width,
			    height = this.svgLastSize.height,
			    ptArr = objInfo.polygonArr,
			    x1 = ptArr[0].x,
			    y1 = ptArr[0].y,
			    x2 = ptArr[1].x,
			    y2 = ptArr[1].y,
			    resultShapeArr = [{ x: x1 / width, y: y1 / height }, { x: x2 / width, y: y2 / height }],
			    pointArr = [{ x: x1, y: y1 }, { x: x1, y: y2 }, { x: x2, y: y2 }, { x: x2, y: y1 }, { x: (x1 + x2) / 2, y: y1 }, { x: x1, y: (y1 + y2) / 2 }, { x: (x1 + x2) / 2, y: y2 }, { x: x2, y: (y1 + y2) / 2 }];
			this._setSvgAttr(objInfo.ele, { "d": 'M ' + x1 + ',' + y1 + ' ' + x1 + ',' + y2 + ' ' + x2 + ',' + y2 + ' ' + x2 + ',' + y1 + ' Z', "pointArr": JSON.stringify(ptArr), "type": "rect" });
			// 绘制矩形顶点
			this._drawGraphPoint(objInfo, pointArr);
			// 当矩形位置发生变化时改变文本的位置
			this._changeTextPos(objInfo.ele, [{ x: x1, y: y1 }, { x: x2, y: y2 }]);

			this._emitEvent(objInfo, resultShapeArr, ptArr);
		}

		// 创建图形

	}, {
		key: '_createShape',
		value: function _createShape(objInfo) {
			objInfo.ele = this._createSVGEleTag("path", { "style": ' fill:' + objInfo.lineColor + '; fill-opacity:' + objInfo.fillOpacity + '; stroke-width: ' + objInfo.lineWidth + '; stroke: ' + objInfo.lineColor + '; stroke-opacity: ' + objInfo.opacity + '; stroke-dasharray: ' + objInfo.dasharray });
			objInfo.eleGroup = this._createSVGEleTag("g");
			objInfo.eleGroup.appendChild(objInfo.ele);
			this.drawSvg.appendChild(objInfo.eleGroup);
			if (objInfo.title) {
				var style = _tool.Toolkit.deepMerge({ fontSize: "15px", color: objInfo.lineColor, fontWeight: "normal" }, objInfo.titleStyle),
				    textEle = this._createSVGEleTag("text", { "x": 0, "y": 0, "fill": style.color, text: objInfo.title, style: 'font-size: ' + style.fontSize + '; font-weight: ' + style.fontWeight });
				textEle.innerHTML = objInfo.title;
				objInfo.eleGroup.appendChild(textEle);
			}
		}

		// 调整矩形大小

	}, {
		key: '_adjustRect',
		value: function _adjustRect(ex, ey) {
			var pointArr = this.RTAdjustInfo.polygonArr,
			    direction = this.RTAdjustInfo.direction,
			    move = this.RTAdjustInfo.move,
			    vwidth = this._videoWidth > 0 ? this._videoWidth : this._defVideoSize.w,
			    vheight = this._videoHeight > 0 ? this._videoHeight : this._defVideoSize.h,
			    width = this.svgLastSize.width,
			    height = this.svgLastSize.height,
			    minsz = JSON.parse(this.RTAdjustInfo.ele.getAttribute("minsize")),
			    maxsz = JSON.parse(this.RTAdjustInfo.ele.getAttribute("maxsize")),
			    pt = pointArr[this.RTAdjustInfo.adjustIndex],
			    pt0 = pointArr[this.RTAdjustInfo.adjustIndex == 0 ? 1 : 0];

			if (this.RTAdjustInfo.status != RTDrawStatus.ADJUSTFINISH) {
				if (direction === "x" && ex != move.x) {
					// 拖动边线中间点
					pt.x = pt.x + ex - move.x;
				} else if (direction === "y" && ey != move.y) {
					// 拖动边线中间点
					pt.y = pt.y + ey - move.y;
				} else if (direction === "xy" && (ex != move.x || ey != move.y)) {
					pt.x = pt.x + ex - move.x;
					pt.y = pt.y + ey - move.y;
				} else {
					return;
				}
			}

			if (minsz && minsz.x > 0 || maxsz && maxsz.x > 0) {
				if (pt.x > pt0.x) {
					var dx = (pt.x - pt0.x) * vwidth / width;
					if (minsz && minsz.x > 0 && dx < minsz.x) {
						pt.x = pt0.x + minsz.x * width / vwidth;
					} else if (maxsz && maxsz.x > 0 && dx > maxsz.x) {
						pt.x = pt0.x + maxsz.x * width / vwidth;
					}
				} else {
					var _dx = (pt0.x - pt.x) * vwidth / width;
					if (minsz && minsz.x > 0 && _dx < minsz.x) {
						pt.x = pt0.x - minsz.x * width / vwidth;
					} else if (maxsz && maxsz.x > 0 && _dx > maxsz.x) {
						pt.x = pt0.x - maxsz.x * width / vwidth;
					}
				}
			}

			if (minsz && minsz.y > 0 || maxsz && maxsz.y > 0) {
				if (pt.y > pt0.y) {
					var dy = (pt.y - pt0.y) * vheight / height;
					if (minsz && minsz.y > 0 && dy < minsz.y) {
						pt.y = pt0.y + minsz.y * height / vheight;
					} else if (maxsz && maxsz.y > 0 && dy > maxsz.y) {
						pt.y = pt0.y + maxsz.y * height / vheight;
					}
				} else {
					var _dy = (pt0.y - pt.y) * vheight / height;
					if (minsz && minsz.y > 0 && _dy < minsz.y) {
						pt.y = pt0.y - minsz.y * height / vheight;
					} else if (maxsz && maxsz.y > 0 && _dy > maxsz.y) {
						pt.y = pt0.y - maxsz.y * height / vheight;
					}
				}
			}

			if (pt.x > width) {
				pt.x = width;
			} else if (pt.x < 0) {
				pt.x = 0;
			}
			if (pt.y > height) {
				pt.y = height;
			} else if (pt.y < 0) {
				pt.y = 0;
			}

			this.RTAdjustInfo.move = { x: ex, y: ey };
			this._drawRect(this.RTAdjustInfo);
		}
		// 调整多边形大小

	}, {
		key: '_adjustPolygonOrLine',
		value: function _adjustPolygonOrLine(ex, ey) {
			var type = this.RTAdjustInfo.type,
			    pointArr = this.RTAdjustInfo.polygonArr,
			    index = this.RTAdjustInfo.adjustIndex,
			    move = this.RTAdjustInfo.move,
			    width = this.svgLastSize.width,
			    height = this.svgLastSize.height;

			if (ex != move.x || ey != move.y || this.RTAdjustInfo.status == RTDrawStatus.ADJUSTFINISH) {
				pointArr[index].x = pointArr[index].x + ex - move.x;
				pointArr[index].y = pointArr[index].y + ey - move.y;
				if (pointArr[index].x > width) {
					pointArr[index].x = width;
				} else if (pointArr[index].x < 0) {
					pointArr[index].x = 0;
				}
				if (pointArr[index].y > height) {
					pointArr[index].y = height;
				} else if (pointArr[index].y < 0) {
					pointArr[index].y = 0;
				}
				this.RTAdjustInfo.move = { x: ex, y: ey };
				if (type === "polygon" || type === "line") {
					this._drawPolygonOrLine(this.RTAdjustInfo);
				} else if (type === "doubleline") {
					this._drawDoubleline(this.RTAdjustInfo);
				}
			}
		}

		// 计算移动时的坐标边界

	}, {
		key: '_calMoveGapobj',
		value: function _calMoveGapobj(objInfo, pointArr, ex, ey) {
			var xGap = ex - objInfo.move.x,
			    yGap = ey - objInfo.move.y,

			//svg = this.drawSvg,
			maxX = this.svgLastSize.width,
			    maxY = this.svgLastSize.height,
			    minX = 0,
			    minY = 0,
			    pointMaxX = -1,
			    pointMaxY = -1,
			    pointMinX = -1,
			    pointMinY = -1,
			    pointXArr = [],
			    pointYArr = [];
			pointXArr = pointArr.map(function (item) {
				return item.x;
			});
			pointMaxX = Math.max.apply(null, pointXArr);
			pointMinX = Math.min.apply(null, pointXArr);
			pointYArr = pointArr.map(function (item) {
				return item.y;
			});
			pointMaxY = Math.max.apply(null, pointYArr);
			pointMinY = Math.min.apply(null, pointYArr);

			if (pointMaxX + xGap > maxX) {
				xGap = maxX - pointMaxX;
			} else if (pointMinX + xGap < minX) {
				xGap = minX - pointMinX;
			}
			if (pointMaxY + yGap > maxY) {
				yGap = maxY - pointMaxY;
			} else if (pointMinY + yGap < minY) {
				yGap = minY - pointMinY;
			}
			return {
				xGap: xGap, // 移动的x方向的距离
				yGap: yGap // 移动的y方向的距离
			};
		}

		// 移动绘制的图像

	}, {
		key: '_moveShape',
		value: function _moveShape(ex, ey) {
			var type = this.RTAdjustInfo.type,
			    ele = this.RTAdjustInfo.ele,
			    pointArr = JSON.parse(ele.getAttribute("pointArr")),
			    gapObj = this._calMoveGapobj(this.RTAdjustInfo, pointArr, ex, ey),
			    xGap = gapObj.xGap,
			    yGap = gapObj.yGap;

			for (var i = 0, len = pointArr.length; i < len; i++) {
				pointArr[i].x += xGap;
				pointArr[i].y += yGap;
			}
			this.RTAdjustInfo.polygonArr = pointArr;
			if (type === "polygon" || type === "line") {
				this._drawPolygonOrLine(this.RTAdjustInfo);
			} else if (type === "rect") {
				this._drawRect(this.RTAdjustInfo);
			} else if (type === "doubleline") {
				this._drawDoubleline(this.RTAdjustInfo);
			}
			this.RTAdjustInfo.move.x = ex;
			this.RTAdjustInfo.move.y = ey;
		}

		// 添加鼠标样式 

	}, {
		key: '_addSVGMouseStyle',
		value: function _addSVGMouseStyle(ele, mouseStyle) {
			ele.style.cursor = mouseStyle;
		}
	}, {
		key: '_onSvgMouseUp',
		value: function _onSvgMouseUp(event) {
			//console.log("_onSvgMouseUp")
			var e = event || window.event,
			    ex = e.offsetX,
			    ey = e.offsetY;
			if (ex < 0) {
				ex = 0;
			} else if (ex > this.svgLastSize.width) {
				ex = this.svgLastSize.width;
			}
			if (ey < 0) {
				ey = 0;
			} else if (ey > this.svgLastSize.height) {
				ey = this.svgLastSize.height;
			}

			var type = this.RTDrawInfo.type;
			if (this.RTDrawInfo.status === RTDrawStatus.BEGIN) {
				// 此种情况可能不会发生 即mousedown、mouseup发生后mousemove肯定发生
				if (type === "rect" || type === "line" || type === "doubleline") {
					this.RTDrawInfo.status = RTDrawStatus.INIT;
					// 删除未绘制的矩形path
					this.RTDrawInfo.eleGroup && this.drawSvg.removeChild(this.RTDrawInfo.eleGroup);
					this.RTDrawInfo.status = RTDrawStatus.INIT;
					this.RTDrawInfo.eleGroup = null;
				}
				return;
			} else if (this.RTDrawInfo.status === RTDrawStatus.DRAWING) {

				if (type === "rect" || type === "line" || type === "doubleline") {
					var ptArr = this.RTDrawInfo.polygonArr,
					    dx = ptArr[0].x - ex,
					    dy = ptArr[0].y - ey;
					if (dx > 5 || dx < -5 || dy > 5 || dy < -5) {
						ptArr[1].x = ex;
						ptArr[1].y = ey;
						this.RTDrawInfo.status = RTDrawStatus.FINISH;
						if (type === "rect") {
							this._drawRect(this.RTDrawInfo);
						} else if (type === "line") {
							this._drawPolygonOrLine(this.RTDrawInfo);
						} else {
							this._drawDoubleline(this.RTDrawInfo);
						}
						this.RTDrawInfo.eleGroup = null;
					} else {
						// 删除未绘制的
						this.RTDrawInfo.eleGroup && this.drawSvg.removeChild(this.RTDrawInfo.eleGroup);
						this.RTDrawInfo.status = RTDrawStatus.INIT;
						this.RTDrawInfo.eleGroup = null;
					}
				}
				return;
			}

			if (type === "") {
				this.drawSvgC.draggable = true;
			}
			type = this.RTAdjustInfo.type;
			if (this.RTAdjustInfo.status === RTDrawStatus.ADJUST) {
				//console.log("mouseup adjusting ("+ex+","+ey+")");
				this.RTAdjustInfo.status = RTDrawStatus.ADJUSTFINISH;
				if (type === "rect") {
					this._adjustRect(ex, ey);
				} else if (type === "polygon" || type === "line" || type === "doubleline") {
					this._adjustPolygonOrLine(ex, ey);
				}
				return;
			} else if (this.RTAdjustInfo.status === RTDrawStatus.STARTADJUST) {
				this.RTAdjustInfo.status = RTDrawStatus.FINISH;
				return;
			} else if (this.RTAdjustInfo.status === RTDrawStatus.MOVE) {
				//event.stopPropagation();
				this.RTAdjustInfo.status = RTDrawStatus.MOVEFINISH;
				this._moveShape(ex, ey);
				return;
			}
		}
	}, {
		key: '_getAdjustShapePoint',
		value: function _getAdjustShapePoint() {
			var ele = this.RTAdjustInfo.ele,
			    shape = ele.closest("g").getElementsByTagName("path")[0],
			    pointArr = JSON.parse(shape.getAttribute("pointArr"));

			if (this.RTAdjustInfo.type === "rect") {
				var x1 = pointArr[0].x,
				    y1 = pointArr[0].y,
				    x2 = pointArr[1].x,
				    y2 = pointArr[1].y,
				    index = this.lastMouseStyle.index;
				//固定为调整 pt[1]
				if ((index === 0 || index === 3) && x2 > x1) {
					//x调小
					pointArr[0].x = x2;
					pointArr[1].x = x1;
				} else if ((index === 1 || index === 2) && x2 < x1) {
					//x调大的
					pointArr[0].x = x2;
					pointArr[1].x = x1;
				}
				if ((index === 0 || index === 1) && y2 > y1) {
					//y调小
					pointArr[0].y = y2;
					pointArr[1].y = y1;
				} else if ((index === 2 || index === 3) && y2 < y1) {
					//y调大的
					pointArr[0].y = y2;
					pointArr[1].y = y1;
				}
				this.lastMouseStyle.index = 1;
			}
			this.RTAdjustInfo.polygonArr = pointArr;
			this.RTAdjustInfo.adjustIndex = this.lastMouseStyle.index;
			this.RTAdjustInfo.direction = this.lastMouseStyle.direction;
		}
	}, {
		key: '_checkAdjustShape',
		value: function _checkAdjustShape(e) {
			if (this.lastHoverShape) {
				var ele = this.lastHoverShape._ele;
				this._showCurShapePoint(this.lastHoverShape);

				this.RTAdjustInfo.type = ele.getAttribute("type");
				this.RTAdjustInfo.arrow = ele.getAttribute("arrow") - "0";
				this.RTAdjustInfo.arrowpos = ele.getAttribute("arrowpos") - "0";
				this.RTAdjustInfo.distance = ele.getAttribute("distance") - "0";
				//console.log("svg mousedown  onhoveshape = "+this.lastHoverShape.id);
				this.RTAdjustInfo.ele = ele;

				if (this.lastMouseStyle) {
					if (this.lastMouseStyle.mouse != "move") {
						this._getAdjustShapePoint(this.lastHoverShape);
						if (this.lastMouseStyle.mouse === "pointer") {
							//箭头
							this.RTAdjustInfo.status = RTDrawStatus.ADJUSTFINISH;
							this._adjustLineArrow();
						} else {
							this.RTAdjustInfo.status = RTDrawStatus.STARTADJUST;
						}
					} else {
						this.RTAdjustInfo.status = RTDrawStatus.MOVE;
					}
				}
				this.RTAdjustInfo.move.x = e.offsetX;
				this.RTAdjustInfo.move.y = e.offsetY;
				return true;
			}
			return false;
		}
	}, {
		key: '_finishPolygon',
		value: function _finishPolygon(bdel, ex, ey) {
			if (this.RTDrawInfo.type === "polygon" && (this.RTDrawInfo.status == RTDrawStatus.BEGIN || this.RTDrawInfo.status == RTDrawStatus.DRAWING)) {
				this.RTDrawInfo.status = RTDrawStatus.FINISH;
				this.RTDrawInfo.pointCount = 0;
				if (bdel) {
					this.RTDrawInfo.eleGroup && this.drawSvg.removeChild(this.RTDrawInfo.eleGroup);
					this.RTDrawInfo.eleGroup = null;
					return true;
				} else {
					var polygon = this.RTDrawInfo.polygonArr.pop();
					polygon.x = ex;
					polygon.y = ey;
					this.RTDrawInfo.polygonArr.push(polygon);
					// 在双击时，会先执行两次mousedown,故去掉两次重复的点值
					this.RTDrawInfo.polygonArr.length = this.RTDrawInfo.polygonArr.length - 2;
					if (this.RTDrawInfo.polygonArr.length > 2) {
						this._drawPolygonOrLine(this.RTDrawInfo);
						return true;
					} else {
						//小于两个点的删除
						this.RTDrawInfo.eleGroup && this.drawSvg.removeChild(this.RTDrawInfo.eleGroup);
						this.RTDrawInfo.eleGroup = null;
						if (this.RTDrawInfo.polygonArr.length == 2) {
							var ptArr = this.RTDrawInfo.polygonArr,
							    dx = ptArr[0].x - ptArr[1].x,
							    dy = ptArr[0].y - ptArr[1].y;
							if (dx > 5 || dx < -5 || dy > 5 || dy < -5) {
								//不是在原始点双击
								return true;
							}
						}
					}
				}
			}
			return false;
		}

		// 绑定svg事件

	}, {
		key: '_bindSvgEvent',
		value: function _bindSvgEvent() {
			var _this2 = this;

			// 点击视频，取消编辑状态(隐藏所有的点)
			_eventUtil.EventUtil.addHandler(this.drawSvg, "click", function (event) {
				event.stopPropagation();
				_this2._emitter.emit(_NPPlayerEvent2.default.OnWndClick, _this2.vOpt.index);
			});

			_eventUtil.EventUtil.addHandler(this.drawSvg, 'mousedown', function (event) {
				// 开始绘制
				event.stopPropagation();
				_this2._emitter.emit(_NPPlayerEvent2.default.OnMouseDown, _this2.vOpt.index, "drawsvg");

				var e = event || window.event;
				if (e.button !== 0) {
					// 不是鼠标左键
					_this2._finishPolygon(true);
					return;
				}

				var ex = e.offsetX,
				    ey = e.offsetY;

				if (_this2.RTDrawInfo.status != RTDrawStatus.BEGIN && _this2.RTDrawInfo.status != RTDrawStatus.DRAWING) {
					_this2._checkHoverShape(e, true);
					if (_this2._checkAdjustShape(e)) {
						_this2.drawSvgC.draggable = false;
						return;
					} else if (_this2.RTDrawInfo.type === "") {
						_this2.drawSvgC.draggable = true;
					}
				}
				_this2._hideAllGrapthPoint();
				var type = _this2.RTDrawInfo.type;
				if (type === "rect" || type === "line" || type === "doubleline") {
					_this2.RTDrawInfo.status = RTDrawStatus.BEGIN;
					_this2._createShape(_this2.RTDrawInfo);
					_this2.RTDrawInfo.polygonArr = [{ x: ex, y: ey }, { x: ex, y: ey }];
				} else if (type === "polygon") {
					// 多边形
					if (_this2.RTDrawInfo.pointCount === 0) {
						_this2.RTDrawInfo.status = RTDrawStatus.BEGIN;
						_this2._createShape(_this2.RTDrawInfo);
						_this2.RTDrawInfo.polygonArr = [{ x: ex, y: ey }];
					}
					_this2.RTDrawInfo.pointCount++;
					_this2.RTDrawInfo.polygonArr.push({ x: ex, y: ey });
				}
			});
			_eventUtil.EventUtil.addHandler(this.drawSvg, 'mousemove', function (event) {
				//console.log("drawSvg mousemove");
				event.stopPropagation();
				var e = event || window.event,
				    ex = e.offsetX,
				    ey = e.offsetY;
				//绘制
				var type = _this2.RTDrawInfo.type;
				if (_this2.RTDrawInfo.status === RTDrawStatus.BEGIN || _this2.RTDrawInfo.status === RTDrawStatus.DRAWING) {
					_this2.RTDrawInfo.status = RTDrawStatus.DRAWING;
					if (type === "rect" || type === "line" || type === "doubleline") {
						var ptArr = _this2.RTDrawInfo.polygonArr,
						    dx = ptArr[0].x - ex,
						    dy = ptArr[0].y - ey;
						if (dx > 5 || dx < -5 || dy > 5 || dy < -5) {
							ptArr[1].x = ex;
							ptArr[1].y = ey;
							if (type === "rect") {
								_this2._drawRect(_this2.RTDrawInfo);
							} else if (type === "line") {
								_this2._drawPolygonOrLine(_this2.RTDrawInfo);
							} else if (type === "doubleline") {
								_this2._drawDoubleline(_this2.RTDrawInfo);
							}
						}
					} else if (type === "polygon") {
						var polygon = _this2.RTDrawInfo.polygonArr.pop();
						polygon.x = ex;
						polygon.y = ey;
						_this2.RTDrawInfo.polygonArr.push(polygon);
						_this2._drawPolygonOrLine(_this2.RTDrawInfo);
					}
					//console.log("drawSvg mousemove drawing");
					return;
				}

				//调整
				type = _this2.RTAdjustInfo.type;
				if (_this2.RTAdjustInfo.status === RTDrawStatus.STARTADJUST || _this2.RTAdjustInfo.status === RTDrawStatus.ADJUST) {
					_this2.RTAdjustInfo.status = RTDrawStatus.ADJUST;
					if (type === "rect") {
						_this2._adjustRect(ex, ey);
					} else if (type === "polygon" || type === "line" || type === "doubleline") {
						_this2._adjustPolygonOrLine(ex, ey);
					}
					//console.log("drawSvg mousemove adjusting");
					return;
				} else if (_this2.RTAdjustInfo.status === RTDrawStatus.MOVE) {
					_this2._moveShape(ex, ey);
					//console.log("drawSvg mousemove moving");
					return;
				}

				_this2._checkHoverShape(e);
			});
			_eventUtil.EventUtil.addHandler(this.drawSvg, "mouseleave", function (event) {
				//console.log("mouseleave lastHoverShape = null");
				if (_this2.lastHoverShape) {
					_this2.lastHoverShape._ele.style.strokeWidth = _this2.lastHoverShape.lineWidth;
					_this2.lastHoverShape = null;
				}
				_this2._onSvgMouseUp(event);
			});
			_eventUtil.EventUtil.addHandler(this.drawSvg, "mouseup", function (event) {
				_this2._onSvgMouseUp(event);
			});
			// 双击结束多边形的绘制
			_eventUtil.EventUtil.addHandler(this.drawSvg, "dblclick", function (event) {
				//console.log("dblclick");
				event.stopPropagation(); //冒泡上去的会判断云台状态，此层不需要
				var e = event || window.event,
				    ex = e.offsetX,
				    ey = e.offsetY;
				if (!_this2._finishPolygon(false, ex, ey)) {
					//不是完成绘制多边形 
					_this2._emitter.emit(_NPPlayerEvent2.default.OnWndDClik, _this2.vOpt.index);
				}
			});
		}
		// 显示当前图形的顶点

	}, {
		key: '_showCurShapePoint',
		value: function _showCurShapePoint(shape) {
			if (this.lastSelectShape && this.lastSelectShape.id != shape.id) {
				this._hideHoverGrapthPoint();
			}
			var points = shape._ele.closest("g").getElementsByClassName("rtd-point");
			for (var i = 0, len = points.length; i < len; i++) {
				points[i].style.opacity = 1;
			}
			this.lastSelectShape = { id: shape.id, lineWidth: shape.lineWidth, _ele: shape._ele };
			//console.log("showCurShapePoint lastSelectShape =" + this.lastSelectShape.id);
		}

		// 隐藏所有的点

	}, {
		key: '_hideHoverGrapthPoint',
		value: function _hideHoverGrapthPoint() {
			if (this.lastSelectShape) {
				var ele = this.lastSelectShape._ele;
				var points = ele.closest("g").getElementsByClassName("rtd-point");
				for (var i = 0, len = points.length; i < len; i++) {
					points[i].style.opacity = 0;
				}
				//console.log("_hideHoverGrapthPoint lastSelectShape = " + this.lastSelectShape.id);
				this.lastSelectShape = null;
				this._emitter.emit(_NPPlayerEvent2.default.OnDrawingObject, { index: this.vOpt.index });
			}
		}

		// 隐藏所有的点

	}, {
		key: '_hideAllGrapthPoint',
		value: function _hideAllGrapthPoint() {
			//console.log("_hideAllGrapthPoint lastSelectShape = null");

			var points = this.drawSvgC.getElementsByClassName("rtd-point");
			for (var i = 0, len = points.length; i < len; i++) {
				points[i].style.opacity = 0;
			}
			this.lastSelectShape = null;
		}
	}, {
		key: '_checkHoverShape',
		value: function _checkHoverShape(e, button) {
			if (!button && e.buttons != 0 || this.svgLastSize.width <= 0 || this.svgLastSize.height <= 0) {
				return;
			}

			var hoveshape = null,
			    pt = { x: e.offsetX, y: e.offsetY },
			    lastdis = -1,
			    style = {},
			    _this = this;

			this.RTDrawResult.every(function (item) {
				var tempstyle = { direction: "", mouse: "move", index: 0 };
				if (item.type === "rect" && _tool.Toolkit.isPointInRect(pt, item._points, tempstyle) || item.type === "polygon" && _tool.Toolkit.isPointInPolygon(pt, item._points, tempstyle) || item.type === "line" && _tool.Toolkit.isPointInLine(pt, item._points, tempstyle, item.arrowpos, item.arrow) || item.type === "doubleline" && _tool.Toolkit.isPointInDoubleline(pt, item._points, tempstyle, item.arrowpos, item.arrow, item._ele.getAttribute("xoffset"), item._ele.getAttribute("yoffset"))) {
					if (_this.lastSelectShape && _this.lastSelectShape.id == item.id && tempstyle.mouse != "move") {
						hoveshape = item;
						style = _tool.Toolkit.deepMerge({}, tempstyle);
						return false;
					}
					var dis = _tool.Toolkit.getShapeDistance(pt, item._points);
					if (lastdis < 0 || dis < lastdis) {
						hoveshape = item;
						lastdis = dis;
						style = _tool.Toolkit.deepMerge({}, tempstyle);
					}
				}
				return true;
			});
			if (!hoveshape) {
				style.mouse = this.RTDrawInfo.type != "" ? "crosshair" : "Default";
			} else if (this.lastSelectShape && hoveshape && this.lastSelectShape.id == hoveshape.id) {
				//
			} else {
				style.mouse = "move";
			}
			this.lastMouseStyle = style;
			this._addSVGMouseStyle(this.drawSvg, style.mouse);

			if (this.lastHoverShape != hoveshape || this.lastHoverShape && hoveshape && this.lastHoverShape.id != hoveshape.id) {
				if (this.lastHoverShape) {
					this.lastHoverShape._ele.style.strokeWidth = this.lastHoverShape.lineWidth;
				}
				if (hoveshape) {
					var lineWidth = parseInt(hoveshape.lineWidth) + 1;
					hoveshape._ele.style.strokeWidth = lineWidth + "px";
					this.lastHoverShape = { id: hoveshape.id, lineWidth: hoveshape.lineWidth, _ele: hoveshape._ele };
				} else {
					this.lastHoverShape = null;
				}
			}
		}
	}]);

	return RealTimeDrawing;
}();

exports.default = RealTimeDrawing;

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // 事件工具集

// 工具集

// NPPlayer的默认事件，包含窗口事件（单击、双击、窗口交换）、焦点改变等


var _eventUtil = __webpack_require__(330);

var _tool = __webpack_require__(329);

var _NPPlayerEvent = __webpack_require__(389);

var _NPPlayerEvent2 = _interopRequireDefault(_NPPlayerEvent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//前缀
var prefix = 'h5vp-time';
var TIMELEVEL = [prefix + '-bg-axis', //0-10秒
prefix + '-bg-axis6', //2-1分钟
prefix + '-bg-axis5', //2-5分钟
prefix + '-bg-axis2', //3-10分钟
prefix + '-bg-axis3', //4-30分钟
prefix + '-bg-axis4', //5-1小时
prefix + '-bg-axis3', //6-3小时
prefix + '-bg-axis2', //7-6小时
prefix + '-bg-axis4', //8-1天
prefix + '-bg-axis5', // 9-5天
prefix + '-bg-axis2', //10-30天
prefix + '-bg-axis3' //11-90天
];
var TIMELFORMAT = ['mm:ss', //0-10秒
'mm:ss', //2-5分钟
'hh:mm', //3-10分钟
'hh:mm', //4-30分钟
'hh:mm', //5-1小时
'dd-hh', //6-3小时
'dd-hh', //7-6小时
'MM/dd', //8-1天
'MM/dd', // 9-5天
'MM/dd', //10-30天
'yyyy/MM/dd' //11-90天
];
var LEVELS = [10, 60, 5 * 60, 10 * 60, 30 * 60, 60 * 60, 3 * 3600, 6 * 3600, 24 * 3600, 5 * 24 * 3600, 30 * 24 * 3600, 90.4 * 24 * 3600];

var HistoryTimeAxis = function () {
	function HistoryTimeAxis() {
		_classCallCheck(this, HistoryTimeAxis);
	}

	_createClass(HistoryTimeAxis, [{
		key: 'initializer',
		value: function initializer() {
			this._timeAxisBox = null; //时间容器
			this._timeAxisTranslate = null; //滚动时间轴
			this._subLabelBox = null; //时间容器
			this._axisBtn = null; //展开，收缩按钮
			this.isDragTimeAxis = false; //是否拖动
			this._offsetXTimeAxis = 0;
			this._isDragAxisBtn = false; //是否拖动
			this._offsetYAxisBtn = 0;
			this._isClickAxisBtn = true;
			this._dragStartTime = 0;
			this._defaultLevel = 0;
			this._curremtLevel = 0;
			this._axisLabelContainer = null;
			this._topTimeLabel = null; //顶层刻度
			this._startTime = 0;
			this._endTime = 0;
			this._rcdtimershaft = null;
			this._updateTimeAxisChecker = null;
			this._topAxisPos = 0;
			this._topAxisOffset = 0;
			this._thumbPos = 0.5;
		}
	}, {
		key: 'resetVariays',
		value: function resetVariays() {
			this._axisBtn = null; //展开，收缩按钮
			this.isDragTimeAxis = false; //是否拖动
			this._offsetXTimeAxis = 0;
			this._dragStartTime = 0;
			this._isDragAxisBtn = false; //是否拖动
			this._offsetYAxisBtn = 0;
			this._isClickAxisBtn = true;
			this._defaultLevel = 0; //默认等级
			this._curremtLevel = 0; //当前等级
			this._topTimeLabel = null; //顶层刻度
			this._startTime = 0;
			this._endTime = 0;
			this._rcdtimershaft = null;
			this._topAxisPos = 0;
			this._topAxisOffset = 0;
			this._thumbPos = 0.5;
		}
	}, {
		key: 'isShowTimeAxis',
		value: function isShowTimeAxis() {
			if (this._timeAxisBox) {
				return true;
			}
			return false;
		}
	}, {
		key: 'showTimeAxis',
		value: function showTimeAxis(opt) {
			this.resetVariays();
			this.closeTimeAxis();
			this._rcdtimershaft = opt || this.vOpt.rcdtimershaft;
			this._defaultLevel = this._rcdtimershaft.level || 0;

			var dataRange = this.getVideoRange();
			if (!dataRange) {
				dataRange = {};
				dataRange.begintime = new Date().getTime();
				dataRange.endtime = dataRange.begintime;
				this._updateTimeAxisChecker = window.setInterval(this._updateHistoryTimeAxis.bind(this), 1000);
			}
			var startTime = dataRange.begintime;
			var endTime = dataRange.endtime;

			this._startTime = startTime;
			this._endTime = endTime;
			this._createTimeAxis(startTime);
		}
	}, {
		key: 'updateTimeAxis',
		value: function updateTimeAxis() {
			this._topAxisOffset = this._timeAxisBox.offsetWidth * this._thumbPos - this._topAxisPos;
			this._updateHistoryTimeAxis(new Date(this._topTimeLabel.innerText).getTime());
			this._controlAxisPositon();
			this._resizeDeviceName();
		}
		/**
   * 创建时间轴
   * @param {*} startTime 查询的开始时间
   */

	}, {
		key: '_createTimeAxis',
		value: function _createTimeAxis(startTime) {
			//面板
			this._timeAxisBox = document.createElement('div');
			this._timeAxisBox.className = prefix + '-axis';
			this._timeAxisBox.style.background = this._rcdtimershaft.backcolor; //设置颜色
			this.vOpt.fatherEle.firstElementChild.appendChild(this._timeAxisBox);

			//默认的刻度轴
			this._axisLabelContainer = document.createElement('div');
			this._axisLabelContainer.className = prefix + '-axis-label-container';
			this._axisLabelContainer.classList.add('' + TIMELEVEL[this._defaultLevel]);
			// this._axisLabelContainer.style.backgroundImage = `url(${TIMELEVEL[this._defaultLevel]})`

			this._timeAxisBox.appendChild(this._axisLabelContainer);
			var topAxis = document.createElement('span');
			var topTimeLabel = document.createElement('p');

			this._topTimeLabel = topTimeLabel;
			//添加时间中心轴游标
			topAxis.className = prefix + '-top-axis';
			this._thumbPos = parseInt(this._rcdtimershaft.thumbpos) / 100;
			topAxis.style.left = parseInt(this._rcdtimershaft.thumbpos) + "%";
			topAxis.style.background = this._rcdtimershaft.thumbcolor; //游标颜色
			this._timeAxisBox.appendChild(topAxis);

			//设备名称
			var vodTitle = document.createElement('span');
			vodTitle.className = prefix + '-title';
			vodTitle.style.color = this._rcdtimershaft.captioncolor;
			vodTitle.innerText = this.isVodPlay() ? this._videoTitle : "";
			this._timeAxisBox.appendChild(vodTitle);

			//时间中心轴播放时间
			topTimeLabel.innerText = ''; //new Date(startTime).format('yyyy-MM-dd hh:mm:ss')
			topTimeLabel.className = prefix + '-center-label';
			topTimeLabel.style.left = this._thumbPos * 100 - 50 + "%";
			topTimeLabel.style.color = this._rcdtimershaft.curtimecolor; //中心轴展示时间
			this._timeAxisBox.appendChild(topTimeLabel);

			//展开收起按钮
			this._axisBtn = document.createElement('div');
			this._axisBtn.className = prefix + '-axis-expand-botton';
			this._axisBtn.setAttribute('title', '按住鼠标拖动');
			this._axisBtn.style.background = this._rcdtimershaft.backcolor;
			this._timeAxisBox.appendChild(this._axisBtn);

			//控制位置
			this._controlAxisPositon();
			this._resizeDeviceName();
			//绘制坐标
			var pts = this.getPlayPts();
			this._timeAxisUpdate(startTime > pts ? startTime : pts);
			this._addEventFn();
		}
		/**
   * 控制位置
   */

	}, {
		key: '_controlAxisPositon',
		value: function _controlAxisPositon() {
			this.vOpt.fatherEle.firstElementChild.style.height = '100%';
			switch (this._rcdtimershaft.curPositon) {
				case 'top':
					this._timeAxisBox.style.bottom = this.vOpt.fatherEle.firstElementChild.offsetHeight - this._timeAxisBox.offsetHeight + 'px';
					this._timeAxisBox.setAttribute('offset-y', -(this.vOpt.fatherEle.firstElementChild.offsetHeight - this._timeAxisBox.offsetHeight));
					break;
				case 'bottom':
					this._timeAxisBox.style.bottom = '0px';
					this._timeAxisBox.setAttribute('offset-y', 0);
					break;
				case 'fix':
					//全屏失效
					this.vOpt.fatherEle.firstElementChild.style.height = this.vOpt.fatherEle.firstElementChild.offsetHeight - this._timeAxisBox.offsetHeight + 'px';
					this._timeAxisBox.style.bottom = -this._timeAxisBox.offsetHeight + 'px';
					if (this._axisBtn) {
						this._axisBtn.style.opacity = "0";
					}
					break;
				default:
					if (this._rcdtimershaft.curPositon >= this.vOpt.fatherEle.firstElementChild.offsetHeight - this._timeAxisBox.offsetHeight) {
						this._rcdtimershaft.curPositon = this.vOpt.fatherEle.firstElementChild.offsetHeight - this._timeAxisBox.offsetHeight;
					}
					this._timeAxisBox.style.bottom = this._rcdtimershaft.curPositon * 1 + 'px';
					this._timeAxisBox.setAttribute('offset-y', -this._rcdtimershaft.curPositon * 1);
					break;
			}
		}
		/**
   * 更新轴
   * @param {*}  currentTime 时间戳
   */

	}, {
		key: '_timeAxisUpdate',
		value: function _timeAxisUpdate(currentTime) {
			var left = this._timeAxisBox.offsetWidth * this._thumbPos,
			    right = this._timeAxisBox.offsetWidth - left,
			    result = this._getScaleArray(currentTime, this._defaultLevel, left, right, this._startTime);
			if (this._subLabelBox) {
				this._updateBottomTime(result);
			} else {
				this._createBottomTime(result);
			}
			if (this._timeAxisTranslate) {
				this._updateTopTimeAxis(result);
			} else {
				this._createTopTimeAxis(result);
			}
			this._updateCurrentTime(currentTime);
		}
	}, {
		key: '_resizeDeviceName',
		value: function _resizeDeviceName() {
			var deviceTitle = this._timeAxisBox.querySelectorAll('.' + prefix + '-title')[0];
			if (deviceTitle.offsetWidth >= this._timeAxisBox.offsetWidth * this._thumbPos - 100) {
				deviceTitle.style.opacity = "0";
			} else {
				deviceTitle.style.opacity = "1";
			}
		}
		/**
   * 偏移刻度
   */

	}, {
		key: '_updateTopTimeAxis',
		value: function _updateTopTimeAxis(result) {

			this._timeAxisTranslate.style.marginLeft = this._topAxisOffset + result.offsetbg + 'px';
			this._axisLabelContainer.style.backgroundPositionX = result.offset + this._timeAxisBox.offsetWidth * this._thumbPos % 150 + 'px';
		}
		/**
   * 更新时间
   * @param {*} currentTime
   */

	}, {
		key: '_updateCurrentTime',
		value: function _updateCurrentTime(currentTime) {
			this._topTimeLabel.innerText = new Date(currentTime).format("yyyy-MM-dd hh:mm:ss");
		}
		/**
   * 创建坐标时间
   */

	}, {
		key: '_createBottomTime',
		value: function _createBottomTime(result) {
			var _subLabelBox = document.createElement('div'),
			    subAxisList = result.arr;
			_subLabelBox.className = prefix + '-sublabel-container';
			this._subLabelBox = _subLabelBox;
			for (var subAxis = 0; subAxis < subAxisList.length; subAxis++) {
				var labelWidth = 100;
				var lineEleLabel = document.createElement('span');
				lineEleLabel.className = prefix + '-line-axis-label';
				lineEleLabel.style.width = labelWidth + 'px';
				lineEleLabel.style.left = this._timeAxisBox.offsetWidth * this._thumbPos + subAxisList[subAxis].pos - labelWidth / 2 + 'px';
				//设置刻度值
				lineEleLabel.innerText = subAxisList[subAxis].time;
				_subLabelBox.appendChild(lineEleLabel);
			}
			this._timeAxisBox.appendChild(_subLabelBox);
		}
		/**
   * 更新坐标时间
   * @param {*} result
   */

	}, {
		key: '_updateBottomTime',
		value: function _updateBottomTime(result) {
			try {
				var subAxisList = result.arr;
				var domList = this._timeAxisBox.querySelectorAll('.' + prefix + '-line-axis-label');
				//清除多余的dom
				if (domList.length > subAxisList.length) {
					for (var outCount = 0; outCount < domList.length - subAxisList.length; outCount++) {
						this._subLabelBox.removeChild(domList[subAxisList.length]);
					}
				}
				for (var subAxis = 0; subAxis < subAxisList.length; subAxis++) {
					var labelWidth = 100;
					var lineEleLabel = domList[subAxis];
					if (lineEleLabel) {
						lineEleLabel.style.left = this._timeAxisBox.offsetWidth * this._thumbPos + subAxisList[subAxis].pos - labelWidth / 2 + 'px';
						//设置刻度值
						lineEleLabel.innerText = subAxisList[subAxis].time;
					} else {
						var _lineEleLabel = document.createElement('span');
						_lineEleLabel.className = prefix + '-line-axis-label';
						_lineEleLabel.style.width = labelWidth + 'px';
						_lineEleLabel.style.left = this._timeAxisBox.offsetWidth * this._thumbPos + subAxisList[subAxis].pos - labelWidth / 2 + 'px';
						_lineEleLabel.innerText = subAxisList[subAxis].time;
						this._subLabelBox.appendChild(_lineEleLabel);
					}
				}
			} catch (e) {}
		}
		/**
   * 创建刻度轴
   * @param {*} result
   */

	}, {
		key: '_createTopTimeAxis',
		value: function _createTopTimeAxis(result) {
			var _timeAxisBoxWidth = this._timeAxisBox.offsetWidth;
			//刻度轴偏移
			if (this._axisLabelContainer) {
				this._axisLabelContainer.style.backgroundPositionX = result.offset + _timeAxisBoxWidth * this._thumbPos % 150 + 'px';
			}

			var startTime = this._startTime;
			//滚动轴
			this._timeAxisTranslate = document.createElement('div');
			this._timeAxisTranslate.style.height = '25px';
			this._timeAxisTranslate.style.marginTop = '18px';
			this._timeAxisTranslate.style.backgroundColor = this._rcdtimershaft.novodcolor;
			this._timeAxisTranslate.className = prefix + '-translate-box';
			this._timeAxisTranslate.style.left = _timeAxisBoxWidth * this._thumbPos + 'px';
			this._timeAxisTranslate.style.width = Math.ceil((this._endTime - this._startTime) * 15 / 1000) / (LEVELS[this._defaultLevel] / 10) + 'px';
			this._timeAxisTranslate.setAttribute('origin-width', Math.ceil((this._endTime - this._startTime) * 15 / 1000));
			this._timeAxisBox.insertBefore(this._timeAxisTranslate, this._axisLabelContainer);
			this._createVideoListDiv(this.getRecordList());
			//背景轴偏移
			this._topAxisPos = _timeAxisBoxWidth * this._thumbPos;
			this._topAxisOffset = 0;
			this._timeAxisTranslate.style.marginLeft = result.offsetbg + 'px';
		}
	}, {
		key: '_createVideoListDiv',
		value: function _createVideoListDiv(data) {
			var elem = this._timeAxisTranslate;
			while (elem.hasChildNodes()) //当elem下还存在子节点时 循环继续
			{
				elem.removeChild(elem.firstChild);
			}
			var startTime = this._startTime;
			var lrate = LEVELS[this._defaultLevel] / 10;
			for (var ivod = 0; data && ivod < data.length; ivod++) {
				var blockEle = document.createElement('div');
				var originWidth = 0,
				    originLeft = 0;
				blockEle.className = prefix + '-block ' + prefix + '-hasvod';
				blockEle.style.background = this._rcdtimershaft.vodcolor; //录像颜色
				originWidth = (data[ivod][1] - data[ivod][0]) * 15 / 1000;
				blockEle.style.width = originWidth / lrate + 'px';
				originLeft = (data[ivod][0] - startTime) * 15 / 1000;
				blockEle.style.left = originLeft / lrate + 'px';
				blockEle.setAttribute('origin-width', originWidth);
				blockEle.setAttribute('origin-left', originLeft);
				this._timeAxisTranslate.appendChild(blockEle);
			}
		}
		/**
   * 更新刻度背景
   * @param {*} delta >0 天->秒?delta <0 秒->天
   */

	}, {
		key: '_topBackgroundUpdate',
		value: function _topBackgroundUpdate(delta) {
			this._defaultLevel = this._defaultLevel - delta;
			if (this._defaultLevel < 0) {
				this._defaultLevel = 0;
				return;
			}
			if (this._defaultLevel > TIMELEVEL.length - 1) {
				this._defaultLevel = TIMELEVEL.length - 1;
				return;
			}

			this._emitter.emit(_NPPlayerEvent2.default.OnTimeaxisLevel, this.vOpt.index, this._defaultLevel);

			var levelRation = LEVELS[this._defaultLevel] / 10;
			var domList = document.querySelectorAll('.' + prefix + '-block');
			for (var subAxis = 0; subAxis < domList.length; subAxis++) {
				var blockEle = domList[subAxis];
				var originWidth = blockEle.getAttribute('origin-width');
				var originLeft = blockEle.getAttribute('origin-left');
				var width = originWidth / levelRation; //缩放更新宽度
				var left = originLeft / levelRation; //缩放更新偏移
				blockEle.style.width = width + 'px';
				blockEle.style.left = left + 'px';
			}
			if (this._timeAxisTranslate) {
				this._timeAxisTranslate.style.width = this._timeAxisTranslate.getAttribute('origin-width') / levelRation + 'px';
			}
			this._axisLabelContainer.classList.remove(this._axisLabelContainer.classList[1]);
			this._axisLabelContainer.classList.add('' + TIMELEVEL[this._defaultLevel]);
			// this._axisLabelContainer.style.backgroundImage = `url(${TIMELEVEL[this._defaultLevel]})`
			this._timeAxisUpdate(new Date(this._topTimeLabel.innerText).getTime());
		}

		/**
   * 绑定拖动事件
   * @param {*} _timeAxisTranslate
   */

	}, {
		key: '_addEventFn',
		value: function _addEventFn() {
			var _this2 = this;

			_eventUtil.EventUtil.addHandler(this._axisLabelContainer, 'contextmenu', function (event) {
				event.preventDefault();
				event.stopPropagation(); //阻止冒泡
				return false;
			});
			//刻度轴
			_eventUtil.EventUtil.addHandler(this._axisLabelContainer, 'mousedown', function (event) {
				event.preventDefault();
				event.stopPropagation(); //阻止冒泡
				var e = event || window.event;
				_this2.isDragTimeAxis = true;
				_this2._offsetXTimeAxis = e.clientX;
				_this2._dragStartTime = new Date(_this2._topTimeLabel.innerText).getTime();
				var offset = e.clientX;
				//console.log("mousedown _dragStartTime ", this._dragStartTime);

				//console.log("mousedown clientX ", this._offsetXTimeAxis, e.clientX);
				_eventUtil.EventUtil.addHandler(document, 'mousemove', function (event) {
					if (!_this2.isDragTimeAxis) return;
					event.stopPropagation(); //阻止冒泡
					event.preventDefault();
					var e = event || window.event;
					//console.log("mousemove clientX ", this._offsetXTimeAxis, e.clientX);
					//console.log("mousemove _dragStartTime ", this._dragStartTime);
					var distance = e.clientX - _this2._offsetXTimeAxis;
					if (distance < 2 && distance > -2) return;
					//更新位置
					_this2._timeAxisUpdate(_this2._dragStartTime - LEVELS[_this2._defaultLevel] * 1000 * distance / 150);
				});
				_eventUtil.EventUtil.addHandler(document, 'mouseup', function (event) {
					if (!_this2.isDragTimeAxis) return;
					event.stopPropagation(); ////阻止冒泡
					event.preventDefault();

					var e = event || window.event;
					_this2.isDragTimeAxis = false;
					//console.log(event);
					//console.log("mouseup clientX ", this._offsetXTimeAxis, e.clientX);
					//console.log("mouseup _dragStartTime ", this._dragStartTime);
					var distance = e.clientX - _this2._offsetXTimeAxis;
					if (distance < 2 && distance > -2) return;
					var endtime = new Date(_this2._topTimeLabel.innerText).getTime();
					if (Math.abs(endtime - _this2._dragStartTime) > 2000) {
						_this2.setPlayPts(endtime);
					}
				});
			});

			//滚轮事件
			_eventUtil.EventUtil.addHandler(this._axisLabelContainer, 'mousewheel', function (event) {
				event = event || window.event;
				event.stopPropagation(); //阻止冒泡
				event.preventDefault();
				var delta = event.wheelDelta && (event.wheelDelta > 0 ? 1 : -1);
				_this2._topBackgroundUpdate(delta);
			});

			//时间轴整体事件
			_eventUtil.EventUtil.addHandler(this._axisBtn, 'mousedown', function (event) {
				event = event || window.event;
				event.preventDefault();
				event.stopPropagation(); //阻止冒泡
				//默认位置小于0，则不可以移动
				_this2._isClickAxisBtn = true;
				if (_this2._rcdtimershaft.curPositon == 'fix') {
					return;
				}
				_this2._isDragAxisBtn = true; //是否拖动
				_this2._offsetYAxisBtn = event.clientY;

				//this._timeAxisBox.style.transition = 'all 0.6s ease-in'
				_eventUtil.EventUtil.addHandler(document, 'mousemove', function (event) {
					if (!_this2._isDragAxisBtn) return;
					event = event || window.event;
					event.stopPropagation(); //阻止冒泡
					event.preventDefault();

					var distanceY = event.clientY - _this2._offsetYAxisBtn;
					if (Math.abs(distanceY) <= 10) return;
					_this2._isClickAxisBtn = false;
					//console.log('distanceY', distanceY)
					var lastDistance = _this2._timeAxisBox.getAttribute('offset-y') * 1 || 0;
					var bottomOffset = -(distanceY + lastDistance);
					var topRange = _this2.vOpt.fatherEle.firstElementChild.offsetHeight - _this2._timeAxisBox.offsetHeight;
					if (bottomOffset > topRange) bottomOffset = topRange;
					if (bottomOffset < 0) bottomOffset = 0;

					_this2._timeAxisBox.style.bottom = bottomOffset + 'px';
					_this2._timeAxisBox.setAttribute('offset-y', -bottomOffset);
					_this2._rcdtimershaft.curPositon = bottomOffset; //保留位置
					_this2._offsetYAxisBtn = event.clientY;
				});
				_eventUtil.EventUtil.addHandler(document, 'mouseup', function (event) {
					if (!_this2._isDragAxisBtn) return;
					event = event || window.event;
					event.stopPropagation(); ////阻止冒泡
					event.preventDefault();
					_this2._isDragAxisBtn = false;
					var _this = _this2;
					window.setTimeout(function () {
						_this._isClickAxisBtn = true;
					}.bind(_this2), 100);
				});
			});

			//展开关闭时间轴
			_eventUtil.EventUtil.addHandler(this._axisBtn, 'click', function (event) {
				if (!_this2._isClickAxisBtn) {
					return;
				}
				event = event || window.event;
				event.preventDefault();
				event.stopPropagation(); //阻止冒泡
				_this2._timeAxisBox.style.transition = 'all 0.6s ease-in';
				if (_this2._timeAxisBox.style.width == '30px') {
					_this2._axisBtn.classList.remove('expand');
					_this2._timeAxisBox.style.width = '100%';
					_this2._topTimeLabel.style.opacity = "1";
					//this._resizeDeviceName()
					_this2._emitter.emit(_NPPlayerEvent2.default.OnTimeaxisLevel, _this2.vOpt.index, _this2._defaultLevel, true);
				} else {
					_this2._axisBtn.classList.add('expand');
					_this2._timeAxisBox.style.width = '30px';
					_this2._topTimeLabel.style.opacity = "0";
					//this._resizeDeviceName()
					_this2._emitter.emit(_NPPlayerEvent2.default.OnTimeaxisLevel, _this2.vOpt.index, _this2._defaultLevel, false);
				}
			});
			//默认是否收放。
			if (!this._rcdtimershaft.shrink) {
				this._axisBtn.classList.add('expand');
				this._topTimeLabel.style.opacity = "0";
				this._timeAxisBox.style.width = '30px';
			}
		}
		/**
   * 清除事件
   */

	}, {
		key: '_removeEventFn',
		value: function _removeEventFn() {
			if (!this._timeAxisTranslate) return;
			_eventUtil.EventUtil.removeHandler(this._timeAxisTranslate, 'mousedown', function (event) {
				//阻止冒泡
				event.stopPropagation();
			});

			_eventUtil.EventUtil.removeHandler(this._timeAxisTranslate, 'mouseup', function (event) {
				//阻止冒泡
				event.stopPropagation();
			});
		}
		/**
   * 关闭录像时间轴
   */

	}, {
		key: 'closeTimeAxis',
		value: function closeTimeAxis() {
			this._removeEventFn();
			//已经存在dom
			if (this._timeAxisTranslate) {
				this._timeAxisTranslate.remove();
				this._timeAxisTranslate = null;
			}
			if (this._subLabelBox) {
				this._subLabelBox.remove(); //时间文字
				this._subLabelBox = null; //时间文字
			}
			if (this._timeAxisBox) {
				this._timeAxisBox.remove();
				this._timeAxisBox = null;
			}
			if (this._updateTimeAxisChecker) {
				window.clearInterval(this._updateTimeAxisChecker);
				this._updateTimeAxisChecker = null;
			}
			return this._defaultLevel;
		}
	}, {
		key: '_updateHistoryTimeAxisRecord',
		value: function _updateHistoryTimeAxisRecord(vodlist) {
			//更新录像存储状态
			if (this._timeAxisTranslate) {
				this._createVideoListDiv(vodlist);
			}
		}
	}, {
		key: '_updateHistoryTimeAxis',
		value: function _updateHistoryTimeAxis(pts) {
			if (this.isDragTimeAxis || !this._timeAxisBox) return;
			if (pts == undefined || pts === 0) pts = new Date().getTime();
			this._timeAxisUpdate(pts);
		}

		/**
   * @param {number} cur 当前播放时间 毫秒
   */

	}, {
		key: '_getScaleArray',
		value: function _getScaleArray(cur, level, left, right, start) {
			//console.log(new Date(cur))
			var cell = 150; //cell  pix代表 LEVELS[level] 时间
			//0-10秒 1-1分钟 2-5分钟 3-10分钟 4-30分钟 5-1小时 6-3小时
			//7-6小时 8-1天 9-5天 10-30天 11-90天
			//0-5：1小时内无偏差  6-8：1天内偏差由8:00导致 9：只纠正天内偏差  10-11 纠正月内偏差
			var offsets = [0, 0, 0, 0, 0, 0, -2 * 3600, -2 * 3600, -8 * 3600, -8 * 3600, 0, 0];
			var showalltime = function showalltime(time) {
				return new Date(time).format('yyyy-MM-dd hh:mm:ss');
			};

			var scaleArr = [],

			//showtime = showalltime,
			showtime = this._getShowTime(level),
			    tlevel = LEVELS[level] * 1000,
			    toffset = offsets[level] * 1000,
			    //开始时间8点的偏差
			pos0 = 0,
			    // 左最靠近中心标记的偏移位置
			t0 = cur; // 左最靠近中心标记的时间

			if (level == 10) {
				var tm0 = new Date(start),
				    tm1 = new Date(tm0.getFullYear(), tm0.getMonth(), 1);
				toffset = tm0.getTime() - tm1.getTime();
				pos0 = parseInt(toffset / tlevel * cell);
				t0 = tm1.getTime();
			} else if (level == 11) {
				var _tm = new Date(start),
				    mth0 = _tm.getMonth(),
				    _tm2 = new Date(_tm.getFullYear(), mth0 - mth0 % 3, 1);
				toffset = _tm.getTime() - _tm2.getTime();
				pos0 = parseInt(toffset / tlevel * cell);
				t0 = _tm2.getTime();
			} else {
				pos0 = parseInt((cur % tlevel - toffset) / tlevel * cell);
				t0 = parseInt(cur + toffset - cur % tlevel);
			}

			if (pos0 > cell) {
				pos0 = pos0 - cell;
				t0 = t0 + tlevel;
			}
			left = left + cell / 4;
			right = right + cell / 4;
			for (var i = pos0, t = t0; i <= left; i += cell, t -= tlevel) {
				scaleArr.unshift({ pos: 0 - i, time: showtime(t) });
			}
			for (var i = cell - pos0, t = t0 + tlevel; i <= right; i += cell, t += tlevel) {
				scaleArr.push({ pos: i, time: showtime(t) });
			}
			return { offset: 0 - pos0, arr: scaleArr, offsetbg: parseInt((start - cur) / tlevel * cell) };
		}
	}, {
		key: '_getShowTime',
		value: function _getShowTime(level) {
			var get2sec = function get2sec(time) {
				var tm = new Date(time);
				if (tm.getHours() == 0 && tm.getMinutes() == 0 && tm.getSeconds() == 0) {
					if (tm.getMonth() == 0 && tm.getDate() == 1) {
						return tm.format('yyyy-MM-dd hh:mm:ss');
					} else {
						return tm.format('MM-dd hh:mm:ss');
					}
				} else {
					return tm.format('hh:mm:ss');
				}
			},
			    get2min = function get2min(time) {
				var tm = new Date(time);
				if (tm.getHours() == 0 && tm.getMinutes() == 0) {
					if (tm.getMonth() == 0 && tm.getDate() == 1) {
						return tm.format('yyyy-MM-dd hh:mm');
					} else {
						return tm.format('MM-dd hh:mm');
					}
				} else {
					return tm.format('hh:mm');
				}
			},
			    get2day = function get2day(time) {
				var tm = new Date(time);
				if (tm.getMonth() == 0 && tm.getDate() == 1) {
					return tm.format('yyyy-MM-dd');
				} else {
					return tm.format('MM-dd');
				}
			},
			    get2month = function get2month(time) {
				var tm = new Date(time);
				//console.log(tm.format('yyyy-MM-dd'))
				var MM = tm.getMonth() + 1;
				if (tm.getDate() < 15) {} else {
					MM = MM + 1;
				}
				var ss = void 0;
				if (MM > 12) {
					ss = tm.getFullYear() + 1 + '-01';
				} else if (MM == 1) {
					ss = tm.getFullYear() + '-01';
				} else {
					MM >= 10 ? ss = '' + MM : ss = '0' + MM;
				}
				//console.log(ss)
				return ss;
			};

			if (level > 9) {
				//月
				return get2month;
			} else if (level > 7) {
				//天
				return get2day;
			} else if (level > 1) {
				return get2min;
			}
			return get2sec;
		}
	}]);

	return HistoryTimeAxis;
}();

exports.default = HistoryTimeAxis;

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // 事件工具集

// 工具集


// NPPlayer的默认事件，包含窗口事件（单击、双击、窗口交换）、焦点改变等


var _eventUtil = __webpack_require__(330);

var _tool = __webpack_require__(329);

var _NPPlayerEvent = __webpack_require__(389);

var _NPPlayerEvent2 = _interopRequireDefault(_NPPlayerEvent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RCStatus = {
	INIT: 0,
	BEGIN: 1,
	DRAWING: 2,
	FINISH: 3,
	STARTADJUST: 4, // 开始编辑
	ADJUST: 5, // 编辑中
	ADJUSTFINISH: 6, // 编辑完成
	MOVE: 7, // 开始移动，移动中
	MOVEFINISH: 8 // 移动完成
};

var ZMStatus = {
	INIT: "init",
	BEGIN: "begin",
	DRAWING: "drawing",
	ZOOMING: "zooming",
	END: "end"
};

var ZoomDrawing = function () {
	function ZoomDrawing() {
		_classCallCheck(this, ZoomDrawing);
	}

	_createClass(ZoomDrawing, [{
		key: 'initializer',
		value: function initializer() {
			this._zmSvg = null;
			this._zmSvgC = null;
			this._zmCanvas = null;
			this._zmTimer = null;
			this._zmInfo = { // 每次绘制一个图形的对象
				status: RCStatus.INIT,
				ele: null,
				rect: {}, // 矩形坐标
				move: {} // 移动初始坐标
			};
			this._ptzInfo = { // 每次绘制一个图形的对象
				status: RCStatus.INIT,
				ele: null,
				rect: {} // 矩形坐标

			};
			//
			this._zmCvsSize = { left: 0, top: 0, width: 0, height: 0 }; //显示区域
			this._zmSvgSize = { left: 0, top: 0, width: 0, height: 0 }; //同video标签
			this._zmPos = {};
			this._bPtz = false;
			this._bZoom = false;
			this._ptzStyle = {};
			this._zmStyle = {};
			this._zmStatus = ZMStatus.INIT;
		}

		// 开启3D云台

	}, {
		key: 'startPtz3D',
		value: function startPtz3D(style) {
			if (!this._videoplayer && !this.isFirstCanPlay) {
				return false;
			}

			this._ptzStyle = _tool.Toolkit.deepMerge({ lineWidth: "2px", lineColor: "#0F0", fillOpacity: 0 }, style);
			if (!this._bPtz) {
				this._ptzInfo.status = RCStatus.INIT;
				this._bPtz = true;
				if (!this._zmSvg) {
					this._initZmSvg();
				}
				this._zmSvg.style.cursor = "crosshair";
			}
			return true;
		}
		// 结束3D云台

	}, {
		key: 'stopPtz3D',
		value: function stopPtz3D() {
			if (!this._zmSvgC) {
				return true;;
			}

			this._bPtz = false;
			this._ptzInfo.status = RCStatus.INIT;
			this._ptzInfo.ele = null;
			if (!this._bPtz && !this._bZoom) {
				this._zmSvgC.parentNode.removeChild(this._zmSvgC);
				this._zmSvgC = null;
				this._zmSvg = null;
			}
			return true;
		}
	}, {
		key: 'getZoomStatus',
		value: function getZoomStatus() {
			return this._zmStatus;
		}
	}, {
		key: 'getPtz3DStatus',
		value: function getPtz3DStatus() {
			return this._bPtz;
		}
	}, {
		key: 'stopZoomByDblclick',
		value: function stopZoomByDblclick(flag) {
			this.vOpt.enableStopZoomByDblclick = flag;
		}

		// 开启数字放大

	}, {
		key: 'startZoom',
		value: function startZoom(style) {
			if (!this._videoplayer && !this.isFirstCanPlay) {
				return false;
			}
			this._zmStyle = _tool.Toolkit.deepMerge({ lineWidth: "2px", lineColor: "#F00", fillOpacity: 0 }, style);
			if (!this._bZoom) {
				this._zmInfo.status = RCStatus.INIT;
				this._bZoom = true;
				if (!this._zmSvg) {
					this._initZmSvg();
				}
				this._zmSvg.style.cursor = "crosshair";
				this._zmStatus = ZMStatus.BEGIN;
				this._emitter.emit(_NPPlayerEvent2.default.OnZoomStatusChange, this.vOpt.index, ZMStatus.BEGIN);
			}
			return true;
		}
		// 结束数字放大

	}, {
		key: 'stopZoom',
		value: function stopZoom() {
			if (!this._zmSvgC) {
				return;
			}
			if (this._bZoom) {
				this.setRTSVGPosition(this._zmCvsSize);
				this.setVMCanvasPosition(this._zmCvsSize);
			}
			this._bZoom = false;
			this._zmInfo.status = RCStatus.INIT;
			this._zmInfo.ele = null;
			this._zmSvg.style.cursor = "crosshair";
			if (this._zmTimer) {
				window.cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame || window.webkitCancelRequestAnimationFrame;
				window.cancelAnimationFrame(this._zmTimer);
				this._zmTimer = null;
			}
			if (this._zmCanvas) {
				this._zmCanvas.parentNode.removeChild(this._zmCanvas);
				this._zmCanvas = null;
				this.vOpt.videoEle.style.position = "";
				this.vOpt.videoEle.style.left = "";
				this.vOpt.videoEle.style.top = "";
				this.vOpt.videoEle.style.width = "";
				this.vOpt.videoEle.style.height = "";
			}

			if (!this._bPtz && !this._bZoom) {
				this._zmSvgC.parentNode.removeChild(this._zmSvgC);
				this._zmSvgC = null;
				this._zmSvg = null;
			}
			this._zmStatus = ZMStatus.INIT;
			this._emitter.emit(_NPPlayerEvent2.default.OnZoomStatusChange, this.vOpt.index, ZMStatus.END);
		}
	}, {
		key: 'setZoomFilter',
		value: function setZoomFilter() {
			var ele = this.vOpt.videoEle;
			if (this._zmCanvas && ele) {
				this._zmCanvas.style.webkitFilter = ele.style.webkitFilter;
				this._zmCanvas.style.filter = ele.style.filter;
			}
		}

		// 创建svg元素和属性

	}, {
		key: '_createZmSVGEleTag',
		value: function _createZmSVGEleTag(tag, attrObj) {
			var ele = document.createElementNS('http://www.w3.org/2000/svg', tag);
			this._setZmSvgAttr(ele, attrObj);
			return ele;
		}
		// 设置元素属性

	}, {
		key: '_setZmSvgAttr',
		value: function _setZmSvgAttr(ele, attrObj) {
			for (var attr in attrObj) {
				ele.setAttribute(attr, attrObj[attr]);
			}
		}
		// 初始化svg

	}, {
		key: '_initZmSvg',
		value: function _initZmSvg() {
			if (!this._zmSvg) {
				this._zmSvgC = document.createElement("div");
				this._zmSvgC.className = "zoom-svg-container";
				this._zmSvgC.draggable = true;
				this._zmSvg = this._createZmSVGEleTag("svg", { "xmlns": "http://www.w3.org/2000/svg", "class": "zoom-svg" });

				this.setZoomSVGPosition(this._zmCvsSize); //不改变video大小
				this._zmSvgC.appendChild(this._zmSvg);
				if (this.drawSvgC) {
					//优先级高于实时绘制
					_tool.Toolkit.insertAfter(this._zmSvgC, this.drawSvgC);
					this.finishDrawing();
				} else if (this._watermkC) {
					//优先级高于水印
					_tool.Toolkit.insertAfter(this._zmSvgC, this._watermkC);
				} else if (this._drawVMCvsC) {
					//优先级高于属性叠加
					_tool.Toolkit.insertAfter(this._zmSvgC, this._drawVMCvsC);
				} else {
					//优先级高于video
					_tool.Toolkit.insertAfter(this._zmSvgC, this.vOpt.videoEle);
				}
				this._bindZmSvgEvent();
			}
		}
	}, {
		key: '_initZoomCanvas',
		value: function _initZoomCanvas() {
			if (!this._zmCanvas) {
				this._zmCanvas = document.createElement('canvas');
				this._zmCanvas.className = "ZoomCanvas";
				this.vOpt.videoC.insertBefore(this._zmCanvas, this.vOpt.videoC.getElementsByTagName("video")[0]);
			}
			if (!this._zmTimer) {
				window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
				this._zmTimer = window.requestAnimationFrame(this._drawZoomVideo.bind(this));
			}
		}
		// 修改svg已经绘制图形的坐标

	}, {
		key: '_modifyZoomShape',
		value: function _modifyZoomShape(curWidth, curHeight) {
			if (this._bZoom && this._zmInfo.status >= RCStatus.DRAWING && this._zmInfo.ele) {
				var rc = this._zmInfo.rect,
				    ratioX = curWidth / this._zmSvgSize.width,
				    ratioY = curHeight / this._zmSvgSize.height;
				rc.x1 = rc.x1 * ratioX;
				rc.y1 = rc.y1 * ratioY;
				rc.x2 = rc.x2 * ratioX;
				rc.y2 = rc.y2 * ratioY;
				var pathStr = 'M ' + rc.x1 + ',' + rc.y1 + ' ' + rc.x1 + ',' + rc.y2 + ' ' + rc.x2 + ',' + rc.y2 + ' ' + rc.x2 + ',' + rc.y1 + ' Z';
				this._zmInfo.ele.setAttribute("d", pathStr);
			}
		}

		// 设置svg的位置，用于设置画面比例时，调整svg的位置大小和视频画面保持一致 obj:{left: 50px; top: 100px;}

	}, {
		key: 'setZoomSVGPosition',
		value: function setZoomSVGPosition(pos) {
			var obj = _tool.Toolkit.deepMerge({}, pos);
			this._zmCvsSize = _tool.Toolkit.deepMerge({}, obj);
			if (this._zmSvg) {
				if (this._bZoom && this._zmStatus == ZMStatus.ZOOMING && this._zmCanvas) {
					this._zmCanvas.style.left = obj.left + "px";
					this._zmCanvas.style.top = obj.top + "px";
					this._zmCanvas.style.width = obj.width + "px";
					this._zmCanvas.style.height = obj.height + "px";
					this._zmCanvas.width = obj.width;
					this._zmCanvas.height = obj.height;
					var _w = Math.round(obj.width * 2 / 3),
					    _h = Math.round(obj.height * 2 / 3);
					obj.left = obj.left + _w;
					obj.top = obj.top + _h;
					obj.width = obj.width - _w;
					obj.height = obj.height - _h;

					this.vOpt.videoEle.style.position = "absolute";
					this.vOpt.videoEle.style.left = obj.left + "px";
					this.vOpt.videoEle.style.top = obj.top + "px";
					this.vOpt.videoEle.style.width = obj.width + "px";
					this.vOpt.videoEle.style.height = obj.height + "px";
				}

				this._zmSvg.style.left = obj.left + "px";
				this._zmSvg.style.top = obj.top + "px";
				this._zmSvg.style.width = obj.width + "px";
				this._zmSvg.style.height = obj.height + "px";
				this._setZmSvgAttr(this._zmSvg, { "width": obj.width, "height": obj.height });
				// 修改svg已经绘制图形的坐标
				this._modifyZoomShape(obj.width, obj.height);
				this._zmSvgSize = _tool.Toolkit.deepMerge({}, obj);
			}
			return _tool.Toolkit.deepMerge({}, obj);
		}

		// 绘制矩形框

	}, {
		key: '_drawZmRect',
		value: function _drawZmRect(objInfo, style) {
			// 设置矩形位置、大小
			var x1 = objInfo.rect.x1,
			    y1 = objInfo.rect.y1,
			    x2 = objInfo.rect.x2,
			    y2 = objInfo.rect.y2;

			if (objInfo.ele == null) {
				this._createZoomRect(objInfo, style);
			}
			this._setZmSvgAttr(objInfo.ele, { "d": 'M ' + x1 + ',' + y1 + ' ' + x1 + ',' + y2 + ' ' + x2 + ',' + y2 + ' ' + x2 + ',' + y1 + ' Z' });
		}

		// 创建图形

	}, {
		key: '_createZoomRect',
		value: function _createZoomRect(objInfo, style) {
			style = style || {};
			objInfo.ele = this._createZmSVGEleTag("path", { "style": ' fill:' + style.lineColor + '; fill-opacity:' + style.fillOpacity + '; stroke-width: ' + style.lineWidth + '; stroke: ' + style.lineColor });
			this._zmSvg.appendChild(objInfo.ele);
		}

		// 调整矩形大小

	}, {
		key: '_adjustZmRect',
		value: function _adjustZmRect(ex, ey) {
			if (this._bZoom && (this._zmInfo.status == RCStatus.STARTADJUST || this._zmInfo.status == RCStatus.ADJUST)) {
				var rect = this._zmInfo.rect,
				    direction = rect.direction,
				    move = this._zmInfo.move;

				if (direction === "x" && ex != move.x) {
					// 拖动边线中间点
					rect.x2 = rect.x2 + ex - move.x;
				} else if (direction === "y" && ey != move.y) {
					// 拖动边线中间点
					rect.y2 = rect.y2 + ey - move.y;
				} else if (direction === "xy" && (ex != move.x || ey != move.y)) {
					rect.x2 = rect.x2 + ex - move.x;
					rect.y2 = rect.y2 + ey - move.y;
				} else {
					return;
				}

				if (rect.x2 > this._zmSvgSize.width) {
					rect.x2 = this._zmSvgSize.width;
				} else if (rect.x2 < 0) {
					rect.x2 = 0;
				}
				if (rect.y2 > this._zmSvgSize.height) {
					rect.y2 = this._zmSvgSize.height;
				} else if (rect.y2 < 0) {
					rect.y2 = 0;
				}
				this._zmInfo.move = { x: ex, y: ey };
				this._drawZmRect(this._zmInfo);
			}
		}

		// 计算移动时的坐标边界

	}, {
		key: '_calMoveXY',
		value: function _calMoveXY(rc, pstart, ex, ey) {
			var xGap = ex - pstart.x,
			    yGap = ey - pstart.y,

			//svg = this._zmSvg,
			maxX = this._zmSvgSize.width,
			    maxY = this._zmSvgSize.height,
			    minX = 0,
			    minY = 0,
			    pointMaxX = Math.max(rc.x1, rc.x2),
			    pointMaxY = Math.max(rc.y1, rc.y2),
			    pointMinX = Math.min(rc.x1, rc.x2),
			    pointMinY = Math.min(rc.y1, rc.y2);

			if (pointMaxX + xGap > maxX) {
				xGap = maxX - pointMaxX;
			} else if (pointMinX + xGap < minX) {
				xGap = minX - pointMinX;
			}
			if (pointMaxY + yGap > maxY) {
				yGap = maxY - pointMaxY;
			} else if (pointMinY + yGap < minY) {
				yGap = minY - pointMinY;
			}
			return {
				xGap: xGap, // 移动的x方向的距离
				yGap: yGap // 移动的y方向的距离
			};
		}
		// 移动矩形位置

	}, {
		key: '_moveZmRect',
		value: function _moveZmRect(ex, ey) {
			if (this._bZoom && this._zmInfo.status == RCStatus.MOVE && this._zmInfo.ele) {
				var rc = this._zmInfo.rect,
				    gapObj = this._calMoveXY(rc, this._zmInfo.move, ex, ey),
				    xGap = gapObj.xGap,
				    yGap = gapObj.yGap;

				this._zmInfo.rect = { x1: rc.x1 + xGap, y1: rc.y1 + yGap, x2: rc.x2 + xGap, y2: rc.y2 + yGap };
				this._drawZmRect(this._zmInfo);
				this._zmInfo.move.x = ex;
				this._zmInfo.move.y = ey;
			}
		}
	}, {
		key: '_getZoomVideoPos',
		value: function _getZoomVideoPos(rc) {
			this._zmPos = {};
			var rx = this._videoWidth / this._zmSvgSize.width,
			    ry = this._videoHeight / this._zmSvgSize.height;
			if (rc.x1 > rc.x2) {
				this._zmPos.left = rc.x2 * rx;
				this._zmPos.width = (rc.x1 - rc.x2) * rx;
			} else {
				this._zmPos.left = rc.x1 * rx;
				this._zmPos.width = (rc.x2 - rc.x1) * rx;
			}
			if (rc.y1 > rc.y2) {
				this._zmPos.top = rc.y2 * ry;
				this._zmPos.height = (rc.y1 - rc.y2) * ry;
			} else {
				this._zmPos.top = rc.y1 * ry;
				this._zmPos.height = (rc.y2 - rc.y1) * ry;
			}
		}
	}, {
		key: '_drawZoomVideo',
		value: function _drawZoomVideo() {
			if (this._zmCanvas) {
				this._zmCanvas.getContext("2d").drawImage(this.vOpt.videoEle, this._zmPos.left, this._zmPos.top, this._zmPos.width, this._zmPos.height, 0, 0, this._zmCvsSize.width, this._zmCvsSize.height);
				this._zmTimer = window.requestAnimationFrame(this._drawZoomVideo.bind(this));
			}
		}
	}, {
		key: '_beginZoom',
		value: function _beginZoom() {
			this._getZoomVideoPos(this._zmInfo.rect);
			this._initZoomCanvas(); //初始化并设置timer
			this._zmStatus = ZMStatus.ZOOMING; //先设置，在setZoomSVGPosition使用
			var videopos = this.setZoomSVGPosition(this._zmCvsSize);
			//改变了video标签的大小，所有应该改变实时绘制和叠加框
			this.setRTSVGPosition(videopos);
			this.setVMCanvasPosition(videopos);

			this._zmSvgC.draggable = true;
			this._emitter.emit(_NPPlayerEvent2.default.OnZoomStatusChange, this.vOpt.index, ZMStatus.ZOOMING);
		}
	}, {
		key: '_onZmSvgMouseUp',
		value: function _onZmSvgMouseUp(event) {
			var e = event || window.event,
			    ex = e.offsetX,
			    ey = e.offsetY,
			    width = this._zmSvgSize.width,
			    height = this._zmSvgSize.height;
			if (ex < 0) {
				ex = 0;
			} else if (ex > width) {
				ex = width;
			}
			if (ey < 0) {
				ey = 0;
			} else if (ey > height) {
				ey = height;
			}
			if (this._bPtz && (this._ptzInfo.status == RCStatus.BEGIN || this._ptzInfo.status == RCStatus.DRAWING)) {
				if (width > 0 && height > 0) {
					var rc = this._ptzInfo.rect,
					    drct = -1,
					    x = 0,
					    w = 0,
					    y = 0,
					    h = 0;
					if (rc.y1 > rc.y2) {
						y = rc.y2 / height;
						h = (rc.y1 - rc.y2) / height;
					} else {
						y = rc.y1 / height;
						h = (rc.y2 - rc.y1) / height;
					}
					if (rc.x1 == rc.x2 && rc.y1 == rc.y2) {
						//跟随
						drct = 2;
						x = rc.x1 / width;
					} else if (rc.x1 > rc.x2) {
						//缩小
						drct = 1;
						x = rc.x2 / width;
						w = (rc.x1 - rc.x2) / width;
					} else {
						//放大
						drct = 0;
						x = rc.x1 / width;
						w = (rc.x2 - rc.x1) / width;
					}
					if (this.vOpt.enablePtzMotion) {
						this.ptzControl3d(drct, x, y, w, h);
					}
					this._emitter.emit(_NPPlayerEvent2.default.OnPTZControl3DEvent, this.vOpt.index, drct, x, y, w, h, this.vOpt.enablePtzMotion);
					this._zmSvgC.draggable = true;
				}
				this._ptzInfo.ele && this._zmSvg.removeChild(this._ptzInfo.ele);
				this._ptzInfo.ele = null;
				this._ptzInfo.status = RCStatus.INIT;
			} else if (this._bZoom && (this._zmInfo.status == RCStatus.BEGIN || this._zmInfo.status == RCStatus.DRAWING)) {
				if (Math.abs(ex - this._zmInfo.rect.x1) < 1 && Math.abs(ey - this._zmInfo.rect.y1) < 1) {
					this._zmInfo.status = RCStatus.INIT;
					return;
				}
				this._zmInfo.status = RCStatus.FINISH;
				this._zmInfo.rect.x2 = ex;
				this._zmInfo.rect.y2 = ey;
				this._drawZmRect(this._zmInfo, this._zmStyle);
				//矩形 进行放大
				this._beginZoom();
			} else if (this._bZoom && this._zmInfo.status == RCStatus.MOVE) {
				this._moveZmRect(ex, ey);
				this._getZoomVideoPos(this._zmInfo.rect);
				this._zmInfo.status = RCStatus.FINISH;
				this._zmSvgC.draggable = true;
			} else if (this._bZoom && (this._zmInfo.status == RCStatus.STARTADJUST || this._ptzInfo.status == RCStatus.ADJUST)) {
				this._adjustZmRect(ex, ey);
				this._getZoomVideoPos(this._zmInfo.rect);
				this._zmInfo.status = RCStatus.FINISH;
				this._zmSvgC.draggable = true;
			}
		}
	}, {
		key: '_getAdjustRectPoint',
		value: function _getAdjustRectPoint(style) {
			var rc = this._zmInfo.rect,
			    x1 = rc.x1,
			    y1 = rc.y1,
			    x2 = rc.x2,
			    y2 = rc.y2;

			this._zmInfo.rect.direction = style.direction;
			if (style.index === 0 || style.index === 3) {
				//x调小
				if (x2 > x1) {
					this._zmInfo.rect.x1 = x2;
					this._zmInfo.rect.x2 = x1;
				}
			} else if (style.index === 1 || style.index === 2) {
				//x调大的
				if (x2 < x1) {
					this._zmInfo.rect.x1 = x2;
					this._zmInfo.rect.x2 = x1;
				}
			}
			if (style.index === 0 || style.index === 1) {
				//y调小
				if (y2 > y1) {
					this._zmInfo.rect.y1 = y2;
					this._zmInfo.rect.y2 = y1;
				}
			} else if (style.index === 2 || style.index === 3) {
				//y调大的
				if (y2 < y1) {
					this._zmInfo.rect.y1 = y2;
					this._zmInfo.rect.y2 = y1;
				}
			}
		}
	}, {
		key: '_checkZoomStatus',
		value: function _checkZoomStatus(e, badjust) {
			if (this._bZoom && this._zmInfo.status == RCStatus.FINISH) {
				var style = { direction: "", mouse: "default", index: 0 },
				    pt = { x: e.offsetX, y: e.offsetY },
				    rc = this._zmInfo.rect,
				    ptArr = [{ x: rc.x1, y: rc.y1 }, { x: rc.x2, y: rc.y2 }];
				if (_tool.Toolkit.isPointInRect(pt, ptArr, style)) {
					if (badjust) {
						this._zmSvgC.draggable = false;
						if (style.mouse === "move") {
							this._zmInfo.status = RCStatus.MOVE;
						} else {
							this._zmInfo.status = RCStatus.STARTADJUST;
							this._getAdjustRectPoint(style);
						}

						this._zmInfo.move.x = e.offsetX;
						this._zmInfo.move.y = e.offsetY;
					}
				}

				this._zmSvg.style.cursor = style.mouse;
			}
		}

		// 绑定svg事件

	}, {
		key: '_bindZmSvgEvent',
		value: function _bindZmSvgEvent() {
			var _this = this;

			// 点击视频，取消编辑状态(隐藏所有的点)
			_eventUtil.EventUtil.addHandler(this._zmSvg, "click", function (event) {
				event.stopPropagation();
				_this._emitter.emit(_NPPlayerEvent2.default.OnWndClick, _this.vOpt.index);
			});

			_eventUtil.EventUtil.addHandler(this._zmSvg, 'mousedown', function (event) {
				// 开始绘制
				event.stopPropagation();
				_this._emitter.emit(_NPPlayerEvent2.default.OnMouseDown, _this.vOpt.index);

				var e = event || window.event;
				if (e.button !== 0) {
					// 不是鼠标左键
					return;
				}

				var ex = e.offsetX,
				    ey = e.offsetY;

				if (_this._bPtz) {
					if (_this._zmSvgC) {
						_this._zmSvgC.draggable = false;
					}
					_this._ptzInfo.status = RCStatus.BEGIN;
					_this._ptzInfo.ele = null;
					_this._ptzInfo.rect = { x1: ex, y1: ey, x2: ex, y2: ey };
				} else if (_this._bZoom) {
					if (_this._zmInfo.status == RCStatus.INIT) {
						//没有放大
						if (_this._zmSvgC) {
							_this._zmSvgC.draggable = false;
						}
						_this._zmInfo.status = RCStatus.BEGIN;
						_this._zmInfo.ele = null;
						_this._zmInfo.rect = { x1: ex, y1: ey, x2: ex, y2: ey };
						_this._zmStatus = ZMStatus.DRAWING;
						_this._emitter.emit(_NPPlayerEvent2.default.OnZoomStatusChange, _this.vOpt.index, ZMStatus.DRAWING);
					} else if (_this._zmInfo.status == RCStatus.FINISH) {
						//已存在放大
						_this._checkZoomStatus(e, true);
					}
				}
			});

			_eventUtil.EventUtil.addHandler(this._zmSvg, 'mousemove', function (event) {
				//console.log("_zmSvg mousemove");
				event.stopPropagation();
				var e = event || window.event,
				    ex = e.offsetX,
				    ey = e.offsetY;

				if (_this._bPtz && e.buttons == 1) {
					//左键
					if (_this._ptzInfo.status == RCStatus.BEGIN || _this._ptzInfo.status == RCStatus.DRAWING) {
						if (_this._ptzInfo.rect.x1 !== ex || _this._ptzInfo.rect.y1 !== ey) {
							_this._ptzInfo.status = RCStatus.DRAWING;
							_this._ptzInfo.rect.x2 = ex;
							_this._ptzInfo.rect.y2 = ey;
							_this._drawZmRect(_this._ptzInfo, _this._ptzStyle);
						}
					}
				} else if (_this._bZoom && e.buttons == 1) {
					// 左键
					if (_this._zmInfo.status == RCStatus.BEGIN || _this._zmInfo.status == RCStatus.DRAWING) {
						//没有放大
						_this._zmInfo.status = RCStatus.DRAWING;
						_this._zmInfo.rect.x2 = ex;
						_this._zmInfo.rect.y2 = ey;
						_this._drawZmRect(_this._zmInfo, _this._zmStyle);
					} else if (_this._zmInfo.status == RCStatus.STARTADJUST || _this._zmInfo.status == RCStatus.ADJUST) {
						//已存在放大
						_this._adjustZmRect(ex, ey);
						// 改变放大区域
						_this._getZoomVideoPos(_this._zmInfo.rect);
					} else if (_this._zmInfo.status === RCStatus.MOVE) {
						_this._moveZmRect(ex, ey);
						_this._getZoomVideoPos(_this._zmInfo.rect);
						// 改变放大区域
					}
				} else if (!_this._bPtz && _this._bZoom && e.buttons == 0) {
					//没有按键
					_this._checkZoomStatus(e, false);
				}
			});
			_eventUtil.EventUtil.addHandler(this._zmSvg, "mouseleave", function (event) {
				//console.log("mouseleave lastHoverShape = null");
				_this._onZmSvgMouseUp(event);
			});
			_eventUtil.EventUtil.addHandler(this._zmSvg, "mouseup", function (event) {
				_this._onZmSvgMouseUp(event);
			});
			_eventUtil.EventUtil.addHandler(this._zmSvg, "dblclick", function (event) {
				event.stopPropagation();
				if (_this._bZoom && _this.vOpt.enableStopZoomByDblclick && _this._zmStatus == ZMStatus.ZOOMING) {
					//正在放大中
					_this.stopZoom();
				} else {
					_this._emitter.emit(_NPPlayerEvent2.default.OnWndDClik, _this.vOpt.index);
				}
			});
		}
	}]);

	return ZoomDrawing;
}();

exports.default = ZoomDrawing;

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _controller = __webpack_require__(396);

var _exception = __webpack_require__(348);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* Controller has callbacks which have following prototypes:
 *     function onError(errorType: number, errorInfo: {code: number, msg: string}): void
 *     function onComplete(rangeFrom: number, rangeTo: number): void
 *     function onCommand(response: jsonobj): void
 */
var WebSocketController = function () {
    _createClass(WebSocketController, null, [{
        key: 'isSupported',
        value: function isSupported() {
            try {
                return typeof window.WebSocket !== 'undefined';
            } catch (e) {
                return false;
            }
        }
    }]);

    function WebSocketController(url) {
        _classCallCheck(this, WebSocketController);

        this.TAG = 'WebSocketController';
        this._type = 'websocket-controller';
        this._status = _controller.ControllerStatus.kIdle;

        // callbacks
        this._onError = null;
        this._onComplete = null;
        this._onCommand = null;

        this._ws = null;
        this._requestAbort = false;
        this._commandArr = []; //存放未打开前的命令
        this._id = 0;
        this._cmdCallback = {};
        this._url = url;
        //this.open(url);
    }

    _createClass(WebSocketController, [{
        key: 'destroy',
        value: function destroy() {
            if (this._ws) {
                this.abort();
            }
            this._status = _controller.ControllerStatus.kIdle;
            this._onError = null;
            this._onComplete = null;
            this._onCommand = null;
        }
    }, {
        key: 'isWorking',
        value: function isWorking() {
            return this._status === _controller.ControllerStatus.kConnecting || this._status === _controller.ControllerStatus.kBuffering;
        }
    }, {
        key: 'open',
        value: function open(url) {
            url = url || this._url;
            try {
                var ws = this._ws = new window.WebSocket(url); ///renly
                ws.binaryType = 'arraybuffer';
                ws.onopen = this._onWebSocketOpen.bind(this);
                ws.onclose = this._onWebSocketClose.bind(this);
                ws.onmessage = this._onWebSocketMessage.bind(this);
                ws.onerror = this._onWebSocketError.bind(this);
                this._status = _controller.ControllerStatus.kConnecting;
                return true;
            } catch (e) {
                this._clearResouse();
                this._status = _controller.ControllerStatus.kError;
                var info = { code: e.code, msg: e.message };
                if (this._onError) {
                    this._onError(_controller.ControllerErrors.EXCEPTION, info);
                } else {
                    throw new _exception.RuntimeException(info.msg);
                }
                return false;
            }
        }

        /*
         * obj = {
         *    'type':'command',
         *    'name':'SetSpeed',
         *    'param':param
         * };
         */

    }, {
        key: '_send',
        value: function _send(obj, callback) {
            var ws = this._ws;
            if (ws && ws.readyState === 1) {
                // OPEN
                var _obj = obj;
                if (typeof _obj === 'string') {
                    _obj = JSON.parse(_obj);
                }
                var id = ++this._id;
                _obj['_innerid'] = '_' + id;
                this._cmdCallback[_obj.name + _obj._innerid] = callback;
                ws.send(JSON.stringify(_obj));
            } else {
                if (typeof callback === 'function') {
                    callback({ error: -1, message: 'websocketError' });
                }
                this._clearResouse();
                this._status = _controller.ControllerStatus.kError;
                var info = { code: -1, msg: 'Unsupported WebSocket readyState while sending' };
                if (this._onError) {
                    this._onError(_controller.ControllerErrors.EXCEPTION, info);
                } else {
                    throw new _exception.RuntimeException(info.msg);
                }
            }
        }
    }, {
        key: 'abort',
        value: function abort() {
            var ws = this._ws;
            if (ws && (ws.readyState === 0 || ws.readyState === 1)) {
                // CONNECTING || OPEN
                this._requestAbort = true;
                ws.close();
            }

            this._ws = null;
            this._status = _controller.ControllerStatus.kComplete;
        }
    }, {
        key: 'listObject',
        value: function listObject(info, callback) {
            var obj = { type: 'command', name: 'ListObject', param: info };
            if (this._status === _controller.ControllerStatus.kConnecting) {
                this._commandArr.push({ cmd: obj, onresponse: callback });
            } else {
                this._send(obj, callback);
            }
            return true;
        }
    }, {
        key: 'queryRecord',
        value: function queryRecord(info, callback) {
            var obj = { type: 'command', name: 'QueryRecord', param: info };
            if (this._status === _controller.ControllerStatus.kConnecting) {
                this._commandArr.push({ cmd: obj, onresponse: callback });
            } else {
                this._send(obj, callback);
            }
            return true;
        }

        //获取通道信息
        //

    }, {
        key: 'startServerRecord',
        value: function startServerRecord(info, callback) {
            var obj = { type: 'command', name: 'StartServerRecord', param: info };
            if (this._status === _controller.ControllerStatus.kConnecting) {
                this._commandArr.push({ cmd: obj, onresponse: callback });
            } else {
                this._send(obj, callback);
            }
            return true;
        }
    }, {
        key: 'stopServerRecord',
        value: function stopServerRecord(info, callback) {
            var obj = { type: 'command', name: 'StopServerRecord', param: info };
            if (this._status === _controller.ControllerStatus.kConnecting) {
                this._commandArr.push({ cmd: obj, onresponse: callback });
            } else {
                this._send(obj, callback);
            }
            return true;
        }
    }, {
        key: 'startTalkback',
        value: function startTalkback(info, callback) {
            var obj = { type: 'command', name: 'StartTalkBack', param: info };
            if (this._status === _controller.ControllerStatus.kConnecting) {
                this._commandArr.push({ cmd: obj, onresponse: callback });
            } else {
                this._send(obj, callback);
            }
            return true;
        }
    }, {
        key: 'stopTalkback',
        value: function stopTalkback(info, callback) {
            var obj = { type: 'command', name: 'StopTalkBack', param: info };
            if (this._status === _controller.ControllerStatus.kConnecting) {
                this._commandArr.push({ cmd: obj, onresponse: callback });
            } else {
                this._send(obj, callback);
            }
            return true;
        }
    }, {
        key: 'getTalkbackMode',
        value: function getTalkbackMode(info, callback) {
            var obj = { type: 'command', name: 'GetTalkBackMode', param: info };
            if (this._status === _controller.ControllerStatus.kConnecting) {
                this._commandArr.push({ cmd: obj, onresponse: callback });
            } else {
                this._send(obj, callback);
            }
            return true;
        }
    }, {
        key: '_onWebSocketOpen',
        value: function _onWebSocketOpen(e) {
            this._status = _controller.ControllerStatus.kBuffering;
            var obj = this._commandArr.pop();
            while (obj) {
                this._send(obj.cmd, obj.onresponse);
                obj = this._commandArr.pop();
            }
        }
    }, {
        key: '_onWebSocketClose',
        value: function _onWebSocketClose(e) {
            this._clearResouse();
            if (this._requestAbort === true) {
                this._requestAbort = false;
                return;
            }

            this._status = _controller.ControllerStatus.kComplete;

            if (this._onComplete) {
                this._onComplete();
            }
        }
    }, {
        key: '_onWebSocketMessage',
        value: function _onWebSocketMessage(e) {
            if (typeof e.data === 'string') {
                //sendcommand的回复
                this._onCommandResponse(e.data);
                //} else if (e.data instanceof Blob) { 
            } else {
                    // this._clearResouse();
                    // this._status = ControllerStatus.kError;
                    // let info = {code: -1, msg: 'Unsupported WebSocket message type: ' + e.data.constructor.name};

                    // if (this._onError) {
                    //     this._onError(ControllerErrors.EXCEPTION, info);
                    // } else {
                    //     throw new RuntimeException(info.msg);
                    // }
                }
        }
    }, {
        key: '_onCommandResponse',
        value: function _onCommandResponse(response) {
            var resobj = JSON.parse(response);
            var _id = resobj.name + resobj._innerid;
            var callback = this._cmdCallback[_id];
            if (typeof callback === 'function') {
                callback(resobj.param, resobj.rederved);
            }
            //console.log("_onCommandResponse"+ _id);
            delete this._cmdCallback[_id];
            if (this._onCommand) {
                this._onCommand(resobj);
            }
        }
    }, {
        key: '_onWebSocketError',
        value: function _onWebSocketError(e) {
            this._clearResouse();
            this._status = _controller.ControllerStatus.kError;
            var info = {
                code: e.code,
                msg: e.message
            };

            if (this._onError) {
                this._onError(_controller.ControllerErrors.EXCEPTION, info);
            } else {
                throw new _exception.RuntimeException(info.msg);
            }
        }
    }, {
        key: '_clearResouse',
        value: function _clearResouse() {
            var obj = this._commandArr.pop();
            while (obj) {
                if (typeof obj.onresponse === 'function') {
                    obj.onresponse({ error: -1, message: 'websocketError' });
                }
                obj = this._commandArr.pop();
            }
            for (var _id in this._cmdCallback) {
                //console.log("_clearResouse" + _id);
                var callback = this._cmdCallback[_id];
                if (typeof callback === 'function') {
                    callback({ error: -1, message: 'websocketError' });
                }
            }
            this._cmdCallback = {};
        }
    }, {
        key: 'type',
        get: function get() {
            return this._type;
        }
    }, {
        key: 'status',
        get: function get() {
            return this._status;
        }
    }, {
        key: 'onCommand',
        get: function get() {
            return this._onCommand;
        },
        set: function set(callback) {
            this._onCommand = callback;
        }
    }, {
        key: 'onError',
        get: function get() {
            return this._onError;
        },
        set: function set(callback) {
            this._onError = callback;
        }
    }, {
        key: 'onComplete',
        get: function get() {
            return this._onComplete;
        },
        set: function set(callback) {
            this._onComplete = callback;
        }
    }]);

    return WebSocketController;
}();

exports.default = WebSocketController;

/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ControllerErrors = exports.ControllerStatus = undefined;

var _exception = __webpack_require__(348);

var ControllerStatus = exports.ControllerStatus = {
    kIdle: 0,
    kConnecting: 1,
    kBuffering: 2,
    kError: 3,
    kComplete: 4
};

var ControllerErrors = exports.ControllerErrors = {
    OK: 'OK',
    EXCEPTION: 'Exception',
    HTTP_STATUS_CODE_INVALID: 'HttpStatusCodeInvalid',
    CONNECTING_TIMEOUT: 'ConnectingTimeout'
};

/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = __webpack_require__(342);

var _logger2 = _interopRequireDefault(_logger);

var _controller = __webpack_require__(396);

var _exception = __webpack_require__(348);

var _tool = __webpack_require__(329);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * 创建HTTP对象
 * @requires http-controller.js
 * @class HttpController
 * @constructor
 */
var HttpController = function () {
    function HttpController() {
        _classCallCheck(this, HttpController);

        this.TAG = 'HttpController';
        this._type = 'http-controller';
        this._uuid = _tool.Toolkit.getUuid();
        this._status = _controller.ControllerStatus.kIdle;
        this._downloadMap = {};
        this._downloadChecker = null;
        this._url = 'http://127.0.0.1:9120/api/';
        this._downloadDir = 'D:/RecordDownloads/';
        this._talkbackInfo = null;
        this.isDirectoryWriteable(this._downloadDir, function (res) {
            //console.log(res);
            if (res.error != 0) {
                var _this = this;
                this._getDownloadDir(function (res) {
                    if (res.error == 0) {
                        _this._downloadDir = res.dir;
                        _this._downloadDir = _this._downloadDir.replace(/\\/g, "/");
                        if (_this._downloadDir.charAt(_this._downloadDir.length - 1) !== "/") {
                            _this._downloadDir += "/";
                        }
                    }
                });
            }
        }.bind(this));
    }
    /**
     * 销毁对象，释放所有资源
     * @method destroy 
     */


    _createClass(HttpController, [{
        key: 'destroy',
        value: function destroy() {
            this._status = _controller.ControllerStatus.kIdle;
            if (this._downloadChecker) {
                window.clearInterval(this._downloadChecker);
                this._downloadChecker = null;
            }
            for (var _id in this._downloadMap) {
                this.stopDownload(_id, true);
            }
            if (this._talkbackInfo) {
                this.stopTalkback(this._talkbackInfo, null);
            }
        }

        /**
         * 开始下载
         * @method startDownload 
         * @param {object} info info 下载通道信息
         * @param {string} info.device 设备类型 'pvg67' 'pvgplus'  'pfs'  'http' 
         * {"device":"pvg67","ip":"192.168.60.174","port":2100,"user":"admin","password":"admin","ticket":"","ticketlen":0,"channel":"av\/ytfj\/2","begintime":"2018-07-24 13:39:02.000","endtime":"2018-07-24 13:48:22.741","vod":0,"filename":"av_ytfj_2.mbf","splitmode":"size","splitvalue":-1,"textosd":"","downloadtype":0,"converttype":0}
         * {"device":"pvgplus","ip":"192.168.60.174","port":2100,"user":"admin","password":"admin","ticket":"","ticketlen":0,"channel":"av\/ytfj\/2","begintime":"2018-07-24 13:39:02.000","endtime":"2018-07-24 13:48:22.741","vod":0,"filename":"av_ytfj_2.mbf","splitmode":"size","splitvalue":-1,"textosd":"","storageaddr":"","downloadtype":0,"converttype":0}
         * {"device":"http","src":"http://download.microsoft.com/downloadn90DayTrialCHSX1435983.iso","filename":"downloadn90DayTrialCHSX1435983.iso"}
         * {"device":"pfsdown","src"{"ip" : "192.168.60.55","port" : 9000,"username" : "admin","password" : "admin","path" : "/video/8C.mbf","storagemode" : 0},"filename" : "8C.mbf","converttype" : 0(在转码为mp4文件时有效，0：如果源文件为标准H264码流，则直接转为MP4，如果源文件不是标准H264码流，则在回调函数中返回错误码-21246。此时如果仍然要转为MP4文件则将此项改为1，重新调用startDownload接口下载)}
         * {"device":"pfsup","dest":{"ip" : "192.168.60.55","password" :"admin","path":"/video","port" : 9000,"storagemode" : 0(0 普通模式 1桶模式仅对图片有效),"username" : "admin"} ,"src" : "E:\\media\\01230d809e.mbf","filetype" :2(//1 图片 2 视频 3 其他格式), "streamtrun":true(是否流化，仅对视频有效)}
          * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-成功，负数-错误码
         * @param {string}  reslut.id  返回下载唯一标识
         * @param {number}  reslut.status //0初始状态 1为开始  2为下载中  3为暂停 4为完成
         * @param {number}  reslut.process 下载进度 0-10000
         * @param {number}  reslut.bitsrate 下载速度 3482582  正确表示方法为： (bitsrate/ 1000) Kb/s, 这样的好处是为了保留小数点后3位
         * @param {string}  reslut.totalsize 文件总大小 3.70GB
         * @param {string}  reslut.currentsize  已下载大小 3.21MB
         * @param {string}  reslut.filename  pfsdown、http 已下载的文件名 D:/RecordDownloads/t01f58f.jpg
         * @param {string}  reslut.filenameList  pvg67、pvgplus {filename:'D:/RecordDownloads/t0.mbf'}
         * @param {string}  reslut.filepath  pfsup "{"ip":"192.168.60.55","port":9000,"username":"admin","password":"admin","path":"/video/A3CE0C9F-BF1.jpg"}"
         */

    }, {
        key: 'startDownload',
        value: function startDownload(info, callback) {
            var _this = this;
            var _device = info.device;
            var _info = {};
            var api = '';
            if (_device === 'pvg67') {
                _info = _tool.Toolkit.deepMerge(_info, info);
                _info.filename = this._downloadDir + _info.filename;
                api = 'StartDownloadRecord';
            } else if (_device === 'pvgplus') {
                //对外统一为pvgplus
                _info = _tool.Toolkit.deepMerge(_info, info);
                _info.device = 'pvg+'; //对内为pvg+
                _info.filename = this._downloadDir + _info.filename;
                api = 'StartDownloadRecord';
            } else if (_device === 'pfsup') {
                //{"info":"{"dest":{"ip" : "192.168.60.55","password" :"admin","path":"/video","port" : 9000,"storagemode" : 0,"username" : "admin"},"filetype" :2,"src" : "E:\\media\\01230d809e.mbf"}"}
                _info = _tool.Toolkit.deepMerge(_info, info);
                _info = { 'info': JSON.stringify(_info) };
                api = 'StartUploadPFSFile';
            } else if (_device === 'pfsdown') {
                //{"info":"{"converttype" : 0,"downloadpath" : "D:\\RecordDownloads\\","filename" : "1EF4C924-B29B-45DE-A3C0-31ED4777CA8C.mbf","src" : {"ip" : "192.168.60.55","password" : "admin","path" : "/video/1EF4C924-B29B-45DE-A3C0-31ED4777CA8C.mbf","port" : 9000,"storagemode" : 0,"username" : "admin" }}"}
                _info = _tool.Toolkit.deepMerge(_info, info);
                _info.downloadpath = this._downloadDir;
                _info = { 'info': JSON.stringify(_info) };
                api = 'StartDwonloadPFSFile';
            } else if (_device === 'http') {
                _info = _tool.Toolkit.deepMerge(_info, info);
                _info.downloadpath = this._downloadDir;
                api = 'StartDownloadHttpFile';
            } else {
                callback && callback({ error: -1, msg: 'cannot find device:' + _device });
                return false;
            }
            this._ajaxjsonp({
                url: this._url + api, // 请求地址
                data: _info,
                success: function success(res) {
                    // 请求成功的回调函数
                    //console.log(res);
                    if (res && res[api]) {
                        if (res[api].error === 0) {
                            //成功
                            var _id = res[api].id;
                            _this._downloadMap[_id] = { funcall: callback, device: _device, pause: false, bstoped: false, process: 0, filenameList: [], finishobj: {} };
                            if (!_this._downloadChecker) {
                                _this._downloadChecker = window.setInterval(_this._getLoadingStatus.bind(_this), 1000);
                            }
                        }
                        callback && callback(res[api]);
                    } else {
                        callback && callback({ error: -1, msg: 'response error' });
                    }
                },
                error: function error(_error) {
                    callback && callback(_error);
                } // 请求失败的回调函数
            });
            return true;
        }

        /**
         * 停止下载
         * @method stopDownload 
         * @param {string} strid startDownload 回调中返回下载唯一标识
         * @param {boolean} bdel 是否删除文件 false 不删除 true删除       
         * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-成功，负数-错误码
         * @param {string}  reslut.id  下载唯一标识
         */

    }, {
        key: 'stopDownload',
        value: function stopDownload(strid, bdel, callback) {
            return this._stopDownload(strid, bdel, callback, true);
        }
    }, {
        key: '_stopDownload',
        value: function _stopDownload(strid, bdel, callback, bclear) {
            var _this = this;
            if (typeof this._downloadMap[strid] === 'undefined') {
                callback && callback({ error: -1, msg: 'cannot find taskid:' + strid });
                return false;
            }
            if (this._downloadMap[strid].bstoped === true) {
                delete this._downloadMap[strid];
                callback && callback({ error: 0, msg: '' });
                return true;
            }
            var _device = this._downloadMap[strid].device;
            var api = '';
            if (_device === 'pvg67') {
                api = 'StopDownloadRecord';
            } else if (_device === 'pvgplus') {
                api = 'StopDownloadRecord';
            } else if (_device === 'pfsup') {
                api = 'StopUploadPFSFile';
            } else if (_device === 'pfsdown') {
                api = 'StopDownloadPFSFile';
            } else if (_device === 'http') {
                api = 'StopDownloadHttpFile';
            } else {
                callback && callback({ error: -1, msg: 'cannot find device:' + _device });
                return false;
            }
            this._ajaxjsonp({
                url: this._url + api, // 请求地址
                data: { id: strid, del: bdel ? 1 : 0 },
                success: function success(res) {
                    // 请求成功的回调函数
                    //console.log(res);
                    if (res && res[api]) {
                        //id error message
                        if (!res[api].id) {
                            delete _this._downloadMap[strid];
                            callback && callback(res[api]);
                            return true;
                        }
                        //if (res[api].error === 0) { //成功
                        var _id = res[api].id;
                        if (bclear) {
                            delete _this._downloadMap[_id];
                        } else {
                            if (res[api].error === 0) {
                                _this._downloadMap[_id].bstoped = true;
                            }
                        }
                        callback && callback(res[api]);
                    } else {
                        callback && callback({ error: -1, msg: 'response error' });
                    }
                },
                error: function error(_error2) {
                    callback && callback(_error2);
                } // 请求失败的回调函数
            });
            return true;
        }
        /**
         * 暂停/恢复下载
         * @method pauseDownload
         * @param {string} strid startDownload 回调中返回下载唯一标识
         * @param {boolean} bpause  false恢复 true暂停     
         * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-成功，负数-错误码
         * @param {string}  reslut.id  下载唯一标识
         */

    }, {
        key: 'pauseDownload',
        value: function pauseDownload(strid, bpause, callback) {
            var _this = this;
            if (typeof this._downloadMap[strid] === 'undefined') {
                callback && callback({ error: -1, msg: 'cannot find taskid:' + strid });
                return false;
            }
            var _device = this._downloadMap[strid].device;
            var api = '';
            if (_device === 'pvg67') {
                api = 'PauseDownloadRecord';
            } else if (_device === 'pvgplus') {
                api = 'PauseDownloadRecord';
            } else if (_device === 'pfsup') {
                //callback && callback({error: -1, msg: 'not support'});
                //return false;
                api = 'PauseUploadPFSFile';
            } else if (_device === 'pfsdown') {
                api = 'PauseDownloadPFSFile';
            } else if (_device === 'http') {
                api = 'PauseDownloadHttpFile';
            } else {
                callback && callback({ error: -1, msg: 'cannot find device:' + _device });
                return false;
            }

            if (this._downloadMap[strid].bstoped === true) {
                if (bpause) {
                    callback && callback({ error: -1, msg: 'task finished taskid:' + strid });
                } else {
                    callback && callback({ error: 0, msg: '' });
                    this._downloadMap[strid].funcall && this._downloadMap[strid].funcall(this._downloadMap[strid].finishobj);
                }
                return true;
            }

            this._ajaxjsonp({
                url: this._url + api, // 请求地址
                data: { id: strid, param: bpause ? 1 : 0 },
                success: function success(res) {
                    // 请求成功的回调函数
                    //console.log(res);
                    if (res && res[api]) {
                        //id error message
                        if (res[api].error === 0) {
                            //成功
                            var _id = res[api].id;
                            _this._downloadMap[_id].pause = bpause;
                        }
                        callback && callback(res[api]);
                    } else {
                        callback && callback({ error: -1, msg: 'response error' });
                    }
                },
                error: function error(_error3) {
                    callback && callback(_error3);
                } // 请求失败的回调函数
            });
            return true;
        }

        /**
         * 删除PFS上的文件
         * @method deletePfsFile
         * @param {object} info    
         * @param {string} info.ip pfs服务器ip  
         * @param {number} info.port pfs服务器端口  
         * @param {string} info.username pfs服务器用户名  
         * @param {string} info.password pfs服务器密码  
         * @param {string} info.path  pfs相对路径名
         * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-成功，负数-错误码
         */

    }, {
        key: 'deletePFSFile',
        value: function deletePFSFile(info, callback) {
            //{ip:'192.168.60.156', password:'admin', path:'/video/asdddv.mbf', port:9000, username:'admin'}
            this._sendHttpCmd('DeletePFSFile', { 'info': JSON.stringify(info) }, callback);
            return true;
        }

        /**
         * 获取默认下载目录
         * @method getDownloadDir 
         * @return {string}  'D:/RecordDownloads'
         */

    }, {
        key: 'getDownloadDir',
        value: function getDownloadDir() {
            return this._downloadDir;
        }

        /**
         * 设置默认下载目录
         * @method setDownloadDir
         * @param {string} info  文件夹全路径
         * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-成功，负数-错误码
         */

    }, {
        key: 'setDownloadDir',
        value: function setDownloadDir(dir, callback) {
            this.isDirectoryWriteable(dir, function (res) {
                if (res.error == 0) {
                    this._downloadDir = dir;
                    this._downloadDir = this._downloadDir.replace(/\\/g, "/");
                    if (this._downloadDir.charAt(this._downloadDir.length - 1) !== "/") {
                        this._downloadDir += "/";
                    }
                }
                callback && callback(res);
            }.bind(this));
            return true;
        }

        /**
         * 查询是否有文件夹的写权限
         * @method isDirectoryWriteable
         * @param {string} info  文件夹全路径
         * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-可写，负数-不可写，错误码
         */

    }, {
        key: 'isDirectoryWriteable',
        value: function isDirectoryWriteable(info, callback) {
            //'D://123'
            this._sendHttpCmd('IsDirectoryWriteable', { dir: info }, callback);
            return true;
        }

        // {'imageinfo':{'base64':base64,'type':3 },
        //  'imageedit':[{'createimage':'{"singlearrowline",{(0.7,0.4),(0.3,0.1),(0.5,0.2)}, "255" }'},{'createimage':'{"rectangle",{(0.1,0.1),(0.1,0.8),(0.8,0.1),(0.8,0.8)},"8421376" ,矩形}' }]
        // }

    }, {
        key: 'imageProcess',
        value: function imageProcess(info, callback) {
            return true;
        }

        /**
        * 是否需要升级
        * @method isUpgradeVersion
        * @param {string} info pva-plugins.json 文件内容
        * @param {function} callback 结果回调 function(reslut){}
        * @param {object}  reslut
        * @param {number}  reslut.error 0-成功，负数-错误码
        * @param {number}  reslut.bUpgrade 0:不需要升级  1：需要升级
        */

    }, {
        key: 'isUpgradeVersion',
        value: function isUpgradeVersion(info, callback) {
            this._sendHttpCmd('IsUpgradeVersion', {
                version: typeof info === 'string' ? info : JSON.stringify(info)
            }, callback);
            return true;
        }

        /**
        * 获取OCX版本信息
        * @method getOcxVersionInfo     
        * @param {function} callback 结果回调 function(reslut){}
        * @param {object}  reslut
        * @param {number}  reslut.error 0-成功，负数-错误码
        * @param {string}  reslut.CPUInfo CPU信息"Intel(R) Core(TM) i3-3220 CPU @ 3.30GHz"
        * @param {string}  reslut.MemoryInfo 内存信息 "7.97 GB (1.87 GB available)"
        * @param {string}  reslut.OSInfo  操作系统 "Microsoft Windows 7 Professional 64bit"
        * @param {string}  reslut.graphcardinfo 显卡信息 "AMD Radeon HD 7000 series"
        * @param {string}  reslut.version 安装包版本 "2.6.9"
        * @param {string}  reslut.curpath 安装路径"C:\Program Files (x86)\NetPosa\NP Video Player Plugins"
        */

    }, {
        key: 'getOcxVersionInfo',
        value: function getOcxVersionInfo(callback) {
            this._sendHttpCmd('VersionInfo', {}, callback, 'http://127.0.0.1:9120/');
            return true;
        }

        /** 
         * 开启语音对讲功能
         * @method startTalkback
         * @param {object} info  
         * @param {string} info.device 'pvg67' 'pvgplus'
         * @param {string} info.ip  pvg服务器ip
         * @param {number} info.port  pvg服务器端口   
         * @param {string} info.user  pvg服务器用户名
         * @param {string} info.password  pvg服务器密码
         * @param {string} info.channel  语音对讲通道av
         * @param {number} info.mode  1 - 监听；2 - 喊话；3 - 对讲
         * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-成功，负数-错误码
         */

    }, {
        key: 'startTalkback',
        value: function startTalkback(info, callback) {
            //{'device':'pvg67','ip':'192.168.60.174','port':2100,'mode':3,'user':'admin','password':'admin','channel':'av/ytfj/hik'}
            this._talkbackInfo = info;
            this._sendHttpCmd('StartTalkback', info, callback);
            return true;
        }

        /** 
         * 停止语音对讲功能
         * @method stopTalkback
         * @param {object} info  
         * @param {string} info.device 'pvg67' 'pvgplus'
         * @param {string} info.ip  pvg服务器ip
         * @param {number} info.port  pvg服务器端口   
         * @param {string} info.user  pvg服务器用户名
         * @param {string} info.password  pvg服务器密码
         * @param {string} info.channel  语音对讲通道av
         * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-成功，负数-错误码
         */

    }, {
        key: 'stopTalkback',
        value: function stopTalkback(info, callback) {
            this._sendHttpCmd('StopTalkback', info, callback);
            return true;
        }

        //打开或保存文件的对话框OpenSaveFileDlg
        //打开文件的对话框 OpenLocalSelectFolderDlg


        /**
             * 删除本地文件
             * @method removeFile
             * @param {string} info  文件完整路径'D:/Recods/av_2.mbf'
             * @param {function} callback 结果回调 function(reslut){}
             * @param {object}  reslut
             * @param {number}  reslut.error 0-成功，负数-错误码
             */
        //remove

    }, {
        key: 'removeFile',
        value: function removeFile(info, callback) {
            //'D:/RecordDownloads/av_ytfj_2 - 副本.mbf'
            this._sendHttpCmd('RemoveFile', { path: info }, callback);
            return true;
        }

        /**
         * 获取注册表信息
         * @method getRegistryInfo
         * @param {string} info  注册表地址 '计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\NetPosa\\NP PVA PLUGINS\\PVGSDK'
         * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-成功，负数-错误码
         * @param {string}  reslut.value 键值
         */
        //remove

    }, {
        key: 'getRegistryInfo',
        value: function getRegistryInfo(info, callback) {
            //'计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\NetPosa\\NP PVA PLUGINS\\PVGSDK'
            this._sendHttpCmd('GetRegistryInfo', { key: info }, callback);
            return true;
        }
        /**
         * 获取MAC地址
         * @method getMacString
         * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-成功，负数-错误码
         * @param {array}  reslut.value mac地址信息
         * [{ip: "192.168.66.44", mac: "A4-1F-72-72-37-ED"}]
         */
        //remove

    }, {
        key: 'getMacString',
        value: function getMacString(callback) {
            this._sendHttpCmd('GetMacString', {}, callback);
            return true;
        }
        /**
         * 启动进程
         * @method runProcess
         * @param {object} info  
         * @param {string} info.path  进程全路径，如果含中文、空格等需要加引号
         * @param {string} info.param 启动参数  如果含中文、空格等需要加引号
         * @param {number} info.showtype  显示方式   0：隐藏；1：正常；2：最小化；3：最大化
         * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-成功，负数-错误码
         */
        //remove

    }, {
        key: 'runProcess',
        value: function runProcess(info, callback) {
            //{path:' "" ', param:' "" ',showtype:1}
            //0：隐藏；1：正常；2：最小化；3：最大化
            this._sendHttpCmd('RunProcess', info, callback);
            return true;
        }

        /**
         * 打开文件所在目录
         * @method openFileDirectory
         * @param {string} info 文件完整路径名
         * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-成功，负数-错误码
         */
        //remove

    }, {
        key: 'openFileDirectory',
        value: function openFileDirectory(info, callback) {
            //'D://123.mbf'
            this._sendHttpCmd('OpenContainsFileDirectory', { filepath: info }, callback);
            return true;
        }
        /**
         * 获取系统CUP内存（CPU未实现）
         * @method getCpuMemory
         * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-成功，负数-错误码
         * @param {number}  reslut.mem 总内存8357972
         * @param {number}  reslut.vmem 可用内存1765748
         * @param {number}  reslut.cpu  已使用CPU百分比
         */
        //remove

    }, {
        key: 'getCpuMemory',
        value: function getCpuMemory(callback) {
            this._sendHttpCmd('GetCpuMemory', {}, callback);
            return true;
        }

        /**
         * 获取扩展屏信息
         * @method getExpandScreenInfo
         * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-成功，负数-错误码
         * @param {string}  reslut.info  数组字符串 "[{"index":1,"hmonitor":65537,"isPrimary":1,"angle":0.00,"curRect":{"left":0,"top":0,"right":1440,"bottom":900}}]"
         */
        //remove

    }, {
        key: 'getExpandScreenInfo',
        value: function getExpandScreenInfo(callback) {
            this._sendHttpCmd('GetExpandScreenInfo', {}, callback);
            return true;
        }

        /** 
         * 移动进程窗口
         * @method moveProcessWindow
         * @param {object} info  
         * @param {string} info.process 进程名 'chrome.exe'
         * @param {string} info.title 窗口标题 'demo'
         * @param {number} info.showtype 0代表仅移动位置，宽度和高度无效， 1代表移动到指定点所在屏幕并最大化显示，
         2代表移动到指定位置并设置为指定大小
         * @param {number} info.left 单位px
         * @param {number} info.top  单位px
         * @param {number} info.width  单位px
         * @param {number} info.height  单位px
         * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-成功，负数-错误码
         */
        //remove

    }, {
        key: 'moveProcessWindow',
        value: function moveProcessWindow(info, callback) {
            //{'process':'', 'title':'', 'showtype':0, 'left':0, 'top':0, 'width':-1, 'height':-1}
            // 0代表仅移动位置，宽度和高度无效，
            // 1代表移动到指定点所在屏幕并最大化显示，
            // 2代表移动到指定位置并设置为指定大小
            this._sendHttpCmd('MoveProcessWindow', info, callback);
            return true;
        }

        /** 
         * 保存本地图片，输入base64 （内容太长有问题）
         * @method savePicture
         * @param {object} info  
         * @param {string} info.picture base64图片数据
         * @param {string} info.type  base64数据的图片格式 png jpeg gif bmp
         * @param {string} info.filename 本地文件格式可与type不同
         * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-成功，负数-错误码
         */
        //remove

    }, {
        key: 'savePicture',
        value: function savePicture(info, callback) {
            //1表示bmp格式；2表示gif格式；3表示jpg格式；4表示png格式 
            //{'picture':'ase64,  //base64后的图片数据流 
            // 'type':3, //base64的图片格式 
            // 'filename':'12345.png'  //本地文件格式可与type不同
            // } 
            var name = info.filename || '';
            var _suffix = '';
            if (name.length >= 4) {
                _suffix = name.substr(name.length - 4, 4).toLowerCase();
            } else if (name.length === 0) {
                callback && callback({ error: -1, msg: 'filename error' });
                return false;
            }

            name = name.substr(0, name.length - 4);
            var _srctype = 0;
            var _destype = 0;
            if (_suffix === '.bmp') {
                _destype = 1;
            } else if (_suffix === 'gif') {
                _destype = 2;
            } else if (_suffix === 'jpg') {
                _destype = 3;
            } else if (_suffix === 'png') {
                _destype = 4;
            } else {
                name = info.filename;
                if (info.type === 'bmp') {
                    _srctype = 1;
                    _suffix = '.bmp';
                } else if (info.type === 'gif') {
                    _srctype = 2;
                    _suffix = '.gif';
                } else if (info.type === 'jpeg') {
                    _srctype = 3;
                    _suffix = '.jpg';
                } else if (info.type === 'png') {
                    _srctype = 4;
                    _suffix = '.png';
                } else {
                    callback && callback({ error: -1, msg: 'type error' });
                    return false;
                }
                _destype = _srctype;
            }
            if (name.length === 0) {
                callback && callback({ error: -1, msg: 'filename error' });
                return false;
            }

            this._sendHttpCmd('SetOptionEx', { opt: 'savepicture', dir: this._downloadDir, filename: name, suffix: _suffix, picture: info.picture, type: _srctype, destype: _destype }, callback);
            return true;
        }

        /** 
         * 剪切版功能，输入base64字符串 ctrl+V 输出解码后的字符串
         * @method copyToClipboard
         * @param {string} info  base64字符串
         * @param {function} callback 结果回调 function(reslut){}
         * @param {object}  reslut
         * @param {number}  reslut.error 0-成功，负数-错误码
         */
        //remove

    }, {
        key: 'copyToClipboard',
        value: function copyToClipboard(info, callback) {
            this._sendHttpCmd('CopyToClipboard', { data: info }, callback, 'http://127.0.0.1:9120/');
            return true;
        }
    }, {
        key: '_getDownloadDir',
        value: function _getDownloadDir(callback) {
            this._sendHttpCmd('GetDefDownloadDir', {}, callback);
        }
    }, {
        key: '_sendHttpCmd',
        value: function _sendHttpCmd(api, info, callback, url) {
            var _this = this;
            var _url = url || this._url;
            this._ajaxjsonp({
                url: _url + api, // 请求地址
                data: info,
                success: function success(res) {
                    // 请求成功的回调函数
                    //console.log(res);
                    if (res && res[api]) {
                        callback && callback(res[api]);
                    } else {
                        callback && callback({ error: -1, msg: 'response error' });
                    }
                },
                error: function error(_error4) {
                    callback && callback(_error4);
                } // 请求失败的回调函数
            });
        }
    }, {
        key: '_getLoadingStatus',
        value: function _getLoadingStatus() {
            this._getDownloadStatus('pvg67', this._finishcallback.bind(this));
        }
    }, {
        key: '_finishcallback',
        value: function _finishcallback(device) {
            var _next = '';
            if (device === 'pvg67') {
                _next = 'pvgplus';
            } else if (device === 'pvgplus') {
                _next = 'pfsup';
            } else if (device === 'pfsup') {
                _next = 'pfsdown';
            } else if (device === 'pfsdown') {
                _next = 'http';
            } else if (device === 'http') {
                return;
            } else {
                return;
            }

            this._getDownloadStatus(_next, this._finishcallback.bind(this));
        }
    }, {
        key: '_getDownloadStatus',
        value: function _getDownloadStatus(device, finishcallback) {
            //console.log('_getDownloadStatus:', device);
            var _this = this;
            var api = 'GetDownloadStatus';
            var _device = device || 'pvg67';
            var deviceType = '';
            if (_device === 'pvg67') {
                deviceType = 'pvg67_download'; //方便查找进程
            } else if (_device === 'pvgplus') {
                deviceType = 'pvg+_download';
            } else if (_device === 'pfsup') {
                deviceType = 'pfs_updownload';
                api = 'GetUploadPFSFileStatus';
            } else if (_device === 'pfsdown') {
                deviceType = 'pfs_updownload';
                api = 'GetDownloadPFSFileStatus';
            } else if (_device === 'http') {
                deviceType = 'http_download';
                api = 'GetDownloadHttpFileStatus';
            } else {
                finishcallback && finishcallback(_device);
                return;
            }

            var downloadids = [];
            for (var _id in this._downloadMap) {
                if (this._downloadMap[_id].device === _device && !this._downloadMap[_id].bstoped) {
                    downloadids.push(_id);
                }
            }
            if (downloadids.length == 0) {
                finishcallback && finishcallback(_device);
                return;
            }

            var info = { id: JSON.stringify({ device: deviceType, ids: JSON.stringify(downloadids) }) };
            this._ajaxjsonp({
                url: this._url + api, // 请求地址
                data: info,
                success: function success(res) {
                    // 请求成功的回调函数
                    if (res && res[api]) {
                        var arr = res[api];
                        if (toString.apply(arr) != '[object Array]') {
                            //去掉无效的本地记录
                            for (var i = 0; i < downloadids.length; i++) {
                                var _id2 = downloadids[i];
                                if (_this._downloadMap[_id2] && _this._downloadMap[_id2].funcall) {
                                    var funcall = _this._downloadMap[_id2].funcall;
                                    _this._stopDownload(_id2, true, null, false);
                                    funcall({ id: _id2, error: arr.error, msg: '' });
                                }

                                //delete _this._downloadMap[_id];
                            }
                            finishcallback && finishcallback(_device);
                            return;
                        }
                        //currentsize  error filecount filenameList
                        //id msg process status totalsize
                        for (var _i = 0; _i < arr.length; _i++) {
                            arr[_i].filepath && (arr[_i].filepath = arr[_i].filepath.replace(/\\/g, "")) && (arr[_i].filepath = arr[_i].filepath.replace(/\/\//g, "/"));
                            var _id3 = arr[_i].id;
                            if (typeof _this._downloadMap[_id3] === 'undefined') {
                                continue;
                            }
                            _this._downloadMap[_id3].process = arr[_i].process;

                            var _funcall = null;

                            if (arr[_i].error != 0 && _this._downloadMap[_id3].process === 10000) {
                                //已经完成 未及时删除记录
                            } else if (_this._downloadMap[_id3].funcall) {
                                if (_device === 'pvg67' || _device === 'pvgplus') {
                                    if (arr[_i].filenameList) {
                                        var _filearr = JSON.parse(arr[_i].filenameList);
                                        if (_filearr && _filearr.length > 0) {
                                            for (var j = 0; j < _filearr.length; j++) {
                                                var _name = _filearr[j].filename;
                                                if (_name.length > 0) {
                                                    _this._downloadMap[_id3].filenameList.push(_name);
                                                }
                                            }
                                        }
                                    }
                                    if (_this._downloadMap[_id3].filenameList.length > 0) {
                                        arr[_i].filenameList = _this._downloadMap[_id3].filenameList;
                                    }
                                }
                                if (_this._downloadMap[_id3].pause && arr[_i].error === 0) {
                                    //不回调
                                    if (arr[_i].process === 10000) {
                                        _this._downloadMap[_id3].finishobj = _tool.Toolkit.deepMerge({}, arr[_i]);
                                    }
                                } else {
                                    //PVG PVG+    filenameList 为单个文件需累计 bitsrate:36651600,currentsize:"91.19MB",error:0,filecount:0,filenameList:"",id:"{650B695F-7469-4DE0-B4DE-9A559240D0B9}",msg:"",process:457,status:2,totalsize:"-1";
                                    //http   pfsdown 无效调整 bitsrate:3200769,currentsize:"3.10MB",error:0,filename:"",id:"{8C852EF2-3540-4D27-ADB9-5E65CC3B95B2}",msg:"",process:8,status:2,totalsize:"3.70GB";
                                    // pfsup bitsrate:8388608,currentsize:"197.00MB",error:0,filepath:"",id:"{A4D8B5C3-6041-40B4-B295-04474623B10F}",msg:"",process:1353,status:2,totalsize:"728.00MB"

                                    //audioFrames:0,beginTime:0, createTime:1535353409, errorCode:0,filepath:"{"ip":"192.168.60.55","port":9000,"username":"admin","password":"admin","path":"\/video\/1F81CA7B-7CAD-481B-AEEE-0FA0783C8C5E.mbf"}",firstPTS:3307100995,format:875967048,frameRate:25.108398,frames:1384,size:313112,status:0,times:55121,updateTime:1535353409,videoFrames:1384,width:-1,height:-1
                                    arr[_i]['device'] = _device;
                                    _funcall = _this._downloadMap[_id3].funcall;
                                }
                            }

                            if (arr[_i].process === 10000) {
                                _this._stopDownload(_id3, false, null, false);
                            } else if (arr[_i].error != 0) {
                                _this._stopDownload(_id3, true, null, false);
                            }

                            _funcall && _funcall(arr[_i]); //最后回调
                        }
                    }
                    console.log(res);
                    finishcallback && finishcallback(_device);
                },
                error: function error(res) {
                    //console.log(res);
                    // if (callback) {
                    //     callback(res);
                    // }
                    finishcallback && finishcallback(_device);
                } // 请求失败的回调函数
            });
        }
    }, {
        key: '_ajaxjsonp',
        value: function _ajaxjsonp(params) {
            //console.log("_ajaxjsonp");
            params = params || {};
            params.data = params.data || {};
            jsonp(params, this._uuid);

            // jsonp请求   
            function jsonp(params, _uuid) {
                //创建script标签并加入到页面中   
                var timeout = 10000; //超时检测时间
                var _random = random();
                var callbackName = 'jsonpcb' + _random;
                while (typeof window[callbackName] === 'functionsa') {
                    console.log('00 rename', callbackName);
                    _random = random();
                    callbackName = 'jsonpcb' + _random;
                }
                var head = document.getElementsByTagName('head')[0];
                // 设置传递给后台的回调参数名 
                if (_uuid) {
                    params.data['_h5vp_uuid'] = _uuid;
                }
                var _jsonp = 'jsonpcallback';
                params.data[_jsonp] = callbackName;
                var data = formatParams(params.data, _random);
                var script = document.createElement('script');
                head.appendChild(script);

                //创建jsonp回调函数  
                window[callbackName] = function (json) {
                    //responseContainer = arguments; 
                    head.removeChild(script);
                    clearTimeout(script.timer);
                    window[callbackName] = null;
                    //console.log('22 window[callbackName]', callbackName, window[callbackName]); 
                    params.success && params.success(json);
                };
                //发送请求   
                if (params.url.indexOf('?') === -1) {
                    script.src = params.url + '?' + data;
                } else {
                    script.src = params.url + '&' + data;
                }
                //为了得知此次请求是否成功，设置超时处理   

                script.timer = setTimeout(function () {
                    window[callbackName] = null;
                    head.removeChild(script);
                    params.error && params.error({
                        error: -1,
                        msg: 'timeout'
                    });
                    //console.log('33 window[callbackName]', callbackName, window[callbackName]);   
                }, timeout);
            };

            //格式化参数   
            function formatParams(data, random) {
                var arr = [];
                for (var name in data) {
                    arr.push(encodeURIComponent(name) + '=' + encodeURIComponent(data[name]));
                };

                // 添加一个随机数，防止缓存   
                arr.push('_=' + random);
                return arr.join('&');
            }

            // 获取随机数   
            function random() {
                return new Date().getTime() + '' + Math.floor(Math.random() * 10000 + 500);
                //return Math.floor(Math.random() * 10000 + 500);   
            }
        }
    }]);

    return HttpController;
}();

exports.default = HttpController;

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _controller = __webpack_require__(396);

var _browser = __webpack_require__(351);

var _browser2 = _interopRequireDefault(_browser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ExtendClass = function () {
    function ExtendClass(url) {
        _classCallCheck(this, ExtendClass);

        this.initializer(url);
    }

    _createClass(ExtendClass, [{
        key: 'initializer',
        value: function initializer(url) {
            this._exStatus = _controller.ControllerStatus.kIdle;
            this._exWS = null;
            this._exCommandArr = []; //存放未打开前的命令
            this._exId = 0;
            this._exCmdCallback = {};
            this._exUrl = url;
            //console.log("ExtendClass: ", url);
            this._processname = '';
            if (_browser2.default.chrome) {
                this._processname = 'chrome.exe';
            } else if (_browser2.default.msedge) {
                this._processname = 'MicroftEdgeCP.exe';
            } else if (_browser2.default.msie) {
                this._processname = 'iexplore.exe';
            }
        }
    }, {
        key: 'destroy',
        value: function destroy() {
            if (this._exWS) {
                this._exAbort();
                this._exWS = null;
            }
            this._exStatus = _controller.ControllerStatus.kIdle;
        }
    }, {
        key: '_exOpen',
        value: function _exOpen(url) {
            if (this._exWS) {
                return true;
            }
            url = url || this._exUrl;
            try {
                var ws = this._exWS = new window.WebSocket(url); ///renly
                ws.binaryType = 'arraybuffer';
                ws.onopen = this._onExwsOpen.bind(this);
                ws.onclose = this._onExwsClose.bind(this);
                ws.onmessage = this._onExwsMessage.bind(this);
                ws.onerror = this._onExwsError.bind(this);
                this._exStatus = _controller.ControllerStatus.kConnecting;
                return true;
            } catch (e) {
                this._exClearResouse();
                this._exStatus = _controller.ControllerStatus.kError;
                return false;
            }
        }

        /*
         * obj = {
         *    'type':'command',
         *    'name':'SetSpeed',
         *    'param':param
         * };
         */

    }, {
        key: '_exSend',
        value: function _exSend(obj, callback, reopen) {
            if (reopen && !this._exWS) {
                this._exOpen();
            }
            if (this._exWS && this._exStatus === _controller.ControllerStatus.kConnecting) {
                //创建未打开
                this._exCommandArr.push({ cmd: obj, onresponse: callback });
            } else if (this._exWS && this._exStatus == _controller.ControllerStatus.kBuffering) {
                // 已打开
                var _obj = obj;
                if (typeof _obj === 'string') {
                    _obj = JSON.parse(_obj);
                }
                var id = ++this._exId;
                _obj['_innerid'] = '_' + id;
                this._exCmdCallback[_obj.name + _obj._innerid] = callback;
                this._exWS.send(JSON.stringify(_obj));
            } else {
                //异常出错等
                if (typeof callback === 'function') {
                    callback({ error: -1, message: 'websocketError' });
                }
                this._exClearResouse();
                this._exStatus = _controller.ControllerStatus.kError;
            }
        }
    }, {
        key: '_exAbort',
        value: function _exAbort() {
            var ws = this._exWS;
            if (ws && (ws.readyState === 0 || ws.readyState === 1)) {
                // CONNECTING || OPEN
                ws.close();
            }
            this._exClearResouse();
            this._exStatus = _controller.ControllerStatus.kComplete;
        }
    }, {
        key: '_onExwsOpen',
        value: function _onExwsOpen(e) {
            this._exStatus = _controller.ControllerStatus.kBuffering;
            var obj = this._exCommandArr.pop();
            while (obj) {
                this._exSend(obj.cmd, obj.onresponse, false);
                obj = this._exCommandArr.pop();
            }
        }
    }, {
        key: '_onExwsClose',
        value: function _onExwsClose(e) {
            this._exClearResouse();
            this._exStatus = _controller.ControllerStatus.kComplete;
        }
    }, {
        key: '_onExwsMessage',
        value: function _onExwsMessage(e) {
            if (typeof e.data === 'string') {
                //sendcommand的回复
                this._onCommandResponseEx(e.data);
            }
        }
    }, {
        key: '_onCommandResponseEx',
        value: function _onCommandResponseEx(response) {
            var resobj = JSON.parse(response);
            var _id = resobj.name + resobj._innerid;
            var callback = this._exCmdCallback[_id];
            if (typeof callback === 'function') {
                callback(resobj.param, resobj.rederved);
            }
            delete this._exCmdCallback[_id];
        }
    }, {
        key: '_onExwsError',
        value: function _onExwsError(e) {
            this._exClearResouse();
            this._exStatus = _controller.ControllerStatus.kError;
        }
    }, {
        key: '_exClearResouse',
        value: function _exClearResouse() {
            var obj = this._exCommandArr.pop();
            while (obj) {
                if (typeof obj.onresponse === 'function') {
                    obj.onresponse({ error: -1, message: 'websocketError' });
                }
                obj = this._exCommandArr.pop();
            }
            for (var _id in this._exCmdCallback) {
                //console.log("_clearResouse" + _id);
                var callback = this._exCmdCallback[_id];
                if (typeof callback === 'function') {
                    callback({ error: -1, message: 'websocketError' });
                }
            }
            this._exCmdCallback = {};
            this._exWS = null;
        }

        /**
         * 获取本地服务版本
         * @method H5Player.setupversion 
         * @param {function} callback 结果回调 function(reslut){} 
         * reslut={setupver:'1.0.0', isexist: true},isexist表示本地服务存在且已启动
         * reslut={error:-1},error表示本地服务不存在或者未启动
          <table class="params table table-striped">
                <tr>
                    <th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >有此项时，0-成功，负数-表示本地服务不存在或者未启动</td>
                </tr>
                <tr >
                    <td >setupver</td>
                    <td >string</td>
                    <td >本地服务版本号'1.0.0'</td>
                </tr>
                <tr >
                    <td >isexist</td>
                    <td >bool</td>
                    <td >true 表示本地服务存在且已启动</td>
                </tr>
            </table>
         */

    }, {
        key: 'setupversion',
        value: function setupversion(callback) {
            var obj = { type: 'command', name: 'GetVersion', param: {} };
            this._exSend(obj, callback, true);
            return true;
        }

        /**
            * 获取MAC地址
            * @method H5Player.getMacString
            * @param {function} callback 结果回调 function(reslut){}
            	<table class="params table table-striped">
               	<tr>
                 		<th >reslut子项</th>
                       <th>类型</th>
                       <th>描述</th>
                   </tr>
                   <tr >
                       <td >error</td>
                       <td >number</td>
                       <td >0-成功，负数-错误码</td>
                   </tr>
                   <tr >
                       <td >value</td>
                       <td >string</td>
                       <td >mac地址信息 [{ip: "192.168.66.44", mac: "A4-1F-72-72-37-ED"}]</td>
                   </tr>
               </table>
            */

    }, {
        key: 'getMacString',
        value: function getMacString(callback) {
            var obj = { type: 'command', name: 'GetMacString', param: {} };
            this._exSend(obj, callback, true);
            return true;
        }

        /**
            * 获取系统CUP内存
            * @method H5Player.getCpuMemory
            * @param {function} callback 结果回调 function(reslut){}
            	<table class="params table table-striped">
               	<tr>
                 		<th >reslut子项</th>
                       <th>类型</th>
                       <th>描述</th>
                   </tr>
                   <tr >
                       <td >error</td>
                       <td >number</td>
                       <td >0-成功，负数-错误码</td>
                   </tr>
                   <tr >
                       <td >mem</td>
                       <td >number</td>
                       <td >总内存 8357972</td>
                   </tr>
                   <tr >
                       <td >vmem</td>
                       <td >number</td>
                       <td >可用内存1765748</td>
                   </tr>
                   <tr >
                       <td >cpu</td>
                       <td >number</td>
                       <td >已使用CPU百分比</td>
                   </tr>
               </table>
            */

    }, {
        key: 'getCpuMemory',
        value: function getCpuMemory(callback) {
            var obj = { type: 'command', name: 'GetCpuMemory', param: {} };
            this._exSend(obj, callback, true);
            return true;
        }

        /**
         * 获取扩展屏信息
         * @method H5Player.getExpandScreenInfo
         * @param {function} callback 结果回调 function(reslut){}
         	<table class="params table table-striped">
            	<tr>
              		<th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >0-成功，负数-错误码</td>
                </tr>
                <tr >
                    <td >info</td>
                    <td >string</td>
                    <td >数组字符串， 含是否知否，角度，屏幕分辩率等"[{"index":1,"hmonitor":65537,"isPrimary":1,"angle":0.00,"curRect":{"left":0,"top":0,"right":1440,"bottom":900}}]"</td>
                </tr>
            </table>
         */

    }, {
        key: 'getExpandScreenInfo',
        value: function getExpandScreenInfo(callback) {
            var obj = { type: 'command', name: 'GetExpandScreenInfo', param: {} };
            this._exSend(obj, callback, true);
            return true;
        }

        /**
            * 获取注册表信息
            * @method H5Player.getRegistryInfo
            * @param {string} key  注册表地址 '计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\NetPosa\\NP PVA PLUGINS\\PVGSDK'
            * @param {function} callback 结果回调 function(reslut){}
            <table class="params table table-striped">
               	<tr>
                 		<th >reslut子项</th>
                       <th>类型</th>
                       <th>描述</th>
                   </tr>
                   <tr >
                       <td >error</td>
                       <td >number</td>
                       <td >0-成功，负数-错误码</td>
                   </tr>
                   <tr >
                       <td >key</td>
                       <td >string</td>
                       <td >key值</td>
                   </tr>
                   <tr >
                       <td >value</td>
                       <td >string</td>
                       <td >键值</td>
                   </tr>
               </table>
            */

    }, {
        key: 'getRegistryInfo',
        value: function getRegistryInfo(key, callback) {
            var obj = { type: 'command', name: 'GetRegistryInfo', param: { key: key } };
            this._exSend(obj, callback, true);
            return true;
        }

        /**
         * 启动进程
         * @method H5Player.runProcess
         * @param {object} info  
         * @param {string} info.path  进程全路径，如果含中文、空格等需要加引号
         * @param {string} info.param 启动参数  如果含中文、空格等需要加引号
         * @param {number} info.showtype  显示方式   0：隐藏；1：正常；2：最小化；3：最大化
         * @param {function} callback 结果回调 function(reslut){}
         <table class="params table table-striped">
            	<tr>
              		<th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >0-成功，负数-错误码</td>
                </tr>
                <tr >
                    <td >path</td>
                    <td >string</td>
                    <td >0-进程全路径名</td>
                </tr>
            </table>
         */

    }, {
        key: 'runProcess',
        value: function runProcess(info, callback) {
            var obj = { type: 'command', name: 'RunProcess', param: info };
            this._exSend(obj, callback, true);
            return true;
        }

        /**
         * 打开文件所在目录
         * @method H5Player.openFileDirectory
         * @param {string} filepath 文件完整路径名
         * @param {function} callback 结果回调 function(reslut){}
        	<table class="params table table-striped">
            	<tr>
              		<th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >0-成功，负数-错误码</td>
                </tr>
                <tr >
                    <td >filepath</td>
                    <td >string</td>
                    <td >文件全路径</td>
                </tr>
            </table>
         */

    }, {
        key: 'openFileDirectory',
        value: function openFileDirectory(filepath, callback) {
            var obj = { type: 'command', name: 'OpenFileDirectory', param: { filepath: filepath } };
            this._exSend(obj, callback, true);
            return true;
        }

        /** 
         * 移动进程窗口
         * @method H5Player.moveProcessWindow
         * @param {object} info  
         * @param {string} info.process 进程名 'chrome.exe'
         * @param {string} info.title 窗口标题 'demo'
         * @param {number} info.showtype 0代表仅移动位置，宽度和高度无效， 1代表移动到指定点所在屏幕并最大化显示，
         2代表移动到指定位置并设置为指定大小
         * @param {number} info.left 单位px
         * @param {number} info.top  单位px
         * @param {number} info.width  单位px
         * @param {number} info.height  单位px
         * @param {function} callback 结果回调 function(reslut){}
         	<table class="params table table-striped">
            	<tr>
              		<th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >0-成功，负数-错误码</td>
                </tr>
            </table>
         */

    }, {
        key: 'moveProcessWindow',
        value: function moveProcessWindow(info, callback) {
            var obj = { type: 'command', name: 'MoveProcessWindow', param: info };
            this._exSend(obj, callback, true);
            return true;
        }

        /** 
         * 保存本地图片，输入base64图片信息，可与capturePicture组合使用
         * @method H5Player.savePicture
         * @param {object} info  
         * @param {string} info.picture base64图片数据
         * @param {string} info.type  base64数据的图片格式 png jpeg gif bmp
         * @param {string} info.filename  本地文件格式可与type不同，D:/savePicture/pic.jpg
         * @param {function} callback 结果回调 function(reslut){}
         	<table class="params table table-striped">
            	<tr>
              		<th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >0-成功，负数-错误码</td>
                </tr>
                <tr >
                    <td >path</td>
                    <td >string</td>
                    <td >本地文件全路径名</td>
                </tr>
            </table>
         */

    }, {
        key: 'savePicture',
        value: function savePicture(info, callback) {
            var obj = { type: 'command', name: 'SavePicture', param: info };
            this._exSend(obj, callback, true);
            return true;
        }

        /** 
            * 剪切版功能，输入base64字符串 ctrl+V 输出解码后的字符串
            * @method H5Player.copyToClipboard
            * @param {string} context  base64字符串
            * @param {function} callback 结果回调 function(reslut){}
            	<table class="params table table-striped">
               	<tr>
                 		<th >reslut子项</th>
                       <th>类型</th>
                       <th>描述</th>
                   </tr>
                   <tr >
                       <td >error</td>
                       <td >number</td>
                       <td >0-成功，负数-错误码</td>
                   </tr>
               </table>
            */

    }, {
        key: 'copyToClipboard',
        value: function copyToClipboard(context, callback) {
            var obj = { type: 'command', name: 'CopyToClipboard', param: { context: context } };
            this._exSend(obj, callback, true);
            return true;
        }

        /** 
         * 文件是否存在
         * @method H5Player.isFileExist
         * @param {string} filepath  文件全路径名
         * @param {function} callback 结果回调 function(reslut){}
         	<table class="params table table-striped">
            	<tr>
              		<th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >0-成功，负数-错误码</td>
                </tr>
                <tr >
                    <td >isexist</td>
                    <td >boolean</td>
                    <td >true存在，false不存在</td>
                </tr>
                <tr >
                    <td >filepath</td>
                    <td >string</td>
                    <td >文件全路径</td>
                </tr>
            </table>
         */

    }, {
        key: 'isFileExist',
        value: function isFileExist(filepath, callback) {
            var obj = { type: 'command', name: 'IsFileExist', param: { filepath: filepath } };
            this._exSend(obj, callback, true);
            return true;
        }

        /**
         * 删除本地文件
         * @method H5Player.removeFile
         * @param {string} filepath  文件完整路径'D:/Recods/av_2.mbf'
         * @param {function} callback 结果回调 function(reslut){}
            <table class="params table table-striped">
                <tr>
                    <th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >0-成功，负数-错误码</td>
                </tr>
            </table>
         */

    }, {
        key: 'removeFile',
        value: function removeFile(filepath, callback) {
            var obj = { type: 'command', name: 'RemoveFile', param: { filepath: filepath } };
            this._exSend(obj, callback, true);
            return true;
        }

        /**
         * 打开选择/保存文件对话框
         * @method H5Player.openSaveFileDlg
         * @param {object} info  
         * @param {number} info.option 1为打开文件对话框； 0为保存文件对话框
         * @param {string} info.defdir 默认文件夹
         * @param {string} info.defext 缺省的扩展名如.mbf，保存文件时使用
         * @param {string} info.filename 缺省显示在文件名组合框的编辑框的文件名，保存文件时使用
         * @param {number} info.flags 对话框风格 0x1206，一般为OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT, 即隐藏只读选项和覆盖已有文件前提示。
         * <br></br>常用只如下，可多选
         * <br></br>OFN_OVERWRITEPROMPT  = 0x00000002 如果选择的文件已经存在，使用另存为对话框产生一个消息框        
         * <br></br>OFN_HIDEREADONLY     = 0x00000004 隐藏只读复选框
         * <br></br>OFN_ALLOWMULTISELECT = 0x00000200 指定文件名列表框允许多选 ,打开文件时使用
         * <br></br>OFN_FILEMUSTEXIST    = 0x00001000仅可以在文件名字段中输入已存在的文件的名字 ,打开文件时使用
         * @param {string} info.filter  文件筛选类型 'All Files (\*.\*)|\*.\*||'，指明可供选择的文件类型和相应的扩展名。
         * <br></br>参数格式如：' Data Files (\*.xlc;\*.xls)|\*.xlc; \*.xls|All Files (\*.\*)|\*.\*||';
         * <br></br>文件类型说明和扩展名间用 | 分隔，同种类型文件的扩展名间可以用 ; 分割，每种文件类型间用 | 分隔，末尾用 || 指明
          * @param {string} info.title 对话框标题，可用默认
         * @param {function} callback 结果回调 function(reslut){}
            <table class="params table table-striped">
                <tr>
                    <th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >0-成功，负数-错误码</td>
                </tr>
                <tr >
                    <td >files</td>
                    <td >string</td>
                    <td >JSON数组字符串，"[{"filename":"D:\RecordDownloads\BF41DFA1-BDB0-42C7-8DF9-04118F7BA221.MBF"}]"</td>
                </tr>
            </table>
         */

    }, {
        key: 'openSaveFileDlg',
        value: function openSaveFileDlg(info, callback) {
            var paramobj = info;
            Object.assign(paramobj, { processname: this._processname, titlename: document.title });
            var obj = { type: 'command', name: 'OpenSaveFileDlg', param: paramobj };
            this._exSend(obj, callback, true);
            return true;
        }

        /**
         * 打开选择文件夹对话框
         * @method H5Player.openLocalSelectFolderDlg
         * @param {string} defpath  默认路径'D:/Recods'
         * @param {function} callback 结果回调 function(reslut){}
            <table class="params table table-striped">
                <tr>
                    <th >reslut子项</th>
                    <th>类型</th>
                    <th>描述</th>
                </tr>
                <tr >
                    <td >error</td>
                    <td >number</td>
                    <td >0-成功，负数-错误码</td>
                </tr>
                <tr >
                    <td >path</td>
                    <td >string</td>
                    <td >选择的文件夹全路径</td>
                </tr>
            </table>
         */

    }, {
        key: 'openLocalSelectFolderDlg',
        value: function openLocalSelectFolderDlg(defpath, callback) {
            var obj = { type: 'command', name: 'OpenLocalSelectFolderDlg',
                param: { defpath: defpath, processname: this._processname, titlename: document.title } };
            this._exSend(obj, callback, true);
            return true;
        }
    }]);

    return ExtendClass;
}();

exports.default = ExtendClass;

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ioController = __webpack_require__(365);

var _ioController2 = _interopRequireDefault(_ioController);

var _config = __webpack_require__(337);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Features = function () {
    function Features() {
        _classCallCheck(this, Features);
    }

    _createClass(Features, null, [{
        key: 'supportMSEH264Playback',
        value: function supportMSEH264Playback() {
            return window.MediaSource && window.MediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"');
        }
    }, {
        key: 'supportNetworkStreamIO',
        value: function supportNetworkStreamIO() {
            return _ioController2.default.isSupported();
        }
    }, {
        key: 'supportNetworkStreamIOFlv',
        value: function supportNetworkStreamIOFlv() {
            var ioctl = new _ioController2.default({}, (0, _config.createDefaultConfig)());
            var loaderType = ioctl.loaderType;
            ioctl.destroy();
            return loaderType == 'fetch-stream-loader' || loaderType == 'xhr-moz-chunked-loader';
        }
    }, {
        key: 'getNetworkLoaderTypeName',
        value: function getNetworkLoaderTypeName() {
            var ioctl = new _ioController2.default({}, (0, _config.createDefaultConfig)());
            var loaderType = ioctl.loaderType;
            ioctl.destroy();
            return loaderType;
        }
    }, {
        key: 'supportNativeMediaPlayback',
        value: function supportNativeMediaPlayback(mimeType) {
            if (Features.videoElement == undefined) {
                Features.videoElement = window.document.createElement('video');
            }
            var canPlay = Features.videoElement.canPlayType(mimeType);
            return canPlay === 'probably' || canPlay == 'maybe';
        }
    }, {
        key: 'getFeatureList',
        value: function getFeatureList() {
            var features = {
                mseH264Playback: false,
                mseLiveH264Playback: false,
                mseLiveFlvPlayback: false,
                networkStreamIO: false,
                networkLoaderName: '',
                nativeMP4H264Playback: false,
                nativeWebmVP8Playback: false,
                nativeWebmVP9Playback: false
            };

            features.mseH264Playback = Features.supportMSEH264Playback() ? true : false;
            features.networkStreamIO = Features.supportNetworkStreamIO() ? true : false;
            features.networkLoaderName = Features.getNetworkLoaderTypeName();
            features.mseLiveFlvPlayback = features.mseFlvPlayback && features.supportNetworkStreamIOFlv();
            features.mseLiveH264Playback = features.mseH264Playback && features.networkStreamIO;
            features.nativeMP4H264Playback = Features.supportNativeMediaPlayback('video/mp4; codecs="avc1.42001E, mp4a.40.2"');
            features.nativeWebmVP8Playback = Features.supportNativeMediaPlayback('video/webm; codecs="vp8.0, vorbis"');
            features.nativeWebmVP9Playback = Features.supportNativeMediaPlayback('video/webm; codecs="vp9"');

            return features;
        }
    }]);

    return Features;
}();

exports.default = Features;

/***/ }),
/* 400 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })
/******/ ]);