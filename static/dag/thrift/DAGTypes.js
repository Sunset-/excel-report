//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var IotInfo = module.exports.IotInfo = function(args) {
  this.dataType = null;
  this.recordId = null;
  this.proxyIp = null;
  this.proxyPort = null;
  this.uploadTime = null;
  this.rawData = null;
  this.resJson = null;
  this.res1Json = null;
  this.res2Json = null;
  if (args) {
    if (args.dataType !== undefined && args.dataType !== null) {
      this.dataType = args.dataType;
    }
    if (args.recordId !== undefined && args.recordId !== null) {
      this.recordId = args.recordId;
    }
    if (args.proxyIp !== undefined && args.proxyIp !== null) {
      this.proxyIp = args.proxyIp;
    }
    if (args.proxyPort !== undefined && args.proxyPort !== null) {
      this.proxyPort = args.proxyPort;
    }
    if (args.uploadTime !== undefined && args.uploadTime !== null) {
      this.uploadTime = args.uploadTime;
    }
    if (args.rawData !== undefined && args.rawData !== null) {
      this.rawData = args.rawData;
    }
    if (args.resJson !== undefined && args.resJson !== null) {
      this.resJson = args.resJson;
    }
    if (args.res1Json !== undefined && args.res1Json !== null) {
      this.res1Json = args.res1Json;
    }
    if (args.res2Json !== undefined && args.res2Json !== null) {
      this.res2Json = args.res2Json;
    }
  }
};
IotInfo.prototype = {};
IotInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dataType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.recordId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.proxyIp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.proxyPort = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.uploadTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.rawData = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.resJson = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.res1Json = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.res2Json = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IotInfo.prototype.write = function(output) {
  output.writeStructBegin('IotInfo');
  if (this.dataType !== null && this.dataType !== undefined) {
    output.writeFieldBegin('dataType', Thrift.Type.STRING, 1);
    output.writeString(this.dataType);
    output.writeFieldEnd();
  }
  if (this.recordId !== null && this.recordId !== undefined) {
    output.writeFieldBegin('recordId', Thrift.Type.STRING, 2);
    output.writeString(this.recordId);
    output.writeFieldEnd();
  }
  if (this.proxyIp !== null && this.proxyIp !== undefined) {
    output.writeFieldBegin('proxyIp', Thrift.Type.STRING, 3);
    output.writeString(this.proxyIp);
    output.writeFieldEnd();
  }
  if (this.proxyPort !== null && this.proxyPort !== undefined) {
    output.writeFieldBegin('proxyPort', Thrift.Type.I32, 4);
    output.writeI32(this.proxyPort);
    output.writeFieldEnd();
  }
  if (this.uploadTime !== null && this.uploadTime !== undefined) {
    output.writeFieldBegin('uploadTime', Thrift.Type.I64, 5);
    output.writeI64(this.uploadTime);
    output.writeFieldEnd();
  }
  if (this.rawData !== null && this.rawData !== undefined) {
    output.writeFieldBegin('rawData', Thrift.Type.STRING, 6);
    output.writeBinary(this.rawData);
    output.writeFieldEnd();
  }
  if (this.resJson !== null && this.resJson !== undefined) {
    output.writeFieldBegin('resJson', Thrift.Type.STRING, 7);
    output.writeString(this.resJson);
    output.writeFieldEnd();
  }
  if (this.res1Json !== null && this.res1Json !== undefined) {
    output.writeFieldBegin('res1Json', Thrift.Type.STRING, 8);
    output.writeString(this.res1Json);
    output.writeFieldEnd();
  }
  if (this.res2Json !== null && this.res2Json !== undefined) {
    output.writeFieldBegin('res2Json', Thrift.Type.STRING, 9);
    output.writeString(this.res2Json);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

